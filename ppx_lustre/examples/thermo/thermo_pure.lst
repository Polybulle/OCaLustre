gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001         processor 18f4620
               00002 
               00003         include "p18f4620.inc"
               00001         LIST
               00002 
               00003 ;==========================================================================
               00004 ;  MPASM PIC18F4620 processor include
               00005 ; 
               00006 ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
               00007 ;==========================================================================
               00008 
               01331         LIST
               00004 
300006 FFC5    00005         config  XINST = ON
               00006 
0000 00007 CAML_STOP_AND_COPY_GC
  00000003     00008 STACK_SIZE  EQU   0x3
  00000006     00009 HEAP_SIZE   EQU   0x6
               00010 
0000 00011 #define caml_useprim_caml_int32_custom
0000 00012 #define caml_useprim_caml_int64_custom
0000 00013 #define caml_useprim_caml_string_get
0000 00014 #define caml_useprim_caml_neq_float
0000 00015 #define caml_useprim_caml_mul_float
0000 00016 #define caml_useprim_caml_eq_float
0000 00017 #define caml_useprim_caml_gt_float
0000 00018 #define caml_useprim_caml_abs_float
0000 00019 #define caml_useprim_caml_ge_float
0000 00020 #define caml_useprim_caml_add_float
0000 00021 #define caml_useprim_caml_div_float
0000 00022 #define caml_useprim_caml_int_of_float
0000 00023 #define caml_useprim_caml_create_string
0000 00024 #define caml_useprim_caml_string_set
0000 00025 #define caml_useprim_caml_float_of_int
0000 00026 #define caml_useprim_caml_sub_float
0000 00027 #define caml_useprim_caml_lt_float
0000 00028 #define caml_useprim_caml_neg_float
0000 00029 #define caml_useprim_caml_ml_string_length
0000 00030 #define caml_useprim_caml_blit_string
0000 00031 #define caml_useprim_caml_fill_string
0000 00032 #define caml_useprim_caml_is_printable
0000 00033 #define caml_useprim_caml_lessthan
0000 00034 #define caml_useprim_caml_int32_to_int
0000 00035 #define caml_useprim_caml_int32_mod
0000 00036 #define caml_useprim_caml_int32_div
0000 00037 #define caml_useprim_caml_greaterequal
0000 00038 #define caml_useprim_caml_equal
0000 00039 #define caml_useprim_caml_int32_neg
0000 00040 #define caml_useprim_caml_int32_sub
0000 00041 #define caml_useprim_caml_int64_to_int
0000 00042 #define caml_useprim_caml_int64_mod
0000 00043 #define caml_useprim_caml_int64_div
0000 00044 #define caml_useprim_caml_int64_neg
0000 00045 #define caml_useprim_caml_int64_sub
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000 00046 #define caml_useprim_caml_array_get
0000 00047 #define caml_useprim_caml_make_vect
0000 00048 #define caml_useprim_caml_array_set
0000 00049 #define caml_useprim_caml_int_of_string
0000 00050 #define caml_useprim_caml_notequal
0000 00051 #define caml_useprim_caml_int64_and
0000 00052 #define caml_useprim_caml_int64_shift_right_unsigned
0000 00053 #define caml_useprim_caml_int64_of_int
0000 00054 #define caml_useprim_caml_int64_add
0000 00055 #define caml_useprim_caml_int32_and
0000 00056 #define caml_useprim_caml_int32_shift_right_unsigned
0000 00057 #define caml_useprim_caml_int32_of_int
0000 00058 #define caml_useprim_caml_int32_add
0000 00059 #define caml_useprim_caml_eeprom_write
0000 00060 #define caml_useprim_caml_eeprom_read
0000 00061 #define caml_useprim_caml_eeprom_get_size
0000 00062 #define caml_useprim_caml_pic_clear_bit
0000 00063 #define caml_useprim_caml_pic_write_reg
0000 00064 #define caml_useprim_caml_pic_set_bit
0000 00065 #define caml_useprim_caml_pic_read_reg
0000 00066 #define caml_useprim_caml_pic_tris_of_port
0000 00067 #define caml_useprim_caml_pic_test_bit
0000 00068 #define caml_useprim_caml_sleep_millis
               00069 
               00070         include "/usr/local/lib/ocapic/interp.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
               00012 ;;;;;;;|-------------------------------------|;;;;;;;
               00013 ;;;;;;;|                                     |;;;;;;;
               00014 ;;;;;;;|      CONVENTIONS, LIMITATIONS       |;;;;;;;
               00015 ;;;;;;;|                                     |;;;;;;;
               00016 ;;;;;;;|-------------------------------------|;;;;;;;
               00017 
               00018 ;;; * stack:    (@-) topL : topH : ... : bottomL : bottomH      (@+)
               00019 ;;; * heap:     (@-) block1 : block2 : ...                      (@+)
               00020 ;;; * block:    (@-) tag : size : b0L : b0H : b1L : b1H : ...   (@+)
               00021 ;;; * bytecode: (@-) op0 : arg0.0 : arg0.1 : op1 : arg1.0 : ... (@+)
               00022 ;;; * stack pointer:      FSR2
               00023 ;;; * heap pointer:       FSR1
               00024 ;;; * free usage pointer: FSR0
               00025 ;;; * the garbage collector overwrite FSR0
               00026 ;;; * external primitives: 128 maximum
               00027 ;;; * external argument number: 255 maximum
               00028 ;;; * pointer LSB = 0 ; integer LSB = 1
               00029 ;;; * collisions between heap address and program address forbidden
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00030 ;;; * 'stack size' mod 256 = 0
               00031 ;;; * 'heap size' mod 256 = 0
               00032 ;;; * CCALL semantics : environment not pushed
               00033 ;;; * different bytecode instruction argument sizes (1 or 2 bytes)
               00034 ;;; * absolute bytecode jump address
               00035 ;;; * atom tags <> 0
               00036 ;;; * atom in heap forbidden
               00037 ;;; * extraArgs < 128 => no more than 128 (function argument number + env size)
               00038 ;;; * no more than 127 values defined in a "let rec ... and ..."
               00039 ;;; * BSR = (@ACCU)H during VM execution
               00040 ;;; * custom comparaison primitives must not use TMP_REG_[6 -> E]
               00041 ;;; * custom hash primitives must not use TMP_REG_[5 -> E]
               00042         
               00043 ;;;;;;;|-------------------------------------|;;;;;;;
               00044 ;;;;;;;|                                     |;;;;;;;
               00045 ;;;;;;;|              CONSTANTS              |;;;;;;;
               00046 ;;;;;;;|                                     |;;;;;;;
               00047 ;;;;;;;|-------------------------------------|;;;;;;;
               00048 
  00000000     00049 HEAP1_ANCHOR            EQU     0x0
  00000006     00050 HEAP2_ANCHOR            EQU     HEAP_SIZE
               00051 
  000000F7     00052 CLOSURE_TAG             EQU     .247
  000000F8     00053 OBJECT_TAG              EQU     .248
  000000F9     00054 INFIX_TAG               EQU     .249
  000000FA     00055 FORWARD_TAG             EQU     .250
  000000FB     00056 NO_SCAN_TAG             EQU     .251
  000000FB     00057 ABSTRACT_TAG            EQU     .251
  000000FC     00058 STRING_TAG              EQU     .252
  000000FD     00059 DOUBLE_TAG              EQU     .253
  000000FE     00060 DOUBLE_ARRAY_TAG        EQU     .254
  000000FF     00061 CUSTOM_TAG              EQU     .255
               00062 
  00000000     00063 OUT_OF_MEMORY_IND       EQU     0x0
  00000002     00064 FAILURE_IND             EQU     0x2
  00000003     00065 INVALID_ARG_IND         EQU     0x3
  00000005     00066 DIVISION_BY_0_IND       EQU     0x5
  00000008     00067 STACK_OVERFLOW_IND      EQU     0x8
               00068 
  00000100     00069 OBJ_TAG_INT             EQU     .256
  00000101     00070 OBJ_TAG_OUT_OF_MEMORY   EQU     .257
               00071 
  00000F88     00072 ATOM0_ADR               EQU     0xF88
               00073 
  00000F80     00074 MAX_USER_RAM            EQU     0xF80 ; user ram = [0x000 ; 0xF80[
               00075 
               00076 
               00077 ;;;;;;;|-------------------------------------|;;;;;;;
               00078 ;;;;;;;|                                     |;;;;;;;
               00079 ;;;;;;;|              VARIABLES              |;;;;;;;
               00080 ;;;;;;;|                                     |;;;;;;;
               00081 ;;;;;;;|-------------------------------------|;;;;;;;
               00082 
  00000F54     00083 ENVL            EQU     (MAX_USER_RAM-0x2C) ; environment
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000F55     00084 ENVH            EQU     (MAX_USER_RAM-0x2B)
  00000F56     00085 ACCUL           EQU     (MAX_USER_RAM-0x2A) ; accumulator
  00000F57     00086 ACCUH           EQU     (MAX_USER_RAM-0x29)
  00000F58     00087 INT_FUN_L       EQU     (MAX_USER_RAM-0x28)
  00000F59     00088 INT_FUN_H       EQU     (MAX_USER_RAM-0x27)
  00000F5A     00089 OOM_TAG         EQU     (MAX_USER_RAM-0x26)
  00000F5B     00090 OOM_SIZE        EQU     (MAX_USER_RAM-0x25)
  00000F5C     00091 OOM_FIELD0_L    EQU     (MAX_USER_RAM-0x24)
  00000F5D     00092 OOM_FIELD0_H    EQU     (MAX_USER_RAM-0x23)
  00000F5E     00093 CUR_HEAP_END    EQU     (MAX_USER_RAM-0x22)
  00000F5F     00094 OTH_HEAP_END    EQU     (MAX_USER_RAM-0x21)
  00000F60     00095 TRAP_SPL        EQU     (MAX_USER_RAM-0x20) ; trapSp
  00000F61     00096 TRAP_SPH        EQU     (MAX_USER_RAM-0x1F)
  00000F62     00097 EXTRA_ARGS      EQU     (MAX_USER_RAM-0x1E) ; extraArgs (*2 + 1)
  00000F63     00098 GC_TMP_REG_1    EQU     (MAX_USER_RAM-0x1D) ; gc tmp registers
  00000F64     00099 GC_TMP_REG_2    EQU     (MAX_USER_RAM-0x1C)
  00000F65     00100 GC_TMP_REG_3    EQU     (MAX_USER_RAM-0x1B)
  00000F66     00101 GC_TMP_REG_4    EQU     (MAX_USER_RAM-0x1A)
  00000F67     00102 GC_TMP_REG_5    EQU     (MAX_USER_RAM-0x19)
  00000F68     00103 TMP_REG_1       EQU     (MAX_USER_RAM-0x18) ; interp/runtime tmp registers
  00000F69     00104 TMP_REG_2       EQU     (MAX_USER_RAM-0x17)
  00000F6A     00105 TMP_REG_3       EQU     (MAX_USER_RAM-0x16)
  00000F6B     00106 TMP_REG_4       EQU     (MAX_USER_RAM-0x15)
  00000F6C     00107 TMP_REG_5       EQU     (MAX_USER_RAM-0x14)
  00000F6D     00108 TMP_REG_6       EQU     (MAX_USER_RAM-0x13)
  00000F6E     00109 TMP_REG_7       EQU     (MAX_USER_RAM-0x12)
  00000F6F     00110 TMP_REG_8       EQU     (MAX_USER_RAM-0x11)
  00000F70     00111 TMP_REG_9       EQU     (MAX_USER_RAM-0x10)
  00000F71     00112 TMP_REG_A       EQU     (MAX_USER_RAM-0x0F)
  00000F72     00113 TMP_REG_B       EQU     (MAX_USER_RAM-0x0E)
  00000F73     00114 TMP_REG_C       EQU     (MAX_USER_RAM-0x0D)
  00000F74     00115 TMP_REG_D       EQU     (MAX_USER_RAM-0x0C)
  00000F75     00116 TMP_REG_E       EQU     (MAX_USER_RAM-0x0B)
  00000F76     00117 GC_COUNTER_L    EQU     (MAX_USER_RAM-0x0A) ; gc running counter
  00000F77     00118 GC_COUNTER_H    EQU     (MAX_USER_RAM-0x09)
  00000F78     00119 RAND_CUR_L      EQU     (MAX_USER_RAM-0x08)
  00000F79     00120 RAND_CUR_H      EQU     (MAX_USER_RAM-0x07)
  00000F7A     00121 INT_FLAGS_1     EQU     (MAX_USER_RAM-0x06)
  00000F7B     00122 INT_FLAGS_2     EQU     (MAX_USER_RAM-0x05)
  00000F7C     00123 INT_FLAGS_3     EQU     (MAX_USER_RAM-0x04)
  00000F7D     00124 INT_RUNS_1      EQU     (MAX_USER_RAM-0x03)
  00000F7E     00125 INT_RUNS_2      EQU     (MAX_USER_RAM-0x02)
  00000F7F     00126 INT_RUNS_3      EQU     (MAX_USER_RAM-0x01)
               00127 
               00128 
               00129 ;;;;;;;|-------------------------------------|;;;;;;;
               00130 ;;;;;;;|                                     |;;;;;;;
               00131 ;;;;;;;|        COMPUTED CONSTANTS           |;;;;;;;
               00132 ;;;;;;;|                                     |;;;;;;;
               00133 ;;;;;;;|-------------------------------------|;;;;;;;
               00134         
  00000F53     00135 STACK_ANCHOR            EQU     (ENVL-0x1)      ; stack from 0xF57 to 0xE00
               00136 
  00000005     00137 HEAP1_END               EQU     (HEAP1_ANCHOR + HEAP_SIZE - 0x1)        ; 0x6
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  0000000B     00138 HEAP2_END               EQU     (HEAP2_ANCHOR + HEAP_SIZE - 0x1)        ; 0xD
  0000000C     00139 STACK_END               EQU     ((high STACK_ANCHOR) - STACK_SIZE)      ; 0xE
               00140 
               00141 
               00142 ;;;;;;;|-------------------------------------|;;;;;;;
               00143 ;;;;;;;|                                     |;;;;;;;
               00144 ;;;;;;;|                MACROS               |;;;;;;;
               00145 ;;;;;;;|                                     |;;;;;;;
               00146 ;;;;;;;|-------------------------------------|;;;;;;;
               00147         
               00148         variable CPT_CUH = 0
               00149 M_CHECK_UNFULL_HEAP macro N
               00150                 movf    CUR_HEAP_END, W
               00151                 cpfseq  FSR1H
               00152                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00153                 movlw   (N * 0x2 + 0x2)
               00154                 addwf   FSR1L, W
               00155                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00156 
               00157                 call    caml_gc_exec
               00158 
               00159                 movf    CUR_HEAP_END, W
               00160                 cpfseq  FSR1H
               00161                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00162                 movlw   (N * 0x2 + 0x2)
               00163                 addwf   FSR1L, W
               00164                 btfsc   STATUS, C
               00165                 goto    caml_raise_out_of_memory
               00166 CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00167 CPT_CUH = CPT_CUH + 1
               00168         endm
               00169 
               00170 ;;;
               00171 
               00172         variable CPT_CUS
               00173 M_CHECK_UNFULL_STACK macro N
               00174                 movlw   STACK_END
               00175                 cpfseq  FSR2H
               00176                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
               00177                 movlw   -(0x2 * N)
               00178                 addwf   FSR2L, W
               00179                 btfss   STATUS, C
               00180                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00181 CHECK_UNFULL_STACK_END_#v(CPT_CUS)
               00182 CPT_CUS = CPT_CUS + 1
               00183         endm
               00184 
               00185 M_PUSH  macro
               00186                 movff   ACCUH, POSTDEC2
               00187                 movff   ACCUL, POSTDEC2
               00188                 movlw   (STACK_END - 0x1)
               00189                 cpfsgt  FSR2H
               00190                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00191         endm
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00192         
               00193 ;;;
               00194         
               00195 M_CONST macro N
               00196                 movlw   2 * N + 1
               00197                 movwf   ACCUL
               00198                 clrf    ACCUH
               00199         endm
               00200 
               00201 ;;;
               00202         
               00203 M_ACC   macro N
               00204                 movsf   [2 * N + 1], ACCUL
               00205                 movsf   [2 * N + 2], ACCUH
               00206         endm
               00207 
               00208 ;;;
               00209 
               00210 M_GETGLOBAL macro
               00211                 lfsr    FSR0, STACK_ANCHOR
               00212                 M_READ_ARG
               00213                 subwf   FSR0L, F
               00214                 movf    TABLAT, W
               00215                 subwfb  FSR0H, F
               00216                 movff   POSTDEC0, ACCUH
               00217                 movff   INDF0, ACCUL
               00218         endm
               00219         
               00220 ;;;
               00221         
               00222 M_READ_ARG macro
               00223                 tblrd*+
               00224                 movf    TABLAT, W
               00225                 tblrd*+
               00226         endm
               00227 
               00228 ;;;
               00229 
               00230 #if ((high caml_externals) & 0x1) != 0
               00231         error   "invalid constant caml_externals (high byte is odd)"
               00232 #endif
               00233         
               00234 M_CCALL macro
               00235                 movlw   ((high caml_externals) / 2)
               00236                 movwf   PCLATH
               00237                 tblrd*+
               00238                 rlcf    TABLAT, W
               00239                 rlcf    PCLATH, F
               00240                 callw
               00241                 movlw   high _THE_BIG_SWITCH
               00242                 movwf   PCLATH
               00243         endm
               00244         
               00245 ;;;
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00246 
               00247 M_ATOM0 macro
               00248                 movlw   low ATOM0_ADR
               00249                 movwf   ACCUL
               00250                 movlw   high ATOM0_ADR
               00251                 movwf   ACCUH
               00252         endm
               00253         
               00254 
               00255 ;;;;;;;|-------------------------------------|;;;;;;;
               00256 ;;;;;;;|                                     |;;;;;;;
               00257 ;;;;;;;|                CODE                 |;;;;;;;
               00258 ;;;;;;;|                                     |;;;;;;;
               00259 ;;;;;;;|-------------------------------------|;;;;;;;
               00260 
0000           00261         org     0x00
0000 010F      00262         banksel ACCUL                           ; init BSR
0002 D00C      00263         bra     caml_virtual_machine
               00264 
0008           00265         org     0x08
0008 00266 low_interrupt_handler:
0008 EFFB F031 00267         goto    asm_interrupt_handler
               00268 
0018           00269         org     0x18
0018 00270 high_interrupt_handler:
0018 EFFB F031 00271         goto    asm_interrupt_handler
               00272 
001C 00273 caml_virtual_machine:
001C EE00 F000 00274         lfsr    FSR0, 0x0                       ; clear all user registers
0020 00275 _LOOP_INIT_REGISTERS:
0020 6AEE      00276         clrf    POSTINC0
0022 6AEE      00277         clrf    POSTINC0
0024 6AEE      00278         clrf    POSTINC0
0026 6AEE      00279         clrf    POSTINC0
0028 0E80      00280         movlw   low MAX_USER_RAM
002A 62E9      00281         cpfseq  FSR0L
002C D7F9      00282         bra     _LOOP_INIT_REGISTERS
002E 0E0F      00283         movlw   high MAX_USER_RAM
0030 62EA      00284         cpfseq  FSR0H
0032 D7F6      00285         bra     _LOOP_INIT_REGISTERS
               00286         
0034 0E05      00287         movlw   HEAP1_END                       ; init heap ends
0036 6F5E      00288         movwf   CUR_HEAP_END
0038 0E0B      00289         movlw   HEAP2_END
003A 6F5F      00290         movwf   OTH_HEAP_END
               00291 
003C 6AFB      00292         clrf    PCLATU                          ; init PCLAT{H,U}
003E 0E09      00293         movlw   high _THE_BIG_SWITCH
0040 6EFA      00294         movwf   PCLATH
               00295 
0042 6AF8      00296         clrf    TBLPTRU                         ; init TBLPTRU
               00297 
0044 EE10 F000 00298         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)    ; init heap pointer
0048 EE2F F053 00299         lfsr    FSR2, STACK_ANCHOR              ; init stack pointer
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00300 
004C 0E82      00301         movlw   low caml_globals_init_stack     ; init globals
004E 6EF6      00302         movwf   TBLPTRL
0050 0E48      00303         movlw   high caml_globals_init_stack
0052 6EF7      00304         movwf   TBLPTRH
0054 D006      00305         bra     _LOOP_INIT_STACK_TEST           ; init stack bottom
0056 00306 _LOOP_INIT_STACK:
0056 0009      00307         tblrd*+
0058 50F5      00308         movf    TABLAT, W
005A 0009      00309         tblrd*+
005C CFF5 FFDD 00310         movff   TABLAT, POSTDEC2
0060 6EDD      00311         movwf   POSTDEC2
0062 00312 _LOOP_INIT_STACK_TEST:
0062 0EEA      00313         movlw   low caml_globals_init_heap
0064 62F6      00314         cpfseq  TBLPTRL
0066 D7F7      00315         bra     _LOOP_INIT_STACK
0068 0E49      00316         movlw   high caml_globals_init_heap
006A 62F7      00317         cpfseq  TBLPTRH
006C D7F4      00318         bra     _LOOP_INIT_STACK
               00319         
006E D006      00320         bra     _LOOP_INIT_HEAP_TEST            ; init heap bottom
0070 00321 _LOOP_INIT_HEAP:
0070 0009      00322         tblrd*+
0072 CFF5 FFE6 00323         movff   TABLAT, POSTINC1
0076 0009      00324         tblrd*+
0078 CFF5 FFE6 00325         movff   TABLAT, POSTINC1
007C 00326 _LOOP_INIT_HEAP_TEST:
007C 0EE6      00327         movlw   low caml_globals_init_end
007E 62F6      00328         cpfseq  TBLPTRL
0080 D7F7      00329         bra     _LOOP_INIT_HEAP
0082 0E4B      00330         movlw   high caml_globals_init_end
0084 62F7      00331         cpfseq  TBLPTRH
0086 D7F4      00332         bra     _LOOP_INIT_HEAP
               00333 
0088 0E01      00334         movlw   0x1
008A 6F60      00335         movwf   TRAP_SPL                        ; init trapSp
008C 6F58      00336         movwf   INT_FUN_L                       ; init interruption catcher
008E 6F56      00337         movwf   ACCUL                           ; init ACCU
0090 6F54      00338         movwf   ENVL                            ; init ENV
0092 6F62      00339         movwf   EXTRA_ARGS                      ; init EXTRA_ARGS
0094 6F5B      00340         movwf   OOM_SIZE                        ; init Out_of_memory block
0096 6F5C      00341         movwf   OOM_FIELD0_L
               00342 
0098 0EE0      00343         movlw   low caml_bytecode               ; init bytecode pointer
009A 6EF6      00344         movwf   TBLPTRL
009C 0E16      00345         movlw   high caml_bytecode
009E 6EF7      00346         movwf   TBLPTRH
               00347 
00A0 EF93 F009 00348         goto    _THE_BIG_LOOP
               00349 
               00350 
               00351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00352 ;;;;;;;;                                   ;;;;;;;;
               00353 ;;;;;;;;       COMPARATIVES JUMPS          ;;;;;;;;
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00354 ;;;;;;;;                                   ;;;;;;;;
               00355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00356 
00A4 00357 _BEQ:
               00358         M_READ_ARG
00A4 0009          M                 tblrd*+
00A6 50F5          M                 movf    TABLAT, W
00A8 0009          M                 tblrd*+
00AA 6356      00359         cpfseq  ACCUL
00AC D012      00360         bra     _SKIP_ARGUMENT
00AE 50F5      00361         movf    TABLAT, W
00B0 6357      00362         cpfseq  ACCUH
00B2 D00F      00363         bra     _SKIP_ARGUMENT
               00364         ;; fallthrough
               00365         
00B4 00366 _BRANCH_LOCAL_COPY:
               00367         M_READ_ARG
00B4 0009          M                 tblrd*+
00B6 50F5          M                 movf    TABLAT, W
00B8 0009          M                 tblrd*+
00BA 6EF6      00368         movwf   TBLPTRL
00BC 50F5      00369         movf    TABLAT, W
00BE 6EF7      00370         movwf   TBLPTRH
00C0 0012      00371         return
               00372 
00C2 00373 _BNEQ:
               00374         M_READ_ARG
00C2 0009          M                 tblrd*+
00C4 50F5          M                 movf    TABLAT, W
00C6 0009          M                 tblrd*+
00C8 6356      00375         cpfseq  ACCUL
00CA D7F4      00376         bra     _BRANCH_LOCAL_COPY
00CC 50F5      00377         movf    TABLAT, W
00CE 6357      00378         cpfseq  ACCUH
00D0 D7F1      00379         bra     _BRANCH_LOCAL_COPY
               00380         ;; fallthrough
               00381         
00D2 00382 _SKIP_ARGUMENT:
00D2 0E02      00383         movlw   0x2
00D4 26F6      00384         addwf   TBLPTRL, F
00D6 B0D8      00385         btfsc   STATUS, C
00D8 2AF7      00386         incf    TBLPTRH, F
00DA 0012      00387         return
               00388 
00DC 00389 _BLTINT:
00DC 0009      00390         tblrd*+                   ; TMP_REG_1 <- valL
00DE CFF5 FF68 00391         movff   TABLAT, TMP_REG_1
00E2 0009      00392         tblrd*+                   ; TABLAT <- valH + 0x80
00E4 0E80      00393         movlw   0x80
00E6 26F5      00394         addwf   TABLAT, F
00E8 5157      00395         movf    ACCUH, W          ; W <- ACCUH + 0x80
00EA 0F80      00396         addlw   0x80
00EC 5CF5      00397         subwf   TABLAT, W         ; TABLAT - W
00EE E102      00398         bnz     _BLTINT_L0        ; if TABLAT <> W then goto L0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00F0 5156      00399         movf    ACCUL, W
00F2 5D68      00400         subwf   TMP_REG_1, W      ; valL - ACCUL
00F4 00401 _BLTINT_L0:
00F4 E2EE      00402         bc      _SKIP_ARGUMENT    ; if C = 1 then continue
00F6 D7DE      00403         bra     _BRANCH_LOCAL_COPY; else jump
               00404         
00F8 00405 _BLEINT:
00F8 5157      00406         movf    ACCUH, W          ; TMP_REG_1 <- ACCUH + 0x80
00FA 0F80      00407         addlw   0x80
00FC 6F68      00408         movwf   TMP_REG_1
00FE 0009      00409         tblrd*+                   ; TMP_REG_2 <- valL
0100 CFF5 FF69 00410         movff   TABLAT, TMP_REG_2
0104 0009      00411         tblrd*+                   ; W <- valH + 0x80
0106 50F5      00412         movf    TABLAT, W
0108 0F80      00413         addlw   0x80
010A 5D68      00414         subwf   TMP_REG_1, W      ; TMP_REG_1 - W
010C E102      00415         bnz     _BLEINT_L0        ; if TMP_REG_1 <> W then goto L0
010E 5169      00416         movf    TMP_REG_2, W
0110 5D56      00417         subwf   ACCUL, W          ; ACCUL - valL
0112 00418 _BLEINT_L0:
0112 E2D0      00419         bc      _BRANCH_LOCAL_COPY; if C = 1 then jump
0114 D7DE      00420         bra     _SKIP_ARGUMENT    ; else continue
               00421         
0116 00422 _BGTINT:
0116 5157      00423         movf    ACCUH, W          ; TMP_REG_1 <- ACCUH + 0x80
0118 0F80      00424         addlw   0x80
011A 6F68      00425         movwf   TMP_REG_1
011C 0009      00426         tblrd*+                   ; TMP_REG_2 <- valL
011E CFF5 FF69 00427         movff   TABLAT, TMP_REG_2
0122 0009      00428         tblrd*+                   ; W <- valH + 0x80
0124 50F5      00429         movf    TABLAT, W
0126 0F80      00430         addlw   0x80
0128 5D68      00431         subwf   TMP_REG_1, W      ; TMP_REG_1 - W
012A E102      00432         bnz     _BGTINT_L0        ; if TMP_REG_1 <> W then goto L0
012C 5169      00433         movf    TMP_REG_2, W
012E 5D56      00434         subwf   ACCUL, W          ; ACCUL - valL
0130 00435 _BGTINT_L0:
0130 E2D0      00436         bc      _SKIP_ARGUMENT    ; if C = 1 then continue
0132 D7C0      00437         bra     _BRANCH_LOCAL_COPY; else jump
               00438         
0134 00439 _BGEINT:
0134 0009      00440         tblrd*+                   ; TMP_REG_1 <- valL
0136 CFF5 FF68 00441         movff   TABLAT, TMP_REG_1
013A 0009      00442         tblrd*+                   ; TABLAT <- valH + 0x80
013C 0E80      00443         movlw   0x80
013E 26F5      00444         addwf   TABLAT, F
0140 5157      00445         movf    ACCUH, W          ; W <- ACCUH + 0x80
0142 0F80      00446         addlw   0x80
0144 5CF5      00447         subwf   TABLAT, W         ; TABLAT - W
0146 E102      00448         bnz     _BGEINT_L0        ; if TABLAT <> W then goto L0
0148 5156      00449         movf    ACCUL, W
014A 5D68      00450         subwf   TMP_REG_1, W      ; valL - ACCUL
014C 00451 _BGEINT_L0:
014C E2B3      00452         bc      _BRANCH_LOCAL_COPY; if C = 1 then jump
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
014E D7C1      00453         bra     _SKIP_ARGUMENT    ; else continue
               00454         
0150 00455 _BULTINT:
               00456         M_READ_ARG
0150 0009          M                 tblrd*+
0152 50F5          M                 movf    TABLAT, W
0154 0009          M                 tblrd*+
0156 6F68      00457         movwf   TMP_REG_1         ; TMP_REG_1 <- valL
0158 50F5      00458         movf    TABLAT, W         ; W <- valH
015A 5D57      00459         subwf   ACCUH, W          ; W <- ACCUH - valH
015C E3BA      00460         bnc     _SKIP_ARGUMENT    ; if ACCUH < valH then continue
015E E1AA      00461         bnz     _BRANCH_LOCAL_COPY; else if ACCUH <> valH then jump
0160 5168      00462         movf    TMP_REG_1, W      ; else (ACCUH = valH)  W <- valL
0162 6556      00463         cpfsgt  ACCUL             ; if ACCUL <= valL
0164 D7B6      00464         bra     _SKIP_ARGUMENT    ; then continue
0166 D7A6      00465         bra     _BRANCH_LOCAL_COPY; else jump
               00466         
0168 00467 _BUGEINT:
               00468         M_READ_ARG
0168 0009          M                 tblrd*+
016A 50F5          M                 movf    TABLAT, W
016C 0009          M                 tblrd*+
016E 6F68      00469         movwf   TMP_REG_1         ; TMP_REG_1 <- valL
0170 50F5      00470         movf    TABLAT, W         ; W <- valH
0172 5D57      00471         subwf   ACCUH, W          ; W <- ACCUH - valH
0174 E39F      00472         bnc     _BRANCH_LOCAL_COPY; if ACCUH < valH then jump
0176 E1AD      00473         bnz     _SKIP_ARGUMENT    ; else if ACCUH <> valH then continue
0178 5168      00474         movf    TMP_REG_1, W      ; else (ACCUH = valH)  W <- valL
017A 6556      00475         cpfsgt  ACCUL             ; if ACCUL <= valL
017C D79B      00476         bra     _BRANCH_LOCAL_COPY; then jump
017E D7A9      00477         bra     _SKIP_ARGUMENT    ; else continue
               00478 
               00479 
               00480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00481 ;;;;;;;;                                   ;;;;;;;;
               00482 ;;;;;;;;              STACK                ;;;;;;;;
               00483 ;;;;;;;;                                   ;;;;;;;;
               00484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00485         
0180 00486 _ACC3_BEQ:
0180 E291      00487         bc      _BEQ
               00488         M_ACC   3
0182 EB07 FF56     M                 movsf   [2 * N + 1], ACCUL
0186 EB08 FF57     M                 movsf   [2 * N + 2], ACCUH
018A 0012      00489         return
               00490 
018C 00491 _ACC4_BNEQ:
018C E29A      00492         bc      _BNEQ
               00493         M_ACC   4
018E EB09 FF56     M                 movsf   [2 * N + 1], ACCUL
0192 EB0A FF57     M                 movsf   [2 * N + 2], ACCUH
0196 0012      00494         return
               00495 
0198 00496 _ACC5_BLTINT:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0198 E2A1      00497         bc      _BLTINT
               00498         M_ACC   5
019A EB0B FF56     M                 movsf   [2 * N + 1], ACCUL
019E EB0C FF57     M                 movsf   [2 * N + 2], ACCUH
01A2 0012      00499         return
               00500 
01A4 00501 _ACC6_BLEINT:
01A4 E2A9      00502         bc      _BLEINT
               00503         M_ACC   6
01A6 EB0D FF56     M                 movsf   [2 * N + 1], ACCUL
01AA EB0E FF57     M                 movsf   [2 * N + 2], ACCUH
01AE 0012      00504         return
               00505 
01B0 00506 _ACC7_BGTINT:
01B0 E2B2      00507         bc      _BGTINT
               00508         M_ACC   7
01B2 EB0F FF56     M                 movsf   [2 * N + 1], ACCUL
01B6 EB10 FF57     M                 movsf   [2 * N + 2], ACCUH
01BA 0012      00509         return
               00510 
01BC 00511 _PUSHACC1_BULTINT:
01BC E2C9      00512         bc      _BULTINT
               00513         M_PUSH
01BE CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01C2 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01C6 0E0B          M                 movlw   (STACK_END - 0x1)
01C8 64DA          M                 cpfsgt  FSR2H
01CA D392          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00514         M_ACC   1
01CC EB03 FF56     M                 movsf   [2 * N + 1], ACCUL
01D0 EB04 FF57     M                 movsf   [2 * N + 2], ACCUH
01D4 0012      00515         return
               00516         
01D6 00517 _PUSHACC2_BUGEINT:
01D6 E2C8      00518         bc      _BUGEINT
               00519         M_PUSH
01D8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01DC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01E0 0E0B          M                 movlw   (STACK_END - 0x1)
01E2 64DA          M                 cpfsgt  FSR2H
01E4 D385          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00520         M_ACC   2
01E6 EB05 FF56     M                 movsf   [2 * N + 1], ACCUL
01EA EB06 FF57     M                 movsf   [2 * N + 2], ACCUH
01EE 0012      00521         return
               00522         
01F0 00523 _PUSH_ULTINT:
01F0 E250      00524         bc      _ULTINT
               00525         M_PUSH
01F2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01F6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01FA 0E0B          M                 movlw   (STACK_END - 0x1)
01FC 64DA          M                 cpfsgt  FSR2H
01FE D378          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0200 0012      00526         return
               00527 
0202 00528 _PUSHACC0_UGEINT:
0202 E250      00529         bc      _UGEINT
               00530         M_PUSH
0204 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0208 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
020C 0E0B          M                 movlw   (STACK_END - 0x1)
020E 64DA          M                 cpfsgt  FSR2H
0210 D36F          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0212 0012      00531         return
               00532 
0214 00533 _ACC_BGEINT:
0214 E28F      00534         bc      _BGEINT
0216 CFDA FFEA 00535         movff   FSR2H, FSR0H
021A CFD9 FFE9 00536         movff   FSR2L, FSR0L
               00537         M_READ_ARG
021E 0009          M                 tblrd*+
0220 50F5          M                 movf    TABLAT, W
0222 0009          M                 tblrd*+
0224 26E9      00538         addwf   FSR0L, F
0226 50F5      00539         movf    TABLAT, W
0228 22EA      00540         addwfc  FSR0H, F
022A CFEC FF56 00541         movff   PREINC0, ACCUL
022E CFEC FF57 00542         movff   PREINC0, ACCUH
0232 0012      00543         return
               00544 
               00545 #ifdef caml_useprim_caml_set_interruption_handler
               00546 _INTRETURN:
               00547         goto    caml_interrupt_handler_return
               00548 _PUSHACC_INTRETURN:
               00549         bc      _INTRETURN
               00550 #else
0234 00551 _PUSHACC_INTRETURN:
               00552 #endif
0234 00553 _PUSHACC:
               00554         M_PUSH                  ; fallthrough
0234 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0238 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
023C 0E0B          M                 movlw   (STACK_END - 0x1)
023E 64DA          M                 cpfsgt  FSR2H
0240 D357          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0242 CFDA FFEA 00555         movff   FSR2H, FSR0H
0246 CFD9 FFE9 00556         movff   FSR2L, FSR0L
               00557         M_READ_ARG
024A 0009          M                 tblrd*+
024C 50F5          M                 movf    TABLAT, W
024E 0009          M                 tblrd*+
0250 26E9      00558         addwf   FSR0L, F
0252 50F5      00559         movf    TABLAT, W
0254 22EA      00560         addwfc  FSR0H, F
0256 CFEC FF56 00561         movff   PREINC0, ACCUL
025A CFEC FF57 00562         movff   PREINC0, ACCUH
025E 0012      00563         return
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00564 
               00565 #ifdef caml_useprim_caml_set_interruption_handler
               00566 _INTRAISE:
               00567         goto    caml_interrupt_handler_raise
               00568 _POP_INTRAISE:
               00569         bc      _INTRAISE
               00570 #else
0260 00571 _POP_INTRAISE:
               00572 #endif
0260 00573 _POP:
               00574         M_READ_ARG
0260 0009          M                 tblrd*+
0262 50F5          M                 movf    TABLAT, W
0264 0009          M                 tblrd*+
0266 26D9      00575         addwf   FSR2L, F
0268 50F5      00576         movf    TABLAT, W
026A 22DA      00577         addwfc  FSR2H, F
026C 0012      00578         return
               00579         
026E 00580 _ASSIGN:
026E CFDA FFEA 00581         movff   FSR2H, FSR0H
0272 CFD9 FFE9 00582         movff   FSR2L, FSR0L
               00583         M_READ_ARG
0276 0009          M                 tblrd*+
0278 50F5          M                 movf    TABLAT, W
027A 0009          M                 tblrd*+
027C 26E9      00584         addwf   FSR0L, F
027E 50F5      00585         movf    TABLAT, W
0280 22EA      00586         addwfc  FSR0H, F
0282 CF56 FFEC 00587         movff   ACCUL, PREINC0
0286 CF57 FFEC 00588         movff   ACCUH, PREINC0
               00589         M_CONST 0
028A 0E01          M                 movlw   2 * N + 1
028C 6F56          M                 movwf   ACCUL
028E 6B57          M                 clrf    ACCUH
0290 0012      00590         return
               00591 
               00592 
               00593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00594 ;;;;;;;;                                   ;;;;;;;;
               00595 ;;;;;;;;      UNSIGNED COMPARAISON         ;;;;;;;;
               00596 ;;;;;;;;                                   ;;;;;;;;
               00597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00598 
0292 00599 _ULTINT:
0292 5157      00600         movf    ACCUH, W         ; W <- ACCUH
0294 6B57      00601         clrf    ACCUH            ; ACCUH <- 0
0296 5C02      00602         subwf   [0x2], W         ; STKH - W
0298 E311      00603         bnc     _POP_ACCUL_FALSE ; if C = 0 (<=> STK<ACCU) then ACCU <- FALSE
029A E10D      00604         bnz     _POP_ACCUL_TRUE  ; if Z = 0 (<=> STK>ACCU) then ACCU <- TRUE
029C 5156      00605         movf    ACCUL, W         ; W <- ACCUL
029E 6401      00606         cpfsgt  [0x1]            ; if STKL <= W
02A0 D00D      00607         bra     _POP_ACCUL_FALSE ; then ACCU <- FALSE
02A2 D009      00608         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00609 
02A4 00610 _UGEINT:
02A4 5157      00611         movf    ACCUH, W         ; W <- ACCUH
02A6 6B57      00612         clrf    ACCUH            ; ACCUH <- 0
02A8 5C02      00613         subwf   [0x2], W         ; STKH - W
02AA E305      00614         bnc     _POP_ACCUL_TRUE  ; if C = 0 (<=> STK<ACCU) then ACCU <- TRUE
02AC E107      00615         bnz     _POP_ACCUL_FALSE ; if Z = 0 (<=> STK>ACCU) then ACCU <- FALSE
02AE 5156      00616         movf    ACCUL, W         ; W <- ACCUL
02B0 6401      00617         cpfsgt  [0x1]            ; if STKL <= W
02B2 D001      00618         bra     _POP_ACCUL_TRUE  ; then ACCU <- TRUE
02B4 D003      00619         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00620 
02B6 00621 _POP_ACCUL_TRUE:
02B6 0E03      00622         movlw   0x3
02B8 6F56      00623         movwf   ACCUL
02BA E8C2      00624         addulnk 0x2
               00625 
02BC 00626 _POP_ACCUL_FALSE:
02BC 0E01      00627         movlw   0x1
02BE 6F56      00628         movwf   ACCUL
02C0 E8C2      00629         addulnk 0x2
               00630 
               00631 
               00632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00633 ;;;;;;;;                                   ;;;;;;;;
               00634 ;;;;;;;;            COMPARAISONS           ;;;;;;;;
               00635 ;;;;;;;;                                   ;;;;;;;;
               00636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00637 
02C2 00638 _EQ:
02C2 5156      00639         movf    ACCUL, W
02C4 6B56      00640         clrf    ACCUL
02C6 8156      00641         bsf     ACCUL, 0
02C8 8356      00642         bsf     ACCUL, 1
02CA 62DC      00643         cpfseq  PREINC2
02CC 9356      00644         bcf     ACCUL, 1
02CE 5157      00645         movf    ACCUH, W
02D0 62DC      00646         cpfseq  PREINC2
02D2 9356      00647         bcf     ACCUL, 1
02D4 6B57      00648         clrf    ACCUH
02D6 0012      00649         return
               00650         
02D8 00651 _NEQ:
02D8 5156      00652         movf    ACCUL, W
02DA 6B56      00653         clrf    ACCUL
02DC 8156      00654         bsf     ACCUL, 0
02DE 62DC      00655         cpfseq  PREINC2
02E0 8356      00656         bsf     ACCUL, 1
02E2 5157      00657         movf    ACCUH, W
02E4 62DC      00658         cpfseq  PREINC2
02E6 8356      00659         bsf     ACCUL, 1
02E8 6B57      00660         clrf    ACCUH
02EA 0012      00661         return
               00662         
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02EC 00663 _LTINT:
02EC 5157      00664         movf    ACCUH, W         ; TMP_REG_1 <- ACCUH + 0x80
02EE 0F80      00665         addlw   0x80
02F0 6F68      00666         movwf   TMP_REG_1
02F2 6B57      00667         clrf    ACCUH            ; ACCUH <- 0
02F4 5002      00668         movf    [0x2], W         ; W <- STKH + 0x80
02F6 0F80      00669         addlw   0x80
02F8 5D68      00670         subwf   TMP_REG_1, W     ; TMP_REG_1 - W
02FA E102      00671         bnz     _LTINT_L0        ; if TMP_REG_1 <> W then goto L0
02FC 5001      00672         movf    [0x1], W
02FE 5D56      00673         subwf   ACCUL, W         ; ACCUL - STKL
0300 00674 _LTINT_L0:
0300 E2DD      00675         bc      _POP_ACCUL_FALSE ; if C = 1 then ACCU <- FALSE
0302 D7D9      00676         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
               00677         
0304 00678 _LEINT:
0304 0E80      00679         movlw   0x80             ; STKH <- STKH + 0x80
0306 2602      00680         addwf   [0x2], F
0308 5157      00681         movf    ACCUH, W         ; W <- ACCUH + 0x80
030A 0F80      00682         addlw   0x80
030C 6B57      00683         clrf    ACCUH            ; ACCUH <- 0
030E 5C02      00684         subwf   [0x2], W         ; STKH - W
0310 E102      00685         bnz     _LEINT_L0        ; if STKH <> W then goto L0
0312 5156      00686         movf    ACCUL, W
0314 5C01      00687         subwf   [0x1], W         ; STKL - ACCUL
0316 00688 _LEINT_L0:
0316 E2CF      00689         bc      _POP_ACCUL_TRUE  ; if C = 1 then ACCU <- TRUE
0318 D7D1      00690         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00691         
031A 00692 _GTINT:
031A 0E80      00693         movlw   0x80             ; STKH <- STKH + 0x80
031C 2602      00694         addwf   [0x2], F
031E 5157      00695         movf    ACCUH, W         ; W <- ACCUH + 0x80
0320 0F80      00696         addlw   0x80
0322 6B57      00697         clrf    ACCUH            ; ACCUH <- 0
0324 5C02      00698         subwf   [0x2], W         ; STKH - W
0326 E102      00699         bnz     _GTINT_L0        ; if STKH <> W then goto L0
0328 5156      00700         movf    ACCUL, W
032A 5C01      00701         subwf   [0x1], W         ; STKL - ACCUL
032C 00702 _GTINT_L0:
032C E2C7      00703         bc      _POP_ACCUL_FALSE ; if C = 1 then ACCU <- FALSE
032E D7C3      00704         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
               00705         
0330 00706 _GEINT:
0330 5157      00707         movf    ACCUH, W         ; TMP_REG_1 <- ACCUH + 0x80
0332 0F80      00708         addlw   0x80
0334 6F68      00709         movwf   TMP_REG_1
0336 6B57      00710         clrf    ACCUH            ; ACCUH <- 0
0338 5002      00711         movf    [0x2], W         ; W <- STKH + 0x80
033A 0F80      00712         addlw   0x80
033C 5D68      00713         subwf   TMP_REG_1, W     ; TMP_REG_1 - W
033E E102      00714         bnz     _GEINT_L0        ; if TMP_REG_1 <> W then goto L0
0340 5001      00715         movf    [0x1], W
0342 5D56      00716         subwf   ACCUL, W         ; ACCUL - STKL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0344 00717 _GEINT_L0:
0344 E2B8      00718         bc      _POP_ACCUL_TRUE  ; if C = 1 then ACCU <- TRUE
0346 D7BA      00719         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00720 
               00721 
               00722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00723 ;;;;;;;;                                   ;;;;;;;;
               00724 ;;;;;;;;         OFFSETS / STACK           ;;;;;;;;
               00725 ;;;;;;;;                                   ;;;;;;;;
               00726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00727 
0348 00728 _OFFSETINT:
               00729         M_READ_ARG
0348 0009          M                 tblrd*+
034A 50F5          M                 movf    TABLAT, W
034C 0009          M                 tblrd*+
034E 2756      00730         addwf   ACCUL, F
0350 50F5      00731         movf    TABLAT, W
0352 2357      00732         addwfc  ACCUH, F
0354 0012      00733         return
               00734 
0356 00735 _OFFSETREF:
0356 CF56 FFE9 00736         movff   ACCUL, FSR0L
035A CF57 FFEA 00737         movff   ACCUH, FSR0H
               00738         M_READ_ARG
035E 0009          M                 tblrd*+
0360 50F5          M                 movf    TABLAT, W
0362 0009          M                 tblrd*+
0364 26EE      00739         addwf   POSTINC0, F
0366 50F5      00740         movf    TABLAT, W
0368 22EF      00741         addwfc  INDF0, F
036A 0012      00742         return
               00743 
036C 00744 _ACC0_OFFSETREF:
036C E2F4      00745         bc      _OFFSETREF
               00746         M_ACC   0
036E EB01 FF56     M                 movsf   [2 * N + 1], ACCUL
0372 EB02 FF57     M                 movsf   [2 * N + 2], ACCUH
0376 0012      00747         return
               00748         
               00749 
               00750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00751 ;;;;;;;;                                   ;;;;;;;;
               00752 ;;;;;;;;          OBJECTS / STACK          ;;;;;;;;
               00753 ;;;;;;;;                                   ;;;;;;;;
               00754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00755 
0378 00756 _GETMETHOD:
0378 5001      00757         movf    [0x1], W                ; FSR0 <- stack_top
037A 6EE9      00758         movwf   FSR0L
037C 5002      00759         movf    [0x2], W
037E 6EEA      00760         movwf   FSR0H
0380 CFEE FF68 00761         movff   POSTINC0, TMP_REG_1     ; TMP_REG_1 <- stack_top[0]L
0384 50EF      00762         movf    INDF0, W                ; W <- stack_top[0]H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0386 6EEA      00763         movwf   FSR0H                   ; FSR0 <- stack_top[0]
0388 CF68 FFE9 00764         movff   TMP_REG_1, FSR0L
038C 0556      00765         decf    ACCUL, W                ; FSR0 <- FSR0 + 2*val_int(ACCU)
038E 26E9      00766         addwf   FSR0L, F
0390 5157      00767         movf    ACCUH, W
0392 22EA      00768         addwfc  FSR0H, F
0394 CFEE FF56 00769         movff   POSTINC0, ACCUL         ; ACCU <- *FSR0
0398 CFEE FF57 00770         movff   POSTINC0, ACCUH
039C 0012      00771         return
               00772 
039E 00773 _ACC2_GETMETHOD:
039E E2EC      00774         bc      _GETMETHOD
               00775         M_ACC   2
03A0 EB05 FF56     M                 movsf   [2 * N + 1], ACCUL
03A4 EB06 FF57     M                 movsf   [2 * N + 2], ACCUH
03A8 0012      00776         return
               00777 
03AA 00778 _GETPUBMET:
               00779         M_PUSH
03AA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
03AE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
03B2 0E0B          M                 movlw   (STACK_END - 0x1)
03B4 64DA          M                 cpfsgt  FSR2H
03B6 D29C          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
03B8 0009      00780         tblrd*+
03BA CFF5 FF56 00781         movff   TABLAT, ACCUL
03BE 0009      00782         tblrd*+
03C0 CFF5 FF57 00783         movff   TABLAT, ACCUH           ; fallthrough
03C4 00784 _GETDYNMET:
03C4 EB01 FFE9 00785         movsf   [0x1], FSR0L            ; FSR0 <- stack top
03C8 EB02 FFEA 00786         movsf   [0x2], FSR0H
03CC CFEE FF6B 00787         movff   POSTINC0, TMP_REG_4     ; methL = TMP_REG_4 <- low *FSR0
03D0 50EF      00788         movf    INDF0, W                ; methH = TMP_REG_5 <- high *FSR0
03D2 6F6C      00789         movwf   TMP_REG_5
03D4 6EEA      00790         movwf   FSR0H                   ; FSR0 <- meth
03D6 CF6B FFE9 00791         movff   TMP_REG_4, FSR0L
03DA 0E03      00792         movlw   0x3                     ; li = TMP_REG_1 <- 3
03DC 6F68      00793         movwf   TMP_REG_1
03DE CFEF FF69 00794         movff   INDF0, TMP_REG_2        ; hi = TMP_REG_2 <- FSR0[0]
03E2 00795 _GETMET_LOOP:
03E2 5168      00796         movf    TMP_REG_1, W            ; if li >= hi
03E4 6569      00797         cpfsgt  TMP_REG_2
03E6 D01D      00798         bra     _GETMET_END_LOOP        ; then goto _GETMET_END_LOOP else
03E8 2569      00799         addwf   TMP_REG_2, W            ; mi = TMP_REG_3 <- ((li + hi) >> 1) | 1
03EA 6F6A      00800         movwf   TMP_REG_3
03EC 336A      00801         rrcf    TMP_REG_3, F            ; (STATUS.C computed by addwf)
03EE 816A      00802         bsf     TMP_REG_3, 0
03F0 CF6C FFEA 00803         movff   TMP_REG_5, FSR0H        ; FSR0 <- TMP_REG_4:5 + TMP_REG_3 * 2
03F4 90D8      00804         bcf     STATUS, C
03F6 356A      00805         rlcf    TMP_REG_3, W
03F8 B0D8      00806         btfsc   STATUS, C
03FA 2AEA      00807         incf    FSR0H, F
03FC 256B      00808         addwf   TMP_REG_4, W
03FE 6EE9      00809         movwf   FSR0L
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0400 B0D8      00810         btfsc   STATUS, C
0402 2AEA      00811         incf    FSR0H, F
0404 E801      00812         addfsr  FSR0, 0x1
0406 50ED      00813         movf    POSTDEC0, W             ; if ACCU < *FSR0
0408 5D57      00814         subwf   ACCUH, W
040A E307      00815         bnc     _GETMET_THEN            ; then goto _GETMET_THEN
040C E103      00816         bnz     _GETMET_ELSE
040E 50EF      00817         movf    INDF0, W
0410 5D56      00818         subwf   ACCUL, W
0412 E303      00819         bnc     _GETMET_THEN            ; then goto _GETMET_THEN
0414 00820 _GETMET_ELSE:
0414 CF6A FF68 00821         movff   TMP_REG_3, TMP_REG_1    ; else li <- mi
0418 D7E4      00822         bra     _GETMET_LOOP            ; continue loop
041A 00823 _GETMET_THEN:
041A 0E02      00824         movlw   0x2                     ; hi <- mi - 2
041C 5D6A      00825         subwf   TMP_REG_3, W
041E 6F69      00826         movwf   TMP_REG_2
0420 D7E0      00827         bra     _GETMET_LOOP            ; continue loop
0422 00828 _GETMET_END_LOOP:
0422 CF6C FFEA 00829         movff   TMP_REG_5, FSR0H        ; FSR0 <- TMP_REG_4:5 + 2*(li & 0xFE)
0426 9168      00830         bcf     TMP_REG_1, 0
0428 90D8      00831         bcf     STATUS, C
042A 3568      00832         rlcf    TMP_REG_1, W
042C B0D8      00833         btfsc   STATUS, C
042E 2AEA      00834         incf    FSR0H, F
0430 256B      00835         addwf   TMP_REG_4, W
0432 6EE9      00836         movwf   FSR0L
0434 B0D8      00837         btfsc   STATUS, C
0436 2AEA      00838         incf    FSR0H, F
0438 CFEE FF56 00839         movff   POSTINC0, ACCUL         ; ACCU <- *FSR0
043C CFEF FF57 00840         movff   INDF0, ACCUH
0440 0012      00841         return
               00842 
0442 00843 _PUSHACC3_GETPUBMET:
0442 E2B3      00844         bc      _GETPUBMET
               00845         M_PUSH
0444 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0448 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
044C 0E0B          M                 movlw   (STACK_END - 0x1)
044E 64DA          M                 cpfsgt  FSR2H
0450 D24F          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00846         M_ACC   3
0452 EB07 FF56     M                 movsf   [2 * N + 1], ACCUL
0456 EB08 FF57     M                 movsf   [2 * N + 2], ACCUH
045A 0012      00847         return
               00848         
045C 00849 _PUSHACC4_GETDYNMET:
045C E2B3      00850         bc      _GETDYNMET
               00851         M_PUSH
045E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0462 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0466 0E0B          M                 movlw   (STACK_END - 0x1)
0468 64DA          M                 cpfsgt  FSR2H
046A D242          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00852         M_ACC   4
046C EB09 FF56     M                 movsf   [2 * N + 1], ACCUL
0470 EB0A FF57     M                 movsf   [2 * N + 2], ACCUH
0474 0012      00853         return
               00854 
               00855         
               00856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00857 ;;;;;;;;                                   ;;;;;;;;
               00858 ;;;;;;;;           ENVIRONMENT             ;;;;;;;;
               00859 ;;;;;;;;                                   ;;;;;;;;
               00860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00861 
0476 00862 _PUSHENVACC1:
               00863         M_PUSH                  ; fallthrough
0476 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
047A CF56 FFDD     M                 movff   ACCUL, POSTDEC2
047E 0E0B          M                 movlw   (STACK_END - 0x1)
0480 64DA          M                 cpfsgt  FSR2H
0482 D236          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0484 00864 _ENVACC1:
0484 CF54 FFE9 00865         movff   ENVL, FSR0L
0488 CF55 FFEA 00866         movff   ENVH, FSR0H
048C E802      00867         addfsr  FSR0, 0x2
048E CFEE FF56 00868         movff   POSTINC0, ACCUL
0492 CFEF FF57 00869         movff   INDF0, ACCUH
0496 0012      00870         return
               00871 
0498 00872 _PUSHENVACC2:
               00873         M_PUSH                  ; fallthrough
0498 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
049C CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04A0 0E0B          M                 movlw   (STACK_END - 0x1)
04A2 64DA          M                 cpfsgt  FSR2H
04A4 D225          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04A6 00874 _ENVACC2:
04A6 CF54 FFE9 00875         movff   ENVL, FSR0L
04AA CF55 FFEA 00876         movff   ENVH, FSR0H
04AE E804      00877         addfsr  FSR0, 0x4
04B0 CFEE FF56 00878         movff   POSTINC0, ACCUL
04B4 CFEF FF57 00879         movff   INDF0, ACCUH
04B8 0012      00880         return
               00881 
04BA 00882 _PUSHENVACC3:
               00883         M_PUSH                  ; fallthrough
04BA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
04BE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04C2 0E0B          M                 movlw   (STACK_END - 0x1)
04C4 64DA          M                 cpfsgt  FSR2H
04C6 D214          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04C8 00884 _ENVACC3:
04C8 CF54 FFE9 00885         movff   ENVL, FSR0L
04CC CF55 FFEA 00886         movff   ENVH, FSR0H
04D0 E806      00887         addfsr  FSR0, 0x6
04D2 CFEE FF56 00888         movff   POSTINC0, ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
04D6 CFEF FF57 00889         movff   INDF0, ACCUH
04DA 0012      00890         return
               00891 
04DC 00892 _PUSHENVACC4:
               00893         M_PUSH                  ; fallthrough
04DC CF57 FFDD     M                 movff   ACCUH, POSTDEC2
04E0 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04E4 0E0B          M                 movlw   (STACK_END - 0x1)
04E6 64DA          M                 cpfsgt  FSR2H
04E8 D203          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04EA 00894 _ENVACC4:
04EA CF54 FFE9 00895         movff   ENVL, FSR0L
04EE CF55 FFEA 00896         movff   ENVH, FSR0H
04F2 E808      00897         addfsr  FSR0, 0x8
04F4 CFEE FF56 00898         movff   POSTINC0, ACCUL
04F8 CFEF FF57 00899         movff   INDF0, ACCUH
04FC 0012      00900         return
               00901 
04FE 00902 _PUSHENVACC:
               00903         M_PUSH                  ; fallthrough
04FE CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0502 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0506 0E0B          M                 movlw   (STACK_END - 0x1)
0508 64DA          M                 cpfsgt  FSR2H
050A D1F2          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
050C 00904 _ENVACC:
050C CF54 FFE9 00905         movff   ENVL, FSR0L
0510 CF55 FFEA 00906         movff   ENVH, FSR0H
0514 0009      00907         tblrd*+
0516 50F5      00908         movf    TABLAT, W
0518 26E9      00909         addwf   FSR0L, F
051A B0D8      00910         btfsc   STATUS, C
051C 2AEA      00911         incf    FSR0H, F
051E 26E9      00912         addwf   FSR0L, F
0520 B0D8      00913         btfsc   STATUS, C
0522 2AEA      00914         incf    FSR0H, F
0524 CFEE FF56 00915         movff   POSTINC0, ACCUL
0528 CFEF FF57 00916         movff   INDF0, ACCUH
052C 0012      00917         return
               00918 
               00919 
               00920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00921 ;;;;;;;;                                   ;;;;;;;;
               00922 ;;;;;;;;               FIELDS              ;;;;;;;;
               00923 ;;;;;;;;                                   ;;;;;;;;
               00924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00925 
052E 00926 _GETFIELD0:
052E CF56 FFE9 00927         movff   ACCUL, FSR0L
0532 CF57 FFEA 00928         movff   ACCUH, FSR0H
0536 CFEE FF56 00929         movff   POSTINC0, ACCUL
053A CFEF FF57 00930         movff   INDF0, ACCUH
053E 0012      00931         return
               00932 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0540 00933 _GETFIELD1:
0540 CF56 FFE9 00934         movff   ACCUL, FSR0L
0544 CF57 FFEA 00935         movff   ACCUH, FSR0H
0548 E802      00936         addfsr  FSR0, 0x2
054A CFEE FF56 00937         movff   POSTINC0, ACCUL
054E CFEF FF57 00938         movff   INDF0, ACCUH
0552 0012      00939         return
               00940 
0554 00941 _GETFIELD2:
0554 CF56 FFE9 00942         movff   ACCUL, FSR0L
0558 CF57 FFEA 00943         movff   ACCUH, FSR0H
055C E804      00944         addfsr  FSR0, 0x4
055E CFEE FF56 00945         movff   POSTINC0, ACCUL
0562 CFEF FF57 00946         movff   INDF0, ACCUH
0566 0012      00947         return
               00948 
0568 00949 _GETFIELD3:
0568 CF56 FFE9 00950         movff   ACCUL, FSR0L
056C CF57 FFEA 00951         movff   ACCUH, FSR0H
0570 E806      00952         addfsr  FSR0, 0x6
0572 CFEE FF56 00953         movff   POSTINC0, ACCUL
0576 CFEF FF57 00954         movff   INDF0, ACCUH
057A 0012      00955         return
               00956 
057C 00957 _PUSHGETGLOBALFIELD:
               00958         M_PUSH                  ; fallthrough
057C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0580 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0584 0E0B          M                 movlw   (STACK_END - 0x1)
0586 64DA          M                 cpfsgt  FSR2H
0588 D1B3          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
058A 00959 _GETGLOBALFIELD:
               00960         M_GETGLOBAL             ; fallthrough
058A EE0F F053     M                 lfsr    FSR0, STACK_ANCHOR
                   M                 M_READ_ARG
058E 0009          M                 tblrd*+
0590 50F5          M                 movf    TABLAT, W
0592 0009          M                 tblrd*+
0594 5EE9          M                 subwf   FSR0L, F
0596 50F5          M                 movf    TABLAT, W
0598 5AEA          M                 subwfb  FSR0H, F
059A CFED FF57     M                 movff   POSTDEC0, ACCUH
059E CFEF FF56     M                 movff   INDF0, ACCUL
05A2 00961 _GETFIELD:
05A2 CF56 FFE9 00962         movff   ACCUL, FSR0L
05A6 CF57 FFEA 00963         movff   ACCUH, FSR0H
05AA 0009      00964         tblrd*+
05AC 50F5      00965         movf    TABLAT, W
05AE 26E9      00966         addwf   FSR0L, F
05B0 B0D8      00967         btfsc   STATUS, C
05B2 2AEA      00968         incf    FSR0H, F
05B4 26E9      00969         addwf   FSR0L, F
05B6 B0D8      00970         btfsc   STATUS, C
05B8 2AEA      00971         incf    FSR0H, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
05BA CFEE FF56 00972         movff   POSTINC0, ACCUL
05BE CFEF FF57 00973         movff   INDF0, ACCUH
05C2 0012      00974         return
               00975 
05C4 00976 _SETFIELD0:
05C4 CF56 FFE9 00977         movff   ACCUL, FSR0L
05C8 CF57 FFEA 00978         movff   ACCUH, FSR0H
05CC CFDC FFEE 00979         movff   PREINC2, POSTINC0
05D0 CFDC FFEF 00980         movff   PREINC2, INDF0
               00981         M_CONST 0
05D4 0E01          M                 movlw   2 * N + 1
05D6 6F56          M                 movwf   ACCUL
05D8 6B57          M                 clrf    ACCUH
05DA 0012      00982         return
               00983 
05DC 00984 _SETFIELD1:
05DC CF56 FFE9 00985         movff   ACCUL, FSR0L
05E0 CF57 FFEA 00986         movff   ACCUH, FSR0H
05E4 E802      00987         addfsr  FSR0, 0x2
05E6 CFDC FFEE 00988         movff   PREINC2, POSTINC0
05EA CFDC FFEF 00989         movff   PREINC2, INDF0
               00990         M_CONST 0
05EE 0E01          M                 movlw   2 * N + 1
05F0 6F56          M                 movwf   ACCUL
05F2 6B57          M                 clrf    ACCUH
05F4 0012      00991         return
               00992 
05F6 00993 _SETFIELD2:
05F6 CF56 FFE9 00994         movff   ACCUL, FSR0L
05FA CF57 FFEA 00995         movff   ACCUH, FSR0H
05FE E804      00996         addfsr  FSR0, 0x4
0600 CFDC FFEE 00997         movff   PREINC2, POSTINC0
0604 CFDC FFEF 00998         movff   PREINC2, INDF0
               00999         M_CONST 0
0608 0E01          M                 movlw   2 * N + 1
060A 6F56          M                 movwf   ACCUL
060C 6B57          M                 clrf    ACCUH
060E 0012      01000         return
               01001 
0610 01002 _SETFIELD3:
0610 CF56 FFE9 01003         movff   ACCUL, FSR0L
0614 CF57 FFEA 01004         movff   ACCUH, FSR0H
0618 E806      01005         addfsr  FSR0, 0x6
061A CFDC FFEE 01006         movff   PREINC2, POSTINC0
061E CFDC FFEF 01007         movff   PREINC2, INDF0
               01008         M_CONST 0
0622 0E01          M                 movlw   2 * N + 1
0624 6F56          M                 movwf   ACCUL
0626 6B57          M                 clrf    ACCUH
0628 0012      01009         return
               01010 
062A 01011 _SETFIELD:
062A CF56 FFE9 01012         movff   ACCUL, FSR0L
062E CF57 FFEA 01013         movff   ACCUH, FSR0H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0632 0009      01014         tblrd*+
0634 50F5      01015         movf    TABLAT, W
0636 26E9      01016         addwf   FSR0L, F
0638 B0D8      01017         btfsc   STATUS, C
063A 2AEA      01018         incf    FSR0H, F
063C 26E9      01019         addwf   FSR0L, F
063E B0D8      01020         btfsc   STATUS, C
0640 2AEA      01021         incf    FSR0H, F
0642 CFDC FFEE 01022         movff   PREINC2, POSTINC0
0646 CFDC FFEF 01023         movff   PREINC2, INDF0
               01024         M_CONST 0
064A 0E01          M                 movlw   2 * N + 1
064C 6F56          M                 movwf   ACCUL
064E 6B57          M                 clrf    ACCUH
0650 0012      01025         return
               01026 
0652 01027 _VECTLENGTH:
0652 CF56 FFE9 01028         movff   ACCUL, FSR0L
0656 CF57 FFEA 01029         movff   ACCUH, FSR0H
065A 6B57      01030         clrf    ACCUH
065C E902      01031         subfsr  FSR0, 0x2
065E 50EE      01032         movf    POSTINC0, W
0660 0AFE      01033         xorlw   DOUBLE_ARRAY_TAG
0662 E005      01034         bz      _VECTLENGTH_DOUBLE_ARRAY
0664 80D8      01035         bsf     STATUS, C
0666 34EF      01036         rlcf    INDF0, W
0668 6F56      01037         movwf   ACCUL
066A 3757      01038         rlcf    ACCUH, F
066C 0012      01039         return
066E 01040 _VECTLENGTH_DOUBLE_ARRAY:
066E CFEF FF56 01041         movff   INDF0, ACCUL
0672 8156      01042         bsf     ACCUL, 0
0674 0012      01043         return
               01044 
0676 01045 _GETVECTITEM:
0676 04DC      01046         decf    PREINC2, W
0678 2556      01047         addwf   ACCUL, W
067A 6EE9      01048         movwf   FSR0L
067C 5157      01049         movf    ACCUH, W
067E 20DC      01050         addwfc  PREINC2, W
0680 6EEA      01051         movwf   FSR0H
0682 CFEE FF56 01052         movff   POSTINC0, ACCUL
0686 CFEF FF57 01053         movff   INDF0, ACCUH
068A 0012      01054         return
               01055 
068C 01056 _SETVECTITEM:
068C 04DC      01057         decf    PREINC2, W
068E 2556      01058         addwf   ACCUL, W
0690 6EE9      01059         movwf   FSR0L
0692 5157      01060         movf    ACCUH, W
0694 20DC      01061         addwfc  PREINC2, W
0696 6EEA      01062         movwf   FSR0H
0698 CFDC FFEE 01063         movff   PREINC2, POSTINC0
069C CFDC FFEF 01064         movff   PREINC2, INDF0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01065         M_CONST 0
06A0 0E01          M                 movlw   2 * N + 1
06A2 6F56          M                 movwf   ACCUL
06A4 6B57          M                 clrf    ACCUH
06A6 0012      01066         return
               01067         
06A8 01068 _GETSTRINGCHAR:
06A8 90D8      01069         bcf     STATUS, C
06AA 3202      01070         rrcf    [0x2], F
06AC 30DC      01071         rrcf    PREINC2, W
06AE 2556      01072         addwf   ACCUL, W
06B0 6EE9      01073         movwf   FSR0L
06B2 5157      01074         movf    ACCUH, W
06B4 20DC      01075         addwfc  PREINC2, W
06B6 6EEA      01076         movwf   FSR0H
06B8 6B57      01077         clrf    ACCUH
06BA 80D8      01078         bsf     STATUS, C
06BC 34EF      01079         rlcf    INDF0, W
06BE 3757      01080         rlcf    ACCUH, F
06C0 6F56      01081         movwf   ACCUL
06C2 0012      01082         return
               01083 
06C4 01084 _SETSTRINGCHAR:
06C4 90D8      01085         bcf     STATUS, C
06C6 3202      01086         rrcf    [0x2], F
06C8 3001      01087         rrcf    [0x1], W
06CA 2556      01088         addwf   ACCUL, W
06CC 6EE9      01089         movwf   FSR0L
06CE 5157      01090         movf    ACCUH, W
06D0 2002      01091         addwfc  [0x2], W
06D2 6EEA      01092         movwf   FSR0H
06D4 3004      01093         rrcf    [0x4], W ; STATUS.C ignored
06D6 3003      01094         rrcf    [0x3], W
06D8 6EEF      01095         movwf   INDF0
               01096         M_CONST 0
06DA 0E01          M                 movlw   2 * N + 1
06DC 6F56          M                 movwf   ACCUL
06DE 6B57          M                 clrf    ACCUH
06E0 E8C4      01097         addulnk 0x4
               01098 
               01099 
               01100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01101 ;;;;;;;;                                   ;;;;;;;;
               01102 ;;;;;;;;              CONSTANTS            ;;;;;;;;
               01103 ;;;;;;;;                                   ;;;;;;;;
               01104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01105 
06E2 01106 _PUSHCONST0:
               01107         M_PUSH
06E2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
06E6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
06EA 0E0B          M                 movlw   (STACK_END - 0x1)
06EC 64DA          M                 cpfsgt  FSR2H
06EE D100          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
06F0 01108 _CONST0:
               01109         M_CONST 0
06F0 0E01          M                 movlw   2 * N + 1
06F2 6F56          M                 movwf   ACCUL
06F4 6B57          M                 clrf    ACCUH
06F6 0012      01110         return
               01111 
06F8 01112 _PUSHCONST1:
               01113         M_PUSH                  ; fallthrough
06F8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
06FC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0700 0E0B          M                 movlw   (STACK_END - 0x1)
0702 64DA          M                 cpfsgt  FSR2H
0704 D0F5          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0706 01114 _CONST1:
               01115         M_CONST 1
0706 0E03          M                 movlw   2 * N + 1
0708 6F56          M                 movwf   ACCUL
070A 6B57          M                 clrf    ACCUH
070C 0012      01116         return
               01117 
070E 01118 _PUSHCONST2:
               01119         M_PUSH                  ; fallthrough
070E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0712 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0716 0E0B          M                 movlw   (STACK_END - 0x1)
0718 64DA          M                 cpfsgt  FSR2H
071A D0EA          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
071C 01120 _CONST2:
               01121         M_CONST 2
071C 0E05          M                 movlw   2 * N + 1
071E 6F56          M                 movwf   ACCUL
0720 6B57          M                 clrf    ACCUH
0722 0012      01122         return
               01123 
0724 01124 _PUSHCONST3:
               01125         M_PUSH                  ; fallthrough
0724 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0728 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
072C 0E0B          M                 movlw   (STACK_END - 0x1)
072E 64DA          M                 cpfsgt  FSR2H
0730 D0DF          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0732 01126 _CONST3:
               01127         M_CONST 3
0732 0E07          M                 movlw   2 * N + 1
0734 6F56          M                 movwf   ACCUL
0736 6B57          M                 clrf    ACCUH
0738 0012      01128         return
               01129 
073A 01130 _PUSHCONST:
               01131         M_PUSH                  ; fallthrough
073A CF57 FFDD     M                 movff   ACCUH, POSTDEC2
073E CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0742 0E0B          M                 movlw   (STACK_END - 0x1)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0744 64DA          M                 cpfsgt  FSR2H
0746 D0D4          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0748 01132 _CONSTINT:
0748 0009      01133         tblrd*+
074A CFF5 FF56 01134         movff   TABLAT, ACCUL
074E 0009      01135         tblrd*+
0750 CFF5 FF57 01136         movff   TABLAT, ACCUH
0754 0012      01137         return
               01138         
               01139 
               01140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01141 ;;;;;;;;                                   ;;;;;;;;
               01142 ;;;;;;;;              LOGICAL              ;;;;;;;;
               01143 ;;;;;;;;                                   ;;;;;;;;
               01144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01145 
0756 01146 _ANDINT:
0756 50DC      01147         movf    PREINC2, W
0758 1756      01148         andwf   ACCUL, F
075A 50DC      01149         movf    PREINC2, W
075C 1757      01150         andwf   ACCUH, F
075E 0012      01151         return
               01152 
0760 01153 _ORINT:
0760 50DC      01154         movf    PREINC2, W
0762 1356      01155         iorwf   ACCUL, F
0764 50DC      01156         movf    PREINC2, W
0766 1357      01157         iorwf   ACCUH, F
0768 0012      01158         return
               01159 
076A 01160 _XORINT:
076A 50DC      01161         movf    PREINC2, W
076C 1B56      01162         xorwf   ACCUL, F
076E 50DC      01163         movf    PREINC2, W
0770 1B57      01164         xorwf   ACCUH, F
0772 8156      01165         bsf     ACCUL, 0
0774 0012      01166         return
               01167 
               01168 
               01169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01170 ;;;;;;;;                                   ;;;;;;;;
               01171 ;;;;;;;;              SHIFTS               ;;;;;;;;
               01172 ;;;;;;;;                                   ;;;;;;;;
               01173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01174 
0776 01175 _LSLINT:
0776 90D8      01176         bcf     STATUS, C
0778 3201      01177         rrcf    [0x1], F
077A E007      01178         bz      _END_LSLINT
077C 9156      01179         bcf     ACCUL, 0
077E 01180 _LOOP_LSLINT:
077E 90D8      01181         bcf     STATUS, C
0780 3756      01182         rlcf    ACCUL, F
0782 3757      01183         rlcf    ACCUH, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0784 2E01      01184         decfsz  [0x1], F
0786 D7FB      01185         bra     _LOOP_LSLINT
0788 8156      01186         bsf     ACCUL, 0
078A 01187 _END_LSLINT:
078A E8C2      01188         addulnk 0x2
               01189         
078C 01190 _LSRINT:
078C 90D8      01191         bcf     STATUS, C
078E 3201      01192         rrcf    [0x1], F
0790 E006      01193         bz      _END_LSRINT
0792 01194 _LOOP_LSRINT:
0792 90D8      01195         bcf     STATUS, C
0794 3357      01196         rrcf    ACCUH, F
0796 3356      01197         rrcf    ACCUL, F
0798 2E01      01198         decfsz  [0x1], F
079A D7FB      01199         bra     _LOOP_LSRINT
079C 8156      01200         bsf     ACCUL, 0
079E 01201 _END_LSRINT:
079E E8C2      01202         addulnk 0x2
               01203         
07A0 01204 _ASRINT:
07A0 90D8      01205         bcf     STATUS, C
07A2 3201      01206         rrcf    [0x1], F
07A4 E006      01207         bz      _END_ASRINT
07A6 01208 _LOOP_ASRINT:
07A6 3557      01209         rlcf    ACCUH, W ; STATUS.C ignored
07A8 3357      01210         rrcf    ACCUH, F
07AA 3356      01211         rrcf    ACCUL, F
07AC 2E01      01212         decfsz  [0x1], F
07AE D7FB      01213         bra     _LOOP_ASRINT
07B0 8156      01214         bsf     ACCUL, 0
07B2 01215 _END_ASRINT:
07B2 E8C2      01216         addulnk 0x2
               01217         
               01218 
               01219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01220 ;;;;;;;;                                   ;;;;;;;;
               01221 ;;;;;;;;               CCALLS              ;;;;;;;;
               01222 ;;;;;;;;                                   ;;;;;;;;
               01223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01224 
07B4 01225 _CCALL1:
               01226         M_CCALL
07B4 0E0B          M                 movlw   ((high caml_externals) / 2)
07B6 6EFA          M                 movwf   PCLATH
07B8 0009          M                 tblrd*+
07BA 34F5          M                 rlcf    TABLAT, W
07BC 36FA          M                 rlcf    PCLATH, F
07BE 0014          M                 callw
07C0 0E09          M                 movlw   high _THE_BIG_SWITCH
07C2 6EFA          M                 movwf   PCLATH
07C4 0012      01227         return
               01228 
07C6 01229 _CCALL2:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01230         M_CCALL
07C6 0E0B          M                 movlw   ((high caml_externals) / 2)
07C8 6EFA          M                 movwf   PCLATH
07CA 0009          M                 tblrd*+
07CC 34F5          M                 rlcf    TABLAT, W
07CE 36FA          M                 rlcf    PCLATH, F
07D0 0014          M                 callw
07D2 0E09          M                 movlw   high _THE_BIG_SWITCH
07D4 6EFA          M                 movwf   PCLATH
07D6 E8C2      01231         addulnk 0x2
               01232 
07D8 01233 _CCALL3:
               01234         M_CCALL
07D8 0E0B          M                 movlw   ((high caml_externals) / 2)
07DA 6EFA          M                 movwf   PCLATH
07DC 0009          M                 tblrd*+
07DE 34F5          M                 rlcf    TABLAT, W
07E0 36FA          M                 rlcf    PCLATH, F
07E2 0014          M                 callw
07E4 0E09          M                 movlw   high _THE_BIG_SWITCH
07E6 6EFA          M                 movwf   PCLATH
07E8 E8C4      01235         addulnk 0x4
               01236 
07EA 01237 _CCALL4:
               01238         M_CCALL
07EA 0E0B          M                 movlw   ((high caml_externals) / 2)
07EC 6EFA          M                 movwf   PCLATH
07EE 0009          M                 tblrd*+
07F0 34F5          M                 rlcf    TABLAT, W
07F2 36FA          M                 rlcf    PCLATH, F
07F4 0014          M                 callw
07F6 0E09          M                 movlw   high _THE_BIG_SWITCH
07F8 6EFA          M                 movwf   PCLATH
07FA E8C6      01239         addulnk 0x6
               01240 
07FC 01241 _CCALL5:
               01242         M_CCALL
07FC 0E0B          M                 movlw   ((high caml_externals) / 2)
07FE 6EFA          M                 movwf   PCLATH
0800 0009          M                 tblrd*+
0802 34F5          M                 rlcf    TABLAT, W
0804 36FA          M                 rlcf    PCLATH, F
0806 0014          M                 callw
0808 0E09          M                 movlw   high _THE_BIG_SWITCH
080A 6EFA          M                 movwf   PCLATH
080C E8C8      01243         addulnk 0x8
               01244 
080E 01245 _CCALL:
               01246         M_CCALL
080E 0E0B          M                 movlw   ((high caml_externals) / 2)
0810 6EFA          M                 movwf   PCLATH
0812 0009          M                 tblrd*+
0814 34F5          M                 rlcf    TABLAT, W
0816 36FA          M                 rlcf    PCLATH, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0818 0014          M                 callw
081A 0E09          M                 movlw   high _THE_BIG_SWITCH
081C 6EFA          M                 movwf   PCLATH
081E 0009      01247         tblrd*+
0820 50F5      01248         movf    TABLAT, W
0822 26D9      01249         addwf   FSR2L, F
0824 B0D8      01250         btfsc   STATUS, C
0826 2ADA      01251         incf    FSR2H, F
0828 26D9      01252         addwf   FSR2L, F
082A B0D8      01253         btfsc   STATUS, C
082C 2ADA      01254         incf    FSR2H, F
082E 0012      01255         return
               01256 
               01257 
               01258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01259 ;;;;;;;;                                   ;;;;;;;;
               01260 ;;;;;;;;              JUMPS                ;;;;;;;;
               01261 ;;;;;;;;                                   ;;;;;;;;
               01262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01263 
0830 01264 _BRANCH:
               01265         M_READ_ARG
0830 0009          M                 tblrd*+
0832 50F5          M                 movf    TABLAT, W
0834 0009          M                 tblrd*+
0836 6EF6      01266         movwf   TBLPTRL
0838 50F5      01267         movf    TABLAT, W
083A 6EF7      01268         movwf   TBLPTRH
083C 0012      01269         return
               01270 
083E 01271 _BRANCHIF:
083E 0556      01272         decf    ACCUL, W
0840 1157      01273         iorwf   ACCUH, W
0842 E1F6      01274         bnz     _BRANCH
0844 0E02      01275         movlw   0x2
0846 26F6      01276         addwf   TBLPTRL, F
0848 B0D8      01277         btfsc   STATUS, C
084A 2AF7      01278         incf    TBLPTRH, F
084C 0012      01279         return
               01280 
084E 01281 _BRANCHIFNOT:
084E 0556      01282         decf    ACCUL, W
0850 1157      01283         iorwf   ACCUH, W
0852 E0EE      01284         bz      _BRANCH
0854 0E02      01285         movlw   0x2
0856 26F6      01286         addwf   TBLPTRL, F
0858 B0D8      01287         btfsc   STATUS, C
085A 2AF7      01288         incf    TBLPTRH, F
085C 0012      01289         return
               01290 
085E 01291 _SWITCH:
085E B156      01292         btfsc   ACCUL, 0          ; if isint(ACCU)
0860 D01B      01293         bra     _SWITCH_LONG      ; then goto _SWITCH_LONG else
0862 0009      01294         tblrd*+                   ; TABLAT <- sizeLong
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0864 50F5      01295         movf    TABLAT, W         ; TBLPTR <- TBLPTR + 2*sizeLong
0866 26F6      01296         addwf   TBLPTRL, F
0868 B0D8      01297         btfsc   STATUS, C
086A 2AF7      01298         incf    TBLPTRH, F
086C 26F6      01299         addwf   TBLPTRL, F
086E B0D8      01300         btfsc   STATUS, C
0870 2AF7      01301         incf    TBLPTRH, F
0872 CF56 FFE9 01302         movff   ACCUL, FSR0L      ; TBLPTR <- TBLPTR + 2*tag(ACCU)
0876 CF57 FFEA 01303         movff   ACCUH, FSR0H
087A E902      01304         subfsr  FSR0, 0x2
087C 50EF      01305         movf    INDF0, W
087E 26F6      01306         addwf   TBLPTRL, F
0880 B0D8      01307         btfsc   STATUS, C
0882 2AF7      01308         incf    TBLPTRH, F
0884 26F6      01309         addwf   TBLPTRL, F
0886 B0D8      01310         btfsc   STATUS, C
0888 2AF7      01311         incf    TBLPTRH, F
               01312         M_READ_ARG                ; TBLPTR <- *TBLPTR
088A 0009          M                 tblrd*+
088C 50F5          M                 movf    TABLAT, W
088E 0009          M                 tblrd*+
0890 CFF5 FFF7 01313         movff   TABLAT, TBLPTRH
0894 6EF6      01314         movwf   TBLPTRL
0896 0012      01315         return
0898 01316 _SWITCH_LONG:
0898 5156      01317         movf    ACCUL, W          ; TBLPTR <- TBLPTR + 2*int_val(ACCU) + 1
089A 26F6      01318         addwf   TBLPTRL, F
089C 5157      01319         movf    ACCUH, W
089E 22F7      01320         addwfc  TBLPTRH, F
               01321         M_READ_ARG                ; TBLPTR <- *TBLPTR
08A0 0009          M                 tblrd*+
08A2 50F5          M                 movf    TABLAT, W
08A4 0009          M                 tblrd*+
08A6 6EF6      01322         movwf   TBLPTRL
08A8 CFF5 FFF7 01323         movff   TABLAT, TBLPTRH
08AC 0012      01324         return
               01325 
               01326 
               01327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01328 ;;;;;;;;                                   ;;;;;;;;
               01329 ;;;;;;;;             GLOBALS               ;;;;;;;;
               01330 ;;;;;;;;                                   ;;;;;;;;
               01331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01332 
08AE 01333 _SETGLOBAL:
08AE EE0F F053 01334         lfsr    FSR0, STACK_ANCHOR
               01335         M_READ_ARG
08B2 0009          M                 tblrd*+
08B4 50F5          M                 movf    TABLAT, W
08B6 0009          M                 tblrd*+
08B8 5EE9      01336         subwf   FSR0L, F
08BA 50F5      01337         movf    TABLAT, W
08BC 5AEA      01338         subwfb  FSR0H, F
08BE CF57 FFED 01339         movff   ACCUH, POSTDEC0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
08C2 CF56 FFED 01340         movff   ACCUL, POSTDEC0
08C6 0012      01341         return
               01342 
08C8 01343 _PUSHGETGLOBAL:
               01344         M_PUSH                  ; fallthrough
08C8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
08CC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
08D0 0E0B          M                 movlw   (STACK_END - 0x1)
08D2 64DA          M                 cpfsgt  FSR2H
08D4 D00D          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
08D6 01345 _GETGLOBAL:
               01346         M_GETGLOBAL
08D6 EE0F F053     M                 lfsr    FSR0, STACK_ANCHOR
                   M                 M_READ_ARG
08DA 0009          M                 tblrd*+
08DC 50F5          M                 movf    TABLAT, W
08DE 0009          M                 tblrd*+
08E0 5EE9          M                 subwf   FSR0L, F
08E2 50F5          M                 movf    TABLAT, W
08E4 5AEA          M                 subwfb  FSR0H, F
08E6 CFED FF57     M                 movff   POSTDEC0, ACCUH
08EA CFEF FF56     M                 movff   INDF0, ACCUL
08EE 0012      01347         return
               01348 
               01349 
               01350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01351 ;;;;;;;;                                   ;;;;;;;;
               01352 ;;;;;;;;               TOOLS               ;;;;;;;;
               01353 ;;;;;;;;                                   ;;;;;;;;
               01354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01355 
08F0 01356 _INDIRECT_CAML_RAISE_STACK_OVERFLOW:
08F0 EFCD F009 01357         goto    caml_raise_stack_overflow
               01358         
               01359 
               01360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01361 ;;;;;;;;                                   ;;;;;;;;
               01362 ;;;;;;;;          THE BIG SWITCH           ;;;;;;;;
               01363 ;;;;;;;;                                   ;;;;;;;;
               01364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01365 
0900           01366         org     0x900
0900 01367 _THE_BIG_SWITCH:
0900 D535      01368         bra     _ACC0_OFFSETREF      ; opcode = 0  or 128
0902 D315      01369         bra     _ACC1_ISINT          ; opcode = 1  or 129
0904 D54C      01370         bra     _ACC2_GETMETHOD      ; opcode = 2  or 130
0906 D43C      01371         bra     _ACC3_BEQ            ; opcode = 3  or 131
0908 D441      01372         bra     _ACC4_BNEQ           ; opcode = 4  or 132
090A D446      01373         bra     _ACC5_BLTINT         ; opcode = 5  or 133
090C D44B      01374         bra     _ACC6_BLEINT         ; opcode = 6  or 134
090E D450      01375         bra     _ACC7_BGTINT         ; opcode = 7  or 135
0910 D481      01376         bra     _ACC_BGEINT          ; opcode = 8  or 136
0912 D46E      01377         bra     _PUSH_ULTINT         ; opcode = 9  or 137
0914 D476      01378         bra     _PUSHACC0_UGEINT     ; opcode = 10 or 138
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0916 D452      01379         bra     _PUSHACC1_BULTINT    ; opcode = 11 or 139
0918 D45E      01380         bra     _PUSHACC2_BUGEINT    ; opcode = 12 or 140
091A D593      01381         bra     _PUSHACC3_GETPUBMET  ; opcode = 13 or 141
091C D59F      01382         bra     _PUSHACC4_GETDYNMET  ; opcode = 14 or 142
091E D30D      01383         bra     _PUSHACC5_STOP       ; opcode = 15 or 143
0920 D319      01384         bra     _PUSHACC6_EVENT      ; opcode = 16 or 144
0922 D324      01385         bra     _PUSHACC7_BREAK      ; opcode = 17 or 145
0924 D487      01386         bra     _PUSHACC_INTRETURN   ; opcode = 18 or 146
0926 D49C      01387         bra     _POP_INTRAISE        ; opcode = 19 or 147
0928 D4A2      01388         bra     _ASSIGN              ; opcode = 20
092A D5AC      01389         bra     _ENVACC1             ; opcode = 21
092C D5BC      01390         bra     _ENVACC2             ; opcode = 22
092E D5CC      01391         bra     _ENVACC3             ; opcode = 23
0930 D5DC      01392         bra     _ENVACC4             ; opcode = 24
0932 D5EC      01393         bra     _ENVACC              ; opcode = 25
0934 D5A0      01394         bra     _PUSHENVACC1         ; opcode = 26
0936 D5B0      01395         bra     _PUSHENVACC2         ; opcode = 27
0938 D5C0      01396         bra     _PUSHENVACC3         ; opcode = 28
093A D5D0      01397         bra     _PUSHENVACC4         ; opcode = 29
093C D5E0      01398         bra     _PUSHENVACC          ; opcode = 30
093E D16A      01399         bra     _PUSHRETADDR         ; opcode = 31
0940 D17E      01400         bra     _APPLY               ; opcode = 32
0942 D18B      01401         bra     _APPLY1              ; opcode = 33
0944 D1AE      01402         bra     _APPLY2              ; opcode = 34
0946 D1D5      01403         bra     _APPLY3              ; opcode = 35
0948 D200      01404         bra     _APPTERM             ; opcode = 36
094A D222      01405         bra     _APPTERM1            ; opcode = 37
094C D23A      01406         bra     _APPTERM2            ; opcode = 38
094E D258      01407         bra     _APPTERM3            ; opcode = 39
0950 D27A      01408         bra     _RETURN              ; opcode = 40
0952 D298      01409         bra     _RESTART             ; opcode = 41
0954 D2B4      01410         bra     _GRAB                ; opcode = 42
0956 D08D      01411         bra     _CLOSURE             ; opcode = 43
0958 D0B1      01412         bra     _CLOSUREREC          ; opcode = 44
095A D11B      01413         bra     _OFFSETCLOSUREM2     ; opcode = 45
095C D129      01414         bra     _OFFSETCLOSURE0      ; opcode = 46
095E D134      01415         bra     _OFFSETCLOSURE2      ; opcode = 47
0960 D142      01416         bra     _OFFSETCLOSURE       ; opcode = 48
0962 D110      01417         bra     _PUSHOFFSETCLOSUREM2 ; opcode = 49
0964 D11E      01418         bra     _PUSHOFFSETCLOSURE0  ; opcode = 50
0966 D129      01419         bra     _PUSHOFFSETCLOSURE2  ; opcode = 51
0968 D137      01420         bra     _PUSHOFFSETCLOSURE   ; opcode = 52
096A D7B5      01421         bra     _GETGLOBAL           ; opcode = 53
096C D7AD      01422         bra     _PUSHGETGLOBAL       ; opcode = 54
096E D60D      01423         bra     _GETGLOBALFIELD      ; opcode = 55
0970 D605      01424         bra     _PUSHGETGLOBALFIELD  ; opcode = 56
0972 D79D      01425         bra     _SETGLOBAL           ; opcode = 57
0974 D310      01426         bra     _ATOM0               ; opcode = 58
0976 D306      01427         bra     _ATOM                ; opcode = 59
0978 D307      01428         bra     _PUSHATOM0           ; opcode = 60
097A D304      01429         bra     _PUSHATOM            ; opcode = 61
097C D311      01430         bra     _MAKEBLOCK           ; opcode = 62
097E D330      01431         bra     _MAKEBLOCK1          ; opcode = 63
0980 D34D      01432         bra     _MAKEBLOCK2          ; opcode = 64
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0982 D36E      01433         bra     _MAKEBLOCK3          ; opcode = 65
0984 D393      01434         bra     _MAKEFLOATBLOCK      ; opcode = 66
0986 D5D3      01435         bra     _GETFIELD0           ; opcode = 67
0988 D5DB      01436         bra     _GETFIELD1           ; opcode = 68
098A D5E4      01437         bra     _GETFIELD2           ; opcode = 69
098C D5ED      01438         bra     _GETFIELD3           ; opcode = 70
098E D609      01439         bra     _GETFIELD            ; opcode = 71
0990 D3B5      01440         bra     _GETFLOATFIELD       ; opcode = 72
0992 D618      01441         bra     _SETFIELD0           ; opcode = 73
0994 D623      01442         bra     _SETFIELD1           ; opcode = 74
0996 D62F      01443         bra     _SETFIELD2           ; opcode = 75
0998 D63B      01444         bra     _SETFIELD3           ; opcode = 76
099A D647      01445         bra     _SETFIELD            ; opcode = 77
099C D3DB      01446         bra     _SETFLOATFIELD       ; opcode = 78
099E D659      01447         bra     _VECTLENGTH          ; opcode = 79
09A0 D66A      01448         bra     _GETVECTITEM         ; opcode = 80
09A2 D674      01449         bra     _SETVECTITEM         ; opcode = 81
09A4 D681      01450         bra     _GETSTRINGCHAR       ; opcode = 82
09A6 D68E      01451         bra     _SETSTRINGCHAR       ; opcode = 83
09A8 D743      01452         bra     _BRANCH              ; opcode = 84
09AA D749      01453         bra     _BRANCHIF            ; opcode = 85
09AC D750      01454         bra     _BRANCHIFNOT         ; opcode = 86
09AE D757      01455         bra     _SWITCH              ; opcode = 87
09B0 D3F8      01456         bra     _BOOLNOT             ; opcode = 88
09B2 D026      01457         bra     _PUSHTRAP            ; opcode = 89
09B4 D042      01458         bra     _POPTRAP             ; opcode = 90
09B6 D046      01459         bra     _RAISE               ; opcode = 91
09B8 D2E5      01460         bra     _CHECKSIGNALS        ; opcode = 92
09BA D6FC      01461         bra     _CCALL1              ; opcode = 93
09BC D704      01462         bra     _CCALL2              ; opcode = 94
09BE D70C      01463         bra     _CCALL3              ; opcode = 95
09C0 D714      01464         bra     _CCALL4              ; opcode = 96
09C2 D71C      01465         bra     _CCALL5              ; opcode = 97
09C4 D724      01466         bra     _CCALL               ; opcode = 98
09C6 D694      01467         bra     _CONST0              ; opcode = 99
09C8 D69E      01468         bra     _CONST1              ; opcode = 100
09CA D6A8      01469         bra     _CONST2              ; opcode = 101
09CC D6B2      01470         bra     _CONST3              ; opcode = 102
09CE D6BC      01471         bra     _CONSTINT            ; opcode = 103
09D0 D688      01472         bra     _PUSHCONST0          ; opcode = 104
09D2 D692      01473         bra     _PUSHCONST1          ; opcode = 105
09D4 D69C      01474         bra     _PUSHCONST2          ; opcode = 106
09D6 D6A6      01475         bra     _PUSHCONST3          ; opcode = 107
09D8 D6B0      01476         bra     _PUSHCONST           ; opcode = 108
09DA D3EE      01477         bra     _NEGINT              ; opcode = 109
09DC D3F4      01478         bra     _ADDINT              ; opcode = 110
09DE D3F8      01479         bra     _SUBINT              ; opcode = 111
09E0 D3E8      01480         bra     _MULINT              ; opcode = 112
09E2 D3E9      01481         bra     _DIVINT              ; opcode = 113
09E4 D3E7      01482         bra     _MODINT              ; opcode = 114
09E6 D6B7      01483         bra     _ANDINT              ; opcode = 115
09E8 D6BB      01484         bra     _ORINT               ; opcode = 116
09EA D6BF      01485         bra     _XORINT              ; opcode = 117
09EC D6C4      01486         bra     _LSLINT              ; opcode = 118
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
09EE D6CE      01487         bra     _LSRINT              ; opcode = 119
09F0 D6D7      01488         bra     _ASRINT              ; opcode = 120
09F2 D467      01489         bra     _EQ                  ; opcode = 121
09F4 D471      01490         bra     _NEQ                 ; opcode = 122
09F6 D47A      01491         bra     _LTINT               ; opcode = 123
09F8 D485      01492         bra     _LEINT               ; opcode = 124
09FA D48F      01493         bra     _GTINT               ; opcode = 125
09FC D499      01494         bra     _GEINT               ; opcode = 126
09FE D4A4      01495         bra     _OFFSETINT           ; opcode = 127
               01496 
               01497         
               01498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01499 ;;;;;;;;                                   ;;;;;;;;
               01500 ;;;;;;;;              EXCEPTIONS           ;;;;;;;;
               01501 ;;;;;;;;                                   ;;;;;;;;
               01502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01503 
0A00 01504 _PUSHTRAP:
               01505         M_CHECK_UNFULL_STACK 0x4
0A00 0E0C          M                 movlw   STACK_END
0A02 62DA          M                 cpfseq  FSR2H
0A04 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0A06 0EF8          M                 movlw   -(0x2 * N)
0A08 24D9          M                 addwf   FSR2L, W
0A0A A0D8          M                 btfss   STATUS, C
0A0C D771          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0A0E     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000001         M CPT_CUS = CPT_CUS + 1
0A0E 6ADD      01506         clrf    POSTDEC2                ; push extraArgs
0A10 CF62 FFDD 01507         movff   EXTRA_ARGS, POSTDEC2
0A14 CF55 FFDD 01508         movff   ENVH, POSTDEC2          ; push environment
0A18 CF54 FFDD 01509         movff   ENVL, POSTDEC2
0A1C CF61 FFDD 01510         movff   TRAP_SPH, POSTDEC2      ; push trapSp
0A20 CF60 FFDD 01511         movff   TRAP_SPL, POSTDEC2
               01512         M_READ_ARG                      ; push catchPc
0A24 0009          M                 tblrd*+
0A26 50F5          M                 movf    TABLAT, W
0A28 0009          M                 tblrd*+
0A2A CFF5 FFDD 01513         movff   TABLAT, POSTDEC2
0A2E 6EDD      01514         movwf   POSTDEC2
0A30 CFD9 FF60 01515         movff   FSR2L, TRAP_SPL         ; trapSp <- top of stack
0A34 CFDA FF61 01516         movff   FSR2H, TRAP_SPH
0A38 0012      01517         return
               01518 
0A3A 01519 _POPTRAP:
0A3A 5003      01520         movf    [0x3], W                ; restore trapSp
0A3C 6F60      01521         movwf   TRAP_SPL
0A3E 5004      01522         movf    [0x4], W
0A40 6F61      01523         movwf   TRAP_SPH
0A42 E8C8      01524         addulnk 0x8                     ; pop 4 elements and return
               01525 
0A44 01526 _RAISE:
0A44 0560      01527         decf    TRAP_SPL, W             ; trapSp = 0 ?
0A46 1161      01528         iorwf   TRAP_SPH, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0A48 B4D8      01529         btfsc   STATUS, Z
0A4A D29C      01530         bra     _STOP                   ; yes -> stop
0A4C CF60 FFD9 01531         movff   TRAP_SPL, FSR2L         ; no -> restore stack top
0A50 CF61 FFDA 01532         movff   TRAP_SPH, FSR2H
0A54 CFDC FFF6 01533         movff   PREINC2, TBLPTRL        ; set code pointer
0A58 CFDC FFF7 01534         movff   PREINC2, TBLPTRH
0A5C CFDC FF60 01535         movff   PREINC2, TRAP_SPL       ; restore trapSp
0A60 CFDC FF61 01536         movff   PREINC2, TRAP_SPH
0A64 CFDC FF54 01537         movff   PREINC2, ENVL           ; restore environment
0A68 CFDC FF55 01538         movff   PREINC2, ENVH
0A6C CFDC FF62 01539         movff   PREINC2, EXTRA_ARGS     ; restore extraArgs
0A70 E8C1      01540         addulnk 0x1
               01541 
               01542 
               01543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01544 ;;;;;;;;                                   ;;;;;;;;
               01545 ;;;;;;;;              CLOSURES             ;;;;;;;;
               01546 ;;;;;;;;                                   ;;;;;;;;
               01547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01548 
0A72 01549 _CLOSURE:
0A72 0009      01550         tblrd*+                         ; read closure size (= nbArg + 1)
0A74 EC03 F00A 01551         call    _CHECK_UNFULL_HEAP_GEN
0A78 0EF7      01552         movlw   CLOSURE_TAG             ; write tag
0A7A 6EE6      01553         movwf   POSTINC1
0A7C 50F5      01554         movf    TABLAT, W               ; write size
0A7E 6EE6      01555         movwf   POSTINC1
0A80 6F68      01556         movwf   TMP_REG_1               ; TMP_REG_1 <- size
0A82 CF56 FF69 01557         movff   ACCUL, TMP_REG_2        ; TMP_REG_3:2 <- ACCU
0A86 CF57 FF6A 01558         movff   ACCUH, TMP_REG_3
0A8A CFE1 FF56 01559         movff   FSR1L, ACCUL            ; ACCU <- closure
0A8E CFE2 FF57 01560         movff   FSR1H, ACCUH
0A92 0009      01561         tblrd*+                         ; read/write closure code pointer
0A94 CFF5 FFE6 01562         movff   TABLAT, POSTINC1
0A98 0009      01563         tblrd*+
0A9A CFF5 FFE6 01564         movff   TABLAT, POSTINC1
0A9E 4F68      01565         dcfsnz  TMP_REG_1, F            ; decr TMP_REG_1
0AA0 0012      01566         return                          ; if nbArg = 0 then closure done
0AA2 CF69 FFE6 01567         movff   TMP_REG_2, POSTINC1     ; closure[1] <- TMP_REG_3:2
0AA6 CF6A FFE6 01568         movff   TMP_REG_3, POSTINC1
0AAA 4F68      01569         dcfsnz  TMP_REG_1, F            ; decf TMP_REG_1
0AAC 0012      01570         return                          ; if nbArg = 1 then closure done
0AAE 01571 _CLOSURE_LOOP:
0AAE CFDC FFE6 01572         movff   PREINC2, POSTINC1       ; closure[i] <- pop ()
0AB2 CFDC FFE6 01573         movff   PREINC2, POSTINC1
0AB6 2F68      01574         decfsz  TMP_REG_1, F            ; loop nbArg - 1 times
0AB8 D7FA      01575         bra     _CLOSURE_LOOP
0ABA 0012      01576         return                          ; closure done
               01577 
0ABC 01578 _CLOSUREREC:
0ABC 0009      01579         tblrd*+                         ; read nbFuncs
0ABE 04F5      01580         decf    TABLAT, W
0AC0 6F68      01581         movwf   TMP_REG_1               ; TMP_REG_1 <- nbFuncs - 1
0AC2 0009      01582         tblrd*+                         ; read nbVars
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0AC4 CFF5 FF69 01583         movff   TABLAT, TMP_REG_2       ; TMP_REG_2 <- nbVars
0AC8 2968      01584         incf    TMP_REG_1, W            ; compute size: 2 * nbFuncs - 1 + nbVars
0ACA 2568      01585         addwf   TMP_REG_1, W
0ACC 2569      01586         addwf   TMP_REG_2, W
0ACE 6F6A      01587         movwf   TMP_REG_3               ; TMP_REG_3 <- closure size
0AD0 6EF5      01588         movwf   TABLAT                  ; TABLAT <- closure size
0AD2 EC03 F00A 01589         call    _CHECK_UNFULL_HEAP_GEN  ; check allocation
0AD6 0EF7      01590         movlw   CLOSURE_TAG             ; write tag
0AD8 6EE6      01591         movwf   POSTINC1
0ADA 516A      01592         movf    TMP_REG_3, W            ; write size
0ADC 6EE6      01593         movwf   POSTINC1
0ADE CF56 FF6A 01594         movff   ACCUL, TMP_REG_3        ; TMP_REG_4:3 <- ACCU
0AE2 CF57 FF6B 01595         movff   ACCUH, TMP_REG_4
0AE6 CFE1 FF56 01596         movff   FSR1L, ACCUL            ; ACCU <- @closure
0AEA CFE2 FF57 01597         movff   FSR1H, ACCUH
0AEE 0009      01598         tblrd*+                         ; closure[0] <- closure pc
0AF0 CFF5 FFE6 01599         movff   TABLAT, POSTINC1
0AF4 0009      01600         tblrd*+
0AF6 CFF5 FFE6 01601         movff   TABLAT, POSTINC1
0AFA CFE1 FFE9 01602         movff   FSR1L, FSR0L            ; FSR0 <- FSR1
0AFE CFE2 FFEA 01603         movff   FSR1H, FSR0H
0B02 5168      01604         movf    TMP_REG_1, W            ; FSR1 += 4 * (nbFuncs - 1)
0B04 2568      01605         addwf   TMP_REG_1, W
0B06 26E1      01606         addwf   FSR1L, F
0B08 B0D8      01607         btfsc   STATUS, C
0B0A 2AE2      01608         incf    FSR1H, F
0B0C 26E1      01609         addwf   FSR1L, F
0B0E B0D8      01610         btfsc   STATUS, C
0B10 2AE2      01611         incf    FSR1H, F
0B12 5369      01612         movf    TMP_REG_2, F            ; nbVars = 0 ?
0B14 E00C      01613         bz      _CLOSUREREC_NO_VARS     ; yes => no var to copy
0B16 CF6A FFE6 01614         movff   TMP_REG_3, POSTINC1     ; closure[i] <- TMP_REG_4:3 (old ACCU)
0B1A CF6B FFE6 01615         movff   TMP_REG_4, POSTINC1
0B1E 0769      01616         decf    TMP_REG_2, F            ; decr TMP_REG_2
0B20 E006      01617         bz      _CLOSUREREC_NO_VARS     ; if no var to copy => skip loop
0B22 01618 _CLOSUREREC_LOOP_VARS:
0B22 CFDC FFE6 01619         movff   PREINC2, POSTINC1       ; closure[i] = pop ()
0B26 CFDC FFE6 01620         movff   PREINC2, POSTINC1
0B2A 2F69      01621         decfsz  TMP_REG_2, F            ; loop nbVars - 1 times
0B2C D7FA      01622         bra     _CLOSUREREC_LOOP_VARS
0B2E 01623 _CLOSUREREC_NO_VARS:
               01624         M_PUSH                          ; push the accumulator
0B2E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0B32 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0B36 0E0B          M                 movlw   (STACK_END - 0x1)
0B38 64DA          M                 cpfsgt  FSR2H
0B3A D6DA          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B3C 5368      01625         movf    TMP_REG_1, F
0B3E B4D8      01626         btfsc   STATUS, Z               ; if nbFuncs = 1
0B40 0012      01627         return                          ; then closurerec done
0B42 6B6C      01628         clrf    TMP_REG_5               ; TMP_REG_5 <- 0
0B44 01629 _CLOSUREREC_LOOP_FUNCS:
0B44 2B6C      01630         incf    TMP_REG_5, F            ; TMP_REG_5 ++
0B46 0EF9      01631         movlw   INFIX_TAG               ; write infix tag in infix header
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0B48 6EEE      01632         movwf   POSTINC0
0B4A 516C      01633         movf    TMP_REG_5, W            ; write 2 * TMP_REG_5 as infix size in
0B4C 256C      01634         addwf   TMP_REG_5, W            ; infix header
0B4E 6EEE      01635         movwf   POSTINC0
0B50 CFE9 FF6D 01636         movff   FSR0L, TMP_REG_6        ; save FSR0
0B54 CFEA FF6E 01637         movff   FSR0H, TMP_REG_7
               01638         M_CHECK_UNFULL_STACK 0x1
0B58 0E0C          M                 movlw   STACK_END
0B5A 62DA          M                 cpfseq  FSR2H
0B5C D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0B5E 0EFE          M                 movlw   -(0x2 * N)
0B60 24D9          M                 addwf   FSR2L, W
0B62 A0D8          M                 btfss   STATUS, C
0B64 D6C5          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B66     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000002         M CPT_CUS = CPT_CUS + 1
0B66 516E      01639         movf    TMP_REG_7, W            ; restore FSR0
0B68 6EEA      01640         movwf   FSR0H
0B6A 6EDD      01641         movwf   POSTDEC2
0B6C 516D      01642         movf    TMP_REG_6, W
0B6E 6EE9      01643         movwf   FSR0L
0B70 6EDD      01644         movwf   POSTDEC2
0B72 0009      01645         tblrd*+                         ; infix_block[0] <- infix_pc read in bc
0B74 CFF5 FFEE 01646         movff   TABLAT, POSTINC0
0B78 0009      01647         tblrd*+
0B7A CFF5 FFEE 01648         movff   TABLAT, POSTINC0
0B7E 2F68      01649         decfsz  TMP_REG_1, F            ; loop nbFuncs - 1 times
0B80 D7E1      01650         bra     _CLOSUREREC_LOOP_FUNCS
0B82 0012      01651         return
               01652 
0B84 01653 _PUSHOFFSETCLOSUREM2:
               01654         M_PUSH                  ; fallthrough
0B84 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0B88 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0B8C 0E0B          M                 movlw   (STACK_END - 0x1)
0B8E 64DA          M                 cpfsgt  FSR2H
0B90 D6AF          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B92 01655 _OFFSETCLOSUREM2:
0B92 0EFC      01656         movlw   -0x4            ; ACCU <- ENV - 4
0B94 2554      01657         addwf   ENVL, W
0B96 6F56      01658         movwf   ACCUL
0B98 5155      01659         movf    ENVH, W
0B9A A0D8      01660         btfss   STATUS, C
0B9C 0FFF      01661         addlw   -0x1
0B9E 6F57      01662         movwf   ACCUH
0BA0 0012      01663         return
               01664 
0BA2 01665 _PUSHOFFSETCLOSURE0:
               01666         M_PUSH                  ; fallthrough
0BA2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BA6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BAA 0E0B          M                 movlw   (STACK_END - 0x1)
0BAC 64DA          M                 cpfsgt  FSR2H
0BAE D6A0          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0BB0 01667 _OFFSETCLOSURE0:
0BB0 CF54 FF56 01668         movff   ENVL, ACCUL
0BB4 CF55 FF57 01669         movff   ENVH, ACCUH
0BB8 0012      01670         return
               01671 
0BBA 01672 _PUSHOFFSETCLOSURE2:
               01673         M_PUSH                  ; fallthrough
0BBA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BBE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BC2 0E0B          M                 movlw   (STACK_END - 0x1)
0BC4 64DA          M                 cpfsgt  FSR2H
0BC6 D694          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0BC8 01674 _OFFSETCLOSURE2:
0BC8 0E04      01675         movlw   0x4             ; ACCU <- ENV + 4
0BCA 2554      01676         addwf   ENVL, W
0BCC 6F56      01677         movwf   ACCUL
0BCE 5155      01678         movf    ENVH, W
0BD0 B0D8      01679         btfsc   STATUS, C
0BD2 0F01      01680         addlw   0x1
0BD4 6F57      01681         movwf   ACCUH
0BD6 0012      01682         return
               01683 
0BD8 01684 _PUSHOFFSETCLOSURE:
               01685         M_PUSH                  ; fallthrough
0BD8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BDC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BE0 0E0B          M                 movlw   (STACK_END - 0x1)
0BE2 64DA          M                 cpfsgt  FSR2H
0BE4 D685          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0BE6 01686 _OFFSETCLOSURE:
0BE6 CF55 FF57 01687         movff   ENVH, ACCUH     ; ACCU <- ENV + 4 * offset
0BEA CF54 FF56 01688         movff   ENVL, ACCUL
0BEE 0009      01689         tblrd*+                 ; read offset
0BF0 90D8      01690         bcf     STATUS, C
0BF2 34F5      01691         rlcf    TABLAT, W
0BF4 E207      01692         bc      _OFFSETCLOSURE_NEG
0BF6 2756      01693         addwf   ACCUL, F
0BF8 B0D8      01694         btfsc   STATUS, C
0BFA 2B57      01695         incf    ACCUH, F
0BFC 2756      01696         addwf   ACCUL, F
0BFE B0D8      01697         btfsc   STATUS, C
0C00 2B57      01698         incf    ACCUH, F
0C02 0012      01699         return
0C04 01700 _OFFSETCLOSURE_NEG:
0C04 0800      01701         sublw   0x0
0C06 5F56      01702         subwf   ACCUL, F
0C08 A0D8      01703         btfss   STATUS, C
0C0A 0757      01704         decf    ACCUH, F
0C0C 5F56      01705         subwf   ACCUL, F
0C0E A0D8      01706         btfss   STATUS, C
0C10 0757      01707         decf    ACCUH, F
0C12 0012      01708         return
               01709         
               01710 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01712 ;;;;;;;;                                   ;;;;;;;;
               01713 ;;;;;;;;           CALL/RETURN             ;;;;;;;;
               01714 ;;;;;;;;                                   ;;;;;;;;
               01715 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01716 
0C14 01717 _PUSHRETADDR:
               01718         M_CHECK_UNFULL_STACK 0x3
0C14 0E0C          M                 movlw   STACK_END
0C16 62DA          M                 cpfseq  FSR2H
0C18 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0C1A 0EFA          M                 movlw   -(0x2 * N)
0C1C 24D9          M                 addwf   FSR2L, W
0C1E A0D8          M                 btfss   STATUS, C
0C20 D667          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0C22     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000003         M CPT_CUS = CPT_CUS + 1
0C22 6ADD      01719         clrf    POSTDEC2                ; push extraArgs
0C24 CF62 FFDD 01720         movff   EXTRA_ARGS, POSTDEC2
0C28 CF55 FFDD 01721         movff   ENVH, POSTDEC2          ; push the environment
0C2C CF54 FFDD 01722         movff   ENVL, POSTDEC2
               01723         M_READ_ARG                      ; push the return address
0C30 0009          M                 tblrd*+
0C32 50F5          M                 movf    TABLAT, W
0C34 0009          M                 tblrd*+
0C36 CFF5 FFDD 01724         movff   TABLAT, POSTDEC2
0C3A 6EDD      01725         movwf   POSTDEC2
0C3C 0012      01726         return
               01727 
0C3E 01728 _APPLY:
0C3E 0009      01729         tblrd*+                         ; read extraArgs
0C40 CFF5 FF62 01730         movff   TABLAT, EXTRA_ARGS
0C44 5156      01731         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0C46 6EE9      01732         movwf   FSR0L
0C48 6F54      01733         movwf   ENVL
0C4A 5157      01734         movf    ACCUH, W
0C4C 6EEA      01735         movwf   FSR0H
0C4E 6F55      01736         movwf   ENVH
0C50 CFEE FFF6 01737         movff   POSTINC0, TBLPTRL
0C54 CFEF FFF7 01738         movff   INDF0, TBLPTRH
0C58 0012      01739         return
               01740 
0C5A 01741 _APPLY1:
               01742         M_CHECK_UNFULL_STACK 0x3
0C5A 0E0C          M                 movlw   STACK_END
0C5C 62DA          M                 cpfseq  FSR2H
0C5E D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0C60 0EFA          M                 movlw   -(0x2 * N)
0C62 24D9          M                 addwf   FSR2L, W
0C64 A0D8          M                 btfss   STATUS, C
0C66 D644          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0C68     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000004         M CPT_CUS = CPT_CUS + 1
0C68 E986      01743         subfsr  FSR2, 0x6
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0C6A EB87 F001 01744         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
0C6E EB88 F002 01745         movss   [0x8], [0x2]
0C72 6A08      01746         clrf    [0x8]                   ; stack[3] <- extraArgs
0C74 5162      01747         movf    EXTRA_ARGS, W
0C76 6E07      01748         movwf   [0x7]
0C78 5154      01749         movf    ENVL, W                 ; stack[2] <- environment
0C7A 6E05      01750         movwf   [0x5]
0C7C 5155      01751         movf    ENVH, W
0C7E 6E06      01752         movwf   [0x6]
0C80 50F6      01753         movf    TBLPTRL, W              ; stack[1] <- PC
0C82 6E03      01754         movwf   [0x3]
0C84 50F7      01755         movf    TBLPTRH, W
0C86 6E04      01756         movwf   [0x4]
0C88 5156      01757         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0C8A 6EE9      01758         movwf   FSR0L
0C8C 6F54      01759         movwf   ENVL
0C8E 5157      01760         movf    ACCUH, W
0C90 6EEA      01761         movwf   FSR0H
0C92 6F55      01762         movwf   ENVH
0C94 CFEE FFF6 01763         movff   POSTINC0, TBLPTRL
0C98 CFEF FFF7 01764         movff   INDF0, TBLPTRH
0C9C 0E01      01765         movlw   0x1                     ; extraArgs <- int_val(0)
0C9E 6F62      01766         movwf   EXTRA_ARGS
0CA0 0012      01767         return
               01768 
0CA2 01769 _APPLY2:
               01770         M_CHECK_UNFULL_STACK 0x3
0CA2 0E0C          M                 movlw   STACK_END
0CA4 62DA          M                 cpfseq  FSR2H
0CA6 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0CA8 0EFA          M                 movlw   -(0x2 * N)
0CAA 24D9          M                 addwf   FSR2L, W
0CAC A0D8          M                 btfss   STATUS, C
0CAE D620          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0CB0     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000005         M CPT_CUS = CPT_CUS + 1
0CB0 E986      01771         subfsr  FSR2, 0x6
0CB2 EB87 F001 01772         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
0CB6 EB88 F002 01773         movss   [0x8], [0x2]
0CBA EB89 F003 01774         movss   [0x9], [0x3]            ; move arg (stack[1] <- stack[4])
0CBE EB8A F004 01775         movss   [0xA], [0x4]
0CC2 6A0A      01776         clrf    [0xA]                   ; stack[4] <- int_val(extraArgs)
0CC4 5162      01777         movf    EXTRA_ARGS, W
0CC6 6E09      01778         movwf   [0x9]
0CC8 5154      01779         movf    ENVL, W                 ; stack[3] <- environment
0CCA 6E07      01780         movwf   [0x7]
0CCC 5155      01781         movf    ENVH, W
0CCE 6E08      01782         movwf   [0x8]
0CD0 50F6      01783         movf    TBLPTRL, W              ; stack[2] <- PC
0CD2 6E05      01784         movwf   [0x5]
0CD4 50F7      01785         movf    TBLPTRH, W
0CD6 6E06      01786         movwf   [0x6]
0CD8 5156      01787         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0CDA 6EE9      01788         movwf   FSR0L
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0CDC 6F54      01789         movwf   ENVL
0CDE 5157      01790         movf    ACCUH, W
0CE0 6EEA      01791         movwf   FSR0H
0CE2 6F55      01792         movwf   ENVH
0CE4 CFEE FFF6 01793         movff   POSTINC0, TBLPTRL
0CE8 CFEF FFF7 01794         movff   INDF0, TBLPTRH
0CEC 0E03      01795         movlw   0x3                     ; extraArgs <- int_val(1)
0CEE 6F62      01796         movwf   EXTRA_ARGS
0CF0 0012      01797         return
               01798 
0CF2 01799 _APPLY3:
               01800         M_CHECK_UNFULL_STACK 0x3
0CF2 0E0C          M                 movlw   STACK_END
0CF4 62DA          M                 cpfseq  FSR2H
0CF6 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0CF8 0EFA          M                 movlw   -(0x2 * N)
0CFA 24D9          M                 addwf   FSR2L, W
0CFC A0D8          M                 btfss   STATUS, C
0CFE D5F8          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0D00     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000006         M CPT_CUS = CPT_CUS + 1
0D00 E986      01801         subfsr  FSR2, 0x6
0D02 EB87 F001 01802         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
0D06 EB88 F002 01803         movss   [0x8], [0x2]
0D0A EB89 F003 01804         movss   [0x9], [0x3]            ; move arg (stack[1] <- stack[4])
0D0E EB8A F004 01805         movss   [0xA], [0x4]
0D12 EB8B F005 01806         movss   [0xB], [0x5]            ; move arg (stack[2] <- stack[5])
0D16 EB8C F006 01807         movss   [0xC], [0x6]
0D1A 6A0C      01808         clrf    [0xC]                   ; stack[5] <- int_val(extraArgs)
0D1C 5162      01809         movf    EXTRA_ARGS, W
0D1E 6E0B      01810         movwf   [0xB]
0D20 5154      01811         movf    ENVL, W                 ; stack[4] <- environment
0D22 6E09      01812         movwf   [0x9]
0D24 5155      01813         movf    ENVH, W
0D26 6E0A      01814         movwf   [0xA]
0D28 50F6      01815         movf    TBLPTRL, W              ; stack[3] <- PC
0D2A 6E07      01816         movwf   [0x7]
0D2C 50F7      01817         movf    TBLPTRH, W
0D2E 6E08      01818         movwf   [0x8]
0D30 5156      01819         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0D32 6EE9      01820         movwf   FSR0L
0D34 6F54      01821         movwf   ENVL
0D36 5157      01822         movf    ACCUH, W
0D38 6EEA      01823         movwf   FSR0H
0D3A 6F55      01824         movwf   ENVH
0D3C CFEE FFF6 01825         movff   POSTINC0, TBLPTRL
0D40 CFEF FFF7 01826         movff   INDF0, TBLPTRH
0D44 0E05      01827         movlw   0x5                     ; extraArgs <- int_val(2)
0D46 6F62      01828         movwf   EXTRA_ARGS
0D48 0012      01829         return
               01830 
0D4A 01831 _APPTERM:
0D4A CFD9 FFE9 01832         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0D4E CFDA FFEA 01833         movff   FSR2H, FSR0H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0D52 0009      01834         tblrd*+                         ; read (2 * s)
0D54 50F5      01835         movf    TABLAT, W               ; pop s elements
0D56 26D9      01836         addwf   FSR2L, F
0D58 B0D8      01837         btfsc   STATUS, C
0D5A 2ADA      01838         incf    FSR2H, F
0D5C 0009      01839         tblrd*+                         ; read n
0D5E 90D8      01840         bcf     STATUS, C
0D60 34F5      01841         rlcf    TABLAT, W               ; FSR0 += 2 * n
0D62 26E9      01842         addwf   FSR0L, F
0D64 B0D8      01843         btfsc   STATUS, C
0D66 2AEA      01844         incf    FSR0H, F
0D68 04F5      01845         decf    TABLAT, W               ; extraArgs <- extraArgs + n - 1
0D6A 2762      01846         addwf   EXTRA_ARGS, F
0D6C 2762      01847         addwf   EXTRA_ARGS, F
0D6E 01848 _APPTERM_LOOP:
0D6E CFED FFDD 01849         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0D72 CFED FFDD 01850         movff   POSTDEC0, POSTDEC2
0D76 2EF5      01851         decfsz  TABLAT, F               ; loop n times
0D78 D7FA      01852         bra     _APPTERM_LOOP
0D7A 5156      01853         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0D7C 6EE9      01854         movwf   FSR0L
0D7E 6F54      01855         movwf   ENVL
0D80 5157      01856         movf    ACCUH, W
0D82 6EEA      01857         movwf   FSR0H
0D84 6F55      01858         movwf   ENVH
0D86 CFEE FFF6 01859         movff   POSTINC0, TBLPTRL
0D8A CFEF FFF7 01860         movff   INDF0, TBLPTRH
0D8E 0012      01861         return
               01862         
0D90 01863 _APPTERM1:
0D90 CFD9 FFE9 01864         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0D94 CFDA FFEA 01865         movff   FSR2H, FSR0H
0D98 0009      01866         tblrd*+                         ; read (2 * extraArgs)
0D9A 50F5      01867         movf    TABLAT, W               ; extraArgs elements
0D9C 26D9      01868         addwf   FSR2L, F
0D9E B0D8      01869         btfsc   STATUS, C
0DA0 2ADA      01870         incf    FSR2H, F
0DA2 E802      01871         addfsr  FSR0, 0x2               ; FSR0 -= 2
0DA4 CFED FFDD 01872         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DA8 CFED FFDD 01873         movff   POSTDEC0, POSTDEC2
0DAC 5156      01874         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0DAE 6EE9      01875         movwf   FSR0L
0DB0 6F54      01876         movwf   ENVL
0DB2 5157      01877         movf    ACCUH, W
0DB4 6EEA      01878         movwf   FSR0H
0DB6 6F55      01879         movwf   ENVH
0DB8 CFEE FFF6 01880         movff   POSTINC0, TBLPTRL
0DBC CFEF FFF7 01881         movff   INDF0, TBLPTRH
0DC0 0012      01882         return
               01883         
0DC2 01884 _APPTERM2:
0DC2 CFD9 FFE9 01885         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0DC6 CFDA FFEA 01886         movff   FSR2H, FSR0H
0DCA 0009      01887         tblrd*+                         ; read (2 * extraArgs)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0DCC 50F5      01888         movf    TABLAT, W               ; pop extraArgs elements
0DCE 26D9      01889         addwf   FSR2L, F
0DD0 B0D8      01890         btfsc   STATUS, C
0DD2 2ADA      01891         incf    FSR2H, F
0DD4 E804      01892         addfsr  FSR0, 0x4               ; FSR0 -= 4
0DD6 CFED FFDD 01893         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DDA CFED FFDD 01894         movff   POSTDEC0, POSTDEC2
0DDE CFED FFDD 01895         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DE2 CFED FFDD 01896         movff   POSTDEC0, POSTDEC2
0DE6 5156      01897         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0DE8 6EE9      01898         movwf   FSR0L
0DEA 6F54      01899         movwf   ENVL
0DEC 5157      01900         movf    ACCUH, W
0DEE 6EEA      01901         movwf   FSR0H
0DF0 6F55      01902         movwf   ENVH
0DF2 CFEE FFF6 01903         movff   POSTINC0, TBLPTRL
0DF6 CFEF FFF7 01904         movff   INDF0, TBLPTRH
0DFA 0E02      01905         movlw   0x2                     ; incr extraArgs
0DFC 2762      01906         addwf   EXTRA_ARGS, F
0DFE 0012      01907         return
               01908         
0E00 01909 _APPTERM3:
0E00 CFD9 FFE9 01910         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0E04 CFDA FFEA 01911         movff   FSR2H, FSR0H
0E08 0009      01912         tblrd*+                         ; read (2 * (extraArgs - 3))
0E0A 50F5      01913         movf    TABLAT, W               ; pop (extraArgs - 3) elements
0E0C 26D9      01914         addwf   FSR2L, F
0E0E B0D8      01915         btfsc   STATUS, C
0E10 2ADA      01916         incf    FSR2H, F
0E12 E806      01917         addfsr  FSR0, 0x6               ; FSR0 -= 6
0E14 CFED FFDD 01918         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E18 CFED FFDD 01919         movff   POSTDEC0, POSTDEC2
0E1C CFED FFDD 01920         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E20 CFED FFDD 01921         movff   POSTDEC0, POSTDEC2
0E24 CFED FFDD 01922         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E28 CFED FFDD 01923         movff   POSTDEC0, POSTDEC2
0E2C 5156      01924         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0E2E 6EE9      01925         movwf   FSR0L
0E30 6F54      01926         movwf   ENVL
0E32 5157      01927         movf    ACCUH, W
0E34 6EEA      01928         movwf   FSR0H
0E36 6F55      01929         movwf   ENVH
0E38 CFEE FFF6 01930         movff   POSTINC0, TBLPTRL
0E3C CFEF FFF7 01931         movff   INDF0, TBLPTRH
0E40 0E04      01932         movlw   0x4                     ; extraArgs <- extraArgs + 2
0E42 2762      01933         addwf   EXTRA_ARGS, F
0E44 0012      01934         return
               01935 
0E46 01936 _RETURN:
0E46 0009      01937         tblrd*+                         ; read (2 * n)
0E48 50F5      01938         movf    TABLAT, W               ; pop n elements
0E4A 26D9      01939         addwf   FSR2L, F
0E4C B0D8      01940         btfsc   STATUS, C
0E4E 2ADA      01941         incf    FSR2H, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0E50 4D62      01942         dcfsnz  EXTRA_ARGS, W           ; if extraArgs = 0
0E52 D00D      01943         bra     _RETURN_ELSE            ; then goto _RETURN_ELSE
0E54 0E02      01944         movlw   0x2                     ; decr extraArgs
0E56 5F62      01945         subwf   EXTRA_ARGS, F
0E58 5156      01946         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0E5A 6EE9      01947         movwf   FSR0L
0E5C 6F54      01948         movwf   ENVL
0E5E 5157      01949         movf    ACCUH, W
0E60 6EEA      01950         movwf   FSR0H
0E62 6F55      01951         movwf   ENVH
0E64 CFEE FFF6 01952         movff   POSTINC0, TBLPTRL
0E68 CFEF FFF7 01953         movff   INDF0, TBLPTRH
0E6C 0012      01954         return
0E6E 01955 _RETURN_ELSE:
0E6E CFDC FFF6 01956         movff   PREINC2, TBLPTRL        ; TBLPTR <- pop ()
0E72 CFDC FFF7 01957         movff   PREINC2, TBLPTRH
0E76 CFDC FF54 01958         movff   PREINC2, ENVL           ; ENV <- pop ()
0E7A CFDC FF55 01959         movff   PREINC2, ENVH
0E7E CFDC FF62 01960         movff   PREINC2, EXTRA_ARGS     ; extraArgs <- pop ()
0E82 E8C1      01961         addulnk 0x1
               01962 
0E84 01963 _RESTART:
0E84 CF54 FFE9 01964         movff   ENVL, FSR0L             ; FSR0 <- ENV
0E88 CF55 FFEA 01965         movff   ENVH, FSR0H
0E8C E802      01966         addfsr  FSR0, 0x2               ; ENV <- FSR0[1]
0E8E CFEE FF54 01967         movff   POSTINC0, ENVL
0E92 CFEF FF55 01968         movff   INDF0, ENVH
0E96 E904      01969         subfsr  FSR0, 0x4               ; compute (size(FSR0) - 2)
0E98 50EE      01970         movf    POSTINC0, W
0E9A 0FFE      01971         addlw   -0x2
0E9C B4D8      01972         btfsc   STATUS, Z               ; if no arg to push then done
0E9E 0012      01973         return
0EA0 6F68      01974         movwf   TMP_REG_1               ; TMP_REG_1 <- size(FSR0) - 2
0EA2 90D8      01975         bcf     STATUS, C               ; extraArgs <- extraArgs + size(FSR0)-2
0EA4 3568      01976         rlcf    TMP_REG_1, W
0EA6 2762      01977         addwf   EXTRA_ARGS, F
0EA8 26E9      01978         addwf   FSR0L, F                ; FSR0 <- FSR0 + 2 * size(ENV) - 1
0EAA B0D8      01979         btfsc   STATUS, C
0EAC 2AEA      01980         incf    FSR0H, F
0EAE E803      01981         addfsr  FSR0, 0x3
0EB0 01982 _RESTART_LOOP:
0EB0 CFED FFDD 01983         movff   POSTDEC0, POSTDEC2      ; push *FSR0--
0EB4 CFED FFDD 01984         movff   POSTDEC0, POSTDEC2
0EB8 2F68      01985         decfsz  TMP_REG_1, F            ; loop size(FSR0) - 2 times
0EBA D7FA      01986         bra     _RESTART_LOOP
0EBC 0012      01987         return
               01988 
0EBE 01989 _GRAB:
0EBE 0009      01990         tblrd*+                         ; read required
0EC0 90D8      01991         bcf     STATUS, C
0EC2 34F5      01992         rlcf    TABLAT, W
0EC4 6162      01993         cpfslt  EXTRA_ARGS              ; if extraArgs >= required
0EC6 D02B      01994         bra     _GRAB_ELSE              ; then goto _GRAB_ELSE
0EC8 3162      01995         rrcf    EXTRA_ARGS, W           ; TABLAT = 3 + extraArgs ; STATUS.C = 0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0ECA 0F03      01996         addlw   0x3
0ECC 6EF5      01997         movwf   TABLAT
0ECE DA9B      01998         rcall   _CHECK_UNFULL_HEAP_GEN  ; check heap allocation
0ED0 0EF7      01999         movlw   CLOSURE_TAG             ; write tag
0ED2 6EE6      02000         movwf   POSTINC1
0ED4 50F5      02001         movf    TABLAT, W               ; write size
0ED6 6EE6      02002         movwf   POSTINC1
0ED8 CFE1 FF56 02003         movff   FSR1L, ACCUL            ; ACCU <- closure
0EDC CFE2 FF57 02004         movff   FSR1H, ACCUH
0EE0 50F6      02005         movf    TBLPTRL, W              ; closure[0] <- PC - 3
0EE2 0FFD      02006         addlw   -0x3
0EE4 6EE6      02007         movwf   POSTINC1
0EE6 50F7      02008         movf    TBLPTRH, W
0EE8 A0D8      02009         btfss   STATUS, C
0EEA 0FFF      02010         addlw   -0x1
0EEC 6EE6      02011         movwf   POSTINC1
0EEE CF54 FFE6 02012         movff   ENVL, POSTINC1          ; closure[1] <- ENV
0EF2 CF55 FFE6 02013         movff   ENVH, POSTINC1
0EF6 0E02      02014         movlw   0x2                     ; TABLAT -= 2
0EF8 5EF5      02015         subwf   TABLAT, F
0EFA E006      02016         bz      _GRAB_SKIP_LOOP         ; skip loop if TABLAT = 0
0EFC 02017 _GRAB_LOOP:
0EFC CFDC FFE6 02018         movff   PREINC2, POSTINC1       ; closure[i] <- pop ()
0F00 CFDC FFE6 02019         movff   PREINC2, POSTINC1
0F04 2EF5      02020         decfsz  TABLAT, F               ; loop TABLAT = required - 1 times
0F06 D7FA      02021         bra     _GRAB_LOOP
0F08 02022 _GRAB_SKIP_LOOP:
0F08 CFDC FFF6 02023         movff   PREINC2, TBLPTRL        ; TBLPTR <- pop ()
0F0C CFDC FFF7 02024         movff   PREINC2, TBLPTRH
0F10 CFDC FF54 02025         movff   PREINC2, ENVL           ; ENV <- pop ()
0F14 CFDC FF55 02026         movff   PREINC2, ENVH
0F18 CFDC FF62 02027         movff   PREINC2, EXTRA_ARGS     ; extraArgs <- pop ()
0F1C E8C1      02028         addulnk 0x1                     ; grab done
0F1E 02029 _GRAB_ELSE:
0F1E 5F62      02030         subwf   EXTRA_ARGS, F           ; extraArgs -= required
0F20 0012      02031         return                          ; grab done
               02032 
               02033 
               02034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02035 ;;;;;;;;                                   ;;;;;;;;
               02036 ;;;;;;;;          OTHERS / STACK           ;;;;;;;;
               02037 ;;;;;;;;                                   ;;;;;;;;
               02038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02039 
0F22 02040 _ISINT:
0F22 0E01      02041         movlw   0x1
0F24 B156      02042         btfsc   ACCUL, 0
0F26 0E03      02043         movlw   0x3
0F28 6F56      02044         movwf   ACCUL
0F2A 6B57      02045         clrf    ACCUH
0F2C 0012      02046         return
               02047 
0F2E 02048 _ACC1_ISINT:
0F2E E2F9      02049         bc      _ISINT
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02050         M_ACC   1
0F30 EB03 FF56     M                 movsf   [2 * N + 1], ACCUL
0F34 EB04 FF57     M                 movsf   [2 * N + 2], ACCUH
0F38 0012      02051         return
               02052         
0F3A 02053 _PUSHACC5_STOP:
0F3A E224      02054         bc      _STOP
               02055         M_PUSH
0F3C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F40 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F44 0E0B          M                 movlw   (STACK_END - 0x1)
0F46 64DA          M                 cpfsgt  FSR2H
0F48 D4D3          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02056         M_ACC   5
0F4A EB0B FF56     M                 movsf   [2 * N + 1], ACCUL
0F4E EB0C FF57     M                 movsf   [2 * N + 2], ACCUH
0F52 0012      02057         return
               02058 
0F54 02059 _PUSHACC6_EVENT:
               02060 ;       bc      _EVENT ; removed by bc2asm
               02061         M_PUSH
0F54 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F58 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F5C 0E0B          M                 movlw   (STACK_END - 0x1)
0F5E 64DA          M                 cpfsgt  FSR2H
0F60 D4C7          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02062         M_ACC   6
0F62 EB0D FF56     M                 movsf   [2 * N + 1], ACCUL
0F66 EB0E FF57     M                 movsf   [2 * N + 2], ACCUH
0F6A 0012      02063         return
               02064 
0F6C 02065 _PUSHACC7_BREAK:
               02066 ;       bc      _BREAK  ; removed by bc2asm
               02067         M_PUSH
0F6C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F70 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F74 0E0B          M                 movlw   (STACK_END - 0x1)
0F76 64DA          M                 cpfsgt  FSR2H
0F78 D4BB          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02068         M_ACC   7
0F7A EB0F FF56     M                 movsf   [2 * N + 1], ACCUL
0F7E EB10 FF57     M                 movsf   [2 * N + 2], ACCUH
0F82 0012      02069         return
               02070 
0F84 02071 _BREAK:
0F84 02072 _EVENT:
0F84 02073 _PUSHATOM:
0F84 02074 _ATOM:
0F84 02075 _CHECKSIGNALS:
0F84 02076 _STOP:
0F84 0003      02077         sleep
0F86 D7FE      02078         bra     _STOP
               02079 
               02080 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02082 ;;;;;;;;                                   ;;;;;;;;
               02083 ;;;;;;;;               BLOCKS              ;;;;;;;;
               02084 ;;;;;;;;                                   ;;;;;;;;
               02085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02086 
0F88 02087 _PUSHATOM0:
               02088         M_PUSH                  ; fallthrough
0F88 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F8C CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F90 0E0B          M                 movlw   (STACK_END - 0x1)
0F92 64DA          M                 cpfsgt  FSR2H
0F94 D4AD          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0F96 02089 _ATOM0:
               02090         M_ATOM0
0F96 0E88          M                 movlw   low ATOM0_ADR
0F98 6F56          M                 movwf   ACCUL
0F9A 0E0F          M                 movlw   high ATOM0_ADR
0F9C 6F57          M                 movwf   ACCUH
0F9E 0012      02091         return
               02092 
0FA0 02093 _MAKEBLOCK:
0FA0 0009      02094         tblrd*+                  ; read size
0FA2 DA31      02095         rcall   _CHECK_UNFULL_HEAP_GEN
0FA4 50F5      02096         movf    TABLAT, W
0FA6 0009      02097         tblrd*+                  ; read tag
0FA8 CFF5 FFE6 02098         movff   TABLAT, POSTINC1 ; write tag
0FAC 6EE6      02099         movwf   POSTINC1         ; write size
0FAE 0FFD      02100         addlw   -0x3
0FB0 6F68      02101         movwf   TMP_REG_1        ; TMP_REG_1 <- size - 3
0FB2 50E1      02102         movf    FSR1L, W         ; ACCU <- FSR1 ; *FSR1 <- ACCU ; FSR1 += 2
0FB4 CF56 FFE6 02103         movff   ACCUL, POSTINC1
0FB8 6F56      02104         movwf   ACCUL
0FBA 50E2      02105         movf    FSR1H, W         ; ok because block address are even
0FBC CF57 FFE6 02106         movff   ACCUH, POSTINC1
0FC0 6F57      02107         movwf   ACCUH
0FC2 CFDC FFE6 02108         movff   PREINC2, POSTINC1
0FC6 CFDC FFE6 02109         movff   PREINC2, POSTINC1
0FCA CFDC FFE6 02110         movff   PREINC2, POSTINC1
0FCE CFDC FFE6 02111         movff   PREINC2, POSTINC1
0FD2 02112 _MAKEBLOCK_LOOP:
0FD2 CFDC FFE6 02113         movff   PREINC2, POSTINC1
0FD6 CFDC FFE6 02114         movff   PREINC2, POSTINC1
0FDA 2F68      02115         decfsz  TMP_REG_1, F
0FDC D7FA      02116         bra     _MAKEBLOCK_LOOP
0FDE 0012      02117         return
               02118 
0FE0 02119 _MAKEBLOCK1:
               02120         M_CHECK_UNFULL_HEAP 0x1
0FE0 515E          M                 movf    CUR_HEAP_END, W
0FE2 62E2          M                 cpfseq  FSR1H
0FE4 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
0FE6 0E04          M                 movlw   (N * 0x2 + 0x2)
0FE8 24E1          M                 addwf   FSR1L, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0FEA E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
0FEC EC6D F00A     M                 call    caml_gc_exec
                   M 
0FF0 515E          M                 movf    CUR_HEAP_END, W
0FF2 62E2          M                 cpfseq  FSR1H
0FF4 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
0FF6 0E04          M                 movlw   (N * 0x2 + 0x2)
0FF8 24E1          M                 addwf   FSR1L, W
0FFA B0D8          M                 btfsc   STATUS, C
0FFC EFAC F009     M                 goto    caml_raise_out_of_memory
1000     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000001         M CPT_CUH = CPT_CUH + 1
1000 0009      02121         tblrd*+
1002 CFF5 FFE6 02122         movff   TABLAT, POSTINC1
1006 0E01      02123         movlw   0x1
1008 6EE6      02124         movwf   POSTINC1
100A 50E1      02125         movf    FSR1L, W
100C CF56 FFE6 02126         movff   ACCUL, POSTINC1
1010 6F56      02127         movwf   ACCUL
1012 50E2      02128         movf    FSR1H, W
1014 CF57 FFE6 02129         movff   ACCUH, POSTINC1
1018 6F57      02130         movwf   ACCUH
101A 0012      02131         return
               02132 
101C 02133 _MAKEBLOCK2:
               02134         M_CHECK_UNFULL_HEAP 0x2
101C 515E          M                 movf    CUR_HEAP_END, W
101E 62E2          M                 cpfseq  FSR1H
1020 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1022 0E06          M                 movlw   (N * 0x2 + 0x2)
1024 24E1          M                 addwf   FSR1L, W
1026 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1028 EC6D F00A     M                 call    caml_gc_exec
                   M 
102C 515E          M                 movf    CUR_HEAP_END, W
102E 62E2          M                 cpfseq  FSR1H
1030 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1032 0E06          M                 movlw   (N * 0x2 + 0x2)
1034 24E1          M                 addwf   FSR1L, W
1036 B0D8          M                 btfsc   STATUS, C
1038 EFAC F009     M                 goto    caml_raise_out_of_memory
103C     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000002         M CPT_CUH = CPT_CUH + 1
103C 0009      02135         tblrd*+
103E CFF5 FFE6 02136         movff   TABLAT, POSTINC1
1042 0E02      02137         movlw   0x2
1044 6EE6      02138         movwf   POSTINC1
1046 50E1      02139         movf    FSR1L, W
1048 CF56 FFE6 02140         movff   ACCUL, POSTINC1
104C 6F56      02141         movwf   ACCUL
104E 50E2      02142         movf    FSR1H, W
1050 CF57 FFE6 02143         movff   ACCUH, POSTINC1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1054 6F57      02144         movwf   ACCUH
1056 CFDC FFE6 02145         movff   PREINC2, POSTINC1
105A CFDC FFE6 02146         movff   PREINC2, POSTINC1
105E 0012      02147         return
               02148 
1060 02149 _MAKEBLOCK3:
               02150         M_CHECK_UNFULL_HEAP 0x3
1060 515E          M                 movf    CUR_HEAP_END, W
1062 62E2          M                 cpfseq  FSR1H
1064 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1066 0E08          M                 movlw   (N * 0x2 + 0x2)
1068 24E1          M                 addwf   FSR1L, W
106A E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
106C EC6D F00A     M                 call    caml_gc_exec
                   M 
1070 515E          M                 movf    CUR_HEAP_END, W
1072 62E2          M                 cpfseq  FSR1H
1074 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1076 0E08          M                 movlw   (N * 0x2 + 0x2)
1078 24E1          M                 addwf   FSR1L, W
107A B0D8          M                 btfsc   STATUS, C
107C EFAC F009     M                 goto    caml_raise_out_of_memory
1080     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000003         M CPT_CUH = CPT_CUH + 1
1080 0009      02151         tblrd*+
1082 CFF5 FFE6 02152         movff   TABLAT, POSTINC1
1086 0E03      02153         movlw   0x3
1088 6EE6      02154         movwf   POSTINC1
108A 50E1      02155         movf    FSR1L, W
108C CF56 FFE6 02156         movff   ACCUL, POSTINC1
1090 6F56      02157         movwf   ACCUL
1092 50E2      02158         movf    FSR1H, W
1094 CF57 FFE6 02159         movff   ACCUH, POSTINC1
1098 6F57      02160         movwf   ACCUH
109A CFDC FFE6 02161         movff   PREINC2, POSTINC1
109E CFDC FFE6 02162         movff   PREINC2, POSTINC1
10A2 CFDC FFE6 02163         movff   PREINC2, POSTINC1
10A6 CFDC FFE6 02164         movff   PREINC2, POSTINC1
10AA 0012      02165         return
               02166         
               02167 
               02168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02169 ;;;;;;;;                                   ;;;;;;;;
               02170 ;;;;;;;;              FLOAT                ;;;;;;;;
               02171 ;;;;;;;;                                   ;;;;;;;;
               02172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02173 
10AC 02174 _MAKEFLOATBLOCK:
10AC 0009      02175         tblrd*+                         ; read size
10AE D9AB      02176         rcall   _CHECK_UNFULL_HEAP_GEN
10B0 0EFE      02177         movlw   DOUBLE_ARRAY_TAG        ; write tag
10B2 6EE6      02178         movwf   POSTINC1
10B4 CFF5 FFE6 02179         movff   TABLAT, POSTINC1        ; write size
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
10B8 CF56 FFE9 02180         movff   ACCUL, FSR0L            ; FSR0 <- ACCU
10BC CF57 FFEA 02181         movff   ACCUH, FSR0H
10C0 CFE1 FF56 02182         movff   FSR1L, ACCUL            ; ACCU <- @block
10C4 CFE2 FF57 02183         movff   FSR1H, ACCUH
10C8 CFEE FFE6 02184         movff   POSTINC0, POSTINC1      ; block[0] <- *FSR0 ; FSR1 ++
10CC CFEE FFE6 02185         movff   POSTINC0, POSTINC1
10D0 CFEE FFE6 02186         movff   POSTINC0, POSTINC1
10D4 CFEF FFE6 02187         movff   INDF0, POSTINC1
10D8 42F5      02188         rrncf   TABLAT, F
10DA 4EF5      02189         dcfsnz  TABLAT, F               ; if size = 1 then return
10DC 0012      02190         return
10DE 02191 _MAKEFLOATBLOCK_LOOP:
10DE CFDC FFE9 02192         movff   PREINC2, FSR0L          ; FSR0 <- pop()
10E2 CFDC FFEA 02193         movff   PREINC2, FSR0H
10E6 CFEE FFE6 02194         movff   POSTINC0, POSTINC1      ; *FSR1++ <- *FSR0
10EA CFEE FFE6 02195         movff   POSTINC0, POSTINC1
10EE CFEE FFE6 02196         movff   POSTINC0, POSTINC1
10F2 CFEF FFE6 02197         movff   INDF0, POSTINC1
10F6 2EF5      02198         decfsz  TABLAT, F               ; loop (size-1) times
10F8 D7F2      02199         bra     _MAKEFLOATBLOCK_LOOP
10FA 0012      02200         return
               02201 
10FC 02202 _GETFLOATFIELD:
               02203         M_CHECK_UNFULL_HEAP 0x2
10FC 515E          M                 movf    CUR_HEAP_END, W
10FE 62E2          M                 cpfseq  FSR1H
1100 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1102 0E06          M                 movlw   (N * 0x2 + 0x2)
1104 24E1          M                 addwf   FSR1L, W
1106 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1108 EC6D F00A     M                 call    caml_gc_exec
                   M 
110C 515E          M                 movf    CUR_HEAP_END, W
110E 62E2          M                 cpfseq  FSR1H
1110 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1112 0E06          M                 movlw   (N * 0x2 + 0x2)
1114 24E1          M                 addwf   FSR1L, W
1116 B0D8          M                 btfsc   STATUS, C
1118 EFAC F009     M                 goto    caml_raise_out_of_memory
111C     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000004         M CPT_CUH = CPT_CUH + 1
111C 0009      02204         tblrd*+
111E 50F5      02205         movf    TABLAT, W       ; FSR0 <- ACCU + 2 * n
1120 2556      02206         addwf   ACCUL, W
1122 6EE9      02207         movwf   FSR0L
1124 0E00      02208         movlw   0x0
1126 2157      02209         addwfc  ACCUH, W
1128 6EEA      02210         movwf   FSR0H
112A 50F5      02211         movf    TABLAT, W
112C 26E9      02212         addwf   FSR0L, F
112E B0D8      02213         btfsc   STATUS, C
1130 2AEA      02214         incf    FSR0H, F
1132 0EFD      02215         movlw   DOUBLE_TAG      ; write tag
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1134 6EE6      02216         movwf   POSTINC1
1136 0E02      02217         movlw   0x2             ; write size
1138 6EE6      02218         movwf   POSTINC1
113A CFE1 FF56 02219         movff   FSR1L, ACCUL    ; ACCU <- @float
113E CFE2 FF57 02220         movff   FSR1H, ACCUH
1142 CFEE FFE6 02221         movff   POSTINC0, POSTINC1 ; copy float
1146 CFEE FFE6 02222         movff   POSTINC0, POSTINC1
114A CFEE FFE6 02223         movff   POSTINC0, POSTINC1
114E CFEF FFE6 02224         movff   INDF0, POSTINC1
1152 0012      02225         return
               02226         
1154 02227 _SETFLOATFIELD:
1154 CFDE FFE9 02228         movff   POSTINC2, FSR0L         ; TMP_REG_4:3:2:1 <- *pop()
1158 CFDE FFEA 02229         movff   POSTINC2, FSR0H
115C CFEE FF68 02230         movff   POSTINC0, TMP_REG_1
1160 CFEE FF69 02231         movff   POSTINC0, TMP_REG_2
1164 CFEE FF6A 02232         movff   POSTINC0, TMP_REG_3
1168 CFEF FF6B 02233         movff   INDF0, TMP_REG_4
116C CF56 FFE9 02234         movff   ACCUL, FSR0L            ; FSR0 <- ACCU + n
1170 CF57 FFEA 02235         movff   ACCUH, FSR0H
1174 0009      02236         tblrd*+                         ; read n
1176 50F5      02237         movf    TABLAT, W
1178 2556      02238         addwf   ACCUL, W
117A 6EE9      02239         movwf   FSR0L
117C 0E00      02240         movlw   0x0
117E 2157      02241         addwfc  ACCUH, W
1180 6EEA      02242         movwf   FSR0H
1182 50F5      02243         movf    TABLAT, W
1184 26E9      02244         addwf   FSR0L, F
1186 B0D8      02245         btfsc   STATUS, C
1188 2AEA      02246         incf    FSR0H, F
118A CF68 FFEE 02247         movff   TMP_REG_1, POSTINC0     ; write the float
118E CF69 FFEE 02248         movff   TMP_REG_2, POSTINC0
1192 CF6A FFEE 02249         movff   TMP_REG_3, POSTINC0
1196 CF6B FFEF 02250         movff   TMP_REG_4, INDF0
               02251         M_CONST 0                       ; return ()
119A 0E01          M                 movlw   2 * N + 1
119C 6F56          M                 movwf   ACCUL
119E 6B57          M                 clrf    ACCUH
11A0 0012      02252         return
               02253 
               02254 
               02255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02256 ;;;;;;;;                                   ;;;;;;;;
               02257 ;;;;;;;;             ARITHMETIC            ;;;;;;;;
               02258 ;;;;;;;;                                   ;;;;;;;;
               02259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02260 
11A2 02261 _BOOLNOT:
11A2 0556      02262         decf    ACCUL, W
11A4 1157      02263         iorwf   ACCUH, W
11A6 0E01      02264         movlw   0x1
11A8 B4D8      02265         btfsc   STATUS, Z
11AA 0E03      02266         movlw   0x3
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
11AC 6F56      02267         movwf   ACCUL
11AE 6B57      02268         clrf    ACCUH
11B0 0012      02269         return
               02270 
11B2 02271 _MULINT:
11B2 D013      02272         bra     _INDIRECTED_MULINT
               02273 
11B4 02274 _MODINT:
11B4 D079      02275         bra     _INDIRECTED_MODINT
               02276 
11B6 02277 _DIVINT:
11B6 D028      02278         bra     _INDIRECTED_DIVINT
               02279         
11B8 02280 _NEGINT:
11B8 1F56      02281         comf    ACCUL, F
11BA 1F57      02282         comf    ACCUH, F
11BC 0E03      02283         movlw   0x3
11BE 2756      02284         addwf   ACCUL, F
11C0 B0D8      02285         btfsc   STATUS, C
11C2 2B57      02286         incf    ACCUH, F
11C4 0012      02287         return
               02288 
11C6 02289 _ADDINT:
11C6 04DC      02290         decf    PREINC2, W
11C8 2756      02291         addwf   ACCUL, F
11CA 50DC      02292         movf    PREINC2, W
11CC 2357      02293         addwfc  ACCUH, F
11CE 0012      02294         return
               02295 
11D0 02296 _SUBINT:
11D0 04DC      02297         decf    PREINC2, W
11D2 5F56      02298         subwf   ACCUL, F
11D4 50DC      02299         movf    PREINC2, W
11D6 5B57      02300         subwfb  ACCUH, F
11D8 0012      02301         return
               02302 
11DA 02303 _INDIRECTED_MULINT:
11DA 90D8      02304         bcf     STATUS, C
11DC 3202      02305         rrcf    [0x2], F     ; yH = [0x2]
11DE 3201      02306         rrcf    [0x1], F     ; yL = [0x1]
11E0 90D8      02307         bcf     STATUS, C
11E2 3157      02308         rrcf    ACCUH, W
11E4 6F69      02309         movwf   TMP_REG_2    ; xH = TMP_REG_2
11E6 3156      02310         rrcf    ACCUL, W     ; xL = W
11E8 0201      02311         mulwf   [0x1]        ; [ACCUH:ACCUL] <- xL * yL
11EA CFF3 FF56 02312         movff   PRODL, ACCUL
11EE CFF4 FF57 02313         movff   PRODH, ACCUH
11F2 0202      02314         mulwf   [0x2]        ; ACCUH <- ACCUH + xL * yH
11F4 50F3      02315         movf    PRODL, W
11F6 2757      02316         addwf   ACCUH, F
11F8 5169      02317         movf    TMP_REG_2, W ; ACCUH <- ACCUH + xH * yL
11FA 0201      02318         mulwf   [0x1]
11FC 50F3      02319         movf    PRODL, W
11FE 2757      02320         addwf   ACCUH, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1200 80D8      02321         bsf     STATUS, C    ; [ACCUH:ACCUL] <- ([ACCUH:ACCUL] << 1) | 1
1202 3756      02322         rlcf    ACCUL, F
1204 3757      02323         rlcf    ACCUH, F
1206 E8C2      02324         addulnk 0x2          ; pop y
               02325 
1208 02326 _INDIRECTED_DIVINT:
1208 3402      02327         rlcf    [0x2], W        ; capture sign bit
120A 3202      02328         rrcf    [0x2], F        ; yH = [0x2]
120C 3201      02329         rrcf    [0x1], F        ; yL = [0x1]
               02330 
120E 5001      02331         movf    [0x1], W        ; y = 0 ?
1210 1002      02332         iorwf   [0x2], W
1212 E048      02333         bz      _INDIRECT_RAISE_DIV_BY_0
               02334 
1214 3557      02335         rlcf    ACCUH, W        ; capture sign bit
1216 3157      02336         rrcf    ACCUH, W        ; xH = TMP_REG_2
1218 6F69      02337         movwf   TMP_REG_2
121A 3156      02338         rrcf    ACCUL, W        ; xL = TMP_REG_1
121C 6F68      02339         movwf   TMP_REG_1
               02340         
121E 916C      02341         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = result sign
               02342 
1220 AF69      02343         btfss   TMP_REG_2, 7    ; x < 0 ?
1222 D005      02344         bra     _DIVINT_L0      ; no => skip
1224 1F68      02345         comf    TMP_REG_1, F    ; yes => negate x
1226 1F69      02346         comf    TMP_REG_2, F
1228 4B68      02347         infsnz  TMP_REG_1, F
122A 2B69      02348         incf    TMP_REG_2, F
122C 716C      02349         btg     TMP_REG_5, 0    ; update result sign
               02350         
122E 02351 _DIVINT_L0:
122E AE02      02352         btfss   [0x2], 7        ; y < 0 ?
1230 D005      02353         bra     _DIVINT_L1      ; no => skip
1232 1E01      02354         comf    [0x1], F        ; yes => negate y
1234 1E02      02355         comf    [0x2], F
1236 4A01      02356         infsnz  [0x1], F
1238 2A02      02357         incf    [0x2], F
123A 716C      02358         btg     TMP_REG_5, 0    ; update result sign
               02359         
123C 02360 _DIVINT_L1:
123C 6B56      02361         clrf    ACCUL           ; init result to 00...001
123E 6B57      02362         clrf    ACCUH
1240 8156      02363         bsf     ACCUL, 0
               02364 
1242 6B6A      02365         clrf    TMP_REG_3       ; init bit raw to 00...010
1244 6B6B      02366         clrf    TMP_REG_4
1246 836A      02367         bsf     TMP_REG_3, 1
               02368         
1248 02369 _DIVINT_LOOP1:
1248 90D8      02370         bcf     STATUS, C       ; y <- y << 1
124A 3601      02371         rlcf    [0x1], F
124C 3602      02372         rlcf    [0x2], F
               02373 
124E 5002      02374         movf    [0x2], W        ; xH - yH
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1250 5D69      02375         subwf   TMP_REG_2, W
1252 E308      02376         bnc     _DIVINT_LOOP2   ; if C = 0 (xH < yH) then break
1254 E103      02377         bnz     _DIVINT_IF_L1   ; if Z = 0 (xH > yH) then continue
1256 5001      02378         movf    [0x1], W        ; xL - yL
1258 5D68      02379         subwf   TMP_REG_1, W
125A E304      02380         bnc     _DIVINT_LOOP2   ; if C = 0 (xL < yL) then break
               02381 
125C 02382 _DIVINT_IF_L1:
125C 90D8      02383         bcf     STATUS, C       ; raw <- raw << 1
125E 376A      02384         rlcf    TMP_REG_3, F
1260 376B      02385         rlcf    TMP_REG_4, F
               02386 
1262 D7F2      02387         bra     _DIVINT_LOOP1   ; loop
               02388 
1264 02389 _DIVINT_LOOP2:
1264 90D8      02390         bcf     STATUS, C       ; y <- y >> 1
1266 3202      02391         rrcf    [0x2], F
1268 3201      02392         rrcf    [0x1], F
               02393 
126A 5002      02394         movf    [0x2], W        ; xH - yH
126C 5D69      02395         subwf   TMP_REG_2, W
126E E30C      02396         bnc     _DIVINT_IFN_L2  ; if C = 0 (xH < yH) then skip
1270 E103      02397         bnz     _DIVINT_IF_L2   ; if Z = 0 (xH > yH) then continue
1272 5001      02398         movf    [0x1], W        ; xL - yL
1274 5D68      02399         subwf   TMP_REG_1, W
1276 E308      02400         bnc     _DIVINT_IFN_L2  ; if C = 0 (xL < yL) then skip
               02401 
1278 02402 _DIVINT_IF_L2:
1278 5001      02403         movf    [0x1], W        ; x <- x - y
127A 5F68      02404         subwf   TMP_REG_1, F
127C 5002      02405         movf    [0x2], W
127E 5B69      02406         subwfb  TMP_REG_2, F
               02407         
1280 516A      02408         movf    TMP_REG_3, W    ; ACCU <- ACCU | raw
1282 1356      02409         iorwf   ACCUL, F
1284 516B      02410         movf    TMP_REG_4, W
1286 1357      02411         iorwf   ACCUH, F
               02412         
1288 02413 _DIVINT_IFN_L2:
1288 90D8      02414         bcf     STATUS, C       ; raw <- raw >> 1
128A 336B      02415         rrcf    TMP_REG_4, F
128C 336A      02416         rrcf    TMP_REG_3, F
               02417 
128E A16A      02418         btfss   TMP_REG_3, 0    ; if raw.0 = 0
1290 D7E9      02419         bra     _DIVINT_LOOP2   ; then loop
               02420 
1292 A16C      02421         btfss   TMP_REG_5, 0    ; negative result ?
1294 E8C2      02422         addulnk 0x2             ; no => division done
1296 1F56      02423         comf    ACCUL, F        ; yes => negate result
1298 1F57      02424         comf    ACCUH, F
129A 0E03      02425         movlw   0x3
129C 2756      02426         addwf   ACCUL, F
129E B0D8      02427         btfsc   STATUS, C
12A0 2B57      02428         incf    ACCUH, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
12A2 E8C2      02429         addulnk 0x2             ; division done
               02430         
12A4 02431 _INDIRECT_RAISE_DIV_BY_0:
12A4 EFB2 F009 02432         goto    caml_raise_division_by_0
               02433 
12A8 02434 _INDIRECTED_MODINT:
12A8 3402      02435         rlcf    [0x2], W        ; capture sign bit
12AA 3202      02436         rrcf    [0x2], F        ; yH = [0x2]
12AC 3201      02437         rrcf    [0x1], F        ; yL = [0x1]
               02438 
12AE 5001      02439         movf    [0x1], W        ; y = 0 ?
12B0 1002      02440         iorwf   [0x2], W
12B2 E0F8      02441         bz      _INDIRECT_RAISE_DIV_BY_0
               02442 
12B4 3557      02443         rlcf    ACCUH, W        ; capture sign bit
12B6 3357      02444         rrcf    ACCUH, F        ; xH = ACCUH
12B8 3356      02445         rrcf    ACCUL, F        ; xL = ACCUL
               02446         
12BA 916C      02447         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = result sign
               02448 
12BC AF57      02449         btfss   ACCUH, 7        ; x < 0 ?
12BE D005      02450         bra     _MODINT_L0      ; no => skip
12C0 1F56      02451         comf    ACCUL, F        ; yes => negate x
12C2 1F57      02452         comf    ACCUH, F
12C4 4B56      02453         infsnz  ACCUL, F
12C6 2B57      02454         incf    ACCUH, F
12C8 816C      02455         bsf     TMP_REG_5, 0    ; negative result
               02456         
12CA 02457 _MODINT_L0:
12CA AE02      02458         btfss   [0x2], 7        ; y < 0 ?
12CC D004      02459         bra     _MODINT_L1      ; no => skip
12CE 1E01      02460         comf    [0x1], F        ; yes => negate y
12D0 1E02      02461         comf    [0x2], F
12D2 4A01      02462         infsnz  [0x1], F
12D4 2A02      02463         incf    [0x2], F
               02464         
12D6 02465 _MODINT_L1:
12D6 6B6A      02466         clrf    TMP_REG_3       ; counter = TMP_REG_3 <- 0
               02467 
12D8 02468 _MODINT_LOOP1:
12D8 90D8      02469         bcf     STATUS, C       ; y <- y << 1
12DA 3601      02470         rlcf    [0x1], F
12DC 3602      02471         rlcf    [0x2], F
               02472 
12DE 2B6A      02473         incf    TMP_REG_3, F    ; incr counter
               02474         
12E0 5002      02475         movf    [0x2], W        ; xH - yH
12E2 5D57      02476         subwf   ACCUH, W
12E4 E304      02477         bnc     _MODINT_LOOP2   ; if C = 0 (xH < yH) then break
12E6 E1F8      02478         bnz     _MODINT_LOOP1   ; if Z = 0 (xH > yH) then loop
12E8 5001      02479         movf    [0x1], W        ; xL - yL
12EA 5D56      02480         subwf   ACCUL, W
12EC E2F5      02481         bc      _MODINT_LOOP1   ; if C = 1 (xL >= yL) then loop
               02482         
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
12EE 02483 _MODINT_LOOP2:
12EE 90D8      02484         bcf     STATUS, C       ; y <- y >> 1
12F0 3202      02485         rrcf    [0x2], F
12F2 3201      02486         rrcf    [0x1], F
               02487 
12F4 5002      02488         movf    [0x2], W        ; xH - yH
12F6 5D57      02489         subwf   ACCUH, W
12F8 E308      02490         bnc     _MODINT_IFN_L2  ; if C = 0 (xH < yH) then skip
12FA E103      02491         bnz     _MODINT_IF_L2   ; if Z = 0 (xH > yH) then do not skip
12FC 5001      02492         movf    [0x1], W        ; xL - yL
12FE 5D56      02493         subwf   ACCUL, W
1300 E304      02494         bnc     _MODINT_IFN_L2  ; if C = 0 (xL < yL) then skip
               02495 
1302 02496 _MODINT_IF_L2:
1302 5001      02497         movf    [0x1], W        ; x <- x - y
1304 5F56      02498         subwf   ACCUL, F
1306 5002      02499         movf    [0x2], W
1308 5B57      02500         subwfb  ACCUH, F
               02501         
130A 02502 _MODINT_IFN_L2:
130A 2F6A      02503         decfsz  TMP_REG_3, F    ; decr counter
130C D7F0      02504         bra     _MODINT_LOOP2   ; if counter <> 0 then loop
               02505 
130E 80D8      02506         bsf     STATUS, C       ; ACCU <- (ACCU << 1) | 1
1310 3756      02507         rlcf    ACCUL, F
1312 3757      02508         rlcf    ACCUH, F
               02509         
1314 A16C      02510         btfss   TMP_REG_5, 0    ; negative result ?
1316 E8C2      02511         addulnk 0x2             ; no => modulo done
1318 1F56      02512         comf    ACCUL, F        ; yes => negate result
131A 1F57      02513         comf    ACCUH, F
131C 0E03      02514         movlw   0x3
131E 2756      02515         addwf   ACCUL, F
1320 B0D8      02516         btfsc   STATUS, C
1322 2B57      02517         incf    ACCUH, F
1324 E8C2      02518         addulnk 0x2             ; modulo done
               02519 
               02520 
               02521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02522 ;;;;;;;;                                   ;;;;;;;;
               02523 ;;;;;;;;           THE BIG LOOP            ;;;;;;;;
               02524 ;;;;;;;;                                   ;;;;;;;;
               02525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02526 
               02527 #ifndef caml_useprim_caml_set_interruption_handler
1326 02528 _THE_BIG_LOOP:
1326 0009      02529         tblrd*+                 ; load opcode
1328 34F5      02530         rlcf    TABLAT, W       ; shift opcode
132A 0014      02531         callw                   ; indirect to "the big switch"
132C 0009      02532         tblrd*+                 ; unroll 1
132E 34F5      02533         rlcf    TABLAT, W
1330 0014      02534         callw
1332 0009      02535         tblrd*+                 ; unroll 2
1334 34F5      02536         rlcf    TABLAT, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1336 0014      02537         callw
1338 0009      02538         tblrd*+                 ; unroll 3
133A 34F5      02539         rlcf    TABLAT, W
133C 0014      02540         callw
133E 0009      02541         tblrd*+                 ; unroll 4
1340 34F5      02542         rlcf    TABLAT, W
1342 0014      02543         callw
1344 0009      02544         tblrd*+                 ; unroll 5
1346 34F5      02545         rlcf    TABLAT, W
1348 0014      02546         callw
134A 0009      02547         tblrd*+                 ; unroll 6
134C 34F5      02548         rlcf    TABLAT, W
134E 0014      02549         callw
1350 0009      02550         tblrd*+                 ; unroll 7
1352 34F5      02551         rlcf    TABLAT, W
1354 0014      02552         callw
1356 D7E7      02553         bra     _THE_BIG_LOOP
               02554 #else
               02555 _THE_BIG_LOOP:
               02556         tblrd*+                 ; load opcode
               02557         rlcf    TABLAT, W       ; shift opcode
               02558         callw                   ; indirect to "the big switch"
               02559         btfsc   INT_FLAGS_3, 7  ; check interrupt_flag
               02560         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02561         tblrd*+                 ; unroll 1
               02562         rlcf    TABLAT, W
               02563         callw
               02564         btfsc   INT_FLAGS_3, 7
               02565         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02566         tblrd*+                 ; unroll 2
               02567         rlcf    TABLAT, W
               02568         callw
               02569         btfsc   INT_FLAGS_3, 7
               02570         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02571         tblrd*+                 ; unroll 3
               02572         rlcf    TABLAT, W
               02573         callw
               02574         btfss   INT_FLAGS_3, 7
               02575         bra     _THE_BIG_LOOP
               02576 _INDIRECTED_CAML_INTERRUPT_HANDLER
               02577         goto    caml_interrupt_handler
               02578 #endif
               00071         include "/usr/local/lib/ocapic/runtime.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00012 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00013 ;;;;;;;;                                   ;;;;;;;;
               00014 ;;;;;;;;             FAILURES              ;;;;;;;;
               00015 ;;;;;;;;                                   ;;;;;;;;
               00016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00017 
               00018 M_RAISE_FROM_GLOBAL macro EXN_IND
               00019                 M_CHECK_UNFULL_HEAP 0x1
               00020                 clrf    POSTINC1        ; write tag
               00021                 movlw   0x1
               00022                 movwf   POSTINC1        ; write size
               00023                 movff   FSR1L, ACCUL    ; ACCU <- exn
               00024                 movff   FSR1H, ACCUH
               00025                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
               00026                 movwf   POSTINC1
               00027                 clrf    POSTINC1
               00028                 bra     caml_extern_raise
               00029         endm
               00030 
               00031 M_WRITE_BYTE macro C
               00032                 movlw   C
               00033                 movwf   POSTINC1
               00034         endm
               00035 
1358 00036 caml_raise_out_of_memory:
1358 0E5C      00037         movlw   low OOM_FIELD0_L
135A 6F56      00038         movwf   ACCUL
135C 0E0F      00039         movlw   high OOM_FIELD0_L
135E 6F57      00040         movwf   ACCUH
1360 EFE8 F009 00041         goto    caml_extern_raise
               00042 
1364 00043 caml_raise_division_by_0:
               00044         M_RAISE_FROM_GLOBAL DIVISION_BY_0_IND
                   M                 M_CHECK_UNFULL_HEAP 0x1
1364 515E          M                 movf    CUR_HEAP_END, W
1366 62E2          M                 cpfseq  FSR1H
1368 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
136A 0E04          M                 movlw   (N * 0x2 + 0x2)
136C 24E1          M                 addwf   FSR1L, W
136E E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1370 EC6D F00A     M                 call    caml_gc_exec
                   M 
1374 515E          M                 movf    CUR_HEAP_END, W
1376 62E2          M                 cpfseq  FSR1H
1378 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
137A 0E04          M                 movlw   (N * 0x2 + 0x2)
137C 24E1          M                 addwf   FSR1L, W
137E B0D8          M                 btfsc   STATUS, C
1380 EFAC F009     M                 goto    caml_raise_out_of_memory
1384     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000005         M CPT_CUH = CPT_CUH + 1
1384 6AE6          M                 clrf    POSTINC1        ; write tag
1386 0E01          M                 movlw   0x1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1388 6EE6          M                 movwf   POSTINC1        ; write size
138A CFE1 FF56     M                 movff   FSR1L, ACCUL    ; ACCU <- exn
138E CFE2 FF57     M                 movff   FSR1H, ACCUH
1392 0E0B          M                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
1394 6EE6          M                 movwf   POSTINC1
1396 6AE6          M                 clrf    POSTINC1
1398 D01B          M                 bra     caml_extern_raise
               00045         
139A 00046 caml_raise_stack_overflow:
               00047         M_RAISE_FROM_GLOBAL STACK_OVERFLOW_IND
                   M                 M_CHECK_UNFULL_HEAP 0x1
139A 515E          M                 movf    CUR_HEAP_END, W
139C 62E2          M                 cpfseq  FSR1H
139E D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
13A0 0E04          M                 movlw   (N * 0x2 + 0x2)
13A2 24E1          M                 addwf   FSR1L, W
13A4 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
13A6 EC6D F00A     M                 call    caml_gc_exec
                   M 
13AA 515E          M                 movf    CUR_HEAP_END, W
13AC 62E2          M                 cpfseq  FSR1H
13AE D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
13B0 0E04          M                 movlw   (N * 0x2 + 0x2)
13B2 24E1          M                 addwf   FSR1L, W
13B4 B0D8          M                 btfsc   STATUS, C
13B6 EFAC F009     M                 goto    caml_raise_out_of_memory
13BA     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000006         M CPT_CUH = CPT_CUH + 1
13BA 6AE6          M                 clrf    POSTINC1        ; write tag
13BC 0E01          M                 movlw   0x1
13BE 6EE6          M                 movwf   POSTINC1        ; write size
13C0 CFE1 FF56     M                 movff   FSR1L, ACCUL    ; ACCU <- exn
13C4 CFE2 FF57     M                 movff   FSR1H, ACCUH
13C8 0E11          M                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
13CA 6EE6          M                 movwf   POSTINC1
13CC 6AE6          M                 clrf    POSTINC1
13CE D000          M                 bra     caml_extern_raise
               00048 
13D0 00049 caml_extern_raise:
13D0 0560      00050         decf    TRAP_SPL, W             ; trapSp = 0 ?
13D2 1161      00051         iorwf   TRAP_SPH, W
13D4 B4D8      00052         btfsc   STATUS, Z
13D6 D5D6      00053         bra     _STOP                   ; yes -> stop
13D8 CF60 FFD9 00054         movff   TRAP_SPL, FSR2L         ; no -> restore stack top
13DC CF61 FFDA 00055         movff   TRAP_SPH, FSR2H
13E0 CFDC FFF6 00056         movff   PREINC2, TBLPTRL        ; set code pointer
13E4 CFDC FFF7 00057         movff   PREINC2, TBLPTRH
13E8 CFDC FF60 00058         movff   PREINC2, TRAP_SPL       ; restore trapSp
13EC CFDC FF61 00059         movff   PREINC2, TRAP_SPH
13F0 CFDC FF54 00060         movff   PREINC2, ENVL           ; restore environment
13F4 CFDC FF55 00061         movff   PREINC2, ENVH
13F8 CFDC FF62 00062         movff   PREINC2, EXTRA_ARGS     ; restore extraArgs
13FC E881      00063         addfsr  FSR2, 0x1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
13FE 0E09      00064         movlw   high _THE_BIG_SWITCH    ; restore PCLATH
1400 6EFA      00065         movwf   PCLATH
1402 6AFC      00066         clrf    STKPTR                  ; clear return stack
1404 D790      00067         bra     _THE_BIG_LOOP           ; goto THE_BIG_LOOP
               00068 
               00069 
               00070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00071 ;;;;;;;;                                   ;;;;;;;;
               00072 ;;;;;;;;               HEAP                ;;;;;;;;
               00073 ;;;;;;;;                                   ;;;;;;;;
               00074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00075 
               00076         ;; check allocation in heap
               00077         ;; start gc if necessary
               00078         ;; raise exception if memory overflow
               00079         ;; give its argument (the size of block) in TABLAT
1406 00080 _CHECK_UNFULL_HEAP_GEN:
1406 515E      00081         movf    CUR_HEAP_END, W
1408 60E2      00082         cpfslt  FSR1H
140A D009      00083         bra     _CHECK_UNFULL_HEAP_GEN_L0
140C 0FFF      00084         addlw   -0x1
140E 62E2      00085         cpfseq  FSR1H
1410 0012      00086         return
               00087 
               00088         ;; if FSR1H = CUR_HEAP_END - 1
1412 50E1      00089         movf    FSR1L, W
1414 24F5      00090         addwf   TABLAT, W
1416 E206      00091         bc      _CHECK_UNFULL_HEAP_GEN_L1
1418 24F5      00092         addwf   TABLAT, W
141A E206      00093         bc      _CHECK_UNFULL_HEAP_GEN_L2
141C 0012      00094         return
               00095 
               00096         ;; if FSR1H = CUR_HEAP_END
141E 00097 _CHECK_UNFULL_HEAP_GEN_L0:
141E 50E1      00098         movf    FSR1L, W
1420 24F5      00099         addwf   TABLAT, W
1422 E205      00100         bc      _CHECK_UNFULL_HEAP_GEN_L3
1424 00101 _CHECK_UNFULL_HEAP_GEN_L1:
1424 24F5      00102         addwf   TABLAT, W
1426 E203      00103         bc      _CHECK_UNFULL_HEAP_GEN_L3
1428 00104 _CHECK_UNFULL_HEAP_GEN_L2:
1428 0F02      00105         addlw   0x2
142A E201      00106         bc      _CHECK_UNFULL_HEAP_GEN_L3
142C 0012      00107         return
               00108 
142E 00109 _CHECK_UNFULL_HEAP_GEN_L3:
               00110         ;; execute GC
142E D855      00111         rcall   caml_gc_exec
               00112 
               00113         ;; check a new time
1430 515E      00114         movf    CUR_HEAP_END, W
1432 60E2      00115         cpfslt  FSR1H
1434 D009      00116         bra     _CHECK_UNFULL_HEAP_GEN_L4
1436 0FFF      00117         addlw   -0x1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1438 62E2      00118         cpfseq  FSR1H
143A 0012      00119         return
               00120 
               00121         ;; if FSR1H = CUR_HEAP_END - 1
143C 50E1      00122         movf    FSR1L, W
143E 24F5      00123         addwf   TABLAT, W
1440 E206      00124         bc      _CHECK_UNFULL_HEAP_GEN_L5
1442 24F5      00125         addwf   TABLAT, W
1444 E206      00126         bc      _CHECK_UNFULL_HEAP_GEN_L6
1446 0012      00127         return
               00128 
               00129         ;; if FSR1H = CUR_HEAP_END
1448 00130 _CHECK_UNFULL_HEAP_GEN_L4:
1448 50E1      00131         movf    FSR1L, W
144A 24F5      00132         addwf   TABLAT, W
144C E205      00133         bc      _CHECK_UNFULL_HEAP_GEN_L7
144E 00134 _CHECK_UNFULL_HEAP_GEN_L5:
144E 24F5      00135         addwf   TABLAT, W
1450 E203      00136         bc      _CHECK_UNFULL_HEAP_GEN_L7
1452 00137 _CHECK_UNFULL_HEAP_GEN_L6:
1452 0F02      00138         addlw   0x2
1454 A0D8      00139         btfss   STATUS, C
1456 0012      00140         return
1458 00141 _CHECK_UNFULL_HEAP_GEN_L7:
1458 EFAC F009 00142         goto    caml_raise_out_of_memory
               00143 
               00144 
               00145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00146 ;;;;;;;;                                   ;;;;;;;;
               00147 ;;;;;;;;          ALLOC DUMMY              ;;;;;;;;
               00148 ;;;;;;;;                                   ;;;;;;;;
               00149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00150 
145C 00151 caml_alloc_dummy_float:
145C 5156      00152         movf    ACCUL, W
145E 0BFE      00153         andlw   B'11111110'
1460 E019      00154         bz      caml_alloc_dummy_atom   ; size = 0 ?
1462 6EF5      00155         movwf   TABLAT
1464 EC03 F00A 00156         call    _CHECK_UNFULL_HEAP_GEN
1468 0EFE      00157         movlw   DOUBLE_ARRAY_TAG
146A 6EE6      00158         movwf   POSTINC1                ; write tag
146C D007      00159         bra     caml_alloc_dummy_l0
               00160         
146E 00161 caml_alloc_dummy:
146E 3157      00162         rrcf    ACCUH, W                ; STATUS.C ignored
1470 3156      00163         rrcf    ACCUL, W                ; TABLAT <- size
1472 E010      00164         bz      caml_alloc_dummy_atom   ; size = 0 ?
1474 6EF5      00165         movwf   TABLAT
1476 EC03 F00A 00166         call    _CHECK_UNFULL_HEAP_GEN
147A 6AE6      00167         clrf    POSTINC1                ; write tag
147C 00168 caml_alloc_dummy_l0:
147C 50F5      00169         movf    TABLAT, W               ; write size
147E 6EE6      00170         movwf   POSTINC1
1480 CFE1 FF56 00171         movff   FSR1L, ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1484 CFE2 FF57 00172         movff   FSR1H, ACCUH
1488 0E01      00173         movlw   0x1
148A 00174 caml_alloc_dummy_loop:                  ; fill ()
148A 6EE6      00175         movwf   POSTINC1
148C 6AE6      00176         clrf    POSTINC1
148E 2EF5      00177         decfsz  TABLAT, F
1490 D7FC      00178         bra     caml_alloc_dummy_loop
1492 0012      00179         return
1494 00180 caml_alloc_dummy_atom:
               00181         M_ATOM0
1494 0E88          M                 movlw   low ATOM0_ADR
1496 6F56          M                 movwf   ACCUL
1498 0E0F          M                 movlw   high ATOM0_ADR
149A 6F57          M                 movwf   ACCUH
149C 0012      00182         return
               00183         
149E 00184 caml_update_dummy:               ; fail if size = 0
149E CFE1 FF68 00185         movff   FSR1L, TMP_REG_1        ; save FSR1
14A2 CFE2 FF69 00186         movff   FSR1H, TMP_REG_2
14A6 CF56 FFE1 00187         movff   ACCUL, FSR1L            ; FSR1 <- dummy
14AA CF57 FFE2 00188         movff   ACCUH, FSR1H
14AE EB01 FFE9 00189         movsf   [0x1], FSR0L            ; FSR0 <- newval
14B2 EB02 FFEA 00190         movsf   [0x2], FSR0H
14B6 E902      00191         subfsr  FSR0, 0x2
14B8 E942      00192         subfsr  FSR1, 0x2
14BA CFEE FFE6 00193         movff   POSTINC0, POSTINC1      ; copy tag
14BE 50EE      00194         movf    POSTINC0, W             ; read size
14C0 E007      00195         bz      caml_update_dummy_end
14C2 E841      00196         addfsr  FSR1, 0x1
14C4 00197 caml_update_dummy_loop:
14C4 CFEE FFE6 00198         movff   POSTINC0, POSTINC1      ; loop size times
14C8 CFEE FFE6 00199         movff   POSTINC0, POSTINC1
14CC 2EE8      00200         decfsz  WREG, F
14CE D7FA      00201         bra     caml_update_dummy_loop
14D0 00202 caml_update_dummy_end:
14D0 CF68 FFE1 00203         movff   TMP_REG_1, FSR1L        ; restore FSR1
14D4 CF69 FFE2 00204         movff   TMP_REG_2, FSR1H
14D8 0012      00205         return
               00206 
               00207         
               00208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00209 ;;;;;;;;                                   ;;;;;;;;
               00210 ;;;;;;;;          STOP & COPY              ;;;;;;;;
               00211 ;;;;;;;;                                   ;;;;;;;;
               00212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00213 
               00214 #ifdef CAML_STOP_AND_COPY_GC
14DA 00215 caml_gc_exec:
               00216 ;;; PHASE 1: copy all roots if necessary
               00217 
               00218         ;; exchange heap anchors and ends
               00219         ;; FSR1 <- new current heap anchor
14DA 6AE1      00220         clrf    FSR1L
14DC 515F      00221         movf    OTH_HEAP_END, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
14DE 0FFB      00222         addlw   (-HEAP_SIZE + 0x1)
14E0 6EE2      00223         movwf   FSR1H
14E2 515F      00224         movf    OTH_HEAP_END, W
14E4 CF5E FF5F 00225         movff   CUR_HEAP_END, OTH_HEAP_END
14E8 6F5E      00226         movwf   CUR_HEAP_END
               00227 
               00228         ;; save stack top in GC_TMP_REG_2:1
               00229         ;; FSR0 <- stack top
14EA 50D9      00230         movf    FSR2L, W
14EC 6F63      00231         movwf   GC_TMP_REG_1
14EE 6EE9      00232         movwf   FSR0L
14F0 50DA      00233         movf    FSR2H, W
14F2 6F64      00234         movwf   GC_TMP_REG_2
14F4 6EEA      00235         movwf   FSR0H
               00236 
               00237         ;; check and copy stack elements
14F6 E801      00238         addfsr  FSR0, 0x1
14F8 D001      00239         bra     caml_sacgc_stack_loop_test
14FA 00240 caml_sacgc_stack_loop:
14FA D82B      00241         rcall   caml_sacgc_check_and_copy
14FC 00242 caml_sacgc_stack_loop_test:
14FC 0E54      00243         movlw   (low (STACK_ANCHOR + 0x1))
14FE 62E9      00244         cpfseq  FSR0L
1500 D7FC      00245         bra     caml_sacgc_stack_loop
1502 0E0F      00246         movlw   (high (STACK_ANCHOR + 0x1))
1504 62EA      00247         cpfseq  FSR0H
1506 D7F9      00248         bra     caml_sacgc_stack_loop
               00249         
               00250         ;; check and copy environment, accu and interrupt_handler
1508 D824      00251         rcall   caml_sacgc_check_and_copy
150A D823      00252         rcall   caml_sacgc_check_and_copy
150C D822      00253         rcall   caml_sacgc_check_and_copy
               00254 
               00255 ;;; PHASE 2: sweep new heap and upgrade it
               00256 
               00257         ;; FSR0 <- new heap anchor
150E 6AE9      00258         clrf    FSR0L
1510 515E      00259         movf    CUR_HEAP_END, W
1512 0FFB      00260         addlw   (-HEAP_SIZE + 0x1)
1514 6EEA      00261         movwf   FSR0H
               00262 
               00263         ;; loop on new heap
1516 D010      00264         bra     caml_sacgc_heap_loop_test
1518 00265 caml_sacgc_heap_loop:
1518 0EFB      00266         movlw   NO_SCAN_TAG
151A 64EE      00267         cpfsgt  POSTINC0        ; read tag
151C D008      00268         bra     caml_sacgc_scan_block
151E 50EE      00269         movf    POSTINC0, W     ; skip block ; read size
1520 26E9      00270         addwf   FSR0L, F        ; FSR0 += 2 * size
1522 B0D8      00271         btfsc   STATUS, C
1524 2AEA      00272         incf    FSR0H, F
1526 26E9      00273         addwf   FSR0L, F
1528 B0D8      00274         btfsc   STATUS, C
152A 2AEA      00275         incf    FSR0H, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
152C D005      00276         bra     caml_sacgc_heap_loop_test
152E 00277 caml_sacgc_scan_block:
152E CFEE FF65 00278         movff   POSTINC0, GC_TMP_REG_3  ; GC_TMP_REG_3 <- size
1532 00279 caml_sacgc_loop_block:
1532 D80F      00280         rcall   caml_sacgc_check_and_copy
1534 2F65      00281         decfsz  GC_TMP_REG_3, F         ; loop size times
1536 D7FD      00282         bra     caml_sacgc_loop_block
1538 00283 caml_sacgc_heap_loop_test:              ; if FSR0 = FSR1 then break else loop
1538 50E9      00284         movf    FSR0L, W
153A 62E1      00285         cpfseq  FSR1L
153C D7ED      00286         bra     caml_sacgc_heap_loop
153E 50EA      00287         movf    FSR0H, W
1540 62E2      00288         cpfseq  FSR1H
1542 D7EA      00289         bra     caml_sacgc_heap_loop
               00290         
               00291         ;; restore stack top
1544 CF63 FFD9 00292         movff   GC_TMP_REG_1, FSR2L
1548 CF64 FFDA 00293         movff   GC_TMP_REG_2, FSR2H
               00294         ;; increment counter
154C 4B76      00295         infsnz  GC_COUNTER_L, F
154E 2B77      00296         incf    GC_COUNTER_H, F
1550 0012      00297         return
               00298 
               00299 
1552 00300 caml_sacgc_check_and_copy:
               00301 ;;; check *FSR0
               00302 ;;; if it is a pointer in the old heap then
               00303 ;;;        if it has not been copied then copy;
               00304 ;;;        update *FSR0;
               00305 ;;; increment FSR0 by 2
1552 50EE      00306         movf    POSTINC0, W             ; W <- (*FSR0++)L
1554 B0E8      00307         btfsc   WREG, 0                 ; isint ?
1556 D040      00308         bra     caml_sacgc_copy_skip_1  ; yes -> skip
1558 6ED9      00309         movwf   FSR2L                   ; FSR2L <- low pointer
155A 50ED      00310         movf    POSTDEC0, W             ; W <- (*FSR0--)H
155C 6EDA      00311         movwf   FSR2H                   ; FSR2H <- high pointer
155E 5D5F      00312         subwf   OTH_HEAP_END, W         ; in old heap ?
1560 E33A      00313         bnc     caml_sacgc_copy_skip_2  ; no -> skip
1562 0FFA      00314         addlw   -HEAP_SIZE
1564 E238      00315         bc      caml_sacgc_copy_skip_2  ; no -> skip
1566 E982      00316         subfsr  FSR2, 0x2               ; FSR2 -= 2
1568 0EF9      00317         movlw   INFIX_TAG               ; is infix block ?
156A 6200      00318         cpfseq  [0x0]
156C D014      00319         bra     caml_sacgc_copy_block   ; no -> just copy
156E 5001      00320         movf    [0x1], W                ; yes -> shift FSR2
1570 6F67      00321         movwf   GC_TMP_REG_5            ; save offset in GC_TMP_REG_5
1572 5ED9      00322         subwf   FSR2L, F                ; FSR2 -= 2 * offset
1574 A0D8      00323         btfss   STATUS, C
1576 06DA      00324         decf    FSR2H, F
1578 5ED9      00325         subwf   FSR2L, F
157A A0D8      00326         btfss   STATUS, C
157C 06DA      00327         decf    FSR2H, F
157E D80B      00328         rcall   caml_sacgc_copy_block   ; copy the encapsulating block
1580 5167      00329         movf    GC_TMP_REG_5, W         ; shift result by 2 * offset
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1582 E902      00330         subfsr  FSR0, 0x2
1584 26EE      00331         addwf   POSTINC0, F
1586 B0D8      00332         btfsc   STATUS, C
1588 2AEF      00333         incf    INDF0, F
158A E901      00334         subfsr  FSR0, 0x1
158C 26EE      00335         addwf   POSTINC0, F
158E B0D8      00336         btfsc   STATUS, C
1590 2AEF      00337         incf    INDF0, F
1592 E801      00338         addfsr  FSR0, 0x1
1594 0012      00339         return
1596 00340 caml_sacgc_copy_block:
1596 5001      00341         movf    [0x1], W                   ; is already copied ? read block size
1598 E105      00342         bnz     caml_sacgc_copy_not_copied ; no -> copy
159A 5002      00343         movf    [0x2], W                   ; yes -> just update *FSR0
159C 6EEE      00344         movwf   POSTINC0
159E 5003      00345         movf    [0x3], W
15A0 6EEE      00346         movwf   POSTINC0
15A2 0012      00347         return
15A4 00348 caml_sacgc_copy_not_copied:             ; copy block
15A4 CFDE FFE6 00349         movff   POSTINC2, POSTINC1      ; copy tag ; FSR2 ++ ; FSR1 ++
15A8 50DF      00350         movf    INDF2, W                ; read size
15AA 6ADE      00351         clrf    POSTINC2                ; clear size ; FSR2 ++
15AC 6EE6      00352         movwf   POSTINC1                ; copy size
15AE 6F66      00353         movwf   GC_TMP_REG_4            ; GC_TMP_REG_4 <- size
15B0 50E1      00354         movf    FSR1L, W                ; *FSR0 <- FSR1 ; *FSR2 <- FSR1
15B2 CFDF FFE6 00355         movff   INDF2, POSTINC1         ; *FSR1 <- *FSR2
15B6 6EEE      00356         movwf   POSTINC0                ; FSR0 += 2 ; FSR1 += 2 ; FSR2 += 2
15B8 6EDE      00357         movwf   POSTINC2
15BA 50E2      00358         movf    FSR1H, W                ; ok because address are even
15BC CFDF FFE6 00359         movff   INDF2, POSTINC1
15C0 6EEE      00360         movwf   POSTINC0
15C2 6EDE      00361         movwf   POSTINC2
15C4 0766      00362         decf    GC_TMP_REG_4, F         ; GC_TMP_REG_4 --
15C6 E009      00363         bz      caml_sacgc_copy_skip_0  ; if size = 1 then skip loop
15C8 00364 caml_sacgc_copy_block_loop:
15C8 CFDE FFE6 00365         movff   POSTINC2, POSTINC1
15CC CFDE FFE6 00366         movff   POSTINC2, POSTINC1
15D0 2F66      00367         decfsz  GC_TMP_REG_4, F         ; loop size - 1 times
15D2 D7FA      00368         bra     caml_sacgc_copy_block_loop
15D4 0012      00369         return
15D6 00370 caml_sacgc_copy_skip_2:
15D6 52EE      00371         movf    POSTINC0, F             ; FSR0 ++
15D8 00372 caml_sacgc_copy_skip_1:
15D8 52EE      00373         movf    POSTINC0, F             ; FSR0 ++
15DA 00374 caml_sacgc_copy_skip_0:
15DA 0012      00375         return
               00376 #endif
               00377 
               00378 
               00379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00380 ;;;;;;;;                                   ;;;;;;;;
               00381 ;;;;;;;;          MARK & COMPACT           ;;;;;;;;
               00382 ;;;;;;;;                                   ;;;;;;;;
               00383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00384 
               00385 ; |HXXXHXX:..:...HX:.HX:..HXHXHX:.HXX:...HX:..:..        |
               00386 ;   1   1  11     1 111 11 1 1 1 111  11  1 11    1111
               00387 ;
               00388 ; |HXXXHXX:..:...HX:.HX:..HXHXHX:.HXX:...HX:..:..HX      |
               00389 ;   1   1  11     1 111 11 1 1 1 111  11  1 11    1 1111
               00390 ;         --       --  --       --   --    --       
               00391 
               00392 #ifdef CAML_MARK_AND_COMPACT_GC
               00393 caml_gc_exec:
               00394         ;; FSR2
               00395         movff   FSR2L, GC_TMP_REG_3
               00396         movff   FSR2H, GC_TMP_REG_4
               00397 
               00398         ;; clear the bitmap
               00399         movlw   HEAP2_ANCHOR
               00400         movwf   FSR0H
               00401         clrf    FSR0L
               00402 caml_macgc_clear_bitmap_loop:
               00403         clrf    INDF0
               00404         incfsz  FSR0L, F
               00405         bra     caml_macgc_clear_bitmap_loop
               00406 
               00407         ;; mark 0011 at the end of used heap
               00408         addfsr  FSR1, 0x4
               00409         movff   FSR1L, FSR0L
               00410         movff   FSR1H, FSR0H
               00411         rcall   caml_macgc_set_bit
               00412         addfsr  FSR1, 0x2
               00413         movff   FSR1L, FSR0L
               00414         movff   FSR1H, FSR0H
               00415         rcall   caml_macgc_set_bit
               00416         
               00417         ;; FSR2 <- roots high addr
               00418         addfsr  FSR2, 0x2
               00419         movff   FSR2L, FSR0L
               00420         movff   FSR2H, FSR0H
               00421         rcall   caml_macgc_set_bit
               00422         lfsr    FSR2, INT_FUN_L
               00423         ;; FSR1 <- 0xFFE
               00424         lfsr    FSR1, 0xFFE
               00425 
               00426 ;;; MARKING ALGORITHM
               00427 caml_macgc_mark_start:
               00428         btfsc   [0x0], 0                   ; is *FSR2 a pointer?
               00429         bra     caml_macgc_mark_next       ; no
               00430         movlw   (HEAP1_END + 0x1)          ; is *FSR2 in heap?
               00431         cpfslt  [0x1]
               00432         bra     caml_macgc_mark_next       ; no
               00433         movlw   HEAP1_ANCHOR
               00434         cpfslt  [0x1]
               00435         bra     caml_macgc_mark_test_mark  ; yes
               00436 caml_macgc_mark_next:
               00437         movff   FSR2L, FSR0L               ; FSR0 <- FSR2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00438         movff   FSR2H, FSR0H
               00439         rcall   caml_macgc_test_bit        ; already marked?
               00440         bnz     caml_macgc_mark_end_block  ; yes
               00441         subfsr  FSR2, 0x2                  ; FSR2 --
               00442         bra     caml_macgc_mark_start
               00443 caml_macgc_mark_test_mark:
               00444         movf    [0x0], W                   ; FSR0 <- *FSR2
               00445         movwf   FSR0L
               00446         movf    [0x1], W
               00447         movwf   FSR0H
               00448         subfsr  FSR0, 0x2
               00449         movlw   INFIX_TAG                  ; is infix block?
               00450         cpfseq  INDF0
               00451         bra     caml_macgc_mark_no_infix   ; no
               00452         movf    POSTINC0, F                ; FSR0 ++
               00453         movf    POSTINC0, W                ; W <- offset
               00454         movwf   GC_TMP_REG_1               ; TMP_1 <- offset
               00455         subwf   FSR0L, F                   ; FSR0 -= 2 * offset
               00456         btfss   STATUS, C
               00457         decf    FSR0H, F
               00458         subwf   FSR0L, F
               00459         btfss   STATUS, C
               00460         decf    FSR0H, F
               00461         rcall   caml_macgc_test_and_set_bit ; already marked?
               00462         bnz     caml_macgc_mark_next        ; yes
               00463         movf    [0x0], W
               00464         movwf   FSR0L
               00465         movf    [0x1], W
               00466         movwf   FSR0H
               00467         rcall   caml_macgc_set_bit          ; mark the infix block
               00468         bra     caml_macgc_mark_gen_block
               00469 caml_macgc_mark_no_infix:
               00470         movlw   NO_SCAN_TAG                 ; scan block ?
               00471         cpfsgt  POSTINC0
               00472         bra     caml_macgc_mark_scan_block  ; yes
               00473         movf    POSTINC0, F                 ; FSR0 ++
               00474         rcall   caml_macgc_set_bit          ; mark block
               00475         bra     caml_macgc_mark_next
               00476 caml_macgc_mark_scan_block:
               00477         movf    POSTINC0, F                 ; FSR0 ++
               00478         rcall   caml_macgc_test_and_set_bit ; already marked?
               00479         bnz     caml_macgc_mark_next        ; yes
               00480         clrf    GC_TMP_REG_1                ; TMP_1 <- 0
               00481 caml_macgc_mark_gen_block:
               00482         movff   FSR1L, FSR0L    ; FSR0 <- FSR1
               00483         movff   FSR1H, FSR0H
               00484         movff   FSR2L, FSR1L    ; FSR1 <- FSR2
               00485         movff   FSR2H, FSR1H
               00486         movf    [0x0], W        ; W:GC_TMP_REG_5 <- *FSR2
               00487         movwf   GC_TMP_REG_5
               00488         movf    [0x1], W
               00489         movff   FSR0L, POSTINC2 ; *FSR2 <- FSR0
               00490         movff   FSR0H, INDF2
               00491         movwf   FSR2H           ; FSR2 <- W:GC_TMP_REG_5
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00492         movff   GC_TMP_REG_5, FSR2L
               00493         movf    GC_TMP_REG_1, W
               00494         bz      caml_macgc_mark_gen_block_no_infix
               00495         subwf   FSR2L, F                   ; FSR2 -= 2 * offset
               00496         btfss   STATUS, C
               00497         decf    FSR2H, F
               00498         subwf   FSR2L, F
               00499         btfss   STATUS, C
               00500         decf    FSR2H, F
               00501 caml_macgc_mark_gen_block_no_infix:
               00502         movf    POSTDEC2, W     ; W <- size ; FSR2 -= 2
               00503         movf    POSTDEC2, W
               00504         addwf   FSR2L, F        ; FSR2 += 2 * size
               00505         btfsc   STATUS, C
               00506         incf    FSR2H, F
               00507         addwf   FSR2L, F
               00508         btfsc   STATUS, C
               00509         incf    FSR2H, F
               00510         bra     caml_macgc_mark_start
               00511 caml_macgc_mark_test_infix:
               00512         subfsr  FSR2, 0x2                 ; is infix block?
               00513         movlw   INFIX_TAG
               00514         cpfseq  [0x0]
               00515         bra     caml_macgc_mark_goback_p2 ; no
               00516         subfsr  FSR2, 0x2                 ; skip infix header
               00517         bsf     FSR1L, 0x0                ; tag FSR1
               00518         bra     caml_macgc_mark_start     ; continue scan
               00519 caml_macgc_mark_goback_p2:
               00520         addfsr  FSR2, 0x2       ; restore FSR2
               00521 caml_macgc_mark_goback:
               00522         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00523         movff   FSR2H, FSR0H
               00524         btfss   FSR1L, 0x0      ; is FSR1 tagged?
               00525         bra     caml_macgc_mark_goback_no_infix ; no
               00526         bcf     FSR1L, 0X0      ; untag FSR1
               00527 caml_macgc_mark_goback_infix_loop:
               00528         addfsr  FSR2, 2         ; start at first infix block
               00529         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00530         movff   FSR2H, FSR0H
               00531         rcall   caml_macgc_test_bit ; is marked?
               00532         bz      caml_macgc_mark_goback_infix_loop ; no
               00533         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00534         movff   FSR2H, FSR0H
               00535         rcall   caml_macgc_clear_bit ; unmark infix block
               00536         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00537         movff   FSR2H, FSR0H
               00538 caml_macgc_mark_goback_no_infix:
               00539         movff   FSR1L, FSR2L    ; FSR2 <- FSR1
               00540         movff   FSR1H, FSR2H
               00541         movf    [0x0], W        ; FSR1 <- *FSR2
               00542         movwf   FSR1L
               00543         movf    [0x1], W
               00544         movwf   FSR1H
               00545         movf    FSR0L, W        ; *FSR2 <- FSR0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00546         movwf   [0x0]
               00547         movf    FSR0H, W
               00548         movwf   [0x1]
               00549         bra     caml_macgc_mark_next
               00550 caml_macgc_mark_end_block:
               00551         movlw   0xFE
               00552         cpfseq  FSR1L
               00553         bra     caml_macgc_mark_test_infix
               00554         movlw   0x0F
               00555         cpfseq  FSR1H
               00556         bra     caml_macgc_mark_test_infix
               00557 
               00558 ;;; COMPUTE OFFSETS
               00559         setf    GC_TMP_REG_1                          ; TMP_1 <- B'11111111'
               00560         lfsr    FSR2, 0xF87                           ; FSR2 <- unimplemented @
               00561         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00562         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x01) ; FSR0 <- bitmap @1st fld
               00563         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00564         movwf   GC_TMP_REG_5
               00565         andwf   INDF0, W                              ; first block alive?
               00566         bz      caml_macgc_offset_enter_dead_section  ; no
               00567 caml_macgc_offset_section_loop:
               00568         ;; FSR1 = @ tag of block
               00569         ;; TMP_5|FSR0 = bitmap @ of 1st field
               00570         ;; current [TMP_5|FSR0] bit = 1
               00571         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00572         rlncf   GC_TMP_REG_5, F
               00573 caml_macgc_offset_section_loop_entry:
               00574         movf    PREINC1, W             ; W <- size
               00575         movff   GC_TMP_REG_1, POSTINC1 ; write TMP_1 in the size field
               00576         addwf   FSR1L, F               ; FSR1 += 2 * size
               00577         btfsc   STATUS, C
               00578         incf    FSR1H, F
               00579         addwf   FSR1L, F
               00580         btfsc   STATUS, C
               00581         incf    FSR1H, F
               00582         addwf   FSR0L, F               ; TMP_5|FSR0 += size
               00583         btfsc   STATUS, C
               00584         rlncf   GC_TMP_REG_5, F
               00585         movf    GC_TMP_REG_5, W        ; living block?
               00586         andwf   INDF0, W
               00587         bnz     caml_macgc_offset_section_loop ; yes
               00588 caml_macgc_offset_enter_dead_section:
               00589         ;; FSR1 = @ of 1st free byte of dead section
               00590         ;; TMP_5|FSR0 = bitmap @ of 2nd free word of dead section
               00591         ;; current [TMP_5|FSR0] bit = 0
               00592         movf    GC_TMP_REG_5, W        ; set 2nd bit of dead section
               00593         iorwf   INDF0, F
               00594         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00595         rlncf   GC_TMP_REG_5, F
               00596         movf    GC_TMP_REG_5, W        ; 3rd bit set?
               00597         andwf   INDF0, W
               00598         bnz     caml_macgc_offset_end  ; yes => end of heap
               00599         movf    GC_TMP_REG_5, W        ; set 3rd bit of dead section
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00600         iorwf   INDF0, F
               00601         swapf   FSR1L, W               ; GC_TMP_REG_1 <- (FSR1 >> 4)
               00602         andlw   B'00001111'
               00603         movwf   GC_TMP_REG_1
               00604         swapf   FSR1H, W
               00605         andlw   B'11110000'
               00606         iorwf   GC_TMP_REG_1, F
               00607         movf    [0x0], W               ; TMP_2 <- low offset
               00608         movwf   GC_TMP_REG_2
               00609         movf    [0x1], W               ; W <- high offset
               00610         movff   FSR1L, FSR2L           ; FSR2 <- FSR1
               00611         movff   FSR1H, FSR2H
               00612         addfsr  FSR1, 0x2              ; FSR1 += 2
               00613         movwf   [0x1]                  ; write offset @ *FSR2
               00614         movf    GC_TMP_REG_2, W
               00615         movwf   [0x0]
               00616         infsnz  [0x0], F               ; (*FSR2) ++
               00617         incf    [0x1], F
               00618 caml_macgc_offset_dead_section_loop:
               00619         infsnz  [0x0], F               ; (*FSR2) ++
               00620         incf    [0x1], F
               00621         addfsr  FSR1, 0x2              ; FSR1 += 2
               00622         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00623         rlncf   GC_TMP_REG_5, F
               00624         movf    GC_TMP_REG_5, W        ; start living block?
               00625         andwf   INDF0, W
               00626         bz      caml_macgc_offset_dead_section_loop ; no => continue
               00627         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00628         rlncf   GC_TMP_REG_5, F
               00629         movf    GC_TMP_REG_5, W        ; end of heap?
               00630         andwf   INDF0, W
               00631         bz      caml_macgc_offset_section_loop_entry ; no
               00632 caml_macgc_offset_end:
               00633         ;; FSR1 = @ end of 1st byte after the end of heap
               00634         ;; TMP_5|FSR0L = bitmap @ of the 3rd bit after the end of heap
               00635         infsnz  FSR0L, F               ; set the 5th bit
               00636         rlncf   GC_TMP_REG_5, F
               00637         infsnz  FSR0L, F
               00638         rlncf   GC_TMP_REG_5, F
               00639         movf    GC_TMP_REG_5, W
               00640         iorwf   INDF0, F
               00641 
               00642 ;;; SHIFT ADDRESSES
               00643         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00644         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x02) ; FSR0 <- bitmap @2nd fld
               00645         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00646         movwf   GC_TMP_REG_5
               00647         andwf   INDF0, W                              ; first block alive?
               00648         bnz      caml_macgc_shift_dead_section        ; no
               00649 caml_macgc_shift_enter_block:
               00650         ;; FSR1 = @ tag of block
               00651         ;; TMP_5|FSR0 = bitmap @ 2nd field
               00652         movlw   NO_SCAN_TAG                 ; scan block ?
               00653         cpfsgt  POSTINC1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00654         bra     caml_macgc_shift_scan_block ; yes
               00655         movf    POSTINC1, F            ; skip (unsound) size field
               00656 caml_macgc_shift_skip_block_loop:
               00657         addfsr  FSR1, 0x2              ; skip field
               00658         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00659         rlncf   GC_TMP_REG_5, F
               00660         movf    GC_TMP_REG_5, W        ; end of block?
               00661         andwf   INDF0, W
               00662         bz      caml_macgc_shift_skip_block_loop ; no
               00663         bra     caml_macgc_shift_block_end
               00664 caml_macgc_shift_scan_block:
               00665         ;; FSR1 = @ of size field
               00666         ;; TMP_5|FSR0 = bitmap @ of 2nd field
               00667         movf    POSTINC1, F                ; skip (unsound) size field
               00668 caml_macgc_shift_scan_block_loop:
               00669         ;; FSR1 = @ low field
               00670         ;; TMP_5|FSR0 = bitmap @ of next field
               00671         rcall   caml_macgc_shift_address
               00672         movf    POSTINC1, F            ; skip high byte of field
               00673         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00674         rlncf   GC_TMP_REG_5, F
               00675         movf    GC_TMP_REG_5, W        ; end of block?
               00676         andwf   INDF0, W
               00677         bz      caml_macgc_shift_scan_block_loop ; no
               00678 caml_macgc_shift_block_end:
               00679         ;; FSR1 = @ tag of next block | @ first dead byte
               00680         ;; TMP_5|FSR0 = bitmap @ of 1st field
               00681         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00682         rlncf   GC_TMP_REG_5, F
               00683         movf    GC_TMP_REG_5, W        ; start of dead section?
               00684         andwf   INDF0, W
               00685         bz      caml_macgc_shift_enter_block ; no
               00686 caml_macgc_shift_dead_section:
               00687         ;; FSR1 = @ of 3rd word of dead section
               00688         ;; TMP_5|FSR0 = bitmap @ of 2nd free word
               00689         addfsr  FSR1, 0x2              ; FSR1 += 2
               00690 caml_macgc_shift_dead_section_loop:
               00691         ;; FSR1 = @ of 2nd free word of dead section
               00692         ;; TMP_5|FSR0 = bitmap @ of 3rd free word
               00693         addfsr  FSR1, 0x2
               00694         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00695         rlncf   GC_TMP_REG_5, F
               00696         movf    GC_TMP_REG_5, W        ; start living section?
               00697         andwf   INDF0, W
               00698         bz      caml_macgc_shift_dead_section_loop ; no
               00699         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00700         rlncf   GC_TMP_REG_5, F
               00701         movf    GC_TMP_REG_5, W        ; end of heap?
               00702         andwf   INDF0, W
               00703         bz      caml_macgc_shift_enter_block ; no
               00704 
               00705 ;;; SHIFT ROOTS
               00706         movff   GC_TMP_REG_3, FSR1L
               00707         movff   GC_TMP_REG_4, FSR1H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00708 caml_macgc_shift_roots_loop:
               00709         movf    POSTINC1, F
               00710         rcall   caml_macgc_shift_address
               00711         movlw   (low (INT_FUN_H))
               00712         cpfseq  FSR1L
               00713         bra     caml_macgc_shift_roots_loop
               00714         movlw   (high (INT_FUN_H))
               00715         cpfseq  FSR1H
               00716         bra     caml_macgc_shift_roots_loop
               00717 
               00718 ;;; COMPACT BLOCKS & RESTORE SIZES
               00719         lfsr    FSR2, (HEAP1_ANCHOR * 0x100)          ; FSR2 <- @ of 1st block
               00720         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00721         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x02) ; FSR0 <- bitmap @2nd fld
               00722         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00723         movwf   GC_TMP_REG_5
               00724         andwf   INDF0, W                              ; first block alive?
               00725         bnz     caml_macgc_compact_dead_section       ; no
               00726 caml_macgc_compact_section_loop:
               00727         ;; FSR2 = @ tag of from block
               00728         ;; FSR2 = @ tag of to block
               00729         ;; TMP_5|FSR0 = bitmap @ 2nd field
               00730         movff   POSTINC2, POSTINC1     ; copy tag
               00731         clrf    INDF1                  ; to size <- 0
               00732 caml_macgc_compact_block_loop:
               00733         incf    INDF1, F               ; to size ++
               00734         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00735         rlncf   GC_TMP_REG_5, F
               00736         movf    GC_TMP_REG_5, W        ; end of block?
               00737         andwf   INDF0, W
               00738         bz      caml_macgc_compact_block_loop ; no
               00739         movf    POSTINC2, F            ; skip (unsound) from size
               00740         movf    POSTINC1, W            ; W <- to size
               00741 caml_macgc_compact_copy_field_loop:    ; copy fields
               00742         movff   POSTINC2, POSTINC1
               00743         movff   POSTINC2, POSTINC1
               00744         decfsz  WREG, F
               00745         bra     caml_macgc_compact_copy_field_loop
               00746         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00747         rlncf   GC_TMP_REG_5, F
               00748         movf    GC_TMP_REG_5, W        ; start of dead section?
               00749         andwf   INDF0, W
               00750         bz      caml_macgc_compact_section_loop ; no
               00751 caml_macgc_compact_dead_section:
               00752         ;; FSR2 = @ of 1st free byte of dead section
               00753         ;; TMP_5|FSR0 = bitmap @ of 3rd free word
               00754         addfsr  FSR2, 0x2              ; FSR2 += 2
               00755         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00756         rlncf   GC_TMP_REG_5, F
               00757         movf    GC_TMP_REG_5, W        ; start living section?
               00758         andwf   INDF0, W
               00759         bz      caml_macgc_compact_dead_section ; no
               00760         addfsr  FSR2, 0x2              ; FSR2 += 2
               00761         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00762         rlncf   GC_TMP_REG_5, F
               00763         movf    GC_TMP_REG_5, W        ; end of heap?
               00764         andwf   INDF0, W
               00765         bz      caml_macgc_compact_section_loop ; no
               00766         
               00767         ;; restore stack top
               00768         movff   GC_TMP_REG_3, FSR2L
               00769         movff   GC_TMP_REG_4, FSR2H
               00770         ;; increment counter
               00771         infsnz  GC_COUNTER_L, F
               00772         incf    GC_COUNTER_H, F
               00773         return
               00774 
               00775 ;;; Update value pointed by FSR1 (i.e, shift address if needed)
               00776 ;;; Before call: FSR1 = @ of low byte
               00777 ;;; After call: FSR1 = @ of high byte
               00778 caml_macgc_shift_address:
               00779         btfsc   POSTINC1, 0                ; is int?
               00780         return                             ; yes
               00781         movlw   (HEAP1_END + 0x1)          ; is *FSR1 in heap?
               00782         cpfslt  INDF1
               00783         return                             ; no
               00784         movlw   HEAP1_ANCHOR
               00785         cpfslt  INDF1
               00786         bra     caml_macgc_shift_scan_block_update_pointer ; yes
               00787         return
               00788 caml_macgc_shift_scan_block_update_pointer:
               00789         ;; FSR1 = @ of high byte of field
               00790         movff   POSTDEC1, FSR2H        ; FSR2 <- @ of block
               00791         movff   POSTINC1, FSR2L
               00792         subfsr  FSR2, 0x2              ; FSR2 <- @ of tag
               00793         movlw   INFIX_TAG
               00794         cpfseq  POSTINC2, W
               00795         bra     caml_macgc_shift_scan_block_update_pointer_no_infix
               00796         movf    INDF2, W
               00797         subwf   FSR2L, F                   ; FSR2 -= 2 * offset
               00798         btfss   STATUS, C
               00799         decf    FSR2H, F
               00800         subwf   FSR2L, F
               00801         btfss   STATUS, C
               00802         decf    FSR2H, F
               00803 caml_macgc_shift_scan_block_update_pointer_no_infix:
               00804         ;; FSR1 = @ of high byte of field
               00805         ;; FSR2 = @ of size
               00806         infsnz  INDF2, W               ; is FSR2 = 0xFF?
               00807         return                         ; yes => nothing to do
               00808         subfsr  FSR2, 0x5
               00809         swapf   FSR2L, W               ; W <- (FSR2 >> 4)
               00810         andlw   B'00001111'
               00811         movwf   GC_TMP_REG_2
               00812         swapf   FSR2H, W
               00813         andlw   B'11110000'
               00814         iorwf   GC_TMP_REG_2, W
               00815         addfsr  FSR2, 0x5
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00816         cpfseq  POSTINC2               ; local?
               00817         bra     caml_macgc_shift_scan_block_update_distant_pointer ; no
               00818 caml_macgc_shift_scan_block_update_local_pointer:
               00819         ;; FSR2 = @ of 1st field
               00820         movlw   B'00000001'
               00821         rrcf    FSR2H, F
               00822         rrcf    FSR2L, F
               00823         btfsc   FSR2H, 0
               00824         rlncf   WREG, F
               00825         btfss   FSR2H, 1
               00826         bra     caml_macgc_shift_compute_bit_addr_0
               00827         rlncf   WREG, F
               00828         rlncf   WREG, F
               00829 caml_macgc_shift_compute_bit_addr_0:
               00830         btfss   FSR2H, 2
               00831         bra     caml_macgc_shift_compute_bit_addr_1
               00832         rlncf   WREG, F
               00833         rlncf   WREG, F
               00834         rlncf   WREG, F
               00835         rlncf   WREG, F
               00836 caml_macgc_shift_compute_bit_addr_1:
               00837         movwf   GC_TMP_REG_2
               00838         movlw   HEAP2_ANCHOR
               00839         movwf   FSR2H
               00840 caml_macgc_shift_scan_block_update_local_pointer_loop:
               00841         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00842         infsnz  FSR2L, W
               00843         rrncf   GC_TMP_REG_2, F
               00844         movf    GC_TMP_REG_2, W            ; a first 1?
               00845         andwf   INDF2, W
               00846         bz      caml_macgc_shift_scan_block_update_local_pointer_loop ; no
               00847         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00848         infsnz  FSR2L, W
               00849         rrncf   GC_TMP_REG_2, F
               00850         movf    GC_TMP_REG_2, W            ; a second 1?
               00851         andwf   INDF2, W
               00852         bz      caml_macgc_shift_scan_block_update_local_pointer_loop ; no
               00853         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00854         infsnz  FSR2L, W
               00855         rrncf   GC_TMP_REG_2, F
               00856         movf    GC_TMP_REG_2, W            ; a third 1?
               00857         andwf   INDF2, W
               00858         bz      caml_macgc_shift_scan_block_update_local_pointer_end  ; no
               00859         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00860         infsnz  FSR2L, W
               00861         rrncf   GC_TMP_REG_2, F
               00862 caml_macgc_shift_scan_block_update_local_pointer_end:
               00863         clrf    WREG
               00864         bcf     STATUS, C                  ; FSR2 <- bitmap decode FSR2
               00865         rlcf    FSR2L, F
               00866         rlcf    WREG, F
               00867 caml_macgc_shift_scan_block_update_local_pointer_end_decode_loop:
               00868         btfsc   GC_TMP_REG_2, 0
               00869         bra     caml_macgc_shift_scan_block_update_local_pointer_end_decode_end
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00870         addlw   0x2
               00871         rrncf   GC_TMP_REG_2, F
               00872         bra     caml_macgc_shift_scan_block_update_local_pointer_end_decode_loop
               00873 caml_macgc_shift_scan_block_update_local_pointer_end_decode_end:
               00874         movwf   FSR2H
               00875         movf    POSTDEC1, F     ; *FSR1 -= 2 * offset
               00876         movf    [0x0], W
               00877         subwf   POSTINC1, F
               00878         movf    [0x1], W
               00879         subwfb  POSTDEC1, F
               00880         movf    [0x0], W
               00881         subwf   POSTINC1, F
               00882         movf    [0x1], W
               00883         subwfb  INDF1, F
               00884         return
               00885 caml_macgc_shift_scan_block_update_distant_pointer:
               00886         movf    POSTDEC2, F
               00887         swapf   INDF2, W
               00888         movwf   FSR2H
               00889         andlw   B'11111110'
               00890         iorlw   B'00001110'
               00891         movwf   FSR2L
               00892         addfsr  FSR2, 0x6
               00893         bra     caml_macgc_shift_scan_block_update_local_pointer
               00894 
               00895 caml_macgc_set_bit:
               00896 ;;; set the bitmap bit @FSR0
               00897 ;;; use W and GC_TMP_REG_5
               00898         movlw   B'00000001'
               00899         rcall   caml_macgc_compute_bit_addr
               00900         movf    GC_TMP_REG_5, W
               00901         iorwf   INDF0, F
               00902         return
               00903 
               00904 caml_macgc_clear_bit:
               00905 ;;; clear the bitmap bit @FSR0
               00906 ;;; use W and GC_TMP_REG_5
               00907         movlw   B'11111110'
               00908         rcall   caml_macgc_compute_bit_addr
               00909         movf    GC_TMP_REG_5, W
               00910         andwf   INDF0, F
               00911         return
               00912 
               00913 caml_macgc_test_bit:
               00914 ;;; test the bitmap bit @FSR0, result in STATUS.Z
               00915 ;;; use W and GC_TMP_REG_5
               00916         movlw   B'00000001'
               00917         rcall   caml_macgc_compute_bit_addr
               00918         movf    GC_TMP_REG_5, W
               00919         andwf   INDF0, W
               00920         return
               00921 
               00922 caml_macgc_test_and_set_bit:
               00923 ;;; test the bitmap bit @FSR0, set it if not, result in STATUS.Z
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00924 ;;; use W and GC_TMP_REG_5
               00925         movlw   B'00000001'
               00926         rcall   caml_macgc_compute_bit_addr
               00927         movf    GC_TMP_REG_5, W ; test bit
               00928         andwf   INDF0, W
               00929         btfss   STATUS, Z
               00930         return
               00931         movf    GC_TMP_REG_5, W ; set bit
               00932         iorwf   INDF0, F
               00933         bsf     STATUS, Z       ; set STATUS.Z
               00934         return
               00935         
               00936 caml_macgc_compute_bit_addr:
               00937 ;;; FSR0 <- bitmap addr of FSR0
               00938 ;;; rotate W ((FSR0 >> 9) & 0b111) times, result in GC_TMP_REG_5
               00939         rrcf    FSR0H, F
               00940         rrcf    FSR0L, F
               00941         btfsc   FSR0H, 0
               00942         rlncf   WREG, F
               00943         btfss   FSR0H, 1
               00944         bra     caml_macgc_compute_bit_addr_0
               00945         rlncf   WREG, F
               00946         rlncf   WREG, F
               00947 caml_macgc_compute_bit_addr_0:
               00948         btfss   FSR0H, 2
               00949         bra     caml_macgc_compute_bit_addr_1
               00950         rlncf   WREG, F
               00951         rlncf   WREG, F
               00952         rlncf   WREG, F
               00953         rlncf   WREG, F
               00954 caml_macgc_compute_bit_addr_1:
               00955         movwf   GC_TMP_REG_5
               00956         movlw   HEAP2_ANCHOR
               00957         movwf   FSR0H
               00958         return
               00959 #endif
               00072 
1600           00073         org     0x1600
1600 00074 caml_externals:
1600 EF6F F026 00075         goto    caml_string_get
1604 EF0F F02F 00076         goto    caml_neq_float
1608 EF34 F033 00077         goto    caml_mul_float
160C EF0B F02F 00078         goto    caml_eq_float
1610 EF15 F02F 00079         goto    caml_gt_float
1614 EFD3 F032 00080         goto    caml_abs_float
1618 EF19 F02F 00081         goto    caml_ge_float
161C EF2E F033 00082         goto    caml_add_float
1620 EF37 F033 00083         goto    caml_div_float
1624 EF1B F033 00084         goto    caml_int_of_float
1628 EF4D F026 00085         goto    caml_create_string
162C EF99 F026 00086         goto    caml_string_set
1630 EFF9 F032 00087         goto    caml_float_of_int
1634 EF31 F033 00088         goto    caml_sub_float
1638 EF13 F02F 00089         goto    caml_lt_float
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
163C EFAD F032 00090         goto    caml_neg_float
1640 EF19 F026 00091         goto    caml_ml_string_length
1644 EFF3 F025 00092         goto    caml_blit_string
1648 EF31 F026 00093         goto    caml_fill_string
164C EF49 F026 00094         goto    caml_is_printable
1650 EF11 F02F 00095         goto    caml_lessthan
1654 EFFE F02E 00096         goto    caml_int32_to_int
1658 EF23 F02A 00097         goto    caml_int32_mod
165C EF67 F029 00098         goto    caml_int32_div
1660 EF17 F02F 00099         goto    caml_greaterequal
1664 EF09 F02F 00100         goto    caml_equal
1668 EF2F F029 00101         goto    caml_int32_neg
166C EF54 F029 00102         goto    caml_int32_sub
1670 EFFE F02E 00103         goto    caml_int64_to_int
1674 EF0D F02D 00104         goto    caml_int64_mod
1678 EFD6 F02B 00105         goto    caml_int64_div
167C EF76 F02B 00106         goto    caml_int64_neg
1680 EFB7 F02B 00107         goto    caml_int64_sub
1684 EF4E F027 00108         goto    caml_array_get
1688 EF01 F027 00109         goto    caml_make_vect
168C EF57 F027 00110         goto    caml_array_set
1690 EF66 F028 00111         goto    caml_int_of_string
1694 EF0D F02F 00112         goto    caml_notequal
1698 EF25 F02E 00113         goto    caml_int64_and
169C EF44 F02E 00114         goto    caml_int64_shift_right_unsigned
16A0 EF75 F02E 00115         goto    caml_int64_of_int
16A4 EF98 F02B 00116         goto    caml_int64_add
16A8 EFC5 F02A 00117         goto    caml_int32_and
16AC EFD8 F02A 00118         goto    caml_int32_shift_right_unsigned
16B0 EFF5 F02A 00119         goto    caml_int32_of_int
16B4 EF41 F029 00120         goto    caml_int32_add
16B8 EF43 F032 00121         goto    caml_eeprom_write
16BC EF35 F032 00122         goto    caml_eeprom_read
16C0 EF28 F032 00123         goto    caml_eeprom_get_size
16C4 EF48 F028 00124         goto    caml_pic_clear_bit
16C8 EF2A F028 00125         goto    caml_pic_write_reg
16CC EF3D F028 00126         goto    caml_pic_set_bit
16D0 EF35 F028 00127         goto    caml_pic_read_reg
16D4 EF60 F028 00128         goto    caml_pic_tris_of_port
16D8 EF54 F028 00129         goto    caml_pic_test_bit
16DC EFFE F031 00130         goto    caml_sleep_millis
               00131 
16E0 00132 caml_bytecode:
16E0 5F54 291F 00133         db      0x54, 0x5f, 0x1f, 0x29, 0x2a, 0x03, 0x19, 0x22
     032A 2219 
16E8 790B F156 00134         db      0x0b, 0x79, 0x56, 0xf1, 0x16, 0x63, 0x1e, 0x1b
     6316 1B1E 
16F0 0021 201E 00135         db      0x21, 0x00, 0x1e, 0x20, 0x5e, 0x00, 0x0a, 0x7f
     005E 7F0A 
16F8 FF76 8C0A 00136         db      0x76, 0xff, 0x0a, 0x8c, 0x45, 0x00, 0xcb, 0x17
     0045 17CB 
1700 7F00 0034 00137         db      0x00, 0x7f, 0x34, 0x00, 0x0a, 0x8c, 0x1d, 0x00
     8C0A 001D 
1708 1710 0413 00138         db      0x10, 0x17, 0x13, 0x04, 0x00, 0x54, 0xf1, 0x17
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5400 17F1 
1710 5700 310F 00139         db      0x00, 0x57, 0x0f, 0x31, 0x17, 0x3c, 0x17, 0x42
     3C17 4217 
1718 4D17 3C17 00140         db      0x17, 0x4d, 0x17, 0x3c, 0x17, 0xc5, 0x17, 0xc5
     C517 C517 
1720 C517 C517 00141         db      0x17, 0xc5, 0x17, 0xc5, 0x17, 0xc5, 0x17, 0xc5
     C517 C517 
1728 C517 C517 00142         db      0x17, 0xc5, 0x17, 0xc5, 0x17, 0xc5, 0x17, 0xc5
     C517 C517 
1730 0617 1069 00143         db      0x17, 0x06, 0x69, 0x10, 0x10, 0x7f, 0x02, 0x00
     7F10 0002 
1738 2432 0416 00144         db      0x32, 0x24, 0x16, 0x04, 0x13, 0x04, 0x00, 0x54
     0413 5400 
1740 17F1 1064 00145         db      0xf1, 0x17, 0x64, 0x10, 0x10, 0x10, 0x7f, 0x02
     1010 027F 
1748 3200 1624 00146         db      0x00, 0x32, 0x24, 0x16, 0x04, 0x19, 0x22, 0x0e
     1904 0E22 
1750 027F 7900 00147         db      0x7f, 0x02, 0x00, 0x79, 0x56, 0x5c, 0x17, 0x63
     5C56 6317 
1758 1B1E 1025 00148         db      0x1e, 0x1b, 0x25, 0x10, 0x03, 0x7f, 0x02, 0x00
     7F03 0002 
1760 201E 005E 00149         db      0x1e, 0x20, 0x5e, 0x00, 0x0a, 0x7f, 0x76, 0xff
     7F0A FF76 
1768 8C0A 0045 00150         db      0x0a, 0x8c, 0x45, 0x00, 0x94, 0x17, 0x00, 0x7f
     1794 7F00 
1770 002A 138C 00151         db      0x2a, 0x00, 0x8c, 0x13, 0x00, 0x7d, 0x17, 0x13
     7D00 1317 
1778 0002 C054 00152         db      0x02, 0x00, 0x54, 0xc0, 0x17, 0x08, 0x10, 0x00
     0817 0010 
1780 1012 0D00 00153         db      0x12, 0x10, 0x00, 0x0d, 0x7f, 0xa0, 0xff, 0x12
     A07F 12FF 
1788 0012 1212 00154         db      0x12, 0x00, 0x12, 0x12, 0x00, 0x7f, 0x04, 0x00
     7F00 0004 
1790 2433 051C 00155         db      0x33, 0x24, 0x1c, 0x05, 0x00, 0x7f, 0xfa, 0xff
     7F00 FFFA 
1798 398C BD00 00156         db      0x8c, 0x39, 0x00, 0xbd, 0x17, 0x19, 0x22, 0x10
     1917 1022 
17A0 047F 7A00 00157         db      0x7f, 0x04, 0x00, 0x7a, 0x56, 0xab, 0x17, 0x63
     AB56 6317 
17A8 1B1E 0121 00158         db      0x1e, 0x1b, 0x21, 0x01, 0x12, 0x12, 0x00, 0x12
     1212 1200 
17B0 0012 0D6C 00159         db      0x12, 0x00, 0x6c, 0x0d, 0x00, 0x12, 0x14, 0x00
     1200 0014 
17B8 0234 1C24 00160         db      0x34, 0x02, 0x24, 0x1c, 0x05, 0x13, 0x02, 0x00
     1305 0002 
17C0 1E63 251B 00161         db      0x63, 0x1e, 0x1b, 0x25, 0x12, 0x13, 0x04, 0x00
     1312 0004 
17C8 F654 0017 00162         db      0x54, 0xf6, 0x17, 0x00, 0x7f, 0xfa, 0xff, 0x8c
     FA7F 8CFF 
17D0 0039 17EE 00163         db      0x39, 0x00, 0xee, 0x17, 0x19, 0x22, 0x7f, 0xfe
     2219 FE7F 
17D8 0DFF 567A 00164         db      0xff, 0x0d, 0x7a, 0x56, 0xe2, 0x17, 0x63, 0x1e
     17E2 1E63 
17E0 211B 1001 00165         db      0x1b, 0x21, 0x01, 0x10, 0x10, 0x6c, 0x0d, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6C10 000D 
17E8 3411 2402 00166         db      0x11, 0x34, 0x02, 0x24, 0x16, 0x05, 0x13, 0x02
     0516 0213 
17F0 6300 1B1E 00167         db      0x00, 0x63, 0x1e, 0x1b, 0x25, 0x0c, 0x04, 0x0e
     0C25 0E04 
17F8 6C0C 0015 00168         db      0x0c, 0x6c, 0x15, 0x00, 0x10, 0x70, 0x6e, 0x7f
     7010 7F6E 
1800 FFA0 7F0E 00169         db      0xa0, 0xff, 0x0e, 0x7f, 0x02, 0x00, 0x32, 0x24
     0002 2432 
1808 0412 2A29 00170         db      0x12, 0x04, 0x29, 0x2a, 0x04, 0x19, 0x20, 0x0b
     1904 0B20 
1810 5679 1818 00171         db      0x79, 0x56, 0x18, 0x18, 0x63, 0x1e, 0x19, 0x21
     1E63 2119 
1818 1E00 5E1E 00172         db      0x00, 0x1e, 0x1e, 0x5e, 0x00, 0x0a, 0x87, 0x75
     0A00 7587 
1820 3E00 0018 00173         db      0x00, 0x3e, 0x18, 0x00, 0x87, 0x91, 0x00, 0x35
     9187 3500 
1828 0018 367F 00174         db      0x18, 0x00, 0x7f, 0x36, 0xff, 0x8b, 0x05, 0x00
     8BFF 0005 
1830 1889 8E54 00175         db      0x89, 0x18, 0x54, 0x8e, 0x18, 0x00, 0x86, 0x8b
     0018 8B86 
1838 8E00 5418 00176         db      0x00, 0x8e, 0x18, 0x54, 0x89, 0x18, 0x00, 0x87
     1889 8700 
1840 005D 185F 00177         db      0x5d, 0x00, 0x5f, 0x18, 0x00, 0x87, 0x61, 0x00
     8700 0061 
1848 1889 0F05 00178         db      0x89, 0x18, 0x05, 0x0f, 0x0c, 0x10, 0x6c, 0x15
     100C 156C 
1850 7000 7F6E 00179         db      0x00, 0x70, 0x6e, 0x7f, 0xa0, 0xff, 0x0f, 0x0f
     FFA0 0F0F 
1858 027F 3200 00180         db      0x7f, 0x02, 0x00, 0x32, 0x24, 0x16, 0x05, 0x00
     1624 0005 
1860 5787 8900 00181         db      0x87, 0x57, 0x00, 0x89, 0x18, 0x00, 0x7f, 0xaa
     0018 AA7F 
1868 57FF 7103 00182         db      0xff, 0x57, 0x03, 0x71, 0x18, 0x89, 0x18, 0x7d
     8918 7D18 
1870 0518 0F69 00183         db      0x18, 0x05, 0x69, 0x0f, 0x0f, 0x0f, 0x7f, 0x02
     0F0F 027F 
1878 3200 1624 00184         db      0x00, 0x32, 0x24, 0x16, 0x05, 0x64, 0x0f, 0x0f
     6405 0F0F 
1880 0F0F 027F 00185         db      0x0f, 0x0f, 0x7f, 0x02, 0x00, 0x32, 0x24, 0x16
     3200 1624 
1888 6305 191E 00186         db      0x05, 0x63, 0x1e, 0x19, 0x25, 0x0e, 0x19, 0x20
     0E25 2019 
1890 FE7F 0CFF 00187         db      0x7f, 0xfe, 0xff, 0x0c, 0x7a, 0x56, 0x9c, 0x18
     567A 189C 
1898 1E63 2119 00188         db      0x63, 0x1e, 0x19, 0x21, 0x00, 0x10, 0x10, 0x10
     1000 1010 
18A0 3310 1624 00189         db      0x10, 0x33, 0x24, 0x16, 0x05, 0x29, 0x2a, 0x04
     2905 042A 
18A8 0035 1E00 00190         db      0x35, 0x00, 0x00, 0x1e, 0x1d, 0x5e, 0x02, 0x56
     5E1D 5602 
18B0 18E0 1D19 00191         db      0xe0, 0x18, 0x19, 0x1d, 0x36, 0x02, 0x00, 0x1e
     0236 1E00 
18B8 5E1D 5E04 00192         db      0x1d, 0x5e, 0x04, 0x5e, 0x06, 0x56, 0xe0, 0x18
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5606 18E0 
18C0 0435 1E00 00193         db      0x35, 0x04, 0x00, 0x1e, 0x1d, 0x5e, 0x08, 0x56
     5E1D 5608 
18C8 18DA 5602 00194         db      0xda, 0x18, 0x02, 0x56, 0xd4, 0x18, 0x35, 0x06
     18D4 0635 
18D0 5400 1987 00195         db      0x00, 0x54, 0x87, 0x19, 0x35, 0x08, 0x00, 0x54
     0835 5400 
18D8 1987 0A35 00196         db      0x87, 0x19, 0x35, 0x0a, 0x00, 0x54, 0x87, 0x19
     5400 1987 
18E0 1D19 1D1E 00197         db      0x19, 0x1d, 0x1e, 0x1d, 0x5e, 0x02, 0x56, 0xef
     025E EF56 
18E8 3518 000C 00198         db      0x18, 0x35, 0x0c, 0x00, 0x54, 0x87, 0x19, 0x19
     8754 1919 
18F0 5D1D 0F0A 00199         db      0x1d, 0x5d, 0x0a, 0x0f, 0x87, 0x91, 0x00, 0x2e
     9187 2E00 
18F8 0519 367F 00200         db      0x19, 0x05, 0x7f, 0x36, 0xff, 0x0a, 0x8c, 0x05
     0AFF 058C 
1900 0900 1319 00201         db      0x00, 0x09, 0x19, 0x13, 0x02, 0x00, 0x54, 0x5d
     0002 5D54 
1908 0019 0357 00202         db      0x19, 0x00, 0x57, 0x03, 0x12, 0x19, 0x1a, 0x19
     1912 191A 
1910 1922 0E63 00203         db      0x22, 0x19, 0x63, 0x0e, 0x0d, 0x33, 0x23, 0x54
     330D 5423 
1918 1928 0C03 00204         db      0x28, 0x19, 0x03, 0x0c, 0x34, 0x05, 0x22, 0x54
     0534 5422 
1920 1928 0E63 00205         db      0x28, 0x19, 0x63, 0x0e, 0x0d, 0x34, 0x09, 0x23
     340D 2309 
1928 0213 5400 00206         db      0x13, 0x02, 0x00, 0x54, 0x61, 0x19, 0x05, 0x87
     1961 8705 
1930 008B 195D 00207         db      0x8b, 0x00, 0x5d, 0x19, 0x05, 0x7f, 0x76, 0xff
     7F05 FF76 
1938 0357 1940 00208         db      0x57, 0x03, 0x40, 0x19, 0x48, 0x19, 0x54, 0x19
     1948 1954 
1940 0D64 330C 00209         db      0x64, 0x0d, 0x0c, 0x33, 0x23, 0x54, 0x61, 0x19
     5423 1961 
1948 1E02 341D 00210         db      0x02, 0x1e, 0x1d, 0x34, 0x05, 0x22, 0x1e, 0x1b
     2205 1B1E 
1950 5421 1961 00211         db      0x21, 0x54, 0x61, 0x19, 0x64, 0x0d, 0x0c, 0x34
     0D64 340C 
1958 2309 6154 00212         db      0x09, 0x23, 0x54, 0x61, 0x19, 0x63, 0x1e, 0x17
     6319 171E 
1960 3621 000E 00213         db      0x21, 0x36, 0x0e, 0x00, 0x1e, 0x1d, 0x5e, 0x0c
     1D1E 0C5E 
1968 7D56 0419 00214         db      0x56, 0x7d, 0x19, 0x04, 0x56, 0x79, 0x19, 0x00
     7956 0019 
1970 1036 1E00 00215         db      0x36, 0x10, 0x00, 0x1e, 0x18, 0x22, 0x54, 0x84
     2218 8454 
1978 0019 8454 00216         db      0x19, 0x00, 0x54, 0x84, 0x19, 0x00, 0x36, 0x12
     0019 1236 
1980 1E00 2218 00217         db      0x00, 0x1e, 0x18, 0x22, 0x13, 0x04, 0x00, 0x0a
     0413 0A00 
1988 0D0F 0B34 00218         db      0x0f, 0x0d, 0x34, 0x0b, 0x27, 0x12, 0x29, 0x2a
     1227 2A29 
1990 0102 366D 00219         db      0x02, 0x01, 0x6d, 0x36, 0x14, 0x00, 0x1e, 0x18
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0014 181E 
1998 3622 0016 00220         db      0x22, 0x36, 0x16, 0x00, 0x5e, 0x04, 0x36, 0x18
     045E 1836 
19A0 0C00 065E 00221         db      0x00, 0x0c, 0x5e, 0x06, 0x56, 0xb4, 0x19, 0x67
     B456 6719 
19A8 0057 0F68 00222         db      0x57, 0x00, 0x68, 0x0f, 0x0f, 0x68, 0x10, 0x34
     680F 3410 
19B0 2403 0614 00223         db      0x03, 0x24, 0x14, 0x06, 0x35, 0x1a, 0x00, 0x0c
     1A35 0C00 
19B8 0C5E C656 00224         db      0x5e, 0x0c, 0x56, 0xc6, 0x19, 0x63, 0x0e, 0x0e
     6319 0E0E 
19C0 0E0E 2433 00225         db      0x0e, 0x0e, 0x33, 0x24, 0x12, 0x05, 0x64, 0x0e
     0512 0E64 
19C8 360E 001C 00226         db      0x0e, 0x36, 0x1c, 0x00, 0x0f, 0x5e, 0x04, 0x0e
     5E0F 0E04 
19D0 0234 1224 00227         db      0x34, 0x02, 0x24, 0x12, 0x05, 0x29, 0x2a, 0x04
     2905 042A 
19D8 0C00 0E5E 00228         db      0x00, 0x0c, 0x5e, 0x0e, 0x36, 0x1e, 0x00, 0x0d
     1E36 0D00 
19E0 085E F656 00229         db      0x5e, 0x08, 0x56, 0xf6, 0x19, 0x05, 0x7f, 0x02
     0519 027F 
19E8 0F00 360F 00230         db      0x00, 0x0f, 0x0f, 0x36, 0x20, 0x00, 0x10, 0x5e
     0020 5E10 
19F0 0F10 2432 00231         db      0x10, 0x0f, 0x32, 0x24, 0x16, 0x05, 0x00, 0x5d
     0516 5D00 
19F8 0A12 1586 00232         db      0x12, 0x0a, 0x86, 0x15, 0x00, 0x0c, 0x1a, 0x67
     0C00 671A 
1A00 0057 1111 00233         db      0x57, 0x00, 0x11, 0x11, 0x11, 0x0e, 0x10, 0x34
     0E11 3410 
1A08 2402 061A 00234         db      0x02, 0x24, 0x1a, 0x06, 0x06, 0x7f, 0x02, 0x00
     7F06 0002 
1A10 1010 2236 00235         db      0x10, 0x10, 0x36, 0x22, 0x00, 0x11, 0x5e, 0x10
     1100 105E 
1A18 3210 1824 00236         db      0x10, 0x32, 0x24, 0x18, 0x05, 0x29, 0x2a, 0x04
     2905 042A 
1A20 0C00 0E5E 00237         db      0x00, 0x0c, 0x5e, 0x0e, 0x0a, 0x5d, 0x12, 0x0a
     5D0A 0A12 
1A28 0387 3900 00238         db      0x87, 0x03, 0x00, 0x39, 0x1a, 0x67, 0x5b, 0x00
     671A 005B 
1A30 1111 0E11 00239         db      0x11, 0x11, 0x11, 0x0e, 0x10, 0x33, 0x24, 0x1a
     3310 1A24 
1A38 0606 027F 00240         db      0x06, 0x06, 0x7f, 0x02, 0x00, 0x10, 0x10, 0x36
     1000 3610 
1A40 0024 5E11 00241         db      0x24, 0x00, 0x11, 0x5e, 0x04, 0x10, 0x32, 0x24
     1004 2432 
1A48 0518 2A29 00242         db      0x18, 0x05, 0x29, 0x2a, 0x05, 0x02, 0x55, 0x55
     0205 5555 
1A50 641A 5954 00243         db      0x1a, 0x64, 0x54, 0x59, 0x1a, 0x02, 0x7f, 0x04
     021A 047F 
1A58 0A00 087F 00244         db      0x00, 0x0a, 0x7f, 0x08, 0x00, 0x5d, 0x14, 0x0d
     5D00 0D14 
1A60 0186 6900 00245         db      0x86, 0x01, 0x00, 0x69, 0x1a, 0x63, 0x54, 0x76
     631A 7654 
1A68 031A 1388 00246         db      0x1a, 0x03, 0x88, 0x13, 0x00, 0x75, 0x1a, 0x67
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     7500 671A 
1A70 0013 7654 00247         db      0x13, 0x00, 0x54, 0x76, 0x1a, 0x03, 0x0a, 0x7f
     031A 7F0A 
1A78 0060 0D68 00248         db      0x60, 0x00, 0x68, 0x0d, 0x5f, 0x16, 0x05, 0x68
     165F 6805 
1A80 567A 1A8B 00249         db      0x7a, 0x56, 0x8b, 0x1a, 0x67, 0x5d, 0x00, 0x69
     5D67 6900 
1A88 5F0D 0616 00250         db      0x0d, 0x5f, 0x16, 0x06, 0x56, 0x95, 0x1a, 0x67
     9556 671A 
1A90 008B 9854 00251         db      0x8b, 0x00, 0x54, 0x98, 0x1a, 0x67, 0xcb, 0x00
     671A 00CB 
1A98 0D0D 165F 00252         db      0x0d, 0x0d, 0x5f, 0x16, 0x08, 0x10, 0x00, 0x0d
     1008 0D00 
1AA0 027F 0D00 00253         db      0x7f, 0x02, 0x00, 0x0d, 0x5f, 0x16, 0x67, 0x15
     165F 1567 
1AA8 1200 0010 00254         db      0x00, 0x12, 0x10, 0x00, 0x71, 0x7f, 0x60, 0x00
     7F71 0060 
1AB0 7F0D 0004 00255         db      0x0d, 0x7f, 0x04, 0x00, 0x0d, 0x5f, 0x16, 0x67
     5F0D 6716 
1AB8 0015 1012 00256         db      0x15, 0x00, 0x12, 0x10, 0x00, 0x72, 0x7f, 0x60
     7200 607F 
1AC0 0D00 067F 00257         db      0x00, 0x0d, 0x7f, 0x06, 0x00, 0x0d, 0x5f, 0x16
     0D00 165F 
1AC8 2635 0B00 00258         db      0x35, 0x26, 0x00, 0x0b, 0x5d, 0x18, 0x0f, 0x5e
     185D 5E0F 
1AD0 5E1A 1004 00259         db      0x1a, 0x5e, 0x04, 0x10, 0x0e, 0x6f, 0x0e, 0x7f
     6F0E 7F0E 
1AD8 FFFE 0C09 00260         db      0xfe, 0xff, 0x09, 0x0c, 0x7d, 0x55, 0x22, 0x1b
     557D 1B22 
1AE0 5D02 0A12 00261         db      0x02, 0x5d, 0x12, 0x0a, 0x86, 0x01, 0x00, 0xed
     0186 ED00 
1AE8 631A FA54 00262         db      0x1a, 0x63, 0x54, 0xfa, 0x1a, 0x00, 0x88, 0x13
     001A 1388 
1AF0 F900 671A 00263         db      0x00, 0xf9, 0x1a, 0x67, 0x13, 0x00, 0x54, 0xfa
     0013 FA54 
1AF8 001A 7F0A 00264         db      0x1a, 0x00, 0x0a, 0x7f, 0x60, 0x00, 0x0e, 0x12
     0060 120E 
1B00 0010 165F 00265         db      0x10, 0x00, 0x5f, 0x16, 0x35, 0x28, 0x00, 0x0b
     2835 0B00 
1B08 185D 5E10 00266         db      0x5d, 0x18, 0x10, 0x5e, 0x1a, 0x5e, 0x04, 0x14
     5E1A 1404 
1B10 0008 0413 00267         db      0x08, 0x00, 0x13, 0x04, 0x00, 0x01, 0x09, 0x7f
     0100 7F09 
1B18 0002 0414 00268         db      0x02, 0x00, 0x14, 0x04, 0x00, 0x01, 0x7a, 0x55
     0100 557A 
1B20 1AE0 1363 00269         db      0xe0, 0x1a, 0x63, 0x13, 0x04, 0x00, 0x02, 0x28
     0004 2802 
1B28 2914 012A 00270         db      0x14, 0x29, 0x2a, 0x01, 0x01, 0x6d, 0x36, 0x2a
     6D01 2A36 
1B30 1E00 2210 00271         db      0x00, 0x1e, 0x10, 0x22, 0x36, 0x2c, 0x00, 0x5e
     2C36 5E00 
1B38 0B04 0E5E 00272         db      0x04, 0x0b, 0x5e, 0x0e, 0x69, 0x0b, 0x33, 0x22
     0B69 2233 
1B40 0B0D 027F 00273         db      0x0d, 0x0b, 0x7f, 0x02, 0x00, 0x6e, 0x5d, 0x14
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6E00 145D 
1B48 7F0B FFFE 00274         db      0x0b, 0x7f, 0xfe, 0xff, 0x0b, 0x0e, 0x34, 0x02
     0E0B 0234 
1B50 6C23 005D 00275         db      0x23, 0x6c, 0x5d, 0x00, 0x0d, 0x0d, 0x5f, 0x16
     0D0D 165F 
1B58 681F 081B 00276         db      0x1f, 0x68, 0x1b, 0x08, 0x10, 0x00, 0x10, 0x7f
     0010 7F10 
1B60 0002 1010 00277         db      0x02, 0x00, 0x10, 0x10, 0x34, 0x03, 0x20, 0x07
     0334 0720 
1B68 2801 290C 00278         db      0x01, 0x28, 0x0c, 0x29, 0x2a, 0x01, 0x35, 0x2e
     012A 2E35 
1B70 0B00 1C5E 00279         db      0x00, 0x0b, 0x5e, 0x1c, 0x56, 0x82, 0x1b, 0x00
     8256 001B 
1B78 125D 1586 00280         db      0x5d, 0x12, 0x86, 0x15, 0x00, 0x82, 0x1b, 0x01
     8200 011B 
1B80 0428 7F01 00281         db      0x28, 0x04, 0x01, 0x7f, 0x02, 0x00, 0x36, 0x30
     0002 3036 
1B88 0C00 105E 00282         db      0x00, 0x0c, 0x5e, 0x10, 0x32, 0x26, 0x08, 0x29
     2632 2908 
1B90 022A 5502 00283         db      0x2a, 0x02, 0x02, 0x55, 0x9a, 0x1b, 0x00, 0x54
     1B9A 5400 
1B98 1BA7 7F02 00284         db      0xa7, 0x1b, 0x02, 0x7f, 0xfe, 0xff, 0x0c, 0x36
     FFFE 360C 
1BA0 0032 5E0D 00285         db      0x32, 0x00, 0x0d, 0x5e, 0x10, 0x32, 0x23, 0x0a
     3210 0A23 
1BA8 125D 860A 00286         db      0x5d, 0x12, 0x0a, 0x86, 0x01, 0x00, 0xb4, 0x1b
     0001 1BB4 
1BB0 5463 1BC1 00287         db      0x63, 0x54, 0xc1, 0x1b, 0x00, 0x88, 0x13, 0x00
     8800 0013 
1BB8 1BC0 1367 00288         db      0xc0, 0x1b, 0x67, 0x13, 0x00, 0x54, 0xc1, 0x1b
     5400 1BC1 
1BC0 0A00 607F 00289         db      0x00, 0x0a, 0x7f, 0x60, 0x00, 0x10, 0x10, 0x5f
     1000 5F10 
1BC8 3516 0034 00290         db      0x16, 0x35, 0x34, 0x00, 0x0b, 0x5d, 0x18, 0x0e
     5D0B 0E18 
1BD0 1A5E 045E 00291         db      0x5e, 0x1a, 0x5e, 0x04, 0x28, 0x0c, 0x29, 0x2a
     0C28 2A29 
1BD8 0303 7B68 00292         db      0x03, 0x03, 0x68, 0x7b, 0x56, 0x19, 0x1c, 0x00
     1956 001C 
1BE0 125D 860A 00293         db      0x5d, 0x12, 0x0a, 0x86, 0x01, 0x00, 0xec, 0x1b
     0001 1BEC 
1BE8 5463 1BF9 00294         db      0x63, 0x54, 0xf9, 0x1b, 0x00, 0x88, 0x13, 0x00
     8800 0013 
1BF0 1BF8 1367 00295         db      0xf8, 0x1b, 0x67, 0x13, 0x00, 0x54, 0xf9, 0x1b
     5400 1BF9 
1BF8 0A00 607F 00296         db      0x00, 0x0a, 0x7f, 0x60, 0x00, 0x0f, 0x0f, 0x5f
     0F00 5F0F 
1C00 0516 FE7F 00297         db      0x16, 0x05, 0x7f, 0xfe, 0xff, 0x0f, 0x7f, 0x02
     0FFF 027F 
1C08 0F00 3636 00298         db      0x00, 0x0f, 0x36, 0x36, 0x00, 0x0e, 0x5d, 0x18
     0E00 185D 
1C10 5E11 5E1A 00299         db      0x11, 0x5e, 0x1a, 0x5e, 0x04, 0x32, 0x24, 0x14
     3204 1424 
1C18 2804 2908 00300         db      0x04, 0x28, 0x08, 0x29, 0x2a, 0x02, 0x35, 0x38
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     022A 3835 
1C20 0B00 085E 00301         db      0x00, 0x0b, 0x5e, 0x08, 0x55, 0x62, 0x1c, 0x35
     6255 351C 
1C28 003A 1E5D 00302         db      0x3a, 0x00, 0x5d, 0x1e, 0x0b, 0x5e, 0x1c, 0x55
     5E0B 551C 
1C30 1C62 3C35 00303         db      0x62, 0x1c, 0x35, 0x3c, 0x00, 0x0b, 0x5e, 0x08
     0B00 085E 
1C38 4956 351C 00304         db      0x56, 0x49, 0x1c, 0x35, 0x3e, 0x00, 0x36, 0x40
     003E 4036 
1C40 5E00 0B10 00305         db      0x00, 0x5e, 0x10, 0x0b, 0x5e, 0x1c, 0x55, 0x62
     1C5E 6255 
1C48 351C 0042 00306         db      0x1c, 0x35, 0x42, 0x00, 0x0b, 0x5e, 0x1c, 0x56
     5E0B 561C 
1C50 1C81 4435 00307         db      0x81, 0x1c, 0x35, 0x44, 0x00, 0x36, 0x46, 0x00
     3600 0046 
1C58 105E 1E5D 00308         db      0x5e, 0x10, 0x5d, 0x1e, 0x0b, 0x5e, 0x08, 0x56
     5E0B 5608 
1C60 1C81 0C02 00309         db      0x81, 0x1c, 0x02, 0x0c, 0x0c, 0x34, 0xf8, 0x23
     340C 23F8 
1C68 5D0A 6C20 00310         db      0x0a, 0x5d, 0x20, 0x6c, 0x09, 0x00, 0x0b, 0x7f
     0009 7F0B 
1C70 FFF8 1E0D 00311         db      0xf8, 0xff, 0x0d, 0x1e, 0x07, 0x23, 0x0b, 0x7f
     2307 7F0B 
1C78 FFF6 330D 00312         db      0xf6, 0xff, 0x0d, 0x33, 0x22, 0x1e, 0x06, 0x26
     1E22 2606 
1C80 010E 340B 00313         db      0x0e, 0x01, 0x0b, 0x34, 0xfc, 0x22, 0x0a, 0x5d
     22FC 5D0A 
1C88 0A20 FE7F 00314         db      0x20, 0x0a, 0x7f, 0xfe, 0xff, 0x0c, 0x33, 0x26
     0CFF 2633 
1C90 290E 012A 00315         db      0x0e, 0x29, 0x2a, 0x01, 0x01, 0x0b, 0x5e, 0x00
     0B01 005E 
1C98 870A 0063 00316         db      0x0a, 0x87, 0x63, 0x00, 0xae, 0x1c, 0x00, 0x86
     1CAE 8600 
1CA0 0075 1CBB 00317         db      0x75, 0x00, 0xbb, 0x1c, 0x02, 0x7f, 0x02, 0x00
     7F02 0002 
1CA8 0D68 051E 00318         db      0x68, 0x0d, 0x1e, 0x05, 0x27, 0x0c, 0x00, 0x84
     0C27 8400 
1CB0 005D 1CBB 00319         db      0x5d, 0x00, 0xbb, 0x1c, 0x02, 0x68, 0x0d, 0x1e
     6802 1E0D 
1CB8 2705 020C 00320         db      0x05, 0x27, 0x0c, 0x02, 0x7f, 0xfe, 0xff, 0x0c
     FE7F 0CFF 
1CC0 2632 290A 00321         db      0x32, 0x26, 0x0a, 0x29, 0x2a, 0x02, 0x02, 0x5d
     022A 5D02 
1CC8 0A20 7C0C 00322         db      0x20, 0x0a, 0x0c, 0x7c, 0x56, 0xd2, 0x1c, 0x03
     D256 031C 
1CD0 0828 5D01 00323         db      0x28, 0x08, 0x01, 0x5d, 0x14, 0x0d, 0x56, 0xef
     0D14 EF56 
1CD8 011C 0C68 00324         db      0x1c, 0x01, 0x68, 0x0c, 0x68, 0x12, 0x10, 0x00
     1268 0010 
1CE0 2261 4167 00325         db      0x61, 0x22, 0x67, 0x41, 0x00, 0x0c, 0x0e, 0x6f
     0C00 6F0E 
1CE8 0D0D 2460 00326         db      0x0d, 0x0d, 0x60, 0x24, 0x54, 0x04, 0x1d, 0x67
     0454 671D 
1CF0 0041 0E0C 00327         db      0x41, 0x00, 0x0c, 0x0e, 0x6f, 0x68, 0x0d, 0x60
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     686F 600D 
1CF8 0124 0E0C 00328         db      0x24, 0x01, 0x0c, 0x0e, 0x6f, 0x0c, 0x68, 0x12
     0C6F 1268 
1D00 0010 2261 00329         db      0x10, 0x00, 0x61, 0x22, 0x00, 0x28, 0x0a, 0x29
     2800 290A 
1D08 012A 5D00 00330         db      0x2a, 0x01, 0x00, 0x5d, 0x20, 0x0a, 0x0d, 0x0d
     0A20 0D0D 
1D10 4836 3600 00331         db      0x36, 0x48, 0x00, 0x36, 0x4a, 0x00, 0x36, 0x4c
     004A 4C36 
1D18 3600 004E 00332         db      0x00, 0x36, 0x4e, 0x00, 0x36, 0x50, 0x00, 0x2c
     5036 2C00 
1D20 080E 16E4 00333         db      0x0e, 0x08, 0xe4, 0x16, 0x0b, 0x18, 0xa6, 0x18
     180B 18A6 
1D28 198F 19D6 00334         db      0x8f, 0x19, 0xd6, 0x19, 0x1e, 0x1a, 0x4b, 0x1a
     1A1E 1A4B 
1D30 1B2A 1B6C 00335         db      0x2a, 0x1b, 0x6c, 0x1b, 0x90, 0x1b, 0xd7, 0x1b
     1B90 1BD7 
1D38 1C1C 1C92 00336         db      0x1c, 0x1c, 0x92, 0x1c, 0xc4, 0x1c, 0x08, 0x1c
     1CC4 1C08 
1D40 6800 5579 00337         db      0x00, 0x68, 0x79, 0x55, 0x50, 0x1d, 0x63, 0x12
     1D50 1263 
1D48 0020 005E 00338         db      0x20, 0x00, 0x5e, 0x00, 0x6c, 0x4b, 0x00, 0x7a
     4B6C 7A00 
1D50 5856 631D 00339         db      0x56, 0x58, 0x1d, 0x63, 0x36, 0x50, 0x00, 0x21
     5036 2100 
1D58 6863 6968 00340         db      0x63, 0x68, 0x68, 0x69, 0x12, 0x22, 0x00, 0x24
     2212 2400 
1D60 042A 0B17 00341         db      0x2a, 0x04, 0x17, 0x0b, 0x7e, 0x56, 0x6f, 0x1d
     567E 1D6F 
1D68 5235 1B00 00342         db      0x35, 0x52, 0x00, 0x1b, 0x1a, 0x26, 0x06, 0x00
     261A 0006 
1D70 5E1B 0A00 00343         db      0x1b, 0x5e, 0x00, 0x0a, 0x87, 0x59, 0x00, 0x91
     5987 9100 
1D78 001D 6187 00344         db      0x1d, 0x00, 0x87, 0x61, 0x00, 0x88, 0x1d, 0x00
     8800 001D 
1D80 7587 A000 00345         db      0x87, 0x75, 0x00, 0xa0, 0x1d, 0x16, 0x28, 0x04
     161D 0428 
1D88 8300 005B 00346         db      0x00, 0x83, 0x5b, 0x00, 0xa0, 0x1d, 0x16, 0x28
     1DA0 2816 
1D90 0004 4183 00347         db      0x04, 0x00, 0x83, 0x41, 0x00, 0xa0, 0x1d, 0x00
     A000 001D 
1D98 5786 A000 00348         db      0x86, 0x57, 0x00, 0xa0, 0x1d, 0x16, 0x28, 0x04
     161D 0428 
1DA0 7F01 0002 00349         db      0x01, 0x7f, 0x02, 0x00, 0x32, 0x25, 0x06, 0x00
     2532 0006 
1DA8 205D 0C0A 00350         db      0x5d, 0x20, 0x0a, 0x0c, 0x36, 0x4e, 0x00, 0x2c
     4E36 2C00 
1DB0 0301 1D62 00351         db      0x01, 0x03, 0x62, 0x1d, 0x63, 0x0b, 0x25, 0x08
     0B63 0825 
1DB8 2A29 0101 00352         db      0x29, 0x2a, 0x01, 0x01, 0x55, 0xc4, 0x1d, 0x35
     C455 351D 
1DC0 0054 0428 00353         db      0x54, 0x00, 0x28, 0x04, 0x01, 0x84, 0x03, 0x00
     8401 0003 
1DC8 1DCD 2800 00354         db      0xcd, 0x1d, 0x00, 0x28, 0x04, 0x64, 0x0c, 0x73
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6404 730C 
1DD0 DF55 641D 00355         db      0x55, 0xdf, 0x1d, 0x64, 0x0c, 0x77, 0x0b, 0x32
     770C 320B 
1DD8 0A22 5E0B 00356         db      0x22, 0x0a, 0x0b, 0x5e, 0x04, 0x28, 0x06, 0x64
     2804 6406 
1DE0 770C 320B 00357         db      0x0c, 0x77, 0x0b, 0x32, 0x22, 0x0a, 0x0b, 0x0d
     0A22 0D0B 
1DE8 045E 045E 00358         db      0x5e, 0x04, 0x5e, 0x04, 0x28, 0x06, 0x29, 0x2a
     0628 2A29 
1DF0 2C01 0001 00359         db      0x01, 0x2c, 0x01, 0x00, 0xb9, 0x1d, 0x35, 0x56
     1DB9 5635 
1DF8 0D00 5679 00360         db      0x00, 0x0d, 0x79, 0x56, 0x03, 0x1e, 0x35, 0x58
     1E03 5835 
1E00 2800 0206 00361         db      0x00, 0x28, 0x06, 0x02, 0x86, 0x01, 0x00, 0x15
     0186 1500 
1E08 021E 0C6D 00362         db      0x1e, 0x02, 0x6d, 0x0c, 0x0c, 0x22, 0x36, 0x5a
     220C 5A36 
1E10 5E00 2810 00363         db      0x00, 0x5e, 0x10, 0x28, 0x06, 0x02, 0x0c, 0x0c
     0206 0C0C 
1E18 0A26 2A29 00364         db      0x26, 0x0a, 0x29, 0x2a, 0x01, 0x01, 0x87, 0x15
     0101 1587 
1E20 2700 001E 00365         db      0x00, 0x27, 0x1e, 0x00, 0x55, 0x31, 0x1e, 0x67
     3155 671E 
1E28 0061 6E0C 00366         db      0x61, 0x00, 0x0c, 0x6e, 0x0b, 0x1a, 0x53, 0x28
     1A0B 2853 
1E30 6704 0061 00367         db      0x04, 0x67, 0x61, 0x00, 0x6c, 0x15, 0x00, 0x0d
     156C 0D00 
1E38 6E72 1A0B 00368         db      0x72, 0x6e, 0x0b, 0x1a, 0x53, 0x67, 0x15, 0x00
     6753 0015 
1E40 710C 7F0B 00369         db      0x0c, 0x71, 0x0b, 0x7f, 0xfe, 0xff, 0x32, 0x26
     FFFE 2632 
1E48 0008 0187 00370         db      0x08, 0x00, 0x87, 0x01, 0x00, 0x59, 0x1e, 0x00
     5900 001E 
1E50 1586 5900 00371         db      0x86, 0x15, 0x00, 0x59, 0x1e, 0x64, 0x54, 0x9a
     641E 9A54 
1E58 001E ED88 00372         db      0x1e, 0x00, 0x88, 0xed, 0xff, 0x69, 0x1e, 0x00
     69FF 001E 
1E60 C986 6900 00373         db      0x86, 0xc9, 0x00, 0x69, 0x1e, 0x65, 0x54, 0x9a
     651E 9A54 
1E68 001E 3988 00374         db      0x1e, 0x00, 0x88, 0x39, 0xff, 0x79, 0x1e, 0x00
     79FF 001E 
1E70 D186 7907 00375         db      0x86, 0xd1, 0x07, 0x79, 0x1e, 0x66, 0x54, 0x9a
     661E 9A54 
1E78 001E 3188 00376         db      0x1e, 0x00, 0x88, 0x31, 0xf8, 0x8b, 0x1e, 0x00
     8BF8 001E 
1E80 2186 8B4E 00377         db      0x86, 0x21, 0x4e, 0x8b, 0x1e, 0x67, 0x09, 0x00
     671E 0009 
1E88 9A54 001E 00378         db      0x54, 0x9a, 0x1e, 0x00, 0x88, 0xe1, 0xb1, 0x97
     E188 97B1 
1E90 671E 000B 00379         db      0x1e, 0x67, 0x0b, 0x00, 0x54, 0x9a, 0x1e, 0x67
     9A54 671E 
1E98 000D 5D0A 00380         db      0x0d, 0x00, 0x0a, 0x5d, 0x14, 0x0a, 0x2c, 0x01
     0A14 012C 
1EA0 1B01 031E 00381         db      0x01, 0x1b, 0x1e, 0x03, 0x87, 0x01, 0x00, 0xb3
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0187 B300 
1EA8 031E 7F0D 00382         db      0x1e, 0x03, 0x0d, 0x7f, 0xfe, 0xff, 0x0c, 0x22
     FFFE 220C 
1EB0 F454 351E 00383         db      0x54, 0xf4, 0x1e, 0x35, 0x56, 0x00, 0x0e, 0x79
     0056 790E 
1EB8 E656 671E 00384         db      0x56, 0xe6, 0x1e, 0x67, 0x5b, 0x00, 0x68, 0x0d
     005B 0D68 
1EC0 6753 0063 00385         db      0x53, 0x67, 0x63, 0x00, 0x69, 0x0d, 0x53, 0x67
     0D69 6753 
1EC8 006D 0D6A 00386         db      0x6d, 0x00, 0x6a, 0x0d, 0x53, 0x67, 0x67, 0x00
     6753 0067 
1ED0 0D6B 6753 00387         db      0x6b, 0x0d, 0x53, 0x67, 0x71, 0x00, 0x6c, 0x09
     0071 096C 
1ED8 0D00 6753 00388         db      0x00, 0x0d, 0x53, 0x67, 0x69, 0x00, 0x6c, 0x0b
     0069 0B6C 
1EE0 0D00 5453 00389         db      0x00, 0x0d, 0x53, 0x54, 0xf4, 0x1e, 0x67, 0x5b
     1EF4 5B67 
1EE8 6800 530D 00390         db      0x00, 0x68, 0x0d, 0x53, 0x03, 0x6d, 0x0d, 0x7f
     6D03 7F0D 
1EF0 FFFE 220C 00391         db      0xfe, 0xff, 0x0c, 0x22, 0x01, 0x28, 0x08, 0x00
     2801 0008 
1EF8 0056 351F 00392         db      0x56, 0x00, 0x1f, 0x35, 0x5c, 0x00, 0x28, 0x02
     005C 0228 
1F00 5E35 2800 00393         db      0x35, 0x5e, 0x00, 0x28, 0x02, 0x00, 0x87, 0x01
     0002 0187 
1F08 1100 001F 00394         db      0x00, 0x11, 0x1f, 0x00, 0x88, 0xff, 0x01, 0x19
     FF88 1901 
1F10 351F 0060 00395         db      0x1f, 0x35, 0x60, 0x00, 0x36, 0x62, 0x00, 0x25
     6236 2500 
1F18 0004 0228 00396         db      0x04, 0x00, 0x28, 0x02, 0x29, 0x2a, 0x02, 0x02
     2A29 0202 
1F20 145D 680D 00397         db      0x5d, 0x14, 0x0d, 0x68, 0x0c, 0x0f, 0x0f, 0x61
     0F0C 610F 
1F28 0022 0828 00398         db      0x22, 0x00, 0x28, 0x08, 0x29, 0x2a, 0x01, 0x00
     2A29 0001 
1F30 205D 5D0C 00399         db      0x5d, 0x20, 0x0c, 0x5d, 0x20, 0x0a, 0x0c, 0x6e
     0A20 6E0C 
1F38 145D 680C 00400         db      0x5d, 0x14, 0x0c, 0x68, 0x0c, 0x68, 0x11, 0x61
     680C 6111 
1F40 0122 0C0D 00401         db      0x22, 0x01, 0x0d, 0x0c, 0x68, 0x12, 0x10, 0x00
     1268 0010 
1F48 2261 2800 00402         db      0x61, 0x22, 0x00, 0x28, 0x0a, 0x35, 0x64, 0x00
     350A 0064 
1F50 6636 2500 00403         db      0x36, 0x66, 0x00, 0x25, 0x04, 0x00, 0x6b, 0x40
     0004 406B 
1F58 5B00 6A00 00404         db      0x00, 0x5b, 0x00, 0x6a, 0x40, 0x00, 0x5b, 0x2b
     0040 2B5B 
1F60 5A01 391F 00405         db      0x01, 0x5a, 0x1f, 0x39, 0x66, 0x00, 0x2b, 0x01
     0066 012B 
1F68 1F55 6239 00406         db      0x55, 0x1f, 0x39, 0x62, 0x00, 0x2b, 0x01, 0x4d
     2B00 4D01 
1F70 391F 0050 00407         db      0x1f, 0x39, 0x50, 0x00, 0x67, 0x01, 0x80, 0x39
     0167 3980 
1F78 0056 012B 00408         db      0x56, 0x00, 0x2b, 0x01, 0x2d, 0x1f, 0x39, 0x4e
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1F2D 4E39 
1F80 2B00 1D01 00409         db      0x00, 0x2b, 0x01, 0x1d, 0x1f, 0x39, 0x4c, 0x00
     391F 004C 
1F88 012B 1F05 00410         db      0x2b, 0x01, 0x05, 0x1f, 0x39, 0x12, 0x01, 0x2b
     1239 2B01 
1F90 F701 391E 00411         db      0x01, 0xf7, 0x1e, 0x39, 0xdc, 0x00, 0x2b, 0x01
     00DC 012B 
1F98 1E49 0239 00412         db      0x49, 0x1e, 0x39, 0x02, 0x01, 0x2b, 0x01, 0xef
     2B01 EF01 
1FA0 391D 004A 00413         db      0x1d, 0x39, 0x4a, 0x00, 0x2b, 0x01, 0xa7, 0x1d
     012B 1DA7 
1FA8 4839 2B00 00414         db      0x39, 0x48, 0x00, 0x2b, 0x01, 0x08, 0x1d, 0x39
     0801 391D 
1FB0 00DA D054 00415         db      0xda, 0x00, 0x54, 0xd0, 0x1f, 0x29, 0x2a, 0x01
     291F 012A 
1FB8 5600 1FC6 00416         db      0x00, 0x56, 0xc6, 0x1f, 0x01, 0x0b, 0x43, 0x40
     0B01 4043 
1FC0 0B00 3244 00417         db      0x00, 0x0b, 0x44, 0x32, 0x26, 0x08, 0x01, 0x28
     0826 2801 
1FC8 6304 360B 00418         db      0x04, 0x63, 0x0b, 0x36, 0x68, 0x00, 0x26, 0x06
     0068 0626 
1FD0 012C B600 00419         db      0x2c, 0x01, 0x00, 0xb6, 0x1f, 0x00, 0x39, 0x68
     001F 6839 
1FD8 2B00 C901 00420         db      0x00, 0x2b, 0x01, 0xc9, 0x1f, 0x39, 0x06, 0x01
     391F 0106 
1FE0 7954 0020 00421         db      0x54, 0x79, 0x20, 0x00, 0x83, 0x4f, 0x00, 0x2d
     4F83 2D00 
1FE8 0020 B983 00422         db      0x20, 0x00, 0x83, 0xb9, 0x00, 0x28, 0x20, 0x00
     2800 0020 
1FF0 1D86 3200 00423         db      0x86, 0x1d, 0x00, 0x32, 0x20, 0x00, 0x57, 0x0e
     0020 0E57 
1FF8 2032 2032 00424         db      0x32, 0x20, 0x32, 0x20, 0x32, 0x20, 0x32, 0x20
     2032 2032 
2000 2032 2032 00425         db      0x32, 0x20, 0x32, 0x20, 0x32, 0x20, 0x32, 0x20
     2032 2032 
2008 2014 2019 00426         db      0x14, 0x20, 0x19, 0x20, 0x1e, 0x20, 0x32, 0x20
     201E 2032 
2010 2032 2023 00427         db      0x32, 0x20, 0x23, 0x20, 0x35, 0x6a, 0x00, 0x28
     6A35 2800 
2018 3502 006C 00428         db      0x02, 0x35, 0x6c, 0x00, 0x28, 0x02, 0x35, 0x6e
     0228 6E35 
2020 2800 3502 00429         db      0x00, 0x28, 0x02, 0x35, 0x70, 0x00, 0x28, 0x02
     0070 0228 
2028 7235 2800 00430         db      0x35, 0x72, 0x00, 0x28, 0x02, 0x35, 0x74, 0x00
     3502 0074 
2030 0228 5D00 00431         db      0x28, 0x02, 0x00, 0x5d, 0x26, 0x56, 0x42, 0x20
     5626 2042 
2038 5D64 0B14 00432         db      0x64, 0x5d, 0x14, 0x0b, 0x68, 0x0c, 0x53, 0x00
     0C68 0053 
2040 0428 6C00 00433         db      0x28, 0x04, 0x00, 0x6c, 0x09, 0x00, 0x5d, 0x14
     0009 145D 
2048 B96C 6800 00434         db      0x6c, 0xb9, 0x00, 0x68, 0x0c, 0x53, 0x67, 0xc9
     530C C967 
2050 0C00 6C71 00435         db      0x00, 0x0c, 0x71, 0x6c, 0x61, 0x00, 0x6e, 0x69
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0061 696E 
2058 530C 1567 00436         db      0x0c, 0x53, 0x67, 0x15, 0x00, 0x6c, 0x15, 0x00
     6C00 0015 
2060 710D 6C72 00437         db      0x0d, 0x71, 0x72, 0x6c, 0x61, 0x00, 0x6e, 0x6a
     0061 6A6E 
2068 530C 1567 00438         db      0x0c, 0x53, 0x67, 0x15, 0x00, 0x0c, 0x72, 0x6c
     0C00 6C72 
2070 0061 6B6E 00439         db      0x61, 0x00, 0x6e, 0x6b, 0x0c, 0x53, 0x00, 0x28
     530C 2800 
2078 2B06 E301 00440         db      0x06, 0x2b, 0x01, 0xe3, 0x1f, 0x39, 0xd6, 0x00
     391F 00D6 
2080 AF54 6322 00441         db      0x54, 0xaf, 0x22, 0x63, 0x68, 0x0c, 0x5d, 0x20
     0C68 205D 
2088 FE7F 09FF 00442         db      0x7f, 0xfe, 0xff, 0x09, 0x0c, 0x7d, 0x55, 0xe4
     7D0C E455 
2090 0120 520E 00443         db      0x20, 0x01, 0x0e, 0x52, 0x0a, 0x87, 0x1d, 0x00
     870A 001D 
2098 20A9 8300 00444         db      0xa9, 0x20, 0x00, 0x83, 0x45, 0x00, 0xce, 0x20
     0045 20CE 
20A0 8400 00B9 00445         db      0x00, 0x84, 0xb9, 0x00, 0xbe, 0x20, 0x54, 0xce
     20BE CE54 
20A8 0020 1787 00446         db      0x20, 0x00, 0x87, 0x17, 0x00, 0xb8, 0x20, 0x00
     B800 0020 
20B0 1B86 CE00 00447         db      0x86, 0x1b, 0x00, 0xce, 0x20, 0x54, 0xbe, 0x20
     5420 20BE 
20B8 8600 0011 00448         db      0x00, 0x86, 0x11, 0x00, 0xce, 0x20, 0x00, 0x5d
     20CE 5D00 
20C0 5626 20C8 00449         db      0x26, 0x56, 0xc8, 0x20, 0x64, 0x54, 0xcf, 0x20
     5464 20CF 
20C8 0967 5400 00450         db      0x67, 0x09, 0x00, 0x54, 0xcf, 0x20, 0x65, 0x13
     20CF 1365 
20D0 0002 6E0D 00451         db      0x02, 0x00, 0x0d, 0x6e, 0x14, 0x04, 0x00, 0x01
     0414 0100 
20D8 7F09 0002 00452         db      0x09, 0x7f, 0x02, 0x00, 0x14, 0x04, 0x00, 0x01
     0414 0100 
20E0 557A 2091 00453         db      0x7a, 0x55, 0x91, 0x20, 0x63, 0x13, 0x04, 0x00
     1363 0004 
20E8 5D01 0B20 00454         db      0x01, 0x5d, 0x20, 0x0b, 0x79, 0x56, 0xf3, 0x20
     5679 20F3 
20F0 2801 0004 00455         db      0x01, 0x28, 0x04, 0x00, 0x5d, 0x14, 0x68, 0x14
     145D 1468 
20F8 0002 0D63 00456         db      0x02, 0x00, 0x63, 0x0d, 0x5d, 0x20, 0x7f, 0xfe
     205D FE7F 
2100 09FF 7D0C 00457         db      0xff, 0x09, 0x0c, 0x7d, 0x55, 0x31, 0x22, 0x01
     3155 0122 
2108 520F 7F0A 00458         db      0x0f, 0x52, 0x0a, 0x7f, 0xbc, 0xff, 0x0a, 0x8b
     FFBC 8B0A 
2110 0075 2137 00459         db      0x75, 0x00, 0x37, 0x21, 0x00, 0x7f, 0xfe, 0xff
     7F00 FFFE 
2118 718C 3100 00460         db      0x8c, 0x71, 0x00, 0x31, 0x21, 0x67, 0xb9, 0x00
     6721 00B9 
2120 1010 0553 00461         db      0x10, 0x10, 0x53, 0x05, 0x7f, 0x02, 0x00, 0x14
     027F 1400 
2128 000A 1001 00462         db      0x0a, 0x00, 0x01, 0x10, 0x10, 0x53, 0x54, 0xc0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5310 C054 
2130 1321 0002 00463         db      0x21, 0x13, 0x02, 0x00, 0x54, 0xc6, 0x21, 0x00
     C654 0021 
2138 D987 43FF 00464         db      0x87, 0xd9, 0xff, 0x43, 0x21, 0x13, 0x02, 0x00
     1321 0002 
2140 C654 0021 00465         db      0x54, 0xc6, 0x21, 0x00, 0x7f, 0x44, 0x00, 0x57
     447F 5700 
2148 650E 6521 00466         db      0x0e, 0x65, 0x21, 0x65, 0x21, 0x65, 0x21, 0x65
     6521 6521 
2150 6521 6521 00467         db      0x21, 0x65, 0x21, 0x65, 0x21, 0x65, 0x21, 0x65
     6521 6521 
2158 6B21 8121 00468         db      0x21, 0x6b, 0x21, 0x81, 0x21, 0x97, 0x21, 0x65
     9721 6521 
2160 6521 AD21 00469         db      0x21, 0x65, 0x21, 0xad, 0x21, 0x13, 0x02, 0x00
     1321 0002 
2168 C654 6721 00470         db      0x54, 0xc6, 0x21, 0x67, 0xb9, 0x00, 0x10, 0x10
     00B9 1010 
2170 0553 027F 00471         db      0x53, 0x05, 0x7f, 0x02, 0x00, 0x14, 0x0a, 0x00
     1400 000A 
2178 C567 1000 00472         db      0x67, 0xc5, 0x00, 0x10, 0x10, 0x53, 0x54, 0xc0
     5310 C054 
2180 6721 00B9 00473         db      0x21, 0x67, 0xb9, 0x00, 0x10, 0x10, 0x53, 0x05
     1010 0553 
2188 027F 1400 00474         db      0x7f, 0x02, 0x00, 0x14, 0x0a, 0x00, 0x67, 0xe9
     000A E967 
2190 1000 5310 00475         db      0x00, 0x10, 0x10, 0x53, 0x54, 0xc0, 0x21, 0x67
     C054 6721 
2198 00B9 1010 00476         db      0xb9, 0x00, 0x10, 0x10, 0x53, 0x05, 0x7f, 0x02
     0553 027F 
21A0 1400 000A 00477         db      0x00, 0x14, 0x0a, 0x00, 0x67, 0xdd, 0x00, 0x10
     DD67 1000 
21A8 5310 C054 00478         db      0x10, 0x53, 0x54, 0xc0, 0x21, 0x67, 0xb9, 0x00
     6721 00B9 
21B0 1010 0553 00479         db      0x10, 0x10, 0x53, 0x05, 0x7f, 0x02, 0x00, 0x14
     027F 1400 
21B8 000A E567 00480         db      0x0a, 0x00, 0x67, 0xe5, 0x00, 0x10, 0x10, 0x53
     1000 5310 
21C0 0213 5400 00481         db      0x13, 0x02, 0x00, 0x54, 0x1a, 0x22, 0x00, 0x5d
     221A 5D00 
21C8 5626 21D3 00482         db      0x26, 0x56, 0xd3, 0x21, 0x00, 0x0f, 0x0f, 0x53
     0F00 530F 
21D0 1A54 0022 00483         db      0x54, 0x1a, 0x22, 0x00, 0x6c, 0xb9, 0x00, 0x10
     B96C 1000 
21D8 5310 7F05 00484         db      0x10, 0x53, 0x05, 0x7f, 0x02, 0x00, 0x14, 0x0a
     0002 0A14 
21E0 6700 00C9 00485         db      0x00, 0x67, 0xc9, 0x00, 0x0b, 0x71, 0x6c, 0x61
     710B 616C 
21E8 6E00 1010 00486         db      0x00, 0x6e, 0x10, 0x10, 0x53, 0x05, 0x7f, 0x02
     0553 027F 
21F0 1400 000A 00487         db      0x00, 0x14, 0x0a, 0x00, 0x67, 0x15, 0x00, 0x6c
     1567 6C00 
21F8 0015 710C 00488         db      0x15, 0x00, 0x0c, 0x71, 0x72, 0x6c, 0x61, 0x00
     6C72 0061 
2200 106E 5310 00489         db      0x6e, 0x10, 0x10, 0x53, 0x05, 0x7f, 0x02, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     7F05 0002 
2208 0A14 6700 00490         db      0x14, 0x0a, 0x00, 0x67, 0x15, 0x00, 0x0b, 0x72
     0015 720B 
2210 616C 6E00 00491         db      0x6c, 0x61, 0x00, 0x6e, 0x10, 0x10, 0x53, 0x13
     1010 1353 
2218 0002 0213 00492         db      0x02, 0x00, 0x13, 0x02, 0x00, 0x03, 0x7f, 0x02
     0300 027F 
2220 1400 0006 00493         db      0x00, 0x14, 0x06, 0x00, 0x01, 0x09, 0x7f, 0x02
     0901 027F 
2228 1400 0004 00494         db      0x00, 0x14, 0x04, 0x00, 0x01, 0x7a, 0x55, 0x07
     7A01 0755 
2230 6321 0413 00495         db      0x21, 0x63, 0x13, 0x04, 0x00, 0x00, 0x28, 0x06
     0000 0628 
2238 2A29 0404 00496         db      0x29, 0x2a, 0x04, 0x04, 0x87, 0x01, 0x00, 0x61
     0187 6100 
2240 0122 0187 00497         db      0x22, 0x01, 0x87, 0x01, 0x00, 0x61, 0x22, 0x04
     6100 0422 
2248 5D0B 6F20 00498         db      0x0b, 0x5d, 0x20, 0x6f, 0x0c, 0x7d, 0x55, 0x61
     7D0C 6155 
2250 0322 0187 00499         db      0x22, 0x03, 0x87, 0x01, 0x00, 0x61, 0x22, 0x04
     6100 0422 
2258 5D0D 6F20 00500         db      0x0d, 0x5d, 0x20, 0x6f, 0x0e, 0x7d, 0x56, 0x69
     7D0E 6956 
2260 3522 0076 00501         db      0x22, 0x35, 0x76, 0x00, 0x36, 0x62, 0x00, 0x25
     6236 2500 
2268 040C 0E0E 00502         db      0x0c, 0x04, 0x0e, 0x0e, 0x0e, 0x0e, 0x61, 0x22
     0E0E 2261 
2270 0A28 2A29 00503         db      0x28, 0x0a, 0x29, 0x2a, 0x02, 0x01, 0x87, 0x01
     0102 0187 
2278 8B00 0222 00504         db      0x00, 0x8b, 0x22, 0x02, 0x87, 0x01, 0x00, 0x8b
     0187 8B00 
2280 0222 5D0B 00505         db      0x22, 0x02, 0x0b, 0x5d, 0x20, 0x6f, 0x0c, 0x7d
     6F20 7D0C 
2288 9356 3522 00506         db      0x56, 0x93, 0x22, 0x35, 0x78, 0x00, 0x36, 0x62
     0078 6236 
2290 2500 0208 00507         db      0x00, 0x25, 0x08, 0x02, 0x5d, 0x14, 0x0d, 0x68
     145D 680D 
2298 0F0C 610F 00508         db      0x0c, 0x0f, 0x0f, 0x61, 0x22, 0x00, 0x28, 0x08
     0022 0828 
22A0 2A29 0001 00509         db      0x29, 0x2a, 0x01, 0x00, 0x5d, 0x14, 0x0c, 0x0c
     145D 0C0C 
22A8 0D68 2460 00510         db      0x68, 0x0d, 0x60, 0x24, 0x00, 0x28, 0x06, 0x2b
     2800 2B06 
22B0 A101 3922 00511         db      0x01, 0xa1, 0x22, 0x39, 0xd2, 0x00, 0x2b, 0x01
     00D2 012B 
22B8 2273 8239 00512         db      0x73, 0x22, 0x39, 0x82, 0x00, 0x2b, 0x01, 0x39
     2B00 3901 
22C0 3922 007C 00513         db      0x22, 0x39, 0x7c, 0x00, 0x2b, 0x01, 0x83, 0x20
     012B 2083 
22C8 CE39 6700 00514         db      0x39, 0xce, 0x00, 0x67, 0xfb, 0x03, 0x39, 0x7e
     03FB 7E39 
22D0 5400 23AF 00515         db      0x00, 0x54, 0xaf, 0x23, 0x29, 0x2a, 0x01, 0x01
     2A29 0101 
22D8 205D 0C0A 00516         db      0x5d, 0x20, 0x0a, 0x0c, 0x44, 0x6e, 0x0c, 0x45
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6E44 450C 
22E0 7D0B EB56 00517         db      0x0b, 0x7d, 0x56, 0xeb, 0x22, 0x01, 0x0d, 0x36
     0122 360D 
22E8 007A 1F22 00518         db      0x7a, 0x00, 0x22, 0x1f, 0xfc, 0x22, 0x04, 0x10
     22FC 1004 
22F0 1144 6843 00519         db      0x44, 0x11, 0x43, 0x68, 0x12, 0x14, 0x00, 0x36
     1412 3600 
22F8 007C 0920 00520         db      0x7c, 0x00, 0x20, 0x09, 0x00, 0x0d, 0x4a, 0x28
     0D00 284A 
2300 2908 012A 00521         db      0x08, 0x29, 0x2a, 0x01, 0x00, 0x44, 0x0b, 0x45
     4400 450B 
2308 7E0B 1356 00522         db      0x0b, 0x7e, 0x56, 0x13, 0x23, 0x64, 0x0c, 0x36
     6423 360C 
2310 007A 0222 00523         db      0x7a, 0x00, 0x22, 0x02, 0x0b, 0x0d, 0x43, 0x5f
     0D0B 5F43 
2318 0016 027F 00524         db      0x16, 0x00, 0x7f, 0x02, 0x00, 0x0c, 0x4a, 0x28
     0C00 284A 
2320 2906 012A 00525         db      0x06, 0x29, 0x2a, 0x01, 0x00, 0x45, 0x0a, 0x09
     4500 090A 
2328 3154 0023 00526         db      0x54, 0x31, 0x23, 0x00, 0x6a, 0x70, 0x14, 0x00
     706A 0014 
2330 0000 0E0E 00527         db      0x00, 0x00, 0x0e, 0x0e, 0x44, 0x6e, 0x7d, 0x55
     6E44 557D 
2338 232B 7E35 00528         db      0x2b, 0x23, 0x35, 0x7e, 0x00, 0x0b, 0x7d, 0x56
     0B00 567D 
2340 235D 7E35 00529         db      0x5d, 0x23, 0x35, 0x7e, 0x00, 0x0e, 0x0e, 0x44
     0E00 440E 
2348 7C6E 5656 00530         db      0x6e, 0x7c, 0x56, 0x56, 0x23, 0x35, 0x7e, 0x00
     3523 007E 
2350 0014 5400 00531         db      0x14, 0x00, 0x00, 0x54, 0x5d, 0x23, 0x35, 0x80
     235D 8035 
2358 3600 0066 00532         db      0x00, 0x36, 0x66, 0x00, 0x21, 0x00, 0x5d, 0x14
     0021 145D 
2360 1F09 2372 00533         db      0x09, 0x1f, 0x72, 0x23, 0x06, 0x44, 0x68, 0x0f
     4406 0F68 
2368 1268 0014 00534         db      0x68, 0x12, 0x14, 0x00, 0x43, 0x36, 0x7c, 0x00
     3643 007C 
2370 0920 0E00 00535         db      0x20, 0x09, 0x00, 0x0e, 0x49, 0x01, 0x0e, 0x4b
     0149 4B0E 
2378 0A28 0B63 00536         db      0x28, 0x0a, 0x63, 0x0b, 0x4a, 0x28, 0x02, 0x00
     284A 0002 
2380 6844 430C 00537         db      0x44, 0x68, 0x0c, 0x43, 0x36, 0x82, 0x00, 0x27
     8236 2700 
2388 0008 0386 00538         db      0x08, 0x00, 0x86, 0x03, 0x00, 0x93, 0x23, 0x64
     9300 6423 
2390 9454 0023 00539         db      0x54, 0x94, 0x23, 0x00, 0x36, 0x7e, 0x00, 0x0b
     7E36 0B00 
2398 567D 23A2 00540         db      0x7d, 0x56, 0xa2, 0x23, 0x35, 0x7e, 0x00, 0x54
     7E35 5400 
23A0 23A3 0A00 00541         db      0xa3, 0x23, 0x00, 0x0a, 0x5d, 0x14, 0x0a, 0x0c
     145D 0C0A 
23A8 0D68 043E 00542         db      0x68, 0x0d, 0x3e, 0x04, 0x00, 0x28, 0x08, 0x2b
     2800 2B08 
23B0 8901 3923 00543         db      0x01, 0x89, 0x23, 0x39, 0xbe, 0x00, 0x2b, 0x01
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     00BE 012B 
23B8 237F BA39 00544         db      0x7f, 0x23, 0x39, 0xba, 0x00, 0x2b, 0x01, 0x7a
     2B00 7A01 
23C0 3923 00BC 00545         db      0x23, 0x39, 0xbc, 0x00, 0x2b, 0x01, 0x22, 0x23
     012B 2322 
23C8 7A39 2B00 00546         db      0x39, 0x7a, 0x00, 0x2b, 0x01, 0x02, 0x23, 0x39
     0201 3923 
23D0 00B2 012B 00547         db      0xb2, 0x00, 0x2b, 0x01, 0xd5, 0x22, 0x39, 0xb0
     22D5 B039 
23D8 5400 2480 00548         db      0x00, 0x54, 0x80, 0x24, 0x29, 0x2a, 0x01, 0x15
     2A29 1501 
23E0 5E0C 5628 00549         db      0x0c, 0x5e, 0x28, 0x56, 0xf4, 0x23, 0x67, 0x61
     23F4 6167 
23E8 0C00 2A5D 00550         db      0x00, 0x0c, 0x5d, 0x2a, 0x6e, 0x0b, 0x1b, 0x5f
     0B6E 5F1B 
23F0 0016 0428 00551         db      0x16, 0x00, 0x28, 0x04, 0x67, 0x61, 0x00, 0x1a
     6167 1A00 
23F8 5E0D 5D2C 00552         db      0x0d, 0x5e, 0x2c, 0x5d, 0x2a, 0x6e, 0x0b, 0x1b
     6E2A 1B0B 
2400 165F 0C15 00553         db      0x5f, 0x16, 0x15, 0x0c, 0x5e, 0x2e, 0x0b, 0x7f
     2E5E 7F0B 
2408 FFFE 2632 00554         db      0xfe, 0xff, 0x32, 0x26, 0x08, 0x67, 0x17, 0x00
     6708 0017 
2410 145D 360A 00555         db      0x5d, 0x14, 0x0a, 0x36, 0x84, 0x00, 0x2c, 0x01
     0084 012C 
2418 DD02 3523 00556         db      0x02, 0xdd, 0x23, 0x35, 0x86, 0x00, 0x0d, 0x5e
     0086 5E0D 
2420 5630 2436 00557         db      0x30, 0x56, 0x36, 0x24, 0x02, 0x6c, 0x15, 0x00
     6C02 0015 
2428 220C 6C0A 00558         db      0x0c, 0x22, 0x0a, 0x6c, 0x17, 0x00, 0x6f, 0x0b
     0017 0B6F 
2430 360E 0082 00559         db      0x0e, 0x36, 0x82, 0x00, 0x27, 0x0e, 0x35, 0x88
     0E27 8835 
2438 0D00 325E 00560         db      0x00, 0x0d, 0x5e, 0x32, 0x56, 0x5a, 0x24, 0x35
     5A56 3524 
2440 008A 156C 00561         db      0x8a, 0x00, 0x6c, 0x15, 0x00, 0x0c, 0x22, 0x6c
     0C00 6C22 
2448 0071 156C 00562         db      0x71, 0x00, 0x6c, 0x15, 0x00, 0x0e, 0x5f, 0x16
     0E00 165F 
2450 5B67 6800 00563         db      0x67, 0x5b, 0x00, 0x68, 0x0e, 0x5f, 0x16, 0x02
     5F0E 0216 
2458 0828 5D02 00564         db      0x28, 0x08, 0x02, 0x5d, 0x34, 0x6c, 0x15, 0x00
     6C34 0015 
2460 220C FE7F 00565         db      0x0c, 0x22, 0x7f, 0xfe, 0xff, 0x6c, 0x5b, 0x00
     6CFF 005B 
2468 0E0B 165F 00566         db      0x0b, 0x0e, 0x5f, 0x16, 0x00, 0x6c, 0x17, 0x00
     6C00 0017 
2470 0B6F 360E 00567         db      0x6f, 0x0b, 0x0e, 0x36, 0x82, 0x00, 0x27, 0x0e
     0082 0E27 
2478 8C35 0B00 00568         db      0x35, 0x8c, 0x00, 0x0b, 0x5e, 0x36, 0x28, 0x02
     365E 0228 
2480 8E35 3900 00569         db      0x35, 0x8e, 0x00, 0x39, 0x86, 0x00, 0x35, 0x90
     0086 9035 
2488 3900 008C 00570         db      0x00, 0x39, 0x8c, 0x00, 0x35, 0x92, 0x00, 0x39
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     9235 3900 
2490 0084 012B 00571         db      0x84, 0x00, 0x2b, 0x01, 0x78, 0x24, 0x39, 0x1c
     2478 1C39 
2498 3501 0094 00572         db      0x01, 0x35, 0x94, 0x00, 0x39, 0x88, 0x00, 0x35
     8839 3500 
24A0 0096 8A39 00573         db      0x96, 0x00, 0x39, 0x8a, 0x00, 0x2b, 0x01, 0x0d
     2B00 0D01 
24A8 3924 011E 00574         db      0x24, 0x39, 0x1e, 0x01, 0x54, 0x53, 0x25, 0x29
     5354 2925 
24B0 012A 0C15 00575         db      0x2a, 0x01, 0x15, 0x0c, 0x5e, 0x28, 0x56, 0xc7
     285E C756 
24B8 6724 0061 00576         db      0x24, 0x67, 0x61, 0x00, 0x0c, 0x5d, 0x38, 0x6e
     5D0C 6E38 
24C0 1B0B 165F 00577         db      0x0b, 0x1b, 0x5f, 0x16, 0x00, 0x28, 0x04, 0x67
     2800 6704 
24C8 0061 0D1A 00578         db      0x61, 0x00, 0x1a, 0x0d, 0x5e, 0x3a, 0x5d, 0x38
     3A5E 385D 
24D0 0B6E 5F1B 00579         db      0x6e, 0x0b, 0x1b, 0x5f, 0x16, 0x15, 0x0c, 0x5e
     1516 5E0C 
24D8 0B3C FE7F 00580         db      0x3c, 0x0b, 0x7f, 0xfe, 0xff, 0x32, 0x26, 0x08
     32FF 0826 
24E0 2967 5D00 00581         db      0x67, 0x29, 0x00, 0x5d, 0x14, 0x0a, 0x36, 0x98
     0A14 9836 
24E8 2C00 0201 00582         db      0x00, 0x2c, 0x01, 0x02, 0xb0, 0x24, 0x35, 0x9a
     24B0 9A35 
24F0 0D00 305E 00583         db      0x00, 0x0d, 0x5e, 0x30, 0x56, 0x09, 0x25, 0x02
     0956 0225 
24F8 276C 0C00 00584         db      0x6c, 0x27, 0x00, 0x0c, 0x22, 0x0a, 0x6c, 0x29
     0A22 296C 
2500 6F00 0E0B 00585         db      0x00, 0x6f, 0x0b, 0x0e, 0x36, 0x82, 0x00, 0x27
     8236 2700 
2508 350E 009C 00586         db      0x0e, 0x35, 0x9c, 0x00, 0x0d, 0x5e, 0x32, 0x56
     5E0D 5632 
2510 252D 9E35 00587         db      0x2d, 0x25, 0x35, 0x9e, 0x00, 0x6c, 0x27, 0x00
     6C00 0027 
2518 220C 716C 00588         db      0x0c, 0x22, 0x6c, 0x71, 0x00, 0x6c, 0x27, 0x00
     6C00 0027 
2520 5F0E 6716 00589         db      0x0e, 0x5f, 0x16, 0x67, 0x5b, 0x00, 0x68, 0x0e
     005B 0E68 
2528 165F 2802 00590         db      0x5f, 0x16, 0x02, 0x28, 0x08, 0x02, 0x5d, 0x3e
     0208 3E5D 
2530 276C 0C00 00591         db      0x6c, 0x27, 0x00, 0x0c, 0x22, 0x7f, 0xfe, 0xff
     7F22 FFFE 
2538 5B6C 0B00 00592         db      0x6c, 0x5b, 0x00, 0x0b, 0x0e, 0x5f, 0x16, 0x00
     5F0E 0016 
2540 296C 6F00 00593         db      0x6c, 0x29, 0x00, 0x6f, 0x0b, 0x0e, 0x36, 0x82
     0E0B 8236 
2548 2700 350E 00594         db      0x00, 0x27, 0x0e, 0x35, 0xa0, 0x00, 0x0b, 0x5e
     00A0 5E0B 
2550 2840 3502 00595         db      0x40, 0x28, 0x02, 0x35, 0xa2, 0x00, 0x39, 0x9a
     00A2 9A39 
2558 3500 00A4 00596         db      0x00, 0x35, 0xa4, 0x00, 0x39, 0xa0, 0x00, 0x35
     A039 3500 
2560 00A6 9839 00597         db      0xa6, 0x00, 0x39, 0x98, 0x00, 0x2b, 0x01, 0x4b
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2B00 4B01 
2568 3925 0114 00598         db      0x25, 0x39, 0x14, 0x01, 0x35, 0xa8, 0x00, 0x39
     A835 3900 
2570 009C AA35 00599         db      0x9c, 0x00, 0x35, 0xaa, 0x00, 0x39, 0x9e, 0x00
     3900 009E 
2578 012B 24E0 00600         db      0x2b, 0x01, 0xe0, 0x24, 0x39, 0x16, 0x01, 0x54
     1639 5401 
2580 3EC2 2800 00601         db      0xc2, 0x3e, 0x00, 0x28, 0x02, 0x00, 0x09, 0x2b
     0002 2B09 
2588 8201 3625 00602         db      0x01, 0x82, 0x25, 0x36, 0xac, 0x00, 0x26, 0x06
     00AC 0626 
2590 6300 0228 00603         db      0x00, 0x63, 0x28, 0x02, 0x00, 0x36, 0xae, 0x00
     3600 00AE 
2598 0921 012B 00604         db      0x21, 0x09, 0x2b, 0x01, 0x90, 0x25, 0x36, 0xb0
     2590 B036 
25A0 3600 00B2 00605         db      0x00, 0x36, 0xb2, 0x00, 0x36, 0xb4, 0x00, 0x69
     B436 6900 
25A8 B636 2400 00606         db      0x36, 0xb6, 0x00, 0x24, 0x0e, 0x06, 0x29, 0x2a
     060E 2A29 
25B0 0101 B836 00607         db      0x01, 0x01, 0x36, 0xb8, 0x00, 0x21, 0x0b, 0x25
     2100 250B 
25B8 0006 BA36 00608         db      0x06, 0x00, 0x36, 0xba, 0x00, 0x21, 0x0b, 0x36
     2100 360B 
25C0 00BC 0021 00609         db      0xbc, 0x00, 0x21, 0x00, 0x28, 0x04, 0x00, 0x5d
     0428 5D00 
25C8 6A20 0A70 00610         db      0x20, 0x6a, 0x70, 0x0a, 0x36, 0xbe, 0x00, 0x25
     BE36 2500 
25D0 2906 012A 00611         db      0x06, 0x29, 0x2a, 0x01, 0x19, 0x17, 0x0c, 0x7e
     1719 7E0C 
25D8 E156 1925 00612         db      0x56, 0xe1, 0x25, 0x19, 0x12, 0x1e, 0x14, 0x25
     1E12 2514 
25E0 0106 151E 00613         db      0x06, 0x01, 0x1e, 0x15, 0x52, 0x0a, 0x83, 0x4b
     0A52 4B83 
25E8 F900 0025 00614         db      0x00, 0xf9, 0x25, 0x00, 0x1e, 0x12, 0x1e, 0x0f
     121E 0F1E 
25F0 0222 027F 00615         db      0x22, 0x02, 0x7f, 0x02, 0x00, 0x0c, 0x32, 0x26
     0C00 2632 
25F8 300A 3405 00616         db      0x0a, 0x30, 0x05, 0x34, 0x04, 0x34, 0x03, 0x34
     3404 3403 
2600 3302 1111 00617         db      0x02, 0x33, 0x11, 0x11, 0x1e, 0x16, 0x1e, 0x15
     161E 151E 
2608 0D1E 1824 00618         db      0x1e, 0x0d, 0x24, 0x18, 0x09, 0x29, 0x2a, 0x02
     2909 022A 
2610 1E01 1E10 00619         db      0x01, 0x1e, 0x10, 0x1e, 0x0e, 0x22, 0x02, 0x0b
     220E 0B02 
2618 2631 290A 00620         db      0x31, 0x26, 0x0a, 0x29, 0x2a, 0x03, 0x19, 0x0a
     032A 0A19 
2620 2F56 0226 00621         db      0x56, 0x2f, 0x26, 0x02, 0x68, 0x0d, 0x22, 0x1e
     0D68 1E22 
2628 1E0E 220C 00622         db      0x0e, 0x1e, 0x0c, 0x22, 0x54, 0x34, 0x26, 0x02
     3454 0226 
2630 0E1E 220D 00623         db      0x1e, 0x0e, 0x0d, 0x22, 0x03, 0x0b, 0x34, 0xfe
     0B03 FE34 
2638 0C26 2A29 00624         db      0x26, 0x0c, 0x29, 0x2a, 0x02, 0x19, 0x08, 0x56
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1902 5608 
2640 264D 0C63 00625         db      0x4d, 0x26, 0x63, 0x0c, 0x21, 0x1e, 0x0c, 0x1e
     1E21 1E0C 
2648 220A 5154 00626         db      0x0a, 0x22, 0x54, 0x51, 0x26, 0x19, 0x0c, 0x0c
     1926 0C0C 
2650 0221 340B 00627         db      0x21, 0x02, 0x0b, 0x34, 0xfd, 0x26, 0x0a, 0x29
     26FD 290A 
2658 012A 0A19 00628         db      0x2a, 0x01, 0x19, 0x0a, 0x1e, 0x09, 0x21, 0x01
     091E 0121 
2660 340B 26FC 00629         db      0x0b, 0x34, 0xfc, 0x26, 0x08, 0x16, 0x1c, 0x1a
     1608 1A1C 
2668 0626 2A29 00630         db      0x26, 0x06, 0x29, 0x2a, 0x02, 0x00, 0x0c, 0x1b
     0002 1B0C 
2670 1A21 2244 00631         db      0x21, 0x1a, 0x44, 0x22, 0x1e, 0x0c, 0x0d, 0x0d
     0C1E 0D0D 
2678 110D FB34 00632         db      0x0d, 0x11, 0x34, 0xfb, 0x2b, 0x04, 0x65, 0x26
     042B 2665 
2680 091E 1024 00633         db      0x1e, 0x09, 0x24, 0x10, 0x04, 0x29, 0x2a, 0x03
     2904 032A 
2688 5D02 0A20 00634         db      0x02, 0x5d, 0x20, 0x0a, 0x0f, 0x0f, 0x0e, 0x32
     0F0F 320E 
2690 081E 071E 00635         db      0x1e, 0x08, 0x1e, 0x07, 0x1e, 0x06, 0x1e, 0x05
     061E 051E 
2698 1C1D 1A1B 00636         db      0x1d, 0x1c, 0x1b, 0x1a, 0x2c, 0x06, 0x0d, 0xd2
     062C D20D 
26A0 0E25 1C26 00637         db      0x25, 0x0e, 0x26, 0x1c, 0x26, 0x3b, 0x26, 0x58
     3B26 5826 
26A8 6B26 6326 00638         db      0x26, 0x6b, 0x26, 0x63, 0x12, 0x12, 0x00, 0x11
     1212 1100 
26B0 1A26 2A29 00639         db      0x26, 0x1a, 0x29, 0x2a, 0x06, 0x06, 0x0c, 0x21
     0606 210C 
26B8 100A 1010 00640         db      0x0a, 0x10, 0x10, 0x10, 0x0f, 0x36, 0xc0, 0x00
     360F 00C0 
26C0 C236 3600 00641         db      0x36, 0xc2, 0x00, 0x36, 0xc4, 0x00, 0x2c, 0x01
     00C4 012C 
26C8 8608 6326 00642         db      0x08, 0x86, 0x26, 0x63, 0x36, 0xc4, 0x00, 0x43
     C436 4300 
26D0 1221 0010 00643         db      0x21, 0x12, 0x10, 0x00, 0x0c, 0x22, 0x12, 0x12
     220C 1212 
26D8 0B00 C636 00644         db      0x00, 0x0b, 0x36, 0xc6, 0x00, 0x26, 0x18, 0x29
     2600 2918 
26E0 012A 1C01 00645         db      0x2a, 0x01, 0x01, 0x1c, 0x1b, 0x0d, 0x1a, 0x24
     0D1B 241A 
26E8 040C 2A29 00646         db      0x0c, 0x04, 0x29, 0x2a, 0x02, 0x01, 0x0b, 0x33
     0102 330B 
26F0 042B 26E0 00647         db      0x2b, 0x04, 0xe0, 0x26, 0x0d, 0x0c, 0x0c, 0x1e
     0C0D 1E0C 
26F8 1E12 240F 00648         db      0x12, 0x1e, 0x0f, 0x24, 0x10, 0x04, 0x29, 0x2a
     0410 2A29 
2700 1901 0B05 00649         db      0x01, 0x19, 0x05, 0x0b, 0x1b, 0x22, 0x0c, 0x1e
     221B 1E0C 
2708 0C06 0040 00650         db      0x06, 0x0c, 0x40, 0x00, 0x1e, 0x05, 0x0e, 0x1a
     051E 1A0E 
2710 1D22 241C 00651         db      0x22, 0x1d, 0x1c, 0x24, 0x0e, 0x04, 0x29, 0x2a
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     040E 2A29 
2718 0303 101E 00652         db      0x03, 0x03, 0x1e, 0x10, 0x52, 0x0a, 0x7f, 0xc0
     0A52 C07F 
2720 0AFF 338C 00653         db      0xff, 0x0a, 0x8c, 0x33, 0x00, 0x2d, 0x27, 0x13
     2D00 1327 
2728 0002 8954 00654         db      0x02, 0x00, 0x54, 0x89, 0x27, 0x00, 0x57, 0x1a
     0027 1A57 
2730 2764 276A 00655         db      0x64, 0x27, 0x6a, 0x27, 0x6a, 0x27, 0x64, 0x27
     276A 2764 
2738 276A 276A 00656         db      0x6a, 0x27, 0x6a, 0x27, 0x6a, 0x27, 0x6a, 0x27
     276A 276A 
2740 276A 276A 00657         db      0x6a, 0x27, 0x6a, 0x27, 0x70, 0x27, 0x64, 0x27
     2770 2764 
2748 276A 2764 00658         db      0x6a, 0x27, 0x64, 0x27, 0x64, 0x27, 0x6a, 0x27
     2764 276A 
2750 2764 2764 00659         db      0x64, 0x27, 0x64, 0x27, 0x64, 0x27, 0x64, 0x27
     2764 2764 
2758 2764 2764 00660         db      0x64, 0x27, 0x64, 0x27, 0x64, 0x27, 0x64, 0x27
     2764 2764 
2760 2764 2764 00661         db      0x64, 0x27, 0x64, 0x27, 0x13, 0x02, 0x00, 0x54
     0213 5400 
2768 2791 0213 00662         db      0x91, 0x27, 0x13, 0x02, 0x00, 0x54, 0x89, 0x27
     5400 2789 
2770 0E04 320E 00663         db      0x04, 0x0e, 0x0e, 0x32, 0x1e, 0x17, 0x1e, 0x0e
     171E 0E1E 
2778 072B 26FF 00664         db      0x2b, 0x07, 0xff, 0x26, 0x10, 0x7f, 0x02, 0x00
     7F10 0002 
2780 0C0F 101E 00665         db      0x0f, 0x0c, 0x1e, 0x10, 0x1e, 0x0d, 0x24, 0x16
     0D1E 1624 
2788 0404 0E0E 00666         db      0x04, 0x04, 0x0e, 0x0e, 0x0e, 0x33, 0x24, 0x12
     330E 1224 
2790 0404 027F 00667         db      0x04, 0x04, 0x7f, 0x02, 0x00, 0x0e, 0x0e, 0x0e
     0E00 0E0E 
2798 2432 0412 00668         db      0x32, 0x24, 0x12, 0x04, 0x29, 0x2a, 0x03, 0x03
     2A29 0303 
27A0 0E1E 0A52 00669         db      0x1e, 0x0e, 0x52, 0x0a, 0x86, 0xf9, 0x00, 0xfc
     F986 FC00 
27A8 0028 7C57 00670         db      0x28, 0x00, 0x57, 0x7c, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27B0 28FC 28FC 00671         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27B8 28FC 28FC 00672         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27C0 28FC 28FC 00673         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27C8 28FC 28FC 00674         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27D0 28FC 28FC 00675         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27D8 28FC 28FC 00676         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27E0 28FC 28FC 00677         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
27E8 28FC 28FC 00678         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xa4, 0x28
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     28FC 28A4 
27F0 28FC 28FC 00679         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xad, 0x28
     28FC 28AD 
27F8 28FC 28FC 00680         db      0xfc, 0x28, 0xfc, 0x28, 0xfe, 0x2a, 0xb9, 0x28
     2AFE 28B9 
2800 28FC 28FC 00681         db      0xfc, 0x28, 0xfc, 0x28, 0xb9, 0x28, 0xfc, 0x28
     28B9 28FC 
2808 28FC 28FC 00682         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2810 28FC 28FC 00683         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2818 28FC 28FC 00684         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2820 28FC 28FC 00685         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2828 28FC 28FC 00686         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2830 29E2 2958 00687         db      0xe2, 0x29, 0x58, 0x29, 0xfc, 0x28, 0xb8, 0x29
     28FC 29B8 
2838 29B8 29B8 00688         db      0xb8, 0x29, 0xb8, 0x29, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2840 28FC 28FC 00689         db      0xfc, 0x28, 0xfc, 0x28, 0xf9, 0x29, 0xfc, 0x28
     29F9 28FC 
2848 298D 28FC 00690         db      0x8d, 0x29, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2850 28FC 2904 00691         db      0xfc, 0x28, 0x04, 0x29, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2858 28FC 28FC 00692         db      0xfc, 0x28, 0xfc, 0x28, 0x8d, 0x29, 0xfc, 0x28
     298D 28FC 
2860 28FC 28FC 00693         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2868 28FC 28FC 00694         db      0xfc, 0x28, 0xfc, 0x28, 0xfc, 0x28, 0xc5, 0x28
     28FC 28C5 
2870 29E2 2958 00695         db      0xe2, 0x29, 0x58, 0x29, 0x8d, 0x29, 0xb8, 0x29
     298D 29B8 
2878 29B8 29B8 00696         db      0xb8, 0x29, 0xb8, 0x29, 0xfc, 0x28, 0x8d, 0x29
     28FC 298D 
2880 28FC 28FC 00697         db      0xfc, 0x28, 0xfc, 0x28, 0xf9, 0x29, 0xfc, 0x28
     29F9 28FC 
2888 29F9 298D 00698         db      0xf9, 0x29, 0x8d, 0x29, 0xfc, 0x28, 0xfc, 0x28
     28FC 28FC 
2890 28FC 2904 00699         db      0xfc, 0x28, 0x04, 0x29, 0xe9, 0x28, 0x8d, 0x29
     28E9 298D 
2898 28FC 28FC 00700         db      0xfc, 0x28, 0xfc, 0x28, 0x8d, 0x29, 0xfc, 0x28
     298D 28FC 
28A0 28FC 2AFE 00701         db      0xfc, 0x28, 0xfe, 0x2a, 0x04, 0x7f, 0x02, 0x00
     7F04 0002 
28A8 1E0D 2613 00702         db      0x0d, 0x1e, 0x13, 0x26, 0x0e, 0x04, 0x7f, 0x02
     040E 027F 
28B0 3600 00C8 00703         db      0x00, 0x36, 0xc8, 0x00, 0x0e, 0x1e, 0x10, 0x27
     1E0E 2710 
28B8 0410 027F 00704         db      0x10, 0x04, 0x7f, 0x02, 0x00, 0x36, 0xca, 0x00
     3600 00CA 
28C0 1E0E 2710 00705         db      0x0e, 0x1e, 0x10, 0x27, 0x10, 0x02, 0x0c, 0x1e
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0210 1E0C 
28C8 2215 0D0D 00706         db      0x15, 0x22, 0x0d, 0x0d, 0x1e, 0x0d, 0x22, 0x1d
     0D1E 1D22 
28D0 2145 680A 00707         db      0x45, 0x21, 0x0a, 0x68, 0x1e, 0x15, 0x22, 0x11
     151E 1122 
28D8 027F 0B00 00708         db      0x7f, 0x02, 0x00, 0x0b, 0x0e, 0x0e, 0x12, 0x10
     0E0E 1012 
28E0 1E00 220C 00709         db      0x00, 0x1e, 0x0c, 0x22, 0x1e, 0x11, 0x24, 0x18
     111E 1824 
28E8 0204 1E0C 00710         db      0x04, 0x02, 0x0c, 0x1e, 0x15, 0x22, 0x0f, 0x7f
     2215 7F0F 
28F0 0002 0F0B 00711         db      0x02, 0x00, 0x0b, 0x0f, 0x0f, 0x1e, 0x0c, 0x22
     1E0F 220C 
28F8 121E 1227 00712         db      0x1e, 0x12, 0x27, 0x12, 0x00, 0x0f, 0x1e, 0x0e
     0F00 0E1E 
2900 051E 1027 00713         db      0x1e, 0x05, 0x27, 0x10, 0x02, 0x0c, 0x1e, 0x15
     0C02 151E 
2908 0B22 E784 00714         db      0x22, 0x0b, 0x84, 0xe7, 0x00, 0x13, 0x29, 0x00
     1300 0029 
2910 2654 3529 00715         db      0x54, 0x26, 0x29, 0x35, 0xcc, 0x00, 0x0b, 0x36
     00CC 360B 
2918 00CE 3621 00716         db      0xce, 0x00, 0x21, 0x36, 0x4e, 0x00, 0x22, 0x36
     004E 3622 
2920 00D0 4E36 00717         db      0xd0, 0x00, 0x36, 0x4e, 0x00, 0x22, 0x1e, 0x0f
     2200 0F1E 
2928 027F 1100 00718         db      0x7f, 0x02, 0x00, 0x11, 0x79, 0x56, 0x34, 0x29
     5679 2934 
2930 5400 294A 00719         db      0x00, 0x54, 0x4a, 0x29, 0x00, 0x09, 0x1f, 0x47
     0900 471F 
2938 0829 0012 00720         db      0x29, 0x08, 0x12, 0x00, 0x12, 0x16, 0x00, 0x1e
     1612 1E00 
2940 1E0F 1E0E 00721         db      0x0f, 0x1e, 0x0e, 0x1e, 0x07, 0x20, 0x07, 0x1e
     2007 1E07 
2948 2206 7F11 00722         db      0x06, 0x22, 0x11, 0x7f, 0x02, 0x00, 0x0b, 0x11
     0002 110B 
2950 1E11 220C 00723         db      0x11, 0x1e, 0x0c, 0x22, 0x1e, 0x10, 0x27, 0x16
     101E 1627 
2958 0C02 151E 00724         db      0x02, 0x0c, 0x1e, 0x15, 0x22, 0x0b, 0x84, 0xc7
     0B22 C784 
2960 6C00 0029 00725         db      0x00, 0x6c, 0x29, 0x00, 0x69, 0x36, 0xd2, 0x00
     3669 00D2 
2968 5422 297F 00726         db      0x22, 0x54, 0x7f, 0x29, 0x35, 0xd4, 0x00, 0x0b
     D435 0B00 
2970 D636 2100 00727         db      0x36, 0xd6, 0x00, 0x21, 0x36, 0x4e, 0x00, 0x22
     4E36 2200 
2978 D836 3600 00728         db      0x36, 0xd8, 0x00, 0x36, 0x4e, 0x00, 0x22, 0x10
     004E 1022 
2980 027F 0B00 00729         db      0x7f, 0x02, 0x00, 0x0b, 0x10, 0x10, 0x1e, 0x0c
     1010 0C1E 
2988 1E22 2710 00730         db      0x22, 0x1e, 0x10, 0x27, 0x14, 0x02, 0x0c, 0x1e
     0214 1E0C 
2990 2215 090A 00731         db      0x15, 0x22, 0x0a, 0x09, 0x1f, 0xa8, 0x29, 0x08
     A81F 0829 
2998 0010 1412 00732         db      0x10, 0x00, 0x12, 0x14, 0x00, 0x1e, 0x0f, 0x1e
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1E00 1E0F 
29A0 120E 0012 00733         db      0x0e, 0x12, 0x12, 0x00, 0x1e, 0x08, 0x20, 0x09
     081E 0920 
29A8 221A 7F10 00734         db      0x1a, 0x22, 0x10, 0x7f, 0x02, 0x00, 0x0b, 0x10
     0002 100B 
29B0 1E10 220C 00735         db      0x10, 0x1e, 0x0c, 0x22, 0x1e, 0x10, 0x27, 0x14
     101E 1427 
29B8 0C02 151E 00736         db      0x02, 0x0c, 0x1e, 0x15, 0x22, 0x0a, 0x09, 0x1f
     0A22 1F09 
29C0 29D0 1008 00737         db      0xd0, 0x29, 0x08, 0x10, 0x00, 0x12, 0x14, 0x00
     1200 0014 
29C8 0F1E 0E1E 00738         db      0x1e, 0x0f, 0x1e, 0x0e, 0x1e, 0x07, 0x20, 0x07
     071E 0720 
29D0 DA36 2200 00739         db      0x36, 0xda, 0x00, 0x22, 0x10, 0x7f, 0x02, 0x00
     7F10 0002 
29D8 100B 1E10 00740         db      0x0b, 0x10, 0x10, 0x1e, 0x0c, 0x22, 0x1e, 0x10
     220C 101E 
29E0 1427 0C02 00741         db      0x27, 0x14, 0x02, 0x0c, 0x1e, 0x15, 0x22, 0x0f
     151E 0F22 
29E8 027F 0B00 00742         db      0x7f, 0x02, 0x00, 0x0b, 0x36, 0xdc, 0x00, 0x21
     DC36 2100 
29F0 0F0F 0C1E 00743         db      0x0f, 0x0f, 0x1e, 0x0c, 0x22, 0x1e, 0x10, 0x27
     1E22 2710 
29F8 0412 027F 00744         db      0x12, 0x04, 0x7f, 0x02, 0x00, 0x1e, 0x0e, 0x52
     1E00 520E 
2A00 7F0A FF50 00745         db      0x0a, 0x7f, 0x50, 0xff, 0x0a, 0x8c, 0x41, 0x00
     8C0A 0041 
2A08 2A10 0213 00746         db      0x10, 0x2a, 0x13, 0x02, 0x00, 0x54, 0x5e, 0x2a
     5400 2A5E 
2A10 5700 5521 00747         db      0x00, 0x57, 0x21, 0x55, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A18 5B2A 5B2A 00748         db      0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A20 5B2A 5B2A 00749         db      0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A28 5B2A 552A 00750         db      0x2a, 0x5b, 0x2a, 0x55, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A30 5B2A 5B2A 00751         db      0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x55, 0x2a, 0x5b
     552A 5B2A 
2A38 5B2A 5B2A 00752         db      0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A40 552A 5B2A 00753         db      0x2a, 0x55, 0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x5b
     5B2A 5B2A 
2A48 5B2A 5B2A 00754         db      0x2a, 0x5b, 0x2a, 0x5b, 0x2a, 0x55, 0x2a, 0x5b
     552A 5B2A 
2A50 5B2A 552A 00755         db      0x2a, 0x5b, 0x2a, 0x55, 0x2a, 0x13, 0x02, 0x00
     132A 0002 
2A58 8954 132A 00756         db      0x54, 0x89, 0x2a, 0x13, 0x02, 0x00, 0x03, 0x0d
     0002 0D03 
2A60 151E 0A22 00757         db      0x1e, 0x15, 0x22, 0x0a, 0x09, 0x1f, 0x79, 0x2a
     1F09 2A79 
2A68 1208 1200 00758         db      0x08, 0x12, 0x00, 0x12, 0x16, 0x00, 0x1e, 0x0f
     0016 0F1E 
2A70 0E1E DD6C 00759         db      0x1e, 0x0e, 0x6c, 0xdd, 0x00, 0x1e, 0x08, 0x20
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1E00 2008 
2A78 1A09 1122 00760         db      0x09, 0x1a, 0x22, 0x11, 0x7f, 0x02, 0x00, 0x0b
     027F 0B00 
2A80 1111 0C1E 00761         db      0x11, 0x11, 0x1e, 0x0c, 0x22, 0x1e, 0x10, 0x27
     1E22 2710 
2A88 0516 027F 00762         db      0x16, 0x05, 0x7f, 0x02, 0x00, 0x0c, 0x7f, 0x28
     0C00 287F 
2A90 0AFF 058C 00763         db      0xff, 0x0a, 0x8c, 0x05, 0x00, 0x9d, 0x2a, 0x13
     9D00 132A 
2A98 0002 D554 00764         db      0x02, 0x00, 0x54, 0xd5, 0x2a, 0x00, 0x57, 0x03
     002A 0357 
2AA0 2AA6 2AC4 00765         db      0xa6, 0x2a, 0xc4, 0x2a, 0xca, 0x2a, 0x05, 0x0f
     2ACA 0F05 
2AA8 151E 0A22 00766         db      0x1e, 0x15, 0x22, 0x0a, 0x09, 0x1f, 0xbc, 0x2a
     1F09 2ABC 
2AB0 1608 1100 00767         db      0x08, 0x16, 0x00, 0x11, 0x1e, 0x0f, 0x1e, 0x0e
     0F1E 0E1E 
2AB8 071E 0720 00768         db      0x1e, 0x07, 0x20, 0x07, 0x1b, 0x22, 0x13, 0x02
     221B 0213 
2AC0 5400 2ACF 00769         db      0x00, 0x54, 0xcf, 0x2a, 0x13, 0x02, 0x00, 0x54
     0213 5400 
2AC8 2AD5 3663 00770         db      0xd5, 0x2a, 0x63, 0x36, 0x50, 0x00, 0x21, 0x13
     0050 1321 
2AD0 0002 F054 00771         db      0x02, 0x00, 0x54, 0xf0, 0x2a, 0x04, 0x0e, 0x1e
     042A 1E0E 
2AD8 2215 090A 00772         db      0x15, 0x22, 0x0a, 0x09, 0x1f, 0xeb, 0x2a, 0x08
     EB1F 082A 
2AE0 0014 1E10 00773         db      0x14, 0x00, 0x10, 0x1e, 0x0f, 0x1e, 0x0e, 0x1e
     1E0F 1E0E 
2AE8 2007 1C07 00774         db      0x07, 0x20, 0x07, 0x1c, 0x22, 0x13, 0x02, 0x00
     1322 0002 
2AF0 7F0B 0002 00775         db      0x0b, 0x7f, 0x02, 0x00, 0x0b, 0x11, 0x11, 0x1e
     110B 1E11 
2AF8 220C 101E 00776         db      0x0c, 0x22, 0x1e, 0x10, 0x27, 0x16, 0x02, 0x0c
     1627 0C02 
2B00 151E 0F22 00777         db      0x1e, 0x15, 0x22, 0x0f, 0x7f, 0x02, 0x00, 0x0a
     027F 0A00 
2B08 0E1E 1E0E 00778         db      0x1e, 0x0e, 0x0e, 0x1e, 0x09, 0x23, 0x0d, 0x84
     2309 840D 
2B10 00F7 2B22 00779         db      0xf7, 0x00, 0x22, 0x2b, 0x00, 0x0d, 0x1e, 0x0a
     0D00 0A1E 
2B18 1121 1E11 00780         db      0x21, 0x11, 0x11, 0x1e, 0x0c, 0x22, 0x1e, 0x10
     220C 101E 
2B20 1627 0D00 00781         db      0x27, 0x16, 0x00, 0x0d, 0x11, 0x11, 0x1e, 0x0c
     1111 0C1E 
2B28 1E22 2714 00782         db      0x22, 0x1e, 0x14, 0x27, 0x16, 0x29, 0x2a, 0x01
     2916 012A 
2B30 0B01 221A 00783         db      0x01, 0x0b, 0x1a, 0x22, 0x1b, 0x5e, 0x42, 0x28
     5E1B 2842 
2B38 2904 082A 00784         db      0x04, 0x29, 0x2a, 0x08, 0x01, 0x36, 0xde, 0x00
     3601 00DE 
2B40 032B 2B2E 00785         db      0x2b, 0x03, 0x2e, 0x2b, 0x0a, 0x12, 0x14, 0x00
     120A 0014 
2B48 1412 1200 00786         db      0x12, 0x14, 0x00, 0x12, 0x14, 0x00, 0x12, 0x14
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0014 1412 
2B50 1200 0014 00787         db      0x00, 0x12, 0x14, 0x00, 0x12, 0x14, 0x00, 0x12
     1412 1200 
2B58 0010 DE36 00788         db      0x10, 0x00, 0x36, 0xde, 0x00, 0x36, 0xe0, 0x00
     3600 00E0 
2B60 E236 3600 00789         db      0x36, 0xe2, 0x00, 0x36, 0xe4, 0x00, 0x36, 0xe6
     00E4 E636 
2B68 3600 00E8 00790         db      0x00, 0x36, 0xe8, 0x00, 0x36, 0xea, 0x00, 0x36
     EA36 3600 
2B70 00EC EE36 00791         db      0xec, 0x00, 0x36, 0xee, 0x00, 0x36, 0xc4, 0x00
     3600 00C4 
2B78 F036 3600 00792         db      0x36, 0xf0, 0x00, 0x36, 0xf2, 0x00, 0x36, 0xf4
     00F2 F436 
2B80 2C00 1503 00793         db      0x00, 0x2c, 0x03, 0x15, 0xeb, 0x26, 0x17, 0x27
     26EB 2717 
2B88 279D 7F07 00794         db      0x9d, 0x27, 0x07, 0x7f, 0x02, 0x00, 0x68, 0x12
     0002 1268 
2B90 0010 270F 00795         db      0x10, 0x00, 0x0f, 0x27, 0x20, 0x29, 0x2a, 0x01
     2920 012A 
2B98 5600 2BA0 00796         db      0x00, 0x56, 0xa0, 0x2b, 0x00, 0x43, 0x28, 0x04
     4300 0428 
2BA0 2801 2904 00797         db      0x01, 0x28, 0x04, 0x29, 0x2a, 0x01, 0x00, 0x56
     012A 5600 
2BA8 2BAD 2801 00798         db      0xad, 0x2b, 0x01, 0x28, 0x04, 0x01, 0x36, 0xc4
     0104 C436 
2BB0 4500 0625 00799         db      0x00, 0x45, 0x25, 0x06, 0x29, 0x2a, 0x01, 0x01
     2A29 0101 
2BB8 521B 870A 00800         db      0x1b, 0x52, 0x0a, 0x87, 0x61, 0x00, 0xd7, 0x2b
     0061 2BD7 
2BC0 8600 0075 00801         db      0x00, 0x86, 0x75, 0x00, 0xf4, 0x2b, 0x02, 0x7f
     2BF4 7F02 
2BC8 0002 7F0B 00802         db      0x02, 0x00, 0x0b, 0x7f, 0xa0, 0xff, 0x0d, 0x6c
     FFA0 6C0D 
2BD0 0015 6E70 00803         db      0x15, 0x00, 0x70, 0x6e, 0x32, 0x26, 0x0a, 0x00
     2632 000A 
2BD8 4984 F400 00804         db      0x84, 0x49, 0x00, 0xf4, 0x2b, 0x01, 0x55, 0xe7
     012B E755 
2BE0 632B 5036 00805         db      0x2b, 0x63, 0x36, 0x50, 0x00, 0x25, 0x08, 0x02
     2500 0208 
2BE8 027F 0C00 00806         db      0x7f, 0x02, 0x00, 0x0c, 0x1a, 0x46, 0x21, 0x3f
     461A 3F21 
2BF0 1C00 0A26 00807         db      0x00, 0x1c, 0x26, 0x0a, 0x18, 0x68, 0x1c, 0x26
     6818 261C 
2BF8 290A 032A 00808         db      0x0a, 0x29, 0x2a, 0x03, 0x03, 0x0b, 0x52, 0x0a
     0B03 0A52 
2C00 A07F 8CFF 00809         db      0x7f, 0xa0, 0xff, 0x8c, 0x13, 0x00, 0x0d, 0x2c
     0013 2C0D 
2C08 6804 260E 00810         db      0x04, 0x68, 0x0e, 0x26, 0x0e, 0x04, 0x0d, 0x0d
     040E 0D0D 
2C10 C436 2C00 00811         db      0x36, 0xc4, 0x00, 0x2c, 0x01, 0x04, 0xb5, 0x2b
     0401 2BB5 
2C18 7F05 0002 00812         db      0x05, 0x7f, 0x02, 0x00, 0x0c, 0x7f, 0xa0, 0xff
     7F0C FFA0 
2C20 260C 2910 00813         db      0x0c, 0x26, 0x10, 0x29, 0x2a, 0x05, 0x63, 0x6c
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     052A 6C63 
2C28 000D 445E 00814         db      0x0d, 0x00, 0x5e, 0x44, 0x0b, 0x68, 0x0c, 0x5f
     680B 5F0C 
2C30 0246 0C69 00815         db      0x46, 0x02, 0x69, 0x0c, 0x5f, 0x46, 0x03, 0x6a
     465F 6A03 
2C38 5F0C 0446 00816         db      0x0c, 0x5f, 0x46, 0x04, 0x6b, 0x0c, 0x5f, 0x46
     0C6B 465F 
2C40 6C05 0009 00817         db      0x05, 0x6c, 0x09, 0x00, 0x0c, 0x5f, 0x46, 0x06
     5F0C 0646 
2C48 0B6C 0C00 00818         db      0x6c, 0x0b, 0x00, 0x0c, 0x5f, 0x46, 0x00, 0x1b
     465F 1B00 
2C50 261A 2912 00819         db      0x1a, 0x26, 0x12, 0x29, 0x2a, 0x04, 0x63, 0x6c
     042A 6C63 
2C58 000B 445E 00820         db      0x0b, 0x00, 0x5e, 0x44, 0x0b, 0x68, 0x0c, 0x5f
     680B 5F0C 
2C60 0246 0C69 00821         db      0x46, 0x02, 0x69, 0x0c, 0x5f, 0x46, 0x03, 0x6a
     465F 6A03 
2C68 5F0C 0446 00822         db      0x0c, 0x5f, 0x46, 0x04, 0x6b, 0x0c, 0x5f, 0x46
     0C6B 465F 
2C70 6C05 0009 00823         db      0x05, 0x6c, 0x09, 0x00, 0x0c, 0x5f, 0x46, 0x00
     5F0C 0046 
2C78 1A1B 1026 00824         db      0x1b, 0x1a, 0x26, 0x10, 0x29, 0x2a, 0x03, 0x63
     2A29 6303 
2C80 096C 5E00 00825         db      0x6c, 0x09, 0x00, 0x5e, 0x44, 0x0b, 0x68, 0x0c
     0B44 0C68 
2C88 465F 6902 00826         db      0x5f, 0x46, 0x02, 0x69, 0x0c, 0x5f, 0x46, 0x03
     5F0C 0346 
2C90 0C6A 465F 00827         db      0x6a, 0x0c, 0x5f, 0x46, 0x04, 0x6b, 0x0c, 0x5f
     6B04 5F0C 
2C98 0046 1A1B 00828         db      0x46, 0x00, 0x1b, 0x1a, 0x26, 0x0e, 0x29, 0x2a
     0E26 2A29 
2CA0 6302 5E6B 00829         db      0x02, 0x63, 0x6b, 0x5e, 0x44, 0x0b, 0x68, 0x0c
     0B44 0C68 
2CA8 465F 6902 00830         db      0x5f, 0x46, 0x02, 0x69, 0x0c, 0x5f, 0x46, 0x03
     5F0C 0346 
2CB0 0C6A 465F 00831         db      0x6a, 0x0c, 0x5f, 0x46, 0x00, 0x1b, 0x1a, 0x26
     1B00 261A 
2CB8 290C 012A 00832         db      0x0c, 0x29, 0x2a, 0x01, 0x63, 0x6a, 0x5e, 0x44
     6A63 445E 
2CC0 680B 5F0C 00833         db      0x0b, 0x68, 0x0c, 0x5f, 0x46, 0x02, 0x69, 0x0c
     0246 0C69 
2CC8 465F 1B00 00834         db      0x5f, 0x46, 0x00, 0x1b, 0x1a, 0x26, 0x0a, 0x63
     261A 630A 
2CD0 5E69 0B44 00835         db      0x69, 0x5e, 0x44, 0x0b, 0x68, 0x0c, 0x5f, 0x46
     0C68 465F 
2CD8 1B00 261A 00836         db      0x00, 0x1b, 0x1a, 0x26, 0x08, 0x17, 0x0b, 0x40
     1708 400B 
2CE0 1B00 027F 00837         db      0x00, 0x1b, 0x7f, 0x02, 0x00, 0x1a, 0x26, 0x06
     1A00 0626 
2CE8 2A29 0101 00838         db      0x29, 0x2a, 0x01, 0x01, 0x0b, 0x1a, 0x6f, 0x7f
     1A0B 7F6F 
2CF0 FFFE 5F1B 00839         db      0xfe, 0xff, 0x1b, 0x5f, 0x46, 0x28, 0x04, 0x29
     2846 2904 
2CF8 012A 0B18 00840         db      0x2a, 0x01, 0x18, 0x0b, 0x7e, 0x56, 0x12, 0x2d
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     567E 2D12 
2D00 1D63 445E 00841         db      0x63, 0x1d, 0x5e, 0x44, 0x0c, 0x0b, 0x1d, 0x2b
     0B0C 2B1D 
2D08 E903 1A2C 00842         db      0x03, 0xe9, 0x2c, 0x1a, 0x22, 0x00, 0x1c, 0x1b
     0022 1B1C 
2D10 0A26 0B01 00843         db      0x26, 0x0a, 0x01, 0x0b, 0x32, 0x2b, 0x04, 0xdd
     2B32 DD04 
2D18 282C 2904 00844         db      0x2c, 0x28, 0x04, 0x29, 0x2a, 0x01, 0x01, 0x36
     012A 3601 
2D20 00C2 0A21 00845         db      0xc2, 0x00, 0x21, 0x0a, 0x8c, 0x0d, 0x00, 0x39
     0D8C 3900 
2D28 002D 0D0D 00846         db      0x2d, 0x00, 0x0d, 0x0d, 0x36, 0xf6, 0x00, 0x2c
     F636 2C00 
2D30 0401 2CF8 00847         db      0x01, 0x04, 0xf8, 0x2c, 0x63, 0x68, 0x0c, 0x26
     6863 260C 
2D38 000C 0757 00848         db      0x0c, 0x00, 0x57, 0x07, 0x4a, 0x2d, 0x4f, 0x2d
     2D4A 2D4F 
2D40 2D57 2D5F 00849         db      0x57, 0x2d, 0x5f, 0x2d, 0x67, 0x2d, 0x6f, 0x2d
     2D67 2D6F 
2D48 2D77 0D3A 00850         db      0x77, 0x2d, 0x3a, 0x0d, 0x0d, 0x26, 0x0a, 0x02
     260D 020A 
2D50 2B0C CF03 00851         db      0x0c, 0x2b, 0x03, 0xcf, 0x2c, 0x28, 0x06, 0x02
     282C 0206 
2D58 2B0C BA03 00852         db      0x0c, 0x2b, 0x03, 0xba, 0x2c, 0x28, 0x06, 0x02
     282C 0206 
2D60 2B0C 9F03 00853         db      0x0c, 0x2b, 0x03, 0x9f, 0x2c, 0x28, 0x06, 0x02
     282C 0206 
2D68 2B0C 7D03 00854         db      0x0c, 0x2b, 0x03, 0x7d, 0x2c, 0x28, 0x06, 0x02
     282C 0206 
2D70 2B0C 5403 00855         db      0x0c, 0x2b, 0x03, 0x54, 0x2c, 0x28, 0x06, 0x02
     282C 0206 
2D78 2B0C 2403 00856         db      0x0c, 0x2b, 0x03, 0x24, 0x2c, 0x28, 0x06, 0x29
     282C 2906 
2D80 012A 5601 00857         db      0x2a, 0x01, 0x01, 0x56, 0x9f, 0x2d, 0x01, 0x44
     2D9F 4401 
2D88 430C 560B 00858         db      0x0c, 0x43, 0x0b, 0x56, 0x9a, 0x2d, 0x00, 0x0d
     2D9A 0D00 
2D90 221A 0D01 00859         db      0x1a, 0x22, 0x01, 0x0d, 0x7f, 0x02, 0x00, 0x32
     027F 3200 
2D98 0C26 0D00 00860         db      0x26, 0x0c, 0x00, 0x0d, 0x1a, 0x26, 0x0c, 0x28
     261A 280C 
2DA0 2904 012A 00861         db      0x04, 0x29, 0x2a, 0x01, 0x00, 0x2c, 0x01, 0x01
     2C00 0101 
2DA8 2D80 6802 00862         db      0x80, 0x2d, 0x02, 0x68, 0x0c, 0x26, 0x0a, 0x00
     260C 000A 
2DB0 F836 2100 00863         db      0x36, 0xf8, 0x00, 0x21, 0x0a, 0x43, 0x28, 0x04
     430A 0428 
2DB8 2A29 0001 00864         db      0x29, 0x2a, 0x01, 0x00, 0x7f, 0x02, 0x00, 0x28
     027F 2800 
2DC0 2904 022A 00865         db      0x04, 0x29, 0x2a, 0x02, 0x02, 0x6c, 0x53, 0x00
     6C02 0053 
2DC8 567A 2DD1 00866         db      0x7a, 0x56, 0xd1, 0x2d, 0x02, 0x6c, 0xfb, 0x00
     6C02 00FB 
2DD0 567A 2DD8 00867         db      0x7a, 0x56, 0xd8, 0x2d, 0x02, 0x0b, 0x1a, 0x22
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0B02 221A 
2DD8 7F01 0002 00868         db      0x01, 0x7f, 0x02, 0x00, 0x28, 0x06, 0x29, 0x2a
     0628 2A29 
2DE0 0101 C384 00869         db      0x01, 0x01, 0x84, 0xc3, 0x00, 0xeb, 0x2d, 0x65
     EB00 652D 
2DE8 EC54 642D 00870         db      0x54, 0xec, 0x2d, 0x64, 0x0c, 0x6c, 0xe5, 0x00
     6C0C 00E5 
2DF0 5679 2DFB 00871         db      0x79, 0x56, 0xfb, 0x2d, 0x15, 0x45, 0x7f, 0x02
     4515 027F 
2DF8 1A00 014B 00872         db      0x00, 0x1a, 0x4b, 0x01, 0x56, 0x07, 0x2e, 0x00
     0756 002E 
2E00 441A 1A6E 00873         db      0x1a, 0x44, 0x6e, 0x1a, 0x4a, 0x28, 0x06, 0x00
     284A 0006 
2E08 431A 1A6E 00874         db      0x1a, 0x43, 0x6e, 0x1a, 0x49, 0x28, 0x06, 0x63
     2849 6306 
2E10 6868 0041 00875         db      0x68, 0x68, 0x41, 0x00, 0x0a, 0x2b, 0x02, 0xdf
     2B0A DF02 
2E18 0A2D 022B 00876         db      0x2d, 0x0a, 0x2b, 0x02, 0xc2, 0x2d, 0x09, 0x2b
     2DC2 2B09 
2E20 B901 0A2D 00877         db      0x01, 0xb9, 0x2d, 0x0a, 0x0c, 0x10, 0x36, 0xfa
     100C FA36 
2E28 2300 2803 00878         db      0x00, 0x23, 0x03, 0x28, 0x0a, 0x29, 0x2a, 0x02
     290A 022A 
2E30 5600 2E3F 00879         db      0x00, 0x56, 0x3f, 0x2e, 0x35, 0xfc, 0x00, 0x1a
     FC35 1A00 
2E38 B036 2200 00880         db      0x36, 0xb0, 0x00, 0x22, 0x54, 0x47, 0x2e, 0x67
     4754 672E 
2E40 004B 361A 00881         db      0x4b, 0x00, 0x1a, 0x36, 0xb2, 0x00, 0x22, 0x02
     00B2 0222 
2E48 1B0C 0A26 00882         db      0x0c, 0x1b, 0x26, 0x0a, 0x29, 0x2a, 0x01, 0x01
     2A29 0101 
2E50 361A 00B2 00883         db      0x1a, 0x36, 0xb2, 0x00, 0x22, 0x00, 0x7f, 0x02
     0022 027F 
2E58 2800 0004 00884         db      0x00, 0x28, 0x04, 0x00, 0x5d, 0x20, 0x0a, 0x36
     205D 360A 
2E60 00BE 0A21 00885         db      0xbe, 0x00, 0x21, 0x0a, 0x2b, 0x02, 0x4d, 0x2e
     022B 2E4D 
2E68 0C0A 032B 00886         db      0x0a, 0x0c, 0x2b, 0x03, 0x2e, 0x2e, 0x0b, 0x0b
     2E2E 0B0B 
2E70 3610 00FA 00887         db      0x10, 0x36, 0xfa, 0x00, 0x23, 0x02, 0x36, 0xba
     0223 BA36 
2E78 2500 290C 00888         db      0x00, 0x25, 0x0c, 0x29, 0x2a, 0x01, 0x19, 0x0b
     012A 0B19 
2E80 7D0C 8B56 00889         db      0x0c, 0x7d, 0x56, 0x8b, 0x2e, 0x19, 0x08, 0x1e
     192E 1E08 
2E88 2506 0106 00890         db      0x06, 0x25, 0x06, 0x01, 0x1e, 0x08, 0x52, 0x0a
     081E 0A52 
2E90 7587 A300 00891         db      0x87, 0x75, 0x00, 0xa3, 0x2e, 0x00, 0x84, 0xbf
     002E BF84 
2E98 EF00 022E 00892         db      0x00, 0xef, 0x2e, 0x02, 0x7f, 0x02, 0x00, 0x69
     027F 6900 
2EA0 2632 000A 00893         db      0x32, 0x26, 0x0a, 0x00, 0x87, 0x41, 0x00, 0xef
     4187 EF00 
2EA8 002E C07F 00894         db      0x2e, 0x00, 0x7f, 0xc0, 0xff, 0x57, 0x1a, 0xf4
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     57FF F41A 
2EB0 EF2E EF2E 00895         db      0x2e, 0xef, 0x2e, 0xef, 0x2e, 0xf4, 0x2e, 0xef
     F42E EF2E 
2EB8 EF2E EF2E 00896         db      0x2e, 0xef, 0x2e, 0xef, 0x2e, 0xef, 0x2e, 0xef
     EF2E EF2E 
2EC0 EF2E E32E 00897         db      0x2e, 0xef, 0x2e, 0xe3, 0x2e, 0xf4, 0x2e, 0xef
     F42E EF2E 
2EC8 F42E FC2E 00898         db      0x2e, 0xf4, 0x2e, 0xfc, 0x2e, 0xef, 0x2e, 0xfc
     EF2E FC2E 
2ED0 FC2E FC2E 00899         db      0x2e, 0xfc, 0x2e, 0xfc, 0x2e, 0xfc, 0x2e, 0xfc
     FC2E FC2E 
2ED8 FC2E FC2E 00900         db      0x2e, 0xfc, 0x2e, 0xfc, 0x2e, 0xfc, 0x2e, 0xfc
     FC2E FC2E 
2EE0 FC2E 672E 00901         db      0x2e, 0xfc, 0x2e, 0x67, 0xd3, 0x00, 0x0d, 0x0d
     00D3 0D0D 
2EE8 091E 0C23 00902         db      0x1e, 0x09, 0x23, 0x0c, 0x32, 0x26, 0x0a, 0x02
     2632 020A 
2EF0 330C 0A26 00903         db      0x0c, 0x33, 0x26, 0x0a, 0x02, 0x7f, 0x02, 0x00
     7F02 0002 
2EF8 320C 0A26 00904         db      0x0c, 0x32, 0x26, 0x0a, 0x02, 0x7f, 0x02, 0x00
     7F02 0002 
2F00 320C 0A26 00905         db      0x0c, 0x32, 0x26, 0x0a, 0x17, 0x7f, 0xfc, 0xff
     7F17 FFFC 
2F08 7B0B 1756 00906         db      0x0b, 0x7b, 0x56, 0x17, 0x2f, 0x00, 0x1a, 0x5e
     002F 5E1A 
2F10 0B00 221B 00907         db      0x00, 0x0b, 0x1b, 0x22, 0x32, 0x25, 0x04, 0x28
     2532 2804 
2F18 2902 012A 00908         db      0x02, 0x29, 0x2a, 0x01, 0x19, 0x09, 0x0c, 0x7d
     0919 7D0C 
2F20 2856 192F 00909         db      0x56, 0x28, 0x2f, 0x19, 0x06, 0x1d, 0x25, 0x06
     1D06 0625 
2F28 1E01 5206 00910         db      0x01, 0x1e, 0x06, 0x52, 0x0a, 0x86, 0xfd, 0x00
     860A 00FD 
2F30 305C 5700 00911         db      0x5c, 0x30, 0x00, 0x57, 0x7e, 0x5c, 0x30, 0x5c
     5C7E 5C30 
2F38 5C30 5C30 00912         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F40 5C30 5C30 00913         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F48 5C30 5C30 00914         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F50 5C30 5C30 00915         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F58 5C30 5C30 00916         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F60 5C30 5C30 00917         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F68 5C30 5C30 00918         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F70 5C30 5C30 00919         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x63
     5C30 6330 
2F78 5C30 5C30 00920         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x63
     5C30 6330 
2F80 5C30 5C30 00921         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x31, 0x30, 0x2a
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     3130 2A30 
2F88 5C31 5C30 00922         db      0x31, 0x5c, 0x30, 0x5c, 0x30, 0x63, 0x30, 0x5c
     6330 5C30 
2F90 5C30 5C30 00923         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2F98 5C30 5C30 00924         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FA0 5C30 5C30 00925         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FA8 5C30 5C30 00926         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FB0 5C30 5C30 00927         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FB8 8D30 7230 00928         db      0x30, 0x8d, 0x30, 0x72, 0x30, 0x5c, 0x30, 0x84
     5C30 8430 
2FC0 8430 8430 00929         db      0x30, 0x84, 0x30, 0x84, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FC8 5C30 5C30 00930         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x9d, 0x30, 0x5c
     9D30 5C30 
2FD0 7B30 5C30 00931         db      0x30, 0x7b, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FD8 5C30 6930 00932         db      0x30, 0x5c, 0x30, 0x69, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FE0 5C30 5C30 00933         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x7b, 0x30, 0x5c
     7B30 5C30 
2FE8 5C30 6930 00934         db      0x30, 0x5c, 0x30, 0x69, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
2FF0 5C30 5C30 00935         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x96
     5C30 9630 
2FF8 8D30 7230 00936         db      0x30, 0x8d, 0x30, 0x72, 0x30, 0x7b, 0x30, 0x84
     7B30 8430 
3000 8430 8430 00937         db      0x30, 0x84, 0x30, 0x84, 0x30, 0x5c, 0x30, 0x7b
     5C30 7B30 
3008 5C30 5C30 00938         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x9d, 0x30, 0x5c
     9D30 5C30 
3010 9D30 7B30 00939         db      0x30, 0x9d, 0x30, 0x7b, 0x30, 0x5c, 0x30, 0x5c
     5C30 5C30 
3018 9630 6930 00940         db      0x30, 0x96, 0x30, 0x69, 0x30, 0x96, 0x30, 0x7b
     9630 7B30 
3020 5C30 5C30 00941         db      0x30, 0x5c, 0x30, 0x5c, 0x30, 0x7b, 0x30, 0x5c
     7B30 5C30 
3028 5C30 3A30 00942         db      0x30, 0x5c, 0x30, 0x3a, 0x30, 0x5c, 0x30, 0x2a
     5C30 2A30 
3030 0031 0D0D 00943         db      0x31, 0x00, 0x0d, 0x0d, 0x1e, 0x07, 0x23, 0x33
     071E 3323 
3038 0825 0D00 00944         db      0x25, 0x08, 0x00, 0x0d, 0x0d, 0x1e, 0x07, 0x23
     1E0D 2307 
3040 1E0A 0D06 00945         db      0x0a, 0x1e, 0x06, 0x0d, 0x1e, 0x05, 0x23, 0x0a
     051E 0A23 
3048 081E 061E 00946         db      0x1e, 0x08, 0x1e, 0x06, 0x2c, 0x01, 0x03, 0x04
     012C 0403 
3050 022F 210B 00947         db      0x2f, 0x02, 0x0b, 0x21, 0x01, 0x7f, 0xfe, 0xff
     7F01 FFFE 
3058 320F 1026 00948         db      0x0f, 0x32, 0x26, 0x10, 0x00, 0x0d, 0x1e, 0x06
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0D00 061E 
3060 271C 020C 00949         db      0x1c, 0x27, 0x0c, 0x02, 0x7f, 0x02, 0x00, 0x28
     027F 2800 
3068 6706 00E7 00950         db      0x06, 0x67, 0xe7, 0x00, 0x0d, 0x0d, 0x1e, 0x07
     0D0D 071E 
3070 0C27 C767 00951         db      0x27, 0x0c, 0x67, 0xc7, 0x00, 0x0d, 0x0d, 0x1e
     0D00 1E0D 
3078 2707 670C 00952         db      0x07, 0x27, 0x0c, 0x67, 0xd3, 0x00, 0x0d, 0x0d
     00D3 0D0D 
3080 071E 0C27 00953         db      0x1e, 0x07, 0x27, 0x0c, 0x67, 0xcd, 0x00, 0x0d
     CD67 0D00 
3088 1E0D 2707 00954         db      0x0d, 0x1e, 0x07, 0x27, 0x0c, 0x67, 0x85, 0x00
     670C 0085 
3090 0D0D 071E 00955         db      0x0d, 0x0d, 0x1e, 0x07, 0x27, 0x0c, 0x00, 0x0d
     0C27 0D00 
3098 1E0D 2707 00956         db      0x0d, 0x1e, 0x07, 0x27, 0x0c, 0x02, 0x7f, 0x02
     020C 027F 
30A0 1E00 0B09 00957         db      0x00, 0x1e, 0x09, 0x0b, 0x7d, 0x56, 0xb1, 0x30
     567D 30B1 
30A8 D367 0E00 00958         db      0x67, 0xd3, 0x00, 0x0e, 0x0e, 0x1e, 0x07, 0x27
     1E0E 2707 
30B0 000E 061E 00959         db      0x0e, 0x00, 0x1e, 0x06, 0x5e, 0x00, 0x0a, 0x7f
     005E 7F0A 
30B8 FF50 8C0A 00960         db      0x50, 0xff, 0x0a, 0x8c, 0x41, 0x00, 0xc6, 0x30
     0041 30C6 
30C0 0213 5400 00961         db      0x13, 0x02, 0x00, 0x54, 0x14, 0x31, 0x00, 0x57
     3114 5700 
30C8 0B21 1131 00962         db      0x21, 0x0b, 0x31, 0x11, 0x31, 0x11, 0x31, 0x11
     1131 1131 
30D0 1131 1131 00963         db      0x31, 0x11, 0x31, 0x11, 0x31, 0x11, 0x31, 0x11
     1131 1131 
30D8 1131 1131 00964         db      0x31, 0x11, 0x31, 0x11, 0x31, 0x11, 0x31, 0x11
     1131 1131 
30E0 0B31 1131 00965         db      0x31, 0x0b, 0x31, 0x11, 0x31, 0x11, 0x31, 0x11
     1131 1131 
30E8 1131 0B31 00966         db      0x31, 0x11, 0x31, 0x0b, 0x31, 0x11, 0x31, 0x11
     1131 1131 
30F0 1131 1131 00967         db      0x31, 0x11, 0x31, 0x11, 0x31, 0x11, 0x31, 0x0b
     1131 0B31 
30F8 1131 1131 00968         db      0x31, 0x11, 0x31, 0x11, 0x31, 0x11, 0x31, 0x11
     1131 1131 
3100 1131 0B31 00969         db      0x31, 0x11, 0x31, 0x0b, 0x31, 0x11, 0x31, 0x11
     1131 1131 
3108 0B31 1331 00970         db      0x31, 0x0b, 0x31, 0x13, 0x02, 0x00, 0x54, 0x1d
     0002 1D54 
3110 1331 0002 00971         db      0x31, 0x13, 0x02, 0x00, 0x67, 0xd3, 0x00, 0x0f
     D367 0F00 
3118 1E0F 2707 00972         db      0x0f, 0x1e, 0x07, 0x27, 0x10, 0x67, 0xd3, 0x00
     6710 00D3 
3120 100D 1E10 00973         db      0x0d, 0x10, 0x10, 0x1e, 0x07, 0x23, 0x1e, 0x08
     2307 081E 
3128 0E26 0D00 00974         db      0x26, 0x0e, 0x00, 0x0d, 0x0d, 0x1e, 0x07, 0x27
     1E0D 2707 
3130 190C 0B07 00975         db      0x0c, 0x19, 0x07, 0x0b, 0x7b, 0x56, 0x53, 0x31
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     567B 3153 
3138 1D00 005E 00976         db      0x00, 0x1d, 0x5e, 0x00, 0x84, 0x4b, 0x00, 0x4c
     4B84 4C00 
3140 0031 027F 00977         db      0x31, 0x00, 0x7f, 0x02, 0x00, 0x68, 0x34, 0xfe
     6800 FE34 
3148 3222 0425 00978         db      0x22, 0x32, 0x25, 0x04, 0x00, 0x7f, 0x02, 0x00
     7F00 0002 
3150 2532 0004 00979         db      0x32, 0x25, 0x04, 0x00, 0x28, 0x02, 0x29, 0x2a
     0228 2A29 
3158 0002 205D 00980         db      0x02, 0x00, 0x5d, 0x20, 0x7f, 0xfe, 0xff, 0x0a
     FE7F 0AFF 
3160 0E0E 360E 00981         db      0x0e, 0x0e, 0x0e, 0x36, 0xe6, 0x00, 0x36, 0xfe
     00E6 FE36 
3168 3600 00EE 00982         db      0x00, 0x36, 0xee, 0x00, 0x2c, 0x03, 0x07, 0x7c
     032C 7C07 
3170 1A2E 312F 00983         db      0x2e, 0x1a, 0x2f, 0x31, 0x31, 0x63, 0x0b, 0x21
     6331 210B 
3178 2863 000E 00984         db      0x63, 0x28, 0x0e, 0x00, 0x36, 0xee, 0x00, 0x36
     EE36 3600 
3180 00FE 0036 00985         db      0xfe, 0x00, 0x36, 0x00, 0x01, 0x27, 0x08, 0x19
     2701 1908 
3188 0B06 567E 00986         db      0x06, 0x0b, 0x7e, 0x56, 0x93, 0x31, 0x19, 0x05
     3193 0519 
3190 251C 0004 00987         db      0x1c, 0x25, 0x04, 0x00, 0x1e, 0x05, 0x5e, 0x00
     051E 005E 
3198 830A 004B 00988         db      0x0a, 0x83, 0x4b, 0x00, 0xa5, 0x31, 0x01, 0x7f
     31A5 7F01 
31A0 0002 2532 00989         db      0x02, 0x00, 0x32, 0x25, 0x06, 0x01, 0x7f, 0x02
     0106 027F 
31A8 3300 0625 00990         db      0x00, 0x33, 0x25, 0x06, 0x18, 0x0b, 0x7e, 0x56
     0B18 567E 
31B0 31B6 1A17 00991         db      0xb6, 0x31, 0x17, 0x1a, 0x25, 0x04, 0x00, 0x1c
     0425 1C00 
31B8 005E 7F0A 00992         db      0x5e, 0x00, 0x0a, 0x7f, 0xb0, 0xff, 0x0a, 0x8c
     FFB0 8C0A 
31C0 0003 31EF 00993         db      0x03, 0x00, 0xef, 0x31, 0x00, 0x7f, 0x5a, 0xff
     7F00 FF5A 
31C8 8C0A 0005 00994         db      0x0a, 0x8c, 0x05, 0x00, 0xd4, 0x31, 0x13, 0x04
     31D4 0413 
31D0 5400 31FF 00995         db      0x00, 0x54, 0xff, 0x31, 0x00, 0x57, 0x03, 0xdd
     5700 DD03 
31D8 E331 E931 00996         db      0x31, 0xe3, 0x31, 0xe9, 0x31, 0x13, 0x04, 0x00
     1331 0004 
31E0 0654 1332 00997         db      0x54, 0x06, 0x32, 0x13, 0x04, 0x00, 0x54, 0xff
     0004 FF54 
31E8 1331 0004 00998         db      0x31, 0x13, 0x04, 0x00, 0x54, 0x15, 0x32, 0x00
     1554 0032 
31F0 F956 1331 00999         db      0x56, 0xf9, 0x31, 0x13, 0x02, 0x00, 0x54, 0x15
     0002 1554 
31F8 1332 0002 01000         db      0x32, 0x13, 0x02, 0x00, 0x54, 0x06, 0x32, 0x01
     0654 0132 
3200 027F 3100 01001         db      0x7f, 0x02, 0x00, 0x31, 0x25, 0x06, 0x01, 0x7f
     0625 7F01 
3208 0002 1E0B 01002         db      0x02, 0x00, 0x0b, 0x1e, 0x05, 0x22, 0x0a, 0x7f
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2205 7F0A 
3210 0002 2531 01003         db      0x02, 0x00, 0x31, 0x25, 0x08, 0x19, 0x07, 0x0b
     1908 0B07 
3218 5679 3222 01004         db      0x79, 0x56, 0x22, 0x32, 0x01, 0x7f, 0x02, 0x00
     7F01 0002 
3220 0428 1E00 01005         db      0x28, 0x04, 0x00, 0x1e, 0x06, 0x1c, 0x1b, 0x27
     1C06 271B 
3228 290A 012A 01006         db      0x0a, 0x29, 0x2a, 0x01, 0x00, 0x84, 0x51, 0x00
     8400 0051 
3230 3238 5367 01007         db      0x38, 0x32, 0x67, 0x53, 0x00, 0x54, 0x3b, 0x32
     5400 323B 
3238 FB67 0A00 01008         db      0x67, 0xfb, 0x00, 0x0a, 0x0d, 0x32, 0x1d, 0x1c
     320D 1C1D 
3240 1A1B 022C 01009         db      0x1b, 0x1a, 0x2c, 0x02, 0x07, 0x87, 0x31, 0xac
     8707 AC31 
3248 0431 250C 01010         db      0x31, 0x04, 0x0c, 0x25, 0x0c, 0x29, 0x2a, 0x04
     290C 042A 
3250 5D03 0A20 01011         db      0x03, 0x5d, 0x20, 0x0a, 0x0f, 0x0e, 0x0e, 0x2c
     0E0F 2C0E 
3258 0401 322A 01012         db      0x01, 0x04, 0x2a, 0x32, 0x06, 0x0f, 0x0c, 0x26
     0F06 260C 
3260 2912 042A 01013         db      0x12, 0x29, 0x2a, 0x04, 0x1f, 0x70, 0x32, 0x07
     701F 0732 
3268 1111 3611 01014         db      0x11, 0x11, 0x11, 0x36, 0xea, 0x00, 0x20, 0x07
     00EA 0720 
3270 830B 009D 01015         db      0x0b, 0x83, 0x9d, 0x00, 0x7f, 0x32, 0x01, 0x83
     327F 8301 
3278 00DD 327F 01016         db      0xdd, 0x00, 0x7f, 0x32, 0x00, 0x28, 0x0c, 0x67
     2800 670C 
3280 00EB 5D0B 01017         db      0xeb, 0x00, 0x0b, 0x5d, 0x20, 0x7f, 0xfe, 0xff
     7F20 FFFE 
3288 5F0C 0016 01018         db      0x0c, 0x5f, 0x16, 0x00, 0x28, 0x0c, 0x29, 0x2a
     0C28 2A29 
3290 1601 7C0B 01019         db      0x01, 0x16, 0x0b, 0x7c, 0x56, 0xd2, 0x32, 0x00
     D256 0032 
3298 521A 830A 01020         db      0x1a, 0x52, 0x0a, 0x83, 0x55, 0x00, 0xae, 0x32
     0055 32AE 
32A0 1D00 B236 01021         db      0x00, 0x1d, 0x36, 0xb2, 0x00, 0x22, 0x02, 0x0c
     2200 0C02 
32A8 027F 3200 01022         db      0x7f, 0x02, 0x00, 0x32, 0x26, 0x0a, 0x02, 0x56
     0A26 5602 
32B0 32C9 4302 01023         db      0xc9, 0x32, 0x02, 0x43, 0x36, 0x02, 0x01, 0x21
     0236 2101 
32B8 361D 00B0 01024         db      0x1d, 0x36, 0xb0, 0x00, 0x22, 0x01, 0x7f, 0x02
     0122 027F 
32C0 1C00 0D21 01025         db      0x00, 0x1c, 0x21, 0x0d, 0x44, 0x0b, 0x32, 0x26
     0B44 2632 
32C8 350C 0104 01026         db      0x0c, 0x35, 0x04, 0x01, 0x6c, 0x15, 0x00, 0x40
     156C 4000 
32D0 5B00 0428 01027         db      0x00, 0x5b, 0x28, 0x04, 0x00, 0x1a, 0x52, 0x0a
     1A00 0A52 
32D8 6187 ED00 01028         db      0x87, 0x61, 0x00, 0xed, 0x32, 0x00, 0x87, 0x75
     0032 7587 
32E0 E600 1632 01029         db      0x00, 0xe6, 0x32, 0x16, 0x28, 0x04, 0x01, 0x7f
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0428 7F01 
32E8 0002 2532 01030         db      0x02, 0x00, 0x32, 0x25, 0x06, 0x00, 0x83, 0x49
     0006 4983 
32F0 F600 1632 01031         db      0x00, 0xf6, 0x32, 0x16, 0x28, 0x04, 0x01, 0x7f
     0428 7F01 
32F8 0002 0428 01032         db      0x02, 0x00, 0x28, 0x04, 0x00, 0x1a, 0x52, 0x0a
     1A00 0A52 
3300 A07F 8CFF 01033         db      0x7f, 0xa0, 0xff, 0x8c, 0x13, 0x00, 0x0b, 0x33
     0013 330B 
3308 2801 0104 01034         db      0x01, 0x28, 0x04, 0x01, 0x1a, 0x2c, 0x01, 0x02
     2C1A 0201 
3310 32D4 7F02 01035         db      0xd4, 0x32, 0x02, 0x7f, 0x02, 0x00, 0x0b, 0x25
     0002 250B 
3318 2908 032A 01036         db      0x08, 0x29, 0x2a, 0x03, 0x00, 0x2b, 0x02, 0xfc
     2B00 FC02 
3320 0C32 027F 01037         db      0x32, 0x0c, 0x7f, 0x02, 0x00, 0x0b, 0x21, 0x0a
     0B00 0A21 
3328 6F0F 147F 01038         db      0x0f, 0x6f, 0x7f, 0x14, 0x00, 0x36, 0xbe, 0x00
     3600 00BE 
3330 6C21 004B 01039         db      0x21, 0x6c, 0x4b, 0x00, 0x0b, 0x36, 0xb2, 0x00
     360B 00B2 
3338 0022 110D 01040         db      0x22, 0x00, 0x0d, 0x11, 0x10, 0x2c, 0x01, 0x04
     2C10 0401 
3340 328F 3607 01041         db      0x8f, 0x32, 0x07, 0x36, 0x06, 0x01, 0x21, 0x0d
     0106 0D21 
3348 220C 3601 01042         db      0x0c, 0x22, 0x01, 0x36, 0xba, 0x00, 0x25, 0x12
     00BA 1225 
3350 2A29 0001 01043         db      0x29, 0x2a, 0x01, 0x00, 0x36, 0x08, 0x01, 0x21
     0836 2101 
3358 5D0C 6820 01044         db      0x0c, 0x5d, 0x20, 0x68, 0x0e, 0x0d, 0x44, 0x0e
     0D0E 0E44 
3360 6C43 0041 01045         db      0x43, 0x6c, 0x41, 0x00, 0x36, 0x0a, 0x01, 0x24
     0A36 2401 
3368 0612 2A29 01046         db      0x12, 0x06, 0x29, 0x2a, 0x05, 0x05, 0x0c, 0x79
     0505 790C 
3370 7A56 0433 01047         db      0x56, 0x7a, 0x33, 0x04, 0x55, 0x7a, 0x33, 0x03
     7A55 0333 
3378 0C28 0C05 01048         db      0x28, 0x0c, 0x05, 0x0c, 0x7c, 0x56, 0x88, 0x33
     567C 3388 
3380 0F05 360F 01049         db      0x05, 0x0f, 0x0f, 0x36, 0x82, 0x00, 0x27, 0x12
     0082 1227 
3388 0C00 D236 01050         db      0x00, 0x0c, 0x36, 0xd2, 0x00, 0x22, 0x0d, 0x56
     2200 560D 
3390 33A8 BF1F 01051         db      0xa8, 0x33, 0x1f, 0xbf, 0x33, 0x08, 0x12, 0x00
     0833 0012 
3398 0F68 1612 01052         db      0x68, 0x0f, 0x12, 0x16, 0x00, 0x12, 0x16, 0x00
     1200 0016 
33A0 7C36 2000 01053         db      0x36, 0x7c, 0x00, 0x20, 0x09, 0x54, 0xbf, 0x33
     5409 33BF 
33A8 BF1F 0833 01054         db      0x1f, 0xbf, 0x33, 0x08, 0x12, 0x00, 0x12, 0x14
     0012 1412 
33B0 1100 0F6F 01055         db      0x00, 0x11, 0x6f, 0x0f, 0x12, 0x16, 0x00, 0x12
     1612 1200 
33B8 0016 7C36 01056         db      0x16, 0x00, 0x36, 0x7c, 0x00, 0x20, 0x09, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2000 0009 
33C0 0E28 2A29 01057         db      0x28, 0x0e, 0x29, 0x2a, 0x01, 0x15, 0x5d, 0x20
     1501 205D 
33C8 7E0C D356 01058         db      0x0c, 0x7e, 0x56, 0xd3, 0x33, 0x00, 0x68, 0x40
     0033 4068 
33D0 2800 0104 01059         db      0x00, 0x28, 0x04, 0x01, 0x1a, 0x52, 0x0a, 0x87
     521A 870A 
33D8 0063 33F7 01060         db      0x63, 0x00, 0xf7, 0x33, 0x00, 0x86, 0x75, 0x00
     8600 0075 
33E0 3405 0D01 01061         db      0x05, 0x34, 0x01, 0x0d, 0x1a, 0x5d, 0x20, 0x6f
     5D1A 6F20 
33E8 FE7F 0EFF 01062         db      0x7f, 0xfe, 0xff, 0x0e, 0x1a, 0x36, 0x82, 0x00
     361A 0082 
33F0 5D23 4048 01063         db      0x23, 0x5d, 0x48, 0x40, 0x00, 0x28, 0x06, 0x00
     2800 0006 
33F8 5B84 0500 01064         db      0x84, 0x5b, 0x00, 0x05, 0x34, 0x02, 0x7f, 0x02
     0234 027F 
3400 6900 2632 01065         db      0x00, 0x69, 0x32, 0x26, 0x0a, 0x02, 0x7f, 0x02
     020A 027F 
3408 0C00 2632 01066         db      0x00, 0x0c, 0x32, 0x26, 0x0a, 0x00, 0x2c, 0x01
     000A 012C 
3410 C301 5933 01067         db      0x01, 0xc3, 0x33, 0x59, 0x1d, 0x34, 0x64, 0x68
     341D 6864 
3418 2210 285A 01068         db      0x10, 0x22, 0x5a, 0x28, 0x04, 0x6a, 0x0b, 0x43
     6A04 430B 
3420 5679 342E 01069         db      0x79, 0x56, 0x2e, 0x34, 0x67, 0xe7, 0x00, 0x68
     E767 6800 
3428 360E 010C 01070         db      0x0e, 0x36, 0x0c, 0x01, 0x27, 0x0c, 0x00, 0x5b
     0C27 5B00 
3430 6300 5036 01071         db      0x00, 0x63, 0x36, 0x50, 0x00, 0x25, 0x04, 0x29
     2500 2904 
3438 022A 0C02 01072         db      0x2a, 0x02, 0x02, 0x0c, 0x0c, 0x36, 0xc4, 0x00
     360C 00C4 
3440 0547 3621 01073         db      0x47, 0x05, 0x21, 0x36, 0x0c, 0x01, 0x27, 0x0c
     010C 0C27 
3448 2A29 0002 01074         db      0x29, 0x2a, 0x02, 0x00, 0x01, 0x02, 0x63, 0x36
     0201 3663 
3450 0050 0825 01075         db      0x50, 0x00, 0x25, 0x08, 0x00, 0x5d, 0x20, 0x68
     5D00 6820 
3458 360C 010E 01076         db      0x0c, 0x36, 0x0e, 0x01, 0x27, 0x08, 0x29, 0x2a
     0827 2A29 
3460 0202 0C0C 01077         db      0x02, 0x02, 0x0c, 0x0c, 0x36, 0x82, 0x00, 0x27
     8236 2700 
3468 000C FE7F 01078         db      0x0c, 0x00, 0x7f, 0xfe, 0xff, 0x36, 0x10, 0x01
     36FF 0110 
3470 0425 2A29 01079         db      0x25, 0x04, 0x29, 0x2a, 0x01, 0x01, 0x0b, 0x6e
     0101 6E0B 
3478 1036 2501 01080         db      0x36, 0x10, 0x01, 0x25, 0x06, 0x00, 0x87, 0x01
     0006 0187 
3480 8600 0034 01081         db      0x00, 0x86, 0x34, 0x00, 0x28, 0x02, 0x63, 0x36
     0228 3663 
3488 0050 0425 01082         db      0x50, 0x00, 0x25, 0x04, 0x29, 0x2a, 0x03, 0x00
     2A29 0003 
3490 5E1A 0A00 01083         db      0x1a, 0x5e, 0x00, 0x0a, 0x7f, 0xc0, 0xff, 0x0a
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     C07F 0AFF 
3498 338C A300 01084         db      0x8c, 0x33, 0x00, 0xa3, 0x34, 0x13, 0x02, 0x00
     1334 0002 
34A0 0D54 0035 01085         db      0x54, 0x0d, 0x35, 0x00, 0x57, 0x1a, 0xda, 0x34
     1A57 34DA 
34A8 34E0 34E0 01086         db      0xe0, 0x34, 0xe0, 0x34, 0xda, 0x34, 0xe0, 0x34
     34DA 34E0 
34B0 34E0 34E0 01087         db      0xe0, 0x34, 0xe0, 0x34, 0xe0, 0x34, 0xe0, 0x34
     34E0 34E0 
34B8 34E0 34E0 01088         db      0xe0, 0x34, 0xe0, 0x34, 0xe6, 0x34, 0xe0, 0x34
     34E6 34E0 
34C0 34F1 34E0 01089         db      0xf1, 0x34, 0xe0, 0x34, 0xe0, 0x34, 0xfc, 0x34
     34E0 34FC 
34C8 3507 3507 01090         db      0x07, 0x35, 0x07, 0x35, 0x07, 0x35, 0x07, 0x35
     3507 3507 
34D0 3507 3507 01091         db      0x07, 0x35, 0x07, 0x35, 0x07, 0x35, 0x07, 0x35
     3507 3507 
34D8 3507 0213 01092         db      0x07, 0x35, 0x13, 0x02, 0x00, 0x54, 0x11, 0x35
     5400 3511 
34E0 0213 5400 01093         db      0x13, 0x02, 0x00, 0x54, 0x0d, 0x35, 0x05, 0x69
     350D 6905 
34E8 0F0F 027F 01094         db      0x0f, 0x0f, 0x7f, 0x02, 0x00, 0x32, 0x24, 0x14
     3200 1424 
34F0 0504 690F 01095         db      0x04, 0x05, 0x0f, 0x69, 0x0f, 0x7f, 0x02, 0x00
     7F0F 0002 
34F8 2432 0414 01096         db      0x32, 0x24, 0x14, 0x04, 0x64, 0x0f, 0x0f, 0x0f
     0F64 0F0F 
3500 027F 3200 01097         db      0x7f, 0x02, 0x00, 0x32, 0x24, 0x14, 0x04, 0x13
     1424 1304 
3508 0002 1C54 01098         db      0x02, 0x00, 0x54, 0x1c, 0x35, 0x03, 0x1c, 0x25
     0335 251C 
3510 040C 0E0E 01099         db      0x0c, 0x04, 0x0e, 0x0e, 0x0e, 0x7f, 0x02, 0x00
     7F0E 0002 
3518 2432 0412 01100         db      0x32, 0x24, 0x12, 0x04, 0x03, 0x1c, 0x21, 0x0c
     1C03 0C21 
3520 6F1B FC7F 01101         db      0x1b, 0x6f, 0x7f, 0xfc, 0xff, 0x0d, 0x1a, 0x36
     0DFF 361A 
3528 0082 5D23 01102         db      0x82, 0x00, 0x23, 0x5d, 0x48, 0x0b, 0x5d, 0x20
     0B48 205D 
3530 0B0B 567B 01103         db      0x0b, 0x0b, 0x7b, 0x56, 0xb8, 0x35, 0x07, 0x56
     35B8 5607 
3538 3592 5505 01104         db      0x92, 0x35, 0x05, 0x55, 0x92, 0x35, 0x67, 0x61
     3592 6167 
3540 0C00 D236 01105         db      0x00, 0x0c, 0x36, 0xd2, 0x00, 0x22, 0x68, 0x0e
     2200 0E68 
3548 005E 830A 01106         db      0x5e, 0x00, 0x0a, 0x83, 0x57, 0x00, 0x70, 0x35
     0057 3570 
3550 8300 005B 01107         db      0x00, 0x83, 0x5b, 0x00, 0x6c, 0x35, 0x1f, 0x69
     356C 691F 
3558 0535 1210 01108         db      0x35, 0x05, 0x10, 0x12, 0x10, 0x00, 0x6f, 0x10
     0010 106F 
3560 1268 0016 01109         db      0x68, 0x12, 0x16, 0x00, 0x36, 0x7c, 0x00, 0x20
     7C36 2000 
3568 0109 1428 01110         db      0x09, 0x01, 0x28, 0x14, 0x00, 0x54, 0x71, 0x35
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5400 3571 
3570 0A00 0E68 01111         db      0x00, 0x0a, 0x68, 0x0e, 0x5f, 0x16, 0x1f, 0x8f
     165F 8F1F 
3578 0635 FE7F 01112         db      0x35, 0x06, 0x7f, 0xfe, 0xff, 0x11, 0x12, 0x12
     11FF 1212 
3580 6F00 027F 01113         db      0x00, 0x6f, 0x7f, 0x02, 0x00, 0x11, 0x69, 0x12
     1100 1269 
3588 0018 7C36 01114         db      0x18, 0x00, 0x36, 0x7c, 0x00, 0x20, 0x09, 0x02
     2000 0209 
3590 1628 4167 01115         db      0x28, 0x16, 0x67, 0x41, 0x00, 0x0c, 0x36, 0xd2
     0C00 D236 
3598 2200 5610 01116         db      0x00, 0x22, 0x10, 0x56, 0xa2, 0x35, 0x63, 0x54
     35A2 5463 
35A0 35A5 0D01 01117         db      0xa5, 0x35, 0x01, 0x0d, 0x6f, 0x09, 0x1f, 0xb5
     096F B51F 
35A8 0535 100E 01118         db      0x35, 0x05, 0x0e, 0x10, 0x68, 0x12, 0x16, 0x00
     1268 0016 
35B0 7C36 2000 01119         db      0x36, 0x7c, 0x00, 0x20, 0x09, 0x01, 0x28, 0x14
     0109 1428 
35B8 2802 2910 01120         db      0x02, 0x28, 0x10, 0x29, 0x2a, 0x01, 0x35, 0x9a
     012A 9A35 
35C0 0C00 4A5E 01121         db      0x00, 0x0c, 0x5e, 0x4a, 0x56, 0xda, 0x35, 0x01
     DA56 0135 
35C8 431B 0B21 01122         db      0x1b, 0x43, 0x21, 0x0b, 0x1a, 0x5f, 0x16, 0x01
     5F1A 0116 
35D0 441B 0B21 01123         db      0x1b, 0x44, 0x21, 0x0b, 0x7f, 0xfe, 0xff, 0x32
     FE7F 32FF 
35D8 0826 6C00 01124         db      0x26, 0x08, 0x00, 0x6c, 0x27, 0x00, 0x6f, 0x0b
     0027 0B6F 
35E0 027F 1A00 01125         db      0x7f, 0x02, 0x00, 0x1a, 0x36, 0x82, 0x00, 0x27
     8236 2700 
35E8 150A 5E0B 01126         db      0x0a, 0x15, 0x0b, 0x5e, 0x4c, 0x5d, 0x38, 0x0a
     5D4C 0A38 
35F0 1586 FF00 01127         db      0x86, 0x15, 0x00, 0xff, 0x35, 0x00, 0x6c, 0x61
     0035 616C 
35F8 6E00 1236 01128         db      0x00, 0x6e, 0x36, 0x12, 0x01, 0x25, 0x06, 0x00
     2501 0006 
3600 836C 6E00 01129         db      0x6c, 0x83, 0x00, 0x6e, 0x7f, 0xec, 0xff, 0x36
     EC7F 36FF 
3608 0112 0625 01130         db      0x12, 0x01, 0x25, 0x06, 0x67, 0x09, 0x00, 0x0b
     0967 0B00 
3610 4E5E 0228 01131         db      0x5e, 0x4e, 0x28, 0x02, 0x15, 0x0b, 0x5e, 0x4c
     0B15 4C5E 
3618 385D 860A 01132         db      0x5d, 0x38, 0x0a, 0x86, 0x15, 0x00, 0x2a, 0x36
     0015 362A 
3620 6C00 0061 01133         db      0x00, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12, 0x01
     366E 0112 
3628 0625 6C00 01134         db      0x25, 0x06, 0x00, 0x6c, 0xc3, 0x00, 0x6e, 0x7f
     00C3 7F6E 
3630 FFEC 1236 01135         db      0xec, 0xff, 0x36, 0x12, 0x01, 0x25, 0x06, 0x67
     2501 6706 
3638 0009 5E0B 01136         db      0x09, 0x00, 0x0b, 0x5e, 0x4e, 0x28, 0x02, 0x35
     284E 3502 
3640 009C 5E0B 01137         db      0x9c, 0x00, 0x0b, 0x5e, 0x32, 0x56, 0x4d, 0x36
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5632 364D 
3648 7167 2800 01138         db      0x67, 0x71, 0x00, 0x28, 0x02, 0x35, 0x9a, 0x00
     3502 009A 
3650 5E0B 5628 01139         db      0x0b, 0x5e, 0x28, 0x56, 0x71, 0x36, 0x67, 0x15
     3671 1567 
3658 3600 0098 01140         db      0x00, 0x36, 0x98, 0x00, 0x0c, 0x5d, 0x3e, 0x5e
     5D0C 5E3E 
3660 5D3A 6C38 01141         db      0x3a, 0x5d, 0x38, 0x6c, 0x21, 0x00, 0x6f, 0x72
     0021 726F 
3668 616C 6E00 01142         db      0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12, 0x01, 0x25
     1236 2501 
3670 3504 0098 01143         db      0x04, 0x35, 0x98, 0x00, 0x0b, 0x5e, 0x3a, 0x5d
     5E0B 5D3A 
3678 6C38 0061 01144         db      0x38, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12, 0x01
     366E 0112 
3680 0425 9C35 01145         db      0x25, 0x04, 0x35, 0x9c, 0x00, 0x0b, 0x5e, 0x32
     0B00 325E 
3688 9556 3536 01146         db      0x56, 0x95, 0x36, 0x35, 0x98, 0x00, 0x36, 0x9e
     0098 9E36 
3690 5E00 283C 01147         db      0x00, 0x5e, 0x3c, 0x28, 0x02, 0x35, 0x9a, 0x00
     3502 009A 
3698 5E0B 5628 01148         db      0x0b, 0x5e, 0x28, 0x56, 0xb6, 0x36, 0x67, 0x0b
     36B6 0B67 
36A0 5D00 3650 01149         db      0x00, 0x5d, 0x50, 0x36, 0x9e, 0x00, 0x5e, 0x3c
     009E 3C5E 
36A8 9836 0C00 01150         db      0x36, 0x98, 0x00, 0x0c, 0x36, 0x14, 0x01, 0x21
     1436 2101 
36B0 3C5E 525E 01151         db      0x5e, 0x3c, 0x5e, 0x52, 0x28, 0x02, 0x35, 0x98
     0228 9835 
36B8 0B00 3C5E 01152         db      0x00, 0x0b, 0x5e, 0x3c, 0x28, 0x02, 0x15, 0x0b
     0228 0B15 
36C0 4C5E 385D 01153         db      0x5e, 0x4c, 0x5d, 0x38, 0x6c, 0x61, 0x00, 0x6e
     616C 6E00 
36C8 1236 2501 01154         db      0x36, 0x12, 0x01, 0x25, 0x04, 0x66, 0x0b, 0x5e
     6604 5E0B 
36D0 284E 1902 01155         db      0x4e, 0x28, 0x02, 0x19, 0x05, 0x7f, 0xfe, 0xff
     7F05 FFFE 
36D8 5E1C 0A00 01156         db      0x1c, 0x5e, 0x00, 0x0a, 0x7f, 0x68, 0xff, 0x0a
     687F 0AFF 
36E0 058C 1A00 01157         db      0x8c, 0x05, 0x00, 0x1a, 0x37, 0x00, 0x7f, 0xd0
     0037 D07F 
36E8 0AFF 158C 01158         db      0xff, 0x0a, 0x8c, 0x15, 0x00, 0xf5, 0x36, 0x13
     F500 1336 
36F0 0004 2954 01159         db      0x04, 0x00, 0x54, 0x29, 0x37, 0x00, 0x57, 0x0b
     0037 0B57 
36F8 370E 3714 01160         db      0x0e, 0x37, 0x14, 0x37, 0x14, 0x37, 0x14, 0x37
     3714 3714 
3700 3714 370E 01161         db      0x14, 0x37, 0x0e, 0x37, 0x14, 0x37, 0x14, 0x37
     3714 3714 
3708 370E 3714 01162         db      0x0e, 0x37, 0x14, 0x37, 0x0e, 0x37, 0x13, 0x04
     370E 0413 
3710 5400 37CC 01163         db      0x00, 0x54, 0xcc, 0x37, 0x13, 0x04, 0x00, 0x54
     0413 5400 
3718 3729 8300 01164         db      0x29, 0x37, 0x00, 0x83, 0x03, 0x00, 0x26, 0x37
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0003 3726 
3720 0213 5400 01165         db      0x13, 0x02, 0x00, 0x54, 0xcc, 0x37, 0x13, 0x02
     37CC 0213 
3728 3500 009A 01166         db      0x00, 0x35, 0x9a, 0x00, 0x1d, 0x5e, 0x32, 0x56
     5E1D 5632 
3730 3735 2816 01167         db      0x35, 0x37, 0x16, 0x28, 0x04, 0x00, 0x87, 0xdf
     0004 DF87 
3738 9700 0037 01168         db      0x00, 0x97, 0x37, 0x00, 0x86, 0xf3, 0x00, 0xb4
     F386 B400 
3740 0037 227F 01169         db      0x37, 0x00, 0x7f, 0x22, 0xff, 0x57, 0x0a, 0x5b
     57FF 5B0A 
3748 B437 B437 01170         db      0x37, 0xb4, 0x37, 0xb4, 0x37, 0xb4, 0x37, 0xb4
     B437 B437 
3750 B437 7237 01171         db      0x37, 0xb4, 0x37, 0x72, 0x37, 0xb4, 0x37, 0xb4
     B437 B437 
3758 8037 6737 01172         db      0x37, 0x80, 0x37, 0x67, 0x0f, 0x00, 0x5d, 0x50
     000F 505D 
3760 2B09 CD01 01173         db      0x09, 0x2b, 0x01, 0xcd, 0x36, 0x0b, 0x2b, 0x02
     0B36 022B 
3768 36BE 0040 01174         db      0xbe, 0x36, 0x40, 0x00, 0x13, 0x02, 0x00, 0x54
     0213 5400 
3770 37B9 012B 01175         db      0xb9, 0x37, 0x2b, 0x01, 0x82, 0x36, 0x09, 0x2b
     3682 2B09 
3778 3F01 4036 01176         db      0x01, 0x3f, 0x36, 0x40, 0x00, 0x54, 0xb9, 0x37
     5400 37B9 
3780 1F67 5D00 01177         db      0x67, 0x1f, 0x00, 0x5d, 0x50, 0x09, 0x2b, 0x01
     0950 012B 
3788 3637 2B0B 01178         db      0x37, 0x36, 0x0b, 0x2b, 0x02, 0x14, 0x36, 0x40
     1402 4036 
3790 1300 0002 01179         db      0x00, 0x13, 0x02, 0x00, 0x54, 0xb9, 0x37, 0x00
     B954 0037 
3798 B184 B400 01180         db      0x84, 0xb1, 0x00, 0xb4, 0x37, 0x67, 0x1f, 0x00
     6737 001F 
37A0 505D 2B09 01181         db      0x5d, 0x50, 0x09, 0x2b, 0x01, 0x0c, 0x36, 0x0b
     0C01 0B36 
37A8 022B 35E9 01182         db      0x2b, 0x02, 0xe9, 0x35, 0x40, 0x00, 0x13, 0x02
     0040 0213 
37B0 5400 37B9 01183         db      0x00, 0x54, 0xb9, 0x37, 0x63, 0x36, 0x50, 0x00
     3663 0050 
37B8 6C21 0029 01184         db      0x21, 0x6c, 0x29, 0x00, 0x5d, 0x14, 0x0b, 0x0b
     145D 0B0B 
37C0 012C BC02 01185         db      0x2c, 0x01, 0x02, 0xbc, 0x35, 0x18, 0x6c, 0x27
     1835 276C 
37C8 0C00 0E26 01186         db      0x00, 0x0c, 0x26, 0x0e, 0x01, 0x56, 0xe4, 0x37
     5601 37E4 
37D0 9A35 1D00 01187         db      0x35, 0x9a, 0x00, 0x1d, 0x5e, 0x30, 0x56, 0xe4
     305E E456 
37D8 1837 1636 01188         db      0x37, 0x18, 0x36, 0x16, 0x01, 0x21, 0x1a, 0x36
     2101 361A 
37E0 004E 0826 01189         db      0x4e, 0x00, 0x26, 0x08, 0x18, 0x36, 0x16, 0x01
     3618 0116 
37E8 0625 2A29 01190         db      0x25, 0x06, 0x29, 0x2a, 0x01, 0x00, 0x5d, 0x20
     0001 205D 
37F0 0D0A 360D 01191         db      0x0a, 0x0d, 0x0d, 0x36, 0x18, 0x01, 0x36, 0x1a
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0118 1A36 
37F8 2B01 D306 01192         db      0x01, 0x2b, 0x06, 0xd3, 0x36, 0x0a, 0x0c, 0x0e
     0A36 0E0C 
3800 012C 8D03 01193         db      0x2c, 0x01, 0x03, 0x8d, 0x34, 0x63, 0x68, 0x68
     6334 6868 
3808 0E69 1224 01194         db      0x69, 0x0e, 0x24, 0x12, 0x04, 0x29, 0x2a, 0x03
     2904 032A 
3810 1A00 005E 01195         db      0x00, 0x1a, 0x5e, 0x00, 0x0a, 0x7f, 0xc0, 0xff
     7F0A FFC0 
3818 8C0A 0033 01196         db      0x0a, 0x8c, 0x33, 0x00, 0x24, 0x38, 0x13, 0x02
     3824 0213 
3820 5400 388E 01197         db      0x00, 0x54, 0x8e, 0x38, 0x00, 0x57, 0x1a, 0x5b
     5700 5B1A 
3828 6138 6138 01198         db      0x38, 0x61, 0x38, 0x61, 0x38, 0x5b, 0x38, 0x61
     5B38 6138 
3830 6138 6138 01199         db      0x38, 0x61, 0x38, 0x61, 0x38, 0x61, 0x38, 0x61
     6138 6138 
3838 6138 6138 01200         db      0x38, 0x61, 0x38, 0x61, 0x38, 0x67, 0x38, 0x61
     6738 6138 
3840 7238 6138 01201         db      0x38, 0x72, 0x38, 0x61, 0x38, 0x61, 0x38, 0x7d
     6138 7D38 
3848 8838 8838 01202         db      0x38, 0x88, 0x38, 0x88, 0x38, 0x88, 0x38, 0x88
     8838 8838 
3850 8838 8838 01203         db      0x38, 0x88, 0x38, 0x88, 0x38, 0x88, 0x38, 0x88
     8838 8838 
3858 8838 1338 01204         db      0x38, 0x88, 0x38, 0x13, 0x02, 0x00, 0x54, 0x92
     0002 9254 
3860 1338 0002 01205         db      0x38, 0x13, 0x02, 0x00, 0x54, 0x8e, 0x38, 0x05
     8E54 0538 
3868 0F69 7F0F 01206         db      0x69, 0x0f, 0x0f, 0x7f, 0x02, 0x00, 0x32, 0x24
     0002 2432 
3870 0414 0F05 01207         db      0x14, 0x04, 0x05, 0x0f, 0x69, 0x0f, 0x7f, 0x02
     0F69 027F 
3878 3200 1424 01208         db      0x00, 0x32, 0x24, 0x14, 0x04, 0x64, 0x0f, 0x0f
     6404 0F0F 
3880 7F0F 0002 01209         db      0x0f, 0x7f, 0x02, 0x00, 0x32, 0x24, 0x14, 0x04
     2432 0414 
3888 0213 5400 01210         db      0x13, 0x02, 0x00, 0x54, 0x9d, 0x38, 0x03, 0x1c
     389D 1C03 
3890 0C25 0E04 01211         db      0x25, 0x0c, 0x04, 0x0e, 0x0e, 0x0e, 0x7f, 0x02
     0E0E 027F 
3898 3200 1224 01212         db      0x00, 0x32, 0x24, 0x12, 0x04, 0x03, 0x1c, 0x21
     0304 211C 
38A0 1B0C 7F6F 01213         db      0x0c, 0x1b, 0x6f, 0x7f, 0xfc, 0xff, 0x0d, 0x1a
     FFFC 1A0D 
38A8 8236 2300 01214         db      0x36, 0x82, 0x00, 0x23, 0x5d, 0x48, 0x0b, 0x5d
     485D 5D0B 
38B0 0B20 7B0B 01215         db      0x20, 0x0b, 0x0b, 0x7b, 0x56, 0x39, 0x39, 0x07
     3956 0739 
38B8 1356 0539 01216         db      0x56, 0x13, 0x39, 0x05, 0x55, 0x13, 0x39, 0x67
     1355 6739 
38C0 0061 360C 01217         db      0x61, 0x00, 0x0c, 0x36, 0xd2, 0x00, 0x22, 0x68
     00D2 6822 
38C8 5E0E 0A00 01218         db      0x0e, 0x5e, 0x00, 0x0a, 0x83, 0x57, 0x00, 0xf1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5783 F100 
38D0 0038 5B83 01219         db      0x38, 0x00, 0x83, 0x5b, 0x00, 0xed, 0x38, 0x1f
     ED00 1F38 
38D8 38EA 1005 01220         db      0xea, 0x38, 0x05, 0x10, 0x12, 0x10, 0x00, 0x6f
     1012 6F00 
38E0 6810 1612 01221         db      0x10, 0x68, 0x12, 0x16, 0x00, 0x36, 0x7c, 0x00
     3600 007C 
38E8 0920 2801 01222         db      0x20, 0x09, 0x01, 0x28, 0x14, 0x00, 0x54, 0xf2
     0014 F254 
38F0 0038 680A 01223         db      0x38, 0x00, 0x0a, 0x68, 0x0e, 0x5f, 0x16, 0x1f
     5F0E 1F16 
38F8 3910 7F06 01224         db      0x10, 0x39, 0x06, 0x7f, 0xfe, 0xff, 0x11, 0x12
     FFFE 1211 
3900 0012 7F6F 01225         db      0x12, 0x00, 0x6f, 0x7f, 0x02, 0x00, 0x11, 0x69
     0002 6911 
3908 1812 3600 01226         db      0x12, 0x18, 0x00, 0x36, 0x7c, 0x00, 0x20, 0x09
     007C 0920 
3910 2802 6716 01227         db      0x02, 0x28, 0x16, 0x67, 0x41, 0x00, 0x0c, 0x36
     0041 360C 
3918 00D2 1022 01228         db      0xd2, 0x00, 0x22, 0x10, 0x56, 0x23, 0x39, 0x63
     2356 6339 
3920 2654 0139 01229         db      0x54, 0x26, 0x39, 0x01, 0x0d, 0x6f, 0x09, 0x1f
     6F0D 1F09 
3928 3936 0E05 01230         db      0x36, 0x39, 0x05, 0x0e, 0x10, 0x68, 0x12, 0x16
     6810 1612 
3930 3600 007C 01231         db      0x00, 0x36, 0x7c, 0x00, 0x20, 0x09, 0x01, 0x28
     0920 2801 
3938 0214 1028 01232         db      0x14, 0x02, 0x28, 0x10, 0x29, 0x2a, 0x01, 0x35
     2A29 3501 
3940 0086 5E0C 01233         db      0x86, 0x00, 0x0c, 0x5e, 0x4a, 0x56, 0x5b, 0x39
     564A 395B 
3948 1B01 2143 01234         db      0x01, 0x1b, 0x43, 0x21, 0x0b, 0x1a, 0x5f, 0x16
     1A0B 165F 
3950 1B01 2144 01235         db      0x01, 0x1b, 0x44, 0x21, 0x0b, 0x7f, 0xfe, 0xff
     7F0B FFFE 
3958 2632 0008 01236         db      0x32, 0x26, 0x08, 0x00, 0x6c, 0x15, 0x00, 0x6f
     156C 6F00 
3960 7F0B 0002 01237         db      0x0b, 0x7f, 0x02, 0x00, 0x1a, 0x36, 0x82, 0x00
     361A 0082 
3968 0A27 0B15 01238         db      0x27, 0x0a, 0x15, 0x0b, 0x5e, 0x54, 0x5d, 0x2a
     545E 2A5D 
3970 860A 0015 01239         db      0x0a, 0x86, 0x15, 0x00, 0x80, 0x39, 0x00, 0x6c
     3980 6C00 
3978 0061 366E 01240         db      0x61, 0x00, 0x6e, 0x36, 0x12, 0x01, 0x25, 0x06
     0112 0625 
3980 6C00 0083 01241         db      0x00, 0x6c, 0x83, 0x00, 0x6e, 0x7f, 0xec, 0xff
     7F6E FFEC 
3988 1236 2501 01242         db      0x36, 0x12, 0x01, 0x25, 0x06, 0x67, 0x09, 0x00
     6706 0009 
3990 5E0B 2856 01243         db      0x0b, 0x5e, 0x56, 0x28, 0x02, 0x15, 0x0b, 0x5e
     1502 5E0B 
3998 5D54 0A2A 01244         db      0x54, 0x5d, 0x2a, 0x0a, 0x86, 0x15, 0x00, 0xab
     1586 AB00 
39A0 0039 616C 01245         db      0x39, 0x00, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6E00 1236 
39A8 2501 0006 01246         db      0x01, 0x25, 0x06, 0x00, 0x6c, 0xc3, 0x00, 0x6e
     C36C 6E00 
39B0 EC7F 36FF 01247         db      0x7f, 0xec, 0xff, 0x36, 0x12, 0x01, 0x25, 0x06
     0112 0625 
39B8 0967 0B00 01248         db      0x67, 0x09, 0x00, 0x0b, 0x5e, 0x56, 0x28, 0x02
     565E 0228 
39C0 8835 0B00 01249         db      0x35, 0x88, 0x00, 0x0b, 0x5e, 0x32, 0x56, 0xce
     325E CE56 
39C8 6739 0071 01250         db      0x39, 0x67, 0x71, 0x00, 0x28, 0x02, 0x35, 0x86
     0228 8635 
39D0 0B00 285E 01251         db      0x00, 0x0b, 0x5e, 0x28, 0x56, 0xf2, 0x39, 0x67
     F256 6739 
39D8 0015 8436 01252         db      0x15, 0x00, 0x36, 0x84, 0x00, 0x0c, 0x5d, 0x34
     0C00 345D 
39E0 2C5E 2A5D 01253         db      0x5e, 0x2c, 0x5d, 0x2a, 0x6c, 0x21, 0x00, 0x6f
     216C 6F00 
39E8 6C72 0061 01254         db      0x72, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12, 0x01
     366E 0112 
39F0 0425 8435 01255         db      0x25, 0x04, 0x35, 0x84, 0x00, 0x0b, 0x5e, 0x2c
     0B00 2C5E 
39F8 2A5D 616C 01256         db      0x5d, 0x2a, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12
     6E00 1236 
3A00 2501 3504 01257         db      0x01, 0x25, 0x04, 0x35, 0x88, 0x00, 0x0b, 0x5e
     0088 5E0B 
3A08 5632 3A16 01258         db      0x32, 0x56, 0x16, 0x3a, 0x35, 0x84, 0x00, 0x36
     8435 3600 
3A10 008A 2E5E 01259         db      0x8a, 0x00, 0x5e, 0x2e, 0x28, 0x02, 0x35, 0x86
     0228 8635 
3A18 0B00 285E 01260         db      0x00, 0x0b, 0x5e, 0x28, 0x56, 0x37, 0x3a, 0x67
     3756 673A 
3A20 000B 585D 01261         db      0x0b, 0x00, 0x5d, 0x58, 0x36, 0x8a, 0x00, 0x5e
     8A36 5E00 
3A28 362E 0084 01262         db      0x2e, 0x36, 0x84, 0x00, 0x0c, 0x36, 0x1c, 0x01
     360C 011C 
3A30 5E21 5E2E 01263         db      0x21, 0x5e, 0x2e, 0x5e, 0x5a, 0x28, 0x02, 0x35
     285A 3502 
3A38 0084 5E0B 01264         db      0x84, 0x00, 0x0b, 0x5e, 0x2e, 0x28, 0x02, 0x15
     282E 1502 
3A40 5E0B 5D54 01265         db      0x0b, 0x5e, 0x54, 0x5d, 0x2a, 0x6c, 0x61, 0x00
     6C2A 0061 
3A48 366E 0112 01266         db      0x6e, 0x36, 0x12, 0x01, 0x25, 0x04, 0x66, 0x0b
     0425 0B66 
3A50 565E 0228 01267         db      0x5e, 0x56, 0x28, 0x02, 0x19, 0x05, 0x7f, 0xfe
     0519 FE7F 
3A58 1CFF 005E 01268         db      0xff, 0x1c, 0x5e, 0x00, 0x0a, 0x7f, 0x68, 0xff
     7F0A FF68 
3A60 8C0A 0005 01269         db      0x0a, 0x8c, 0x05, 0x00, 0x9b, 0x3a, 0x00, 0x7f
     3A9B 7F00 
3A68 FFD0 8C0A 01270         db      0xd0, 0xff, 0x0a, 0x8c, 0x15, 0x00, 0x76, 0x3a
     0015 3A76 
3A70 0413 5400 01271         db      0x13, 0x04, 0x00, 0x54, 0xaa, 0x3a, 0x00, 0x57
     3AAA 5700 
3A78 8F0B 953A 01272         db      0x0b, 0x8f, 0x3a, 0x95, 0x3a, 0x95, 0x3a, 0x95
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     953A 953A 
3A80 953A 8F3A 01273         db      0x3a, 0x95, 0x3a, 0x8f, 0x3a, 0x95, 0x3a, 0x95
     953A 953A 
3A88 8F3A 953A 01274         db      0x3a, 0x8f, 0x3a, 0x95, 0x3a, 0x8f, 0x3a, 0x13
     8F3A 133A 
3A90 0004 4D54 01275         db      0x04, 0x00, 0x54, 0x4d, 0x3b, 0x13, 0x04, 0x00
     133B 0004 
3A98 AA54 003A 01276         db      0x54, 0xaa, 0x3a, 0x00, 0x83, 0x03, 0x00, 0xa7
     0383 A700 
3AA0 133A 0002 01277         db      0x3a, 0x13, 0x02, 0x00, 0x54, 0x4d, 0x3b, 0x13
     4D54 133B 
3AA8 0002 8635 01278         db      0x02, 0x00, 0x35, 0x86, 0x00, 0x1d, 0x5e, 0x32
     1D00 325E 
3AB0 B656 163A 01279         db      0x56, 0xb6, 0x3a, 0x16, 0x28, 0x04, 0x00, 0x87
     0428 8700 
3AB8 00DF 3B18 01280         db      0xdf, 0x00, 0x18, 0x3b, 0x00, 0x86, 0xf3, 0x00
     8600 00F3 
3AC0 3B35 7F00 01281         db      0x35, 0x3b, 0x00, 0x7f, 0x22, 0xff, 0x57, 0x0a
     FF22 0A57 
3AC8 3ADC 3B35 01282         db      0xdc, 0x3a, 0x35, 0x3b, 0x35, 0x3b, 0x35, 0x3b
     3B35 3B35 
3AD0 3B35 3B35 01283         db      0x35, 0x3b, 0x35, 0x3b, 0xf3, 0x3a, 0x35, 0x3b
     3AF3 3B35 
3AD8 3B35 3B01 01284         db      0x35, 0x3b, 0x01, 0x3b, 0x67, 0x0f, 0x00, 0x5d
     0F67 5D00 
3AE0 0958 012B 01285         db      0x58, 0x09, 0x2b, 0x01, 0x4e, 0x3a, 0x0b, 0x2b
     3A4E 2B0B 
3AE8 3F02 403A 01286         db      0x02, 0x3f, 0x3a, 0x40, 0x00, 0x13, 0x02, 0x00
     1300 0002 
3AF0 3A54 2B3B 01287         db      0x54, 0x3a, 0x3b, 0x2b, 0x01, 0x03, 0x3a, 0x09
     0301 093A 
3AF8 012B 39C0 01288         db      0x2b, 0x01, 0xc0, 0x39, 0x40, 0x00, 0x54, 0x3a
     0040 3A54 
3B00 673B 001F 01289         db      0x3b, 0x67, 0x1f, 0x00, 0x5d, 0x58, 0x09, 0x2b
     585D 2B09 
3B08 B801 0B39 01290         db      0x01, 0xb8, 0x39, 0x0b, 0x2b, 0x02, 0x95, 0x39
     022B 3995 
3B10 0040 0213 01291         db      0x40, 0x00, 0x13, 0x02, 0x00, 0x54, 0x3a, 0x3b
     5400 3B3A 
3B18 8400 00B1 01292         db      0x00, 0x84, 0xb1, 0x00, 0x35, 0x3b, 0x67, 0x1f
     3B35 1F67 
3B20 5D00 0958 01293         db      0x00, 0x5d, 0x58, 0x09, 0x2b, 0x01, 0x8d, 0x39
     012B 398D 
3B28 2B0B 6A02 01294         db      0x0b, 0x2b, 0x02, 0x6a, 0x39, 0x40, 0x00, 0x13
     4039 1300 
3B30 0002 3A54 01295         db      0x02, 0x00, 0x54, 0x3a, 0x3b, 0x63, 0x36, 0x50
     633B 5036 
3B38 2100 176C 01296         db      0x00, 0x21, 0x6c, 0x17, 0x00, 0x5d, 0x14, 0x0b
     5D00 0B14 
3B40 2C0B 0201 01297         db      0x0b, 0x2c, 0x01, 0x02, 0x3d, 0x39, 0x18, 0x6c
     393D 6C18 
3B48 0015 260C 01298         db      0x15, 0x00, 0x0c, 0x26, 0x0e, 0x01, 0x56, 0x65
     010E 6556 
3B50 353B 0086 01299         db      0x3b, 0x35, 0x86, 0x00, 0x1d, 0x5e, 0x30, 0x56
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5E1D 5630 
3B58 3B65 3618 01300         db      0x65, 0x3b, 0x18, 0x36, 0x1e, 0x01, 0x21, 0x1a
     011E 1A21 
3B60 4E36 2600 01301         db      0x36, 0x4e, 0x00, 0x26, 0x08, 0x18, 0x36, 0x1e
     1808 1E36 
3B68 2501 2906 01302         db      0x01, 0x25, 0x06, 0x29, 0x2a, 0x01, 0x00, 0x5d
     012A 5D00 
3B70 0A20 0D0D 01303         db      0x20, 0x0a, 0x0d, 0x0d, 0x36, 0x18, 0x01, 0x36
     1836 3601 
3B78 011A 062B 01304         db      0x1a, 0x01, 0x2b, 0x06, 0x54, 0x3a, 0x0a, 0x0c
     3A54 0C0A 
3B80 2C0E 0301 01305         db      0x0e, 0x2c, 0x01, 0x03, 0x0e, 0x38, 0x63, 0x68
     380E 6863 
3B88 6968 240E 01306         db      0x68, 0x69, 0x0e, 0x24, 0x12, 0x04, 0x29, 0x2a
     0412 2A29 
3B90 0003 5E1A 01307         db      0x03, 0x00, 0x1a, 0x5e, 0x00, 0x0a, 0x7f, 0xc0
     0A00 C07F 
3B98 0AFF 338C 01308         db      0xff, 0x0a, 0x8c, 0x33, 0x00, 0xa5, 0x3b, 0x13
     A500 133B 
3BA0 0002 0F54 01309         db      0x02, 0x00, 0x54, 0x0f, 0x3c, 0x00, 0x57, 0x1a
     003C 1A57 
3BA8 3BDC 3BE2 01310         db      0xdc, 0x3b, 0xe2, 0x3b, 0xe2, 0x3b, 0xdc, 0x3b
     3BE2 3BDC 
3BB0 3BE2 3BE2 01311         db      0xe2, 0x3b, 0xe2, 0x3b, 0xe2, 0x3b, 0xe2, 0x3b
     3BE2 3BE2 
3BB8 3BE2 3BE2 01312         db      0xe2, 0x3b, 0xe2, 0x3b, 0xe2, 0x3b, 0xe8, 0x3b
     3BE2 3BE8 
3BC0 3BE2 3BF3 01313         db      0xe2, 0x3b, 0xf3, 0x3b, 0xe2, 0x3b, 0xe2, 0x3b
     3BE2 3BE2 
3BC8 3BFE 3C09 01314         db      0xfe, 0x3b, 0x09, 0x3c, 0x09, 0x3c, 0x09, 0x3c
     3C09 3C09 
3BD0 3C09 3C09 01315         db      0x09, 0x3c, 0x09, 0x3c, 0x09, 0x3c, 0x09, 0x3c
     3C09 3C09 
3BD8 3C09 3C09 01316         db      0x09, 0x3c, 0x09, 0x3c, 0x13, 0x02, 0x00, 0x54
     0213 5400 
3BE0 3C13 0213 01317         db      0x13, 0x3c, 0x13, 0x02, 0x00, 0x54, 0x0f, 0x3c
     5400 3C0F 
3BE8 6905 0F0F 01318         db      0x05, 0x69, 0x0f, 0x0f, 0x7f, 0x02, 0x00, 0x32
     027F 3200 
3BF0 1424 0504 01319         db      0x24, 0x14, 0x04, 0x05, 0x0f, 0x69, 0x0f, 0x7f
     690F 7F0F 
3BF8 0002 2432 01320         db      0x02, 0x00, 0x32, 0x24, 0x14, 0x04, 0x64, 0x0f
     0414 0F64 
3C00 0F0F 027F 01321         db      0x0f, 0x0f, 0x7f, 0x02, 0x00, 0x32, 0x24, 0x14
     3200 1424 
3C08 1304 0002 01322         db      0x04, 0x13, 0x02, 0x00, 0x54, 0x1e, 0x3c, 0x03
     1E54 033C 
3C10 251C 040C 01323         db      0x1c, 0x25, 0x0c, 0x04, 0x0e, 0x0e, 0x0e, 0x7f
     0E0E 7F0E 
3C18 0002 2432 01324         db      0x02, 0x00, 0x32, 0x24, 0x12, 0x04, 0x03, 0x1c
     0412 1C03 
3C20 0C21 6F1B 01325         db      0x21, 0x0c, 0x1b, 0x6f, 0x7f, 0xfe, 0xff, 0x0d
     FE7F 0DFF 
3C28 361A 0082 01326         db      0x1a, 0x36, 0x82, 0x00, 0x23, 0x5d, 0x48, 0x0b
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     5D23 0B48 
3C30 205D 0B0B 01327         db      0x5d, 0x20, 0x0b, 0x0b, 0x7b, 0x56, 0xba, 0x3c
     567B 3CBA 
3C38 5607 3C94 01328         db      0x07, 0x56, 0x94, 0x3c, 0x05, 0x55, 0x94, 0x3c
     5505 3C94 
3C40 6167 0C00 01329         db      0x67, 0x61, 0x00, 0x0c, 0x36, 0xd2, 0x00, 0x22
     D236 2200 
3C48 0E68 005E 01330         db      0x68, 0x0e, 0x5e, 0x00, 0x0a, 0x83, 0x57, 0x00
     830A 0057 
3C50 3C72 8300 01331         db      0x72, 0x3c, 0x00, 0x83, 0x5b, 0x00, 0x6e, 0x3c
     005B 3C6E 
3C58 6B1F 053C 01332         db      0x1f, 0x6b, 0x3c, 0x05, 0x10, 0x12, 0x10, 0x00
     1210 0010 
3C60 106F 1268 01333         db      0x6f, 0x10, 0x68, 0x12, 0x16, 0x00, 0x36, 0x7c
     0016 7C36 
3C68 2000 0109 01334         db      0x00, 0x20, 0x09, 0x01, 0x28, 0x14, 0x00, 0x54
     1428 5400 
3C70 3C73 0A00 01335         db      0x73, 0x3c, 0x00, 0x0a, 0x68, 0x0e, 0x5f, 0x16
     0E68 165F 
3C78 911F 063C 01336         db      0x1f, 0x91, 0x3c, 0x06, 0x7f, 0xfe, 0xff, 0x11
     FE7F 11FF 
3C80 1212 6F00 01337         db      0x12, 0x12, 0x00, 0x6f, 0x7f, 0x02, 0x00, 0x11
     027F 1100 
3C88 1269 0018 01338         db      0x69, 0x12, 0x18, 0x00, 0x36, 0x7c, 0x00, 0x20
     7C36 2000 
3C90 0209 1628 01339         db      0x09, 0x02, 0x28, 0x16, 0x67, 0x41, 0x00, 0x0c
     4167 0C00 
3C98 D236 2200 01340         db      0x36, 0xd2, 0x00, 0x22, 0x10, 0x56, 0xa4, 0x3c
     5610 3CA4 
3CA0 5463 3CA7 01341         db      0x63, 0x54, 0xa7, 0x3c, 0x01, 0x0d, 0x6f, 0x09
     0D01 096F 
3CA8 B71F 053C 01342         db      0x1f, 0xb7, 0x3c, 0x05, 0x0e, 0x10, 0x68, 0x12
     100E 1268 
3CB0 0016 7C36 01343         db      0x16, 0x00, 0x36, 0x7c, 0x00, 0x20, 0x09, 0x01
     2000 0109 
3CB8 1428 2802 01344         db      0x28, 0x14, 0x02, 0x28, 0x10, 0x29, 0x2a, 0x01
     2910 012A 
3CC0 5601 3CD7 01345         db      0x01, 0x56, 0xd7, 0x3c, 0x01, 0x1b, 0x43, 0x21
     1B01 2143 
3CC8 1A0B 165F 01346         db      0x0b, 0x1a, 0x5f, 0x16, 0x01, 0x1b, 0x44, 0x21
     1B01 2144 
3CD0 7F0B FFFE 01347         db      0x0b, 0x7f, 0xfe, 0xff, 0x32, 0x26, 0x08, 0x00
     2632 0008 
3CD8 156C 6F00 01348         db      0x6c, 0x15, 0x00, 0x6f, 0x0b, 0x7f, 0x02, 0x00
     7F0B 0002 
3CE0 361A 0082 01349         db      0x1a, 0x36, 0x82, 0x00, 0x27, 0x0a, 0x67, 0x1f
     0A27 1F67 
3CE8 0B00 0A73 01350         db      0x00, 0x0b, 0x73, 0x0a, 0x86, 0x15, 0x00, 0xfb
     1586 FB00 
3CF0 003C 616C 01351         db      0x3c, 0x00, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12
     6E00 1236 
3CF8 2501 0006 01352         db      0x01, 0x25, 0x06, 0x00, 0x6c, 0x83, 0x00, 0x6e
     836C 6E00 
3D00 EC7F 36FF 01353         db      0x7f, 0xec, 0xff, 0x36, 0x12, 0x01, 0x25, 0x06
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0112 0625 
3D08 0967 0B00 01354         db      0x67, 0x09, 0x00, 0x0b, 0x77, 0x28, 0x02, 0x67
     2877 6702 
3D10 001F 730B 01355         db      0x1f, 0x00, 0x0b, 0x73, 0x0a, 0x86, 0x15, 0x00
     860A 0015 
3D18 3D24 6C00 01356         db      0x24, 0x3d, 0x00, 0x6c, 0x61, 0x00, 0x6e, 0x36
     0061 366E 
3D20 0112 0625 01357         db      0x12, 0x01, 0x25, 0x06, 0x00, 0x6c, 0xc3, 0x00
     6C00 00C3 
3D28 7F6E FFEC 01358         db      0x6e, 0x7f, 0xec, 0xff, 0x36, 0x12, 0x01, 0x25
     1236 2501 
3D30 6706 0009 01359         db      0x06, 0x67, 0x09, 0x00, 0x0b, 0x77, 0x28, 0x02
     770B 0228 
3D38 5635 0B00 01360         db      0x35, 0x56, 0x00, 0x0b, 0x79, 0x56, 0x45, 0x3d
     5679 3D45 
3D40 6967 2800 01361         db      0x67, 0x69, 0x00, 0x28, 0x02, 0x00, 0x86, 0x01
     0002 0186 
3D48 6200 673D 01362         db      0x00, 0x62, 0x3d, 0x67, 0x15, 0x00, 0x6c, 0x15
     0015 156C 
3D50 0C00 726D 01363         db      0x00, 0x0c, 0x6d, 0x72, 0x6c, 0x25, 0x00, 0x6f
     256C 6F00 
3D58 6C72 0061 01364         db      0x72, 0x6c, 0x61, 0x00, 0x6e, 0x36, 0x12, 0x01
     366E 0112 
3D60 0425 1567 01365         db      0x25, 0x04, 0x67, 0x15, 0x00, 0x0b, 0x72, 0x6c
     0B00 6C72 
3D68 0061 366E 01366         db      0x61, 0x00, 0x6e, 0x36, 0x12, 0x01, 0x25, 0x04
     0112 0425 
3D70 5635 0B00 01367         db      0x35, 0x56, 0x00, 0x0b, 0x79, 0x56, 0x7d, 0x3d
     5679 3D7D 
3D78 CD67 280C 01368         db      0x67, 0xcd, 0x0c, 0x28, 0x02, 0x00, 0x86, 0x01
     0002 0186 
3D80 9100 673D 01369         db      0x00, 0x91, 0x3d, 0x67, 0x15, 0x00, 0x0b, 0x7f
     0015 7F0B 
3D88 FFFE 6C71 01370         db      0xfe, 0xff, 0x71, 0x6c, 0x99, 0x19, 0x6e, 0x28
     1999 286E 
3D90 6702 0015 01371         db      0x02, 0x67, 0x15, 0x00, 0x0b, 0x71, 0x28, 0x02
     710B 0228 
3D98 0F67 0B00 01372         db      0x67, 0x0f, 0x00, 0x0b, 0x73, 0x6c, 0x61, 0x00
     6C73 0061 
3DA0 366E 0112 01373         db      0x6e, 0x36, 0x12, 0x01, 0x25, 0x04, 0x66, 0x0b
     0425 0B66 
3DA8 2877 1902 01374         db      0x77, 0x28, 0x02, 0x19, 0x05, 0x7f, 0xfe, 0xff
     7F05 FFFE 
3DB0 5E1C 0A00 01375         db      0x1c, 0x5e, 0x00, 0x0a, 0x7f, 0x68, 0xff, 0x0a
     687F 0AFF 
3DB8 058C F200 01376         db      0x8c, 0x05, 0x00, 0xf2, 0x3d, 0x00, 0x7f, 0xd0
     003D D07F 
3DC0 0AFF 158C 01377         db      0xff, 0x0a, 0x8c, 0x15, 0x00, 0xcd, 0x3d, 0x13
     CD00 133D 
3DC8 0004 0154 01378         db      0x04, 0x00, 0x54, 0x01, 0x3e, 0x00, 0x57, 0x0b
     003E 0B57 
3DD0 3DE6 3DEC 01379         db      0xe6, 0x3d, 0xec, 0x3d, 0xec, 0x3d, 0xec, 0x3d
     3DEC 3DEC 
3DD8 3DEC 3DE6 01380         db      0xec, 0x3d, 0xe6, 0x3d, 0xec, 0x3d, 0xec, 0x3d
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     3DEC 3DEC 
3DE0 3DE6 3DEC 01381         db      0xe6, 0x3d, 0xec, 0x3d, 0xe6, 0x3d, 0x13, 0x04
     3DE6 0413 
3DE8 5400 3E84 01382         db      0x00, 0x54, 0x84, 0x3e, 0x13, 0x04, 0x00, 0x54
     0413 5400 
3DF0 3E01 8300 01383         db      0x01, 0x3e, 0x00, 0x83, 0x03, 0x00, 0xfe, 0x3d
     0003 3DFE 
3DF8 0213 5400 01384         db      0x13, 0x02, 0x00, 0x54, 0x84, 0x3e, 0x13, 0x02
     3E84 0213 
3E00 1800 0855 01385         db      0x00, 0x18, 0x55, 0x08, 0x3e, 0x16, 0x28, 0x04
     163E 0428 
3E08 8700 00DF 01386         db      0x00, 0x87, 0xdf, 0x00, 0x58, 0x3e, 0x00, 0x86
     3E58 8600 
3E10 00F3 3E6C 01387         db      0xf3, 0x00, 0x6c, 0x3e, 0x00, 0x7f, 0x22, 0xff
     7F00 FF22 
3E18 0A57 3E2E 01388         db      0x57, 0x0a, 0x2e, 0x3e, 0x6c, 0x3e, 0x6c, 0x3e
     3E6C 3E6C 
3E20 3E6C 3E6C 01389         db      0x6c, 0x3e, 0x6c, 0x3e, 0x6c, 0x3e, 0x3c, 0x3e
     3E6C 3E3C 
3E28 3E6C 3E6C 01390         db      0x6c, 0x3e, 0x6c, 0x3e, 0x4a, 0x3e, 0x2b, 0x01
     3E4A 012B 
3E30 3DA6 2B09 01391         db      0xa6, 0x3d, 0x09, 0x2b, 0x01, 0x98, 0x3d, 0x40
     9801 403D 
3E38 5400 3E71 01392         db      0x00, 0x54, 0x71, 0x3e, 0x2b, 0x01, 0x70, 0x3d
     012B 3D70 
3E40 2B09 3801 01393         db      0x09, 0x2b, 0x01, 0x38, 0x3d, 0x40, 0x00, 0x54
     403D 5400 
3E48 3E71 012B 01394         db      0x71, 0x3e, 0x2b, 0x01, 0x31, 0x3d, 0x09, 0x2b
     3D31 2B09 
3E50 0F01 403D 01395         db      0x01, 0x0f, 0x3d, 0x40, 0x00, 0x54, 0x71, 0x3e
     5400 3E71 
3E58 8400 00B1 01396         db      0x00, 0x84, 0xb1, 0x00, 0x6c, 0x3e, 0x2b, 0x01
     3E6C 012B 
3E60 3D08 2B09 01397         db      0x08, 0x3d, 0x09, 0x2b, 0x01, 0xe6, 0x3c, 0x40
     E601 403C 
3E68 5400 3E71 01398         db      0x00, 0x54, 0x71, 0x3e, 0x63, 0x36, 0x50, 0x00
     3663 0050 
3E70 6C21 0017 01399         db      0x21, 0x6c, 0x17, 0x00, 0x5d, 0x14, 0x0b, 0x0b
     145D 0B0B 
3E78 012C BE02 01400         db      0x2c, 0x01, 0x02, 0xbe, 0x3c, 0x18, 0x6c, 0x15
     183C 156C 
3E80 0C00 0E26 01401         db      0x00, 0x0c, 0x26, 0x0e, 0x01, 0x56, 0x99, 0x3e
     5601 3E99 
3E88 8718 0001 01402         db      0x18, 0x87, 0x01, 0x00, 0x99, 0x3e, 0x18, 0x36
     3E99 3618 
3E90 0102 1A21 01403         db      0x02, 0x01, 0x21, 0x1a, 0x36, 0x4e, 0x00, 0x26
     4E36 2600 
3E98 1808 0236 01404         db      0x08, 0x18, 0x36, 0x02, 0x01, 0x25, 0x06, 0x29
     2501 2906 
3EA0 012A 5D00 01405         db      0x2a, 0x01, 0x00, 0x5d, 0x20, 0x0a, 0x0d, 0x0d
     0A20 0D0D 
3EA8 1836 3601 01406         db      0x36, 0x18, 0x01, 0x36, 0x1a, 0x01, 0x2b, 0x06
     011A 062B 
3EB0 3DAB 0C0A 01407         db      0xab, 0x3d, 0x0a, 0x0c, 0x0e, 0x2c, 0x01, 0x03
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2C0E 0301 
3EB8 3B8F 6863 01408         db      0x8f, 0x3b, 0x63, 0x68, 0x68, 0x69, 0x0e, 0x24
     6968 240E 
3EC0 0412 2035 01409         db      0x12, 0x04, 0x35, 0x20, 0x01, 0x39, 0x1a, 0x01
     3901 011A 
3EC8 2235 3901 01410         db      0x35, 0x22, 0x01, 0x39, 0x18, 0x01, 0x2b, 0x01
     0118 012B 
3ED0 3EA0 F439 01411         db      0xa0, 0x3e, 0x39, 0xf4, 0x00, 0x2b, 0x01, 0x6c
     2B00 6C01 
3ED8 393B 00F2 01412         db      0x3b, 0x39, 0xf2, 0x00, 0x2b, 0x01, 0xeb, 0x37
     012B 37EB 
3EE0 F039 2B00 01413         db      0x39, 0xf0, 0x00, 0x2b, 0x01, 0x7d, 0x34, 0x09
     7D01 0934 
3EE8 1039 0001 01414         db      0x39, 0x10, 0x01, 0x00, 0x13, 0x02, 0x00, 0x09
     0213 0900 
3EF0 012B 3473 01415         db      0x2b, 0x01, 0x73, 0x34, 0x69, 0x0b, 0x21, 0x09
     0B69 0921 
3EF8 012B 3469 01416         db      0x2b, 0x01, 0x69, 0x34, 0x09, 0x2b, 0x01, 0x5f
     2B09 5F01 
3F00 0934 0E39 01417         db      0x34, 0x09, 0x39, 0x0e, 0x01, 0x00, 0x13, 0x02
     0001 0213 
3F08 0900 012B 01418         db      0x00, 0x09, 0x2b, 0x01, 0x54, 0x34, 0x0a, 0x0c
     3454 0C0A 
3F10 100E 1012 01419         db      0x0e, 0x10, 0x12, 0x10, 0x00, 0x12, 0x14, 0x00
     1200 0014 
3F18 063E 3900 01420         db      0x3e, 0x06, 0x00, 0x39, 0xc4, 0x00, 0x13, 0x0c
     00C4 0C13 
3F20 2B00 4901 01421         db      0x00, 0x2b, 0x01, 0x49, 0x34, 0x39, 0x0c, 0x01
     3934 010C 
3F28 012B 3438 01422         db      0x2b, 0x01, 0x38, 0x34, 0x39, 0xee, 0x00, 0x2b
     EE39 2B00 
3F30 3001 3934 01423         db      0x01, 0x30, 0x34, 0x39, 0xfe, 0x00, 0x2b, 0x01
     00FE 012B 
3F38 340D 0839 01424         db      0x0d, 0x34, 0x39, 0x08, 0x01, 0x2b, 0x01, 0x6b
     2B01 6B01 
3F40 3933 010A 01425         db      0x33, 0x39, 0x0a, 0x01, 0x2b, 0x01, 0x51, 0x33
     012B 3351 
3F48 EC39 2B00 01426         db      0x39, 0xec, 0x00, 0x2b, 0x01, 0x1a, 0x33, 0x39
     1A01 3933 
3F50 00EA 012B 01427         db      0xea, 0x00, 0x2b, 0x01, 0x62, 0x32, 0x39, 0xe8
     3262 E839 
3F58 2B00 4E01 01428         db      0x00, 0x2b, 0x01, 0x4e, 0x32, 0x39, 0x00, 0x01
     3932 0100 
3F60 012B 317B 01429         db      0x2b, 0x01, 0x7b, 0x31, 0x39, 0xe6, 0x00, 0x2b
     E639 2B00 
3F68 5701 3931 01430         db      0x01, 0x57, 0x31, 0x39, 0xfa, 0x00, 0x2b, 0x01
     00FA 012B 
3F70 2E5B E439 01431         db      0x5b, 0x2e, 0x39, 0xe4, 0x00, 0x2b, 0x01, 0x0f
     2B00 0F01 
3F78 392E 00F8 01432         db      0x2e, 0x39, 0xf8, 0x00, 0x2b, 0x01, 0xaf, 0x2d
     012B 2DAF 
3F80 C239 2B00 01433         db      0x39, 0xc2, 0x00, 0x2b, 0x01, 0xa2, 0x2d, 0x39
     A201 392D 
3F88 00F6 012B 01434         db      0xf6, 0x00, 0x2b, 0x01, 0x1c, 0x2d, 0x39, 0xc6
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2D1C C639 
3F90 2B00 FA01 01435         db      0x00, 0x2b, 0x01, 0xfa, 0x2b, 0x39, 0xe2, 0x00
     392B 00E2 
3F98 012B 2BA4 01436         db      0x2b, 0x01, 0xa4, 0x2b, 0x39, 0xe0, 0x00, 0x2b
     E039 2B00 
3FA0 9601 392B 01437         db      0x01, 0x96, 0x2b, 0x39, 0xde, 0x00, 0x2b, 0x01
     00DE 012B 
3FA8 2B3A C039 01438         db      0x3a, 0x2b, 0x39, 0xc0, 0x00, 0x2b, 0x01, 0xb3
     2B00 B301 
3FB0 3926 00B6 01439         db      0x26, 0x39, 0xb6, 0x00, 0x2b, 0x01, 0xc6, 0x25
     012B 25C6 
3FB8 B439 2B00 01440         db      0x39, 0xb4, 0x00, 0x2b, 0x01, 0xb9, 0x25, 0x39
     B901 3925 
3FC0 00B8 012B 01441         db      0xb8, 0x00, 0x2b, 0x01, 0xaf, 0x25, 0x39, 0xae
     25AF AE39 
3FC8 2B00 9401 01442         db      0x00, 0x2b, 0x01, 0x94, 0x25, 0x39, 0xac, 0x00
     3925 00AC 
3FD0 012B 2585 01443         db      0x2b, 0x01, 0x85, 0x25, 0x39, 0x5e, 0x01, 0x54
     5E39 5401 
3FD8 4012 2A29 01444         db      0x12, 0x40, 0x29, 0x2a, 0x01, 0x00, 0x68, 0x7d
     0001 7D68 
3FE0 E855 353F 01445         db      0x55, 0xe8, 0x3f, 0x35, 0x24, 0x01, 0x0b, 0x7e
     0124 7E0B 
3FE8 F256 353F 01446         db      0x56, 0xf2, 0x3f, 0x35, 0x26, 0x01, 0x36, 0x62
     0126 6236 
3FF0 2100 0B01 01447         db      0x00, 0x21, 0x01, 0x0b, 0x5e, 0x5c, 0x28, 0x04
     5C5E 0428 
3FF8 6800 557D 01448         db      0x00, 0x68, 0x7d, 0x55, 0x03, 0x40, 0x35, 0x24
     4003 2435 
4000 0B01 567E 01449         db      0x01, 0x0b, 0x7e, 0x56, 0x0d, 0x40, 0x35, 0x28
     400D 2835 
4008 3601 0062 01450         db      0x01, 0x36, 0x62, 0x00, 0x21, 0x00, 0x5d, 0x5e
     0021 5E5D 
4010 0228 5D63 01451         db      0x28, 0x02, 0x63, 0x5d, 0x60, 0x39, 0x24, 0x01
     3960 0124 
4018 012B 3FF8 01452         db      0x2b, 0x01, 0xf8, 0x3f, 0x39, 0x50, 0x01, 0x2b
     5039 2B01 
4020 DB01 393F 01453         db      0x01, 0xdb, 0x3f, 0x39, 0x60, 0x01, 0x54, 0xb9
     0160 B954 
4028 2944 042A 01454         db      0x44, 0x29, 0x2a, 0x04, 0x04, 0x0e, 0x0e, 0x0e
     0E04 0E0E 
4030 3E0E 0005 01455         db      0x0e, 0x3e, 0x05, 0x00, 0x36, 0x2a, 0x01, 0x21
     2A36 2101 
4038 470A 0B12 01456         db      0x0a, 0x47, 0x12, 0x0b, 0x47, 0x11, 0x0c, 0x47
     1147 470C 
4040 0D10 0F47 01457         db      0x10, 0x0d, 0x47, 0x0f, 0x0e, 0x47, 0x0e, 0x0f
     470E 0F0E 
4048 0D47 4710 01458         db      0x47, 0x0d, 0x10, 0x47, 0x0c, 0x11, 0x47, 0x0b
     110C 0B47 
4050 1012 4700 01459         db      0x12, 0x10, 0x00, 0x47, 0x0a, 0x12, 0x12, 0x00
     120A 0012 
4058 0947 1412 01460         db      0x47, 0x09, 0x12, 0x14, 0x00, 0x47, 0x08, 0x12
     4700 1208 
4060 0016 0747 01461         db      0x16, 0x00, 0x47, 0x07, 0x12, 0x18, 0x00, 0x47
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1812 4700 
4068 3E06 000D 01462         db      0x06, 0x3e, 0x0d, 0x00, 0x28, 0x0c, 0x19, 0x21
     0C28 2119 
4070 5643 4091 01463         db      0x43, 0x56, 0x91, 0x40, 0x19, 0x21, 0x46, 0x5d
     2119 5D46 
4078 6362 221E 01464         db      0x62, 0x63, 0x1e, 0x22, 0x5e, 0x64, 0x00, 0x1e
     645E 1E00 
4080 4721 5E04 01465         db      0x21, 0x47, 0x04, 0x5e, 0x64, 0x19, 0x21, 0x44
     1964 4421 
4088 665D 2119 01466         db      0x5d, 0x66, 0x19, 0x21, 0x44, 0x5d, 0x62, 0x28
     5D44 2862 
4090 1902 4621 01467         db      0x02, 0x19, 0x21, 0x46, 0x5d, 0x62, 0x67, 0x1f
     625D 1F67 
4098 1E00 5D22 01468         db      0x00, 0x1e, 0x22, 0x5d, 0x68, 0x73, 0x1e, 0x22
     7368 221E 
40A0 645E 1F67 01469         db      0x5e, 0x64, 0x67, 0x1f, 0x00, 0x1e, 0x21, 0x47
     1E00 4721 
40A8 5D04 7368 01470         db      0x04, 0x5d, 0x68, 0x73, 0x0a, 0x6c, 0xe1, 0x01
     6C0A 01E1 
40B0 730D 1E74 01471         db      0x0d, 0x73, 0x74, 0x1e, 0x21, 0x47, 0x04, 0x5e
     4721 5E04 
40B8 1964 4421 01472         db      0x64, 0x19, 0x21, 0x44, 0x5d, 0x66, 0x19, 0x21
     665D 2119 
40C0 5D44 0062 01473         db      0x44, 0x5d, 0x62, 0x00, 0x6c, 0xe1, 0x01, 0x6c
     E16C 6C01 
40C8 0009 760E 01474         db      0x09, 0x00, 0x0e, 0x76, 0x73, 0x74, 0x1e, 0x21
     7473 211E 
40D0 0447 645E 01475         db      0x47, 0x04, 0x5e, 0x64, 0x19, 0x21, 0x44, 0x5d
     2119 5D44 
40D8 1966 4421 01476         db      0x66, 0x19, 0x21, 0x44, 0x5d, 0x62, 0x28, 0x04
     625D 0428 
40E0 1F19 5643 01477         db      0x19, 0x1f, 0x43, 0x56, 0x05, 0x41, 0x67, 0xff
     4105 FF67 
40E8 1E01 5E20 01478         db      0x01, 0x1e, 0x20, 0x5e, 0x64, 0x19, 0x1f, 0x46
     1964 461F 
40F0 665D 1F19 01479         db      0x5d, 0x66, 0x19, 0x1f, 0x44, 0x5d, 0x66, 0x19
     5D44 1966 
40F8 471F 5D04 01480         db      0x1f, 0x47, 0x04, 0x5d, 0x68, 0x1e, 0x1f, 0x44
     1E68 441F 
4100 625D 2800 01481         db      0x5d, 0x62, 0x00, 0x28, 0x04, 0x67, 0xe1, 0x01
     6704 01E1 
4108 201E 685D 01482         db      0x1e, 0x20, 0x5d, 0x68, 0x74, 0x1e, 0x20, 0x5e
     1E74 5E20 
4110 1964 461F 01483         db      0x64, 0x19, 0x1f, 0x46, 0x5d, 0x66, 0x19, 0x1f
     665D 1F19 
4118 5D44 6766 01484         db      0x44, 0x5d, 0x66, 0x67, 0xe1, 0x01, 0x1e, 0x1f
     01E1 1F1E 
4120 0447 685D 01485         db      0x47, 0x04, 0x5d, 0x68, 0x73, 0x1e, 0x1f, 0x44
     1E73 441F 
4128 625D 1F19 01486         db      0x5d, 0x62, 0x19, 0x1f, 0x44, 0x5d, 0x66, 0x00
     5D44 0066 
4130 096C 1E00 01487         db      0x6c, 0x09, 0x00, 0x1e, 0x1f, 0x47, 0x04, 0x5d
     471F 5D04 
4138 7768 1E74 01488         db      0x68, 0x77, 0x74, 0x1e, 0x1f, 0x44, 0x5d, 0x62
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     441F 625D 
4140 2800 1906 01489         db      0x00, 0x28, 0x06, 0x19, 0x1d, 0x45, 0x5d, 0x66
     451D 665D 
4148 3400 25FE 01490         db      0x00, 0x34, 0xfe, 0x25, 0x04, 0x19, 0x1b, 0x45
     1904 451B 
4150 625D 3400 01491         db      0x5d, 0x62, 0x00, 0x34, 0xfd, 0x25, 0x04, 0x19
     25FD 1904 
4158 4319 6756 01492         db      0x19, 0x43, 0x56, 0x67, 0x41, 0x67, 0xff, 0x01
     6741 01FF 
4160 1A1E 645E 01493         db      0x1e, 0x1a, 0x5e, 0x64, 0x54, 0x73, 0x41, 0x67
     7354 6741 
4168 01E1 1A1E 01494         db      0xe1, 0x01, 0x1e, 0x1a, 0x5d, 0x68, 0x74, 0x1e
     685D 1E74 
4170 5E1A 1964 01495         db      0x1a, 0x5e, 0x64, 0x19, 0x19, 0x45, 0x5d, 0x62
     4519 625D 
4178 1919 5D46 01496         db      0x19, 0x19, 0x46, 0x5d, 0x66, 0x19, 0x19, 0x44
     1966 4419 
4180 665D 8654 01497         db      0x5d, 0x66, 0x54, 0x86, 0x41, 0x63, 0x67, 0x01
     6341 0167 
4188 1E01 4719 01498         db      0x01, 0x1e, 0x19, 0x47, 0x04, 0x5d, 0x68, 0x73
     5D04 7368 
4190 8555 6341 01499         db      0x55, 0x85, 0x41, 0x63, 0x19, 0x19, 0x44, 0x5d
     1919 5D44 
4198 1962 4319 01500         db      0x62, 0x19, 0x19, 0x43, 0x68, 0x79, 0x56, 0xab
     7968 AB56 
41A0 1941 4419 01501         db      0x41, 0x19, 0x19, 0x44, 0x5d, 0x66, 0x19, 0x19
     665D 1919 
41A8 5D44 2862 01502         db      0x44, 0x5d, 0x62, 0x28, 0x02, 0x63, 0x31, 0x21
     6302 2131 
41B0 3464 25FE 01503         db      0x64, 0x34, 0xfe, 0x25, 0x04, 0x63, 0x34, 0xfe
     6304 FE34 
41B8 6521 FD34 01504         db      0x21, 0x65, 0x34, 0xfd, 0x25, 0x04, 0x19, 0x13
     0425 1319 
41C0 5643 41E5 01505         db      0x43, 0x56, 0xe5, 0x41, 0x19, 0x13, 0x44, 0x5d
     1319 5D44 
41C8 5D6A 1962 01506         db      0x6a, 0x5d, 0x62, 0x19, 0x13, 0x45, 0x5d, 0x6a
     4513 6A5D 
41D0 625D 1319 01507         db      0x5d, 0x62, 0x19, 0x13, 0x46, 0x5d, 0x6a, 0x5d
     5D46 5D6A 
41D8 6362 FD34 01508         db      0x62, 0x63, 0x34, 0xfd, 0x21, 0x63, 0x34, 0xfe
     6321 FE34 
41E0 6321 2531 01509         db      0x21, 0x63, 0x31, 0x25, 0x04, 0x19, 0x13, 0x44
     1904 4413 
41E8 6A5D 625D 01510         db      0x5d, 0x6a, 0x5d, 0x62, 0x19, 0x13, 0x45, 0x5d
     1319 5D45 
41F0 5D6A 1962 01511         db      0x6a, 0x5d, 0x62, 0x19, 0x13, 0x46, 0x5d, 0x6a
     4613 6A5D 
41F8 625D 3463 01512         db      0x5d, 0x62, 0x63, 0x34, 0xfd, 0x21, 0x19, 0x13
     21FD 1319 
4200 5D45 1962 01513         db      0x45, 0x5d, 0x62, 0x19, 0x13, 0x46, 0x5d, 0x62
     4613 625D 
4208 1F67 1E00 01514         db      0x67, 0x1f, 0x00, 0x1e, 0x14, 0x5d, 0x68, 0x73
     5D14 7368 
4210 141E 645E 01515         db      0x1e, 0x14, 0x5e, 0x64, 0x67, 0x1f, 0x00, 0x1e
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     1F67 1E00 
4218 4713 5D04 01516         db      0x13, 0x47, 0x04, 0x5d, 0x68, 0x73, 0x6c, 0x41
     7368 416C 
4220 7400 131E 01517         db      0x00, 0x74, 0x1e, 0x13, 0x47, 0x04, 0x5e, 0x64
     0447 645E 
4228 1319 5D44 01518         db      0x19, 0x13, 0x44, 0x5d, 0x66, 0x19, 0x13, 0x44
     1966 4413 
4230 625D 3463 01519         db      0x5d, 0x62, 0x63, 0x34, 0xfe, 0x21, 0x63, 0x31
     21FE 3163 
4238 0425 2A29 01520         db      0x25, 0x04, 0x29, 0x2a, 0x05, 0x00, 0x56, 0x46
     0005 4656 
4240 0042 5443 01521         db      0x42, 0x00, 0x43, 0x54, 0x47, 0x42, 0x64, 0x0c
     4247 0C64 
4248 4D56 0242 01522         db      0x56, 0x4d, 0x42, 0x02, 0x43, 0x0e, 0x56, 0x53
     0E43 5356 
4250 0442 1043 01523         db      0x42, 0x04, 0x43, 0x10, 0x56, 0x5c, 0x42, 0x06
     5C56 0642 
4258 5443 425D 01524         db      0x43, 0x54, 0x5d, 0x42, 0x64, 0x12, 0x10, 0x00
     1264 0010 
4260 6756 0842 01525         db      0x56, 0x67, 0x42, 0x08, 0x10, 0x00, 0x43, 0x68
     0010 6843 
4268 FC34 0421 01526         db      0x34, 0xfc, 0x21, 0x04, 0x57, 0x04, 0x76, 0x42
     0457 4276 
4270 427C 4282 01527         db      0x7c, 0x42, 0x82, 0x42, 0x88, 0x42, 0x67, 0x09
     4288 0967 
4278 5400 428B 01528         db      0x00, 0x54, 0x8b, 0x42, 0x67, 0x0d, 0x00, 0x54
     0D67 5400 
4280 428B 0F67 01529         db      0x8b, 0x42, 0x67, 0x0f, 0x00, 0x54, 0x8b, 0x42
     5400 428B 
4288 0B67 3400 01530         db      0x67, 0x0b, 0x00, 0x34, 0xfb, 0x21, 0x63, 0x34
     21FB 3463 
4290 21FC 5702 01531         db      0xfc, 0x21, 0x02, 0x57, 0x03, 0x9b, 0x42, 0xa1
     9B03 A142 
4298 A742 6742 01532         db      0x42, 0xa7, 0x42, 0x67, 0x11, 0x00, 0x54, 0xaa
     0011 AA54 
42A0 6742 0015 01533         db      0x42, 0x67, 0x15, 0x00, 0x54, 0xaa, 0x42, 0x67
     AA54 6742 
42A8 0017 550E 01534         db      0x17, 0x00, 0x0e, 0x55, 0xb4, 0x42, 0x67, 0x19
     42B4 1967 
42B0 5400 42B7 01535         db      0x00, 0x54, 0xb7, 0x42, 0x67, 0x11, 0x00, 0x74
     1167 7400 
42B8 FB34 6321 01536         db      0x34, 0xfb, 0x21, 0x63, 0x34, 0xfc, 0x21, 0x00
     FC34 0021 
42C0 0384 CB00 01537         db      0x84, 0x03, 0x00, 0xcb, 0x42, 0x67, 0x49, 0x00
     6742 0049 
42C8 CE54 6742 01538         db      0x54, 0xce, 0x42, 0x67, 0x41, 0x00, 0x0c, 0x84
     0041 840C 
42D0 0003 42DA 01539         db      0x03, 0x00, 0xda, 0x42, 0x67, 0x51, 0x00, 0x54
     5167 5400 
42D8 42DD 4167 01540         db      0xdd, 0x42, 0x67, 0x41, 0x00, 0x1e, 0x11, 0x43
     1E00 4311 
42E0 E956 6742 01541         db      0x56, 0xe9, 0x42, 0x67, 0x61, 0x00, 0x54, 0xec
     0061 EC54 
42E8 6742 0041 01542         db      0x42, 0x67, 0x41, 0x00, 0x74, 0x74, 0x34, 0xfb
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     7474 FB34 
42F0 1825 3463 01543         db      0x25, 0x18, 0x63, 0x34, 0xfb, 0x21, 0x19, 0x0f
     21FB 0F19 
42F8 5D45 6762 01544         db      0x45, 0x5d, 0x62, 0x67, 0xff, 0x00, 0x68, 0x34
     00FF 3468 
4300 21F8 0A73 01545         db      0xf8, 0x21, 0x73, 0x0a, 0x87, 0xa9, 0x00, 0x14
     A987 1400 
4308 0043 587F 01546         db      0x43, 0x00, 0x7f, 0x58, 0xff, 0x6c, 0x09, 0x00
     6CFF 0009 
4310 0040 0428 01547         db      0x40, 0x00, 0x28, 0x04, 0x00, 0x87, 0x81, 0x00
     8700 0081 
4318 4323 7F00 01548         db      0x23, 0x43, 0x00, 0x7f, 0x80, 0xff, 0x6a, 0x40
     FF80 406A 
4320 2800 0004 01549         db      0x00, 0x28, 0x04, 0x00, 0x87, 0x29, 0x00, 0x32
     2987 3200 
4328 0043 D87F 01550         db      0x43, 0x00, 0x7f, 0xd8, 0xff, 0x6b, 0x40, 0x00
     6BFF 0040 
4330 0428 6900 01551         db      0x28, 0x04, 0x00, 0x69, 0x40, 0x00, 0x28, 0x04
     0040 0428 
4338 2A29 0001 01552         db      0x29, 0x2a, 0x01, 0x00, 0x7f, 0xfc, 0xff, 0x0a
     FC7F 0AFF 
4340 058C 4900 01553         db      0x8c, 0x05, 0x00, 0x49, 0x43, 0x63, 0x54, 0x61
     6343 6154 
4348 0043 0357 01554         db      0x43, 0x00, 0x57, 0x03, 0x52, 0x43, 0x58, 0x43
     4352 4358 
4350 435E 8167 01555         db      0x5e, 0x43, 0x67, 0x81, 0x00, 0x54, 0x61, 0x43
     5400 4361 
4358 2967 5400 01556         db      0x67, 0x29, 0x00, 0x54, 0x61, 0x43, 0x67, 0xa9
     4361 A967 
4360 1300 0002 01557         db      0x00, 0x13, 0x02, 0x00, 0x68, 0x34, 0xfa, 0x21
     3468 21FA 
4368 0B02 6C6E 01558         db      0x02, 0x0b, 0x6e, 0x6c, 0x01, 0x01, 0x74, 0x34
     0101 3474 
4370 25F9 6308 01559         db      0xf9, 0x25, 0x08, 0x63, 0x34, 0xf9, 0x21, 0x00
     F934 0021 
4378 8155 6743 01560         db      0x55, 0x81, 0x43, 0x67, 0x21, 0x00, 0x54, 0x84
     0021 8454 
4380 6743 0029 01561         db      0x43, 0x67, 0x29, 0x00, 0x34, 0xf8, 0x25, 0x04
     F834 0425 
4388 3463 21F8 01562         db      0x63, 0x34, 0xf8, 0x21, 0x00, 0x55, 0x96, 0x43
     5500 4396 
4390 3167 5400 01563         db      0x67, 0x31, 0x00, 0x54, 0x99, 0x43, 0x67, 0x39
     4399 3967 
4398 3400 25F7 01564         db      0x00, 0x34, 0xf7, 0x25, 0x04, 0x29, 0x2a, 0x03
     2904 032A 
43A0 3463 21FC 01565         db      0x63, 0x34, 0xfc, 0x21, 0x6b, 0x6c, 0x0f, 0x00
     6C6B 000F 
43A8 730D 6C76 01566         db      0x0d, 0x73, 0x76, 0x6c, 0x81, 0x00, 0x74, 0x34
     0081 3474 
43B0 21F6 3F67 01567         db      0xf6, 0x21, 0x67, 0x3f, 0x00, 0x6c, 0x0b, 0x00
     6C00 000B 
43B8 770E 3473 01568         db      0x0e, 0x77, 0x73, 0x34, 0xf5, 0x21, 0x67, 0x3f
     21F5 3F67 
43C0 0D00 3473 01569         db      0x00, 0x0d, 0x73, 0x34, 0xf5, 0x21, 0x67, 0x3f
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     21F5 3F67 
43C8 6C00 0015 01570         db      0x00, 0x6c, 0x15, 0x00, 0x0f, 0x77, 0x73, 0x34
     770F 3473 
43D0 21F5 3F67 01571         db      0xf5, 0x21, 0x67, 0x3f, 0x00, 0x6c, 0x0b, 0x00
     6C00 000B 
43D8 770F 3473 01572         db      0x0f, 0x77, 0x73, 0x34, 0xf5, 0x21, 0x67, 0x3f
     21F5 3F67 
43E0 0E00 3473 01573         db      0x00, 0x0e, 0x73, 0x34, 0xf5, 0x21, 0x67, 0x3f
     21F5 3F67 
43E8 6C00 0015 01574         db      0x00, 0x6c, 0x15, 0x00, 0x10, 0x77, 0x73, 0x34
     7710 3473 
43F0 21F5 3F67 01575         db      0xf5, 0x21, 0x67, 0x3f, 0x00, 0x6c, 0x0b, 0x00
     6C00 000B 
43F8 7710 3473 01576         db      0x10, 0x77, 0x73, 0x34, 0xf5, 0x21, 0x67, 0x3f
     21F5 3F67 
4400 0F00 3473 01577         db      0x00, 0x0f, 0x73, 0x34, 0xf5, 0x21, 0x00, 0x44
     21F5 4400 
4408 430B FD34 01578         db      0x0b, 0x43, 0x34, 0xfd, 0x26, 0x0e, 0x00, 0x84
     0E26 8400 
4410 0015 4422 01579         db      0x15, 0x00, 0x22, 0x44, 0x63, 0x34, 0xfb, 0x21
     3463 21FB 
4418 0B68 7F43 01580         db      0x68, 0x0b, 0x43, 0x7f, 0x02, 0x00, 0x34, 0xfc
     0002 FC34 
4420 0826 3463 01581         db      0x26, 0x08, 0x63, 0x34, 0xf6, 0x21, 0x00, 0x34
     21F6 3400 
4428 25F4 6304 01582         db      0xf4, 0x25, 0x04, 0x63, 0x0b, 0x5d, 0x20, 0x7f
     5D0B 7F20 
4430 FFFE 0C09 01583         db      0xfe, 0xff, 0x09, 0x0c, 0x7d, 0x55, 0x4b, 0x44
     557D 444B 
4438 0D01 005E 01584         db      0x01, 0x0d, 0x5e, 0x00, 0x31, 0x21, 0x01, 0x09
     2131 0901 
4440 027F 1400 01585         db      0x7f, 0x02, 0x00, 0x14, 0x04, 0x00, 0x01, 0x7a
     0004 7A01 
4448 3855 6344 01586         db      0x55, 0x38, 0x44, 0x63, 0x28, 0x06, 0x00, 0x36
     0628 3600 
4450 0102 3121 01587         db      0x02, 0x01, 0x21, 0x31, 0x25, 0x04, 0x00, 0x47
     0425 4700 
4458 5D04 0A6A 01588         db      0x04, 0x5d, 0x6a, 0x0a, 0x0c, 0x2c, 0x11, 0x02
     2C0C 0211 
4460 406E 40E0 01589         db      0x6e, 0x40, 0xe0, 0x40, 0x43, 0x41, 0x4d, 0x41
     4143 414D 
4468 4157 41AD 01590         db      0x57, 0x41, 0xad, 0x41, 0xb5, 0x41, 0xbe, 0x41
     41B5 41BE 
4470 423B 42F2 01591         db      0x3b, 0x42, 0xf2, 0x42, 0x39, 0x43, 0x73, 0x43
     4339 4373 
4478 4388 439E 01592         db      0x88, 0x43, 0x9e, 0x43, 0x0e, 0x44, 0x2b, 0x44
     440E 442B 
4480 444E 0A02 01593         db      0x4e, 0x44, 0x02, 0x0a, 0x0c, 0x0e, 0x10, 0x12
     0E0C 1210 
4488 0010 1412 01594         db      0x10, 0x00, 0x12, 0x14, 0x00, 0x12, 0x18, 0x00
     1200 0018 
4490 1C12 1200 01595         db      0x12, 0x1c, 0x00, 0x12, 0x20, 0x00, 0x12, 0x24
     0020 2412 
4498 1200 0028 01596         db      0x00, 0x12, 0x28, 0x00, 0x12, 0x2c, 0x00, 0x12
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2C12 1200 
44A0 0030 3412 01597         db      0x30, 0x00, 0x12, 0x34, 0x00, 0x12, 0x38, 0x00
     1200 0038 
44A8 3C12 1200 01598         db      0x12, 0x3c, 0x00, 0x12, 0x40, 0x00, 0x12, 0x44
     0040 4412 
44B0 1200 0048 01599         db      0x00, 0x12, 0x48, 0x00, 0x3e, 0x13, 0x00, 0x28
     133E 2800 
44B8 2B28 5601 01600         db      0x28, 0x2b, 0x01, 0x56, 0x44, 0x39, 0x2a, 0x01
     3944 012A 
44C0 012B 402A 01601         db      0x2b, 0x01, 0x2a, 0x40, 0x39, 0x64, 0x01, 0x54
     6439 5401 
44C8 470F 4400 01602         db      0x0f, 0x47, 0x00, 0x44, 0x0b, 0x43, 0x1c, 0x22
     430B 221C 
44D0 1E0A 2107 01603         db      0x0a, 0x1e, 0x07, 0x21, 0x1e, 0x08, 0x43, 0x1a
     081E 1A43 
44D8 2143 E356 01604         db      0x43, 0x21, 0x56, 0xe3, 0x44, 0x63, 0x1b, 0x21
     6344 211B 
44E0 EE54 0044 01605         db      0x54, 0xee, 0x44, 0x00, 0x56, 0xed, 0x44, 0x01
     ED56 0144 
44E8 211D EE54 01606         db      0x1d, 0x21, 0x54, 0xee, 0x44, 0x63, 0x0b, 0x56
     6344 560B 
44F0 44FA 4503 01607         db      0xfa, 0x44, 0x03, 0x45, 0x0b, 0x40, 0x00, 0x1e
     400B 1E00 
44F8 2105 1E0B 01608         db      0x05, 0x21, 0x0b, 0x1e, 0x06, 0x21, 0x36, 0x2c
     2106 2C36 
4500 1E01 4908 01609         db      0x01, 0x1e, 0x08, 0x49, 0x01, 0x0e, 0x0e, 0x41
     0E01 410E 
4508 2800 630C 01610         db      0x00, 0x28, 0x0c, 0x63, 0x36, 0x2e, 0x01, 0x21
     2E36 2101 
4510 3668 0130 01611         db      0x68, 0x36, 0x30, 0x01, 0x21, 0x68, 0x36, 0x32
     6821 3236 
4518 2101 3668 01612         db      0x01, 0x21, 0x68, 0x36, 0x34, 0x01, 0x21, 0x36
     0134 3621 
4520 0136 003F 01613         db      0x36, 0x01, 0x3f, 0x00, 0x0a, 0x0c, 0x0e, 0x10
     0C0A 100E 
4528 1012 3600 01614         db      0x12, 0x10, 0x00, 0x36, 0x38, 0x01, 0x36, 0x3a
     0138 3A36 
4530 3601 013C 01615         db      0x01, 0x36, 0x3c, 0x01, 0x2b, 0x09, 0xca, 0x44
     092B 44CA 
4538 0C28 4317 01616         db      0x28, 0x0c, 0x17, 0x43, 0x1a, 0x43, 0x21, 0x56
     431A 5621 
4540 4546 5463 01617         db      0x46, 0x45, 0x63, 0x54, 0x4d, 0x45, 0x18, 0x43
     454D 4318 
4548 431A 0B21 01618         db      0x1a, 0x43, 0x21, 0x0b, 0x7a, 0x0a, 0x56, 0x54
     0A7A 5456 
4550 0145 211B 01619         db      0x45, 0x01, 0x1b, 0x21, 0x36, 0x3e, 0x01, 0x1c
     3E36 1C01 
4558 0249 003F 01620         db      0x49, 0x02, 0x3f, 0x00, 0x1d, 0x49, 0x00, 0x28
     491D 2800 
4560 3506 0140 01621         db      0x06, 0x35, 0x40, 0x01, 0x3f, 0x00, 0x68, 0x3f
     003F 3F68 
4568 0A00 360C 01622         db      0x00, 0x0a, 0x0c, 0x36, 0x42, 0x01, 0x36, 0x3c
     0142 3C36 
4570 2B01 3A05 01623         db      0x01, 0x2b, 0x05, 0x3a, 0x45, 0x28, 0x06, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     2845 0006 
4578 0B44 1B43 01624         db      0x44, 0x0b, 0x43, 0x1b, 0x43, 0x1a, 0x43, 0x21
     1A43 2143 
4580 8756 6345 01625         db      0x56, 0x87, 0x45, 0x63, 0x54, 0xa6, 0x45, 0x00
     A654 0045 
4588 FA7F 0CFF 01626         db      0x7f, 0xfa, 0xff, 0x0c, 0x7b, 0x56, 0x94, 0x45
     567B 4594 
4590 5463 45A6 01627         db      0x63, 0x54, 0xa6, 0x45, 0x00, 0x7f, 0x06, 0x00
     7F00 0006 
4598 7D0C A156 01628         db      0x0c, 0x7d, 0x56, 0xa1, 0x45, 0x64, 0x54, 0xa6
     6445 A654 
45A0 1745 1A43 01629         db      0x45, 0x17, 0x43, 0x1a, 0x43, 0x21, 0x36, 0x44
     2143 4436 
45A8 1B01 0049 01630         db      0x01, 0x1b, 0x49, 0x00, 0x3f, 0x00, 0x1c, 0x49
     003F 491C 
45B0 2800 3508 01631         db      0x00, 0x28, 0x08, 0x35, 0x46, 0x01, 0x3f, 0x00
     0146 003F 
45B8 3F68 0A00 01632         db      0x68, 0x3f, 0x00, 0x0a, 0x0c, 0x36, 0x3c, 0x01
     360C 013C 
45C0 042B 4577 01633         db      0x2b, 0x04, 0x77, 0x45, 0x28, 0x06, 0x16, 0x43
     0628 4316 
45C8 431A 5621 01634         db      0x1a, 0x43, 0x21, 0x56, 0xd2, 0x45, 0x64, 0x54
     45D2 5464 
45D0 45E6 8400 01635         db      0xe6, 0x45, 0x00, 0x84, 0x07, 0x00, 0xe1, 0x45
     0007 45E1 
45D8 4317 431A 01636         db      0x17, 0x43, 0x1a, 0x43, 0x21, 0x58, 0x54, 0xe6
     5821 E654 
45E0 1745 1A43 01637         db      0x45, 0x17, 0x43, 0x1a, 0x43, 0x21, 0x36, 0x48
     2143 4836 
45E8 1B01 0049 01638         db      0x01, 0x1b, 0x49, 0x00, 0x3f, 0x00, 0x1c, 0x49
     003F 491C 
45F0 2800 3504 01639         db      0x00, 0x28, 0x04, 0x35, 0x4a, 0x01, 0x3f, 0x00
     014A 003F 
45F8 3F68 0A00 01640         db      0x68, 0x3f, 0x00, 0x0a, 0x0c, 0x36, 0x3c, 0x01
     360C 013C 
4600 042B 45C6 01641         db      0x2b, 0x04, 0xc6, 0x45, 0x28, 0x06, 0x16, 0x43
     0628 4316 
4608 431A 5621 01642         db      0x1a, 0x43, 0x21, 0x56, 0x14, 0x46, 0x67, 0x1d
     4614 1D67 
4610 5405 463B 01643         db      0x05, 0x54, 0x3b, 0x46, 0x00, 0x84, 0x03, 0x00
     8400 0003 
4618 4625 4317 01644         db      0x25, 0x46, 0x17, 0x43, 0x1a, 0x43, 0x21, 0x7f
     431A 7F21 
4620 FFFE 3B54 01645         db      0xfe, 0xff, 0x54, 0x3b, 0x46, 0x00, 0x84, 0x05
     0046 0584 
4628 3600 1746 01646         db      0x00, 0x36, 0x46, 0x17, 0x43, 0x1a, 0x43, 0x21
     1A43 2143 
4630 027F 5400 01647         db      0x7f, 0x02, 0x00, 0x54, 0x3b, 0x46, 0x17, 0x43
     463B 4317 
4638 431A 3621 01648         db      0x1a, 0x43, 0x21, 0x36, 0x4c, 0x01, 0x1b, 0x49
     014C 491B 
4640 3F00 1C00 01649         db      0x00, 0x3f, 0x00, 0x1c, 0x49, 0x00, 0x28, 0x04
     0049 0428 
4648 4E35 3F01 01650         db      0x35, 0x4e, 0x01, 0x3f, 0x00, 0x68, 0x3f, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     6800 003F 
4650 0C0A 3C36 01651         db      0x0a, 0x0c, 0x36, 0x3c, 0x01, 0x2b, 0x04, 0x06
     2B01 0604 
4658 2846 2906 01652         db      0x46, 0x28, 0x06, 0x29, 0x2a, 0x01, 0x00, 0x56
     012A 5600 
4660 466C 5601 01653         db      0x6c, 0x46, 0x01, 0x56, 0x69, 0x46, 0x66, 0x28
     4669 2866 
4668 6404 0428 01654         db      0x04, 0x64, 0x28, 0x04, 0x01, 0x56, 0x73, 0x46
     5601 4673 
4670 2865 6304 01655         db      0x65, 0x28, 0x04, 0x63, 0x28, 0x04, 0x67, 0x7d
     0428 7D67 
4678 6C01 0081 01656         db      0x01, 0x6c, 0x81, 0x00, 0x5e, 0x64, 0x67, 0x7d
     645E 7D67 
4680 6C00 0083 01657         db      0x00, 0x6c, 0x83, 0x00, 0x5e, 0x64, 0x66, 0x6c
     645E 6C66 
4688 0085 645E 01658         db      0x85, 0x00, 0x5e, 0x64, 0x54, 0x90, 0x46, 0x63
     9054 6346 
4690 8567 5D02 01659         db      0x67, 0x85, 0x02, 0x5d, 0x6c, 0x55, 0x8f, 0x46
     556C 468F 
4698 8767 5D00 01660         db      0x67, 0x87, 0x00, 0x5d, 0x68, 0x6c, 0x11, 0x00
     6C68 0011 
46A0 896C 5D00 01661         db      0x6c, 0x89, 0x00, 0x5d, 0x68, 0x76, 0x74, 0x28
     7668 2874 
46A8 6702 0201 01662         db      0x02, 0x67, 0x01, 0x02, 0x69, 0x36, 0x50, 0x01
     3669 0150 
46B0 7021 3668 01663         db      0x21, 0x70, 0x68, 0x36, 0x50, 0x01, 0x21, 0x6e
     0150 6E21 
46B8 0228 5235 01664         db      0x28, 0x02, 0x35, 0x52, 0x01, 0x0b, 0x7b, 0x56
     0B01 567B 
46C0 46C7 5435 01665         db      0xc7, 0x46, 0x35, 0x54, 0x01, 0x28, 0x02, 0x35
     2801 3502 
46C8 0156 7D0B 01666         db      0x56, 0x01, 0x0b, 0x7d, 0x56, 0xd4, 0x46, 0x35
     D456 3546 
46D0 0158 0228 01667         db      0x58, 0x01, 0x28, 0x02, 0x35, 0x5a, 0x01, 0x0b
     5A35 0B01 
46D8 136C 6F08 01668         db      0x6c, 0x13, 0x08, 0x6f, 0x5d, 0x18, 0x5e, 0x10
     185D 105E 
46E0 5C36 3601 01669         db      0x36, 0x5c, 0x01, 0x36, 0x5e, 0x01, 0x26, 0x06
     015E 0626 
46E8 0167 0B02 01670         db      0x67, 0x01, 0x02, 0x0b, 0x72, 0x68, 0x36, 0x60
     6872 6036 
46F0 2201 0167 01671         db      0x01, 0x22, 0x67, 0x01, 0x02, 0x0b, 0x71, 0x69
     0B02 6971 
46F8 6036 2201 01672         db      0x36, 0x60, 0x01, 0x22, 0x63, 0x28, 0x02, 0x00
     2863 0002 
4700 0756 0047 01673         db      0x56, 0x07, 0x47, 0x00, 0x43, 0x28, 0x02, 0x35
     2843 3502 
4708 0162 6636 01674         db      0x62, 0x01, 0x36, 0x66, 0x00, 0x25, 0x04, 0x67
     2500 6704 
4710 0207 076C 01675         db      0x07, 0x02, 0x6c, 0x07, 0x20, 0x6c, 0x07, 0x10
     6C20 1007 
4718 C76C 3900 01676         db      0x6c, 0xc7, 0x00, 0x39, 0x52, 0x01, 0x67, 0xe5
     0152 E567 
4720 3907 0156 01677         db      0x07, 0x39, 0x56, 0x01, 0x67, 0xa7, 0x20, 0x5d
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     A767 5D20 
4728 6766 10A7 01678         db      0x66, 0x67, 0xa7, 0x10, 0x5d, 0x66, 0x67, 0x37
     665D 3767 
4730 5D40 6766 01679         db      0x40, 0x5d, 0x66, 0x67, 0x07, 0x02, 0x5d, 0x62
     0207 625D 
4738 FB67 6C01 01680         db      0x67, 0xfb, 0x01, 0x6c, 0x2b, 0x00, 0x5e, 0x64
     002B 645E 
4740 531F 6447 01681         db      0x1f, 0x53, 0x47, 0x64, 0x6c, 0x19, 0x40, 0x6c
     196C 6C40 
4748 0819 196C 01682         db      0x19, 0x08, 0x6c, 0x19, 0x04, 0x68, 0x36, 0x64
     6804 6436 
4750 2001 0909 01683         db      0x01, 0x20, 0x09, 0x09, 0x2b, 0x01, 0xff, 0x46
     012B 46FF 
4758 3F0A 3900 01684         db      0x0a, 0x3f, 0x00, 0x39, 0x3c, 0x01, 0x13, 0x02
     013C 0213 
4760 2B00 E801 01685         db      0x00, 0x2b, 0x01, 0xe8, 0x46, 0x39, 0x42, 0x01
     3946 0142 
4768 012B 46BA 01686         db      0x2b, 0x01, 0xba, 0x46, 0x09, 0x2b, 0x01, 0xa9
     2B09 A901 
4770 3946 013A 01687         db      0x46, 0x39, 0x3a, 0x01, 0x2b, 0x01, 0x76, 0x46
     012B 4676 
4778 2B09 5C01 01688         db      0x09, 0x2b, 0x01, 0x5c, 0x46, 0x39, 0x38, 0x01
     3946 0138 
4780 012B 4648 01689         db      0x2b, 0x01, 0x48, 0x46, 0x39, 0x2e, 0x01, 0x2b
     2E39 2B01 
4788 F301 3945 01690         db      0x01, 0xf3, 0x45, 0x39, 0x34, 0x01, 0x2b, 0x01
     0134 012B 
4790 45B3 3039 01691         db      0xb3, 0x45, 0x39, 0x30, 0x01, 0x2b, 0x01, 0x61
     2B01 6101 
4798 3945 0132 01692         db      0x45, 0x39, 0x32, 0x01, 0x2b, 0x01, 0x0b, 0x45
     012B 450B 
47A0 0E68 2145 01693         db      0x68, 0x0e, 0x45, 0x21, 0x1f, 0xb3, 0x47, 0x63
     B31F 6347 
47A8 6868 6868 01694         db      0x68, 0x68, 0x68, 0x68, 0x68, 0x12, 0x18, 0x00
     1268 0018 
47B0 2046 1F0B 01695         db      0x46, 0x20, 0x0b, 0x1f, 0xc5, 0x47, 0x63, 0x6c
     47C5 6C63 
47B8 7001 956C 01696         db      0x01, 0x70, 0x6c, 0x95, 0x03, 0x68, 0x12, 0x14
     6803 1412 
47C0 4700 2008 01697         db      0x00, 0x47, 0x08, 0x20, 0x07, 0x1f, 0xd9, 0x47
     1F07 47D9 
47C8 0167 6C20 01698         db      0x67, 0x01, 0x20, 0x6c, 0x11, 0x45, 0x6c, 0x09
     4511 096C 
47D0 6900 1412 01699         db      0x00, 0x69, 0x12, 0x14, 0x00, 0x47, 0x08, 0x20
     4700 2008 
47D8 1F07 47ED 01700         db      0x07, 0x1f, 0xed, 0x47, 0x67, 0x01, 0x20, 0x6c
     0167 6C20 
47E0 1145 096C 01701         db      0x45, 0x11, 0x6c, 0x09, 0x00, 0x6a, 0x12, 0x14
     6A00 1412 
47E8 4700 2008 01702         db      0x00, 0x47, 0x08, 0x20, 0x07, 0x1f, 0x01, 0x48
     1F07 4801 
47F0 0167 6C80 01703         db      0x67, 0x01, 0x80, 0x6c, 0x11, 0x45, 0x6c, 0x21
     4511 216C 
47F8 6B00 1412 01704         db      0x00, 0x6b, 0x12, 0x14, 0x00, 0x47, 0x08, 0x20
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     4700 2008 
4800 1F07 4815 01705         db      0x07, 0x1f, 0x15, 0x48, 0x67, 0x01, 0x08, 0x6c
     0167 6C08 
4808 1145 6C69 01706         db      0x45, 0x11, 0x69, 0x6c, 0x09, 0x00, 0x12, 0x14
     0009 1412 
4810 4700 2008 01707         db      0x00, 0x47, 0x08, 0x20, 0x07, 0x35, 0x66, 0x01
     3507 0166 
4818 470E 210A 01708         db      0x0e, 0x47, 0x0a, 0x21, 0x63, 0x0b, 0x21, 0x09
     0B63 0921 
4820 7954 0648 01709         db      0x54, 0x79, 0x48, 0x06, 0x5d, 0x6c, 0x10, 0x5d
     6C5D 5D10 
4828 686C 210F 01710         db      0x6c, 0x68, 0x0f, 0x21, 0x0a, 0x0c, 0x0e, 0x41
     0C0A 410E 
4830 0E00 0A21 01711         db      0x00, 0x0e, 0x21, 0x0a, 0x44, 0x56, 0x71, 0x48
     5644 4871 
4838 6964 1412 01712         db      0x64, 0x69, 0x12, 0x14, 0x00, 0x47, 0x05, 0x22
     4700 2205 
4840 4300 1012 01713         db      0x00, 0x43, 0x12, 0x10, 0x00, 0x21, 0x12, 0x12
     2100 1212 
4848 4700 210A 01714         db      0x00, 0x47, 0x0a, 0x21, 0x64, 0x6a, 0x12, 0x14
     6A64 1412 
4850 4700 2205 01715         db      0x00, 0x47, 0x05, 0x22, 0x01, 0x12, 0x10, 0x00
     1201 0010 
4858 1221 0012 01716         db      0x21, 0x12, 0x12, 0x00, 0x47, 0x0a, 0x21, 0x00
     0A47 0021 
4860 5645 486C 01717         db      0x45, 0x56, 0x6c, 0x48, 0x08, 0x16, 0x00, 0x5d
     1608 5D00 
4868 5466 4871 01718         db      0x66, 0x54, 0x71, 0x48, 0x08, 0x16, 0x00, 0x5d
     1608 5D00 
4870 6762 0259 01719         db      0x62, 0x67, 0x59, 0x02, 0x5d, 0x6e, 0x13, 0x08
     6E5D 0813 
4878 6400 2355 01720         db      0x00, 0x64, 0x55, 0x23, 0x48, 0x13, 0x10, 0x00
     1348 0010 
4880 008F      01721         db      0x8f
4882 01722 caml_globals_init_stack:
4882 0002 0008 01723         db      0x02, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0e, 0x00
     0002 000E 
488A 0016 001C 01724         db      0x16, 0x00, 0x1c, 0x00, 0x24, 0x00, 0x02, 0x00
     0024 0002 
4892 002A 002E 01725         db      0x2a, 0x00, 0x2e, 0x00, 0x32, 0x00, 0x38, 0x00
     0032 0038 
489A 0002 003E 01726         db      0x02, 0x00, 0x3e, 0x00, 0x32, 0x00, 0x32, 0x00
     0032 0032 
48A2 0032 0032 01727         db      0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32, 0x00
     0032 0032 
48AA 0032 0032 01728         db      0x32, 0x00, 0x32, 0x00, 0x38, 0x00, 0x32, 0x00
     0038 0032 
48B2 0032 0032 01729         db      0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32, 0x00
     0032 0032 
48BA 0044 0044 01730         db      0x44, 0x00, 0x44, 0x00, 0x02, 0x00, 0x44, 0x00
     0002 0044 
48C2 003E 0002 01731         db      0x3e, 0x00, 0x02, 0x00, 0x44, 0x00, 0x3e, 0x00
     0044 003E 
48CA 0001 0001 01732         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0001 0001 
48D2 0001 004A 01733         db      0x01, 0x00, 0x4a, 0x00, 0x3e, 0x00, 0x01, 0x00
     003E 0001 
48DA 0002 003E 01734         db      0x02, 0x00, 0x3e, 0x00, 0x4e, 0x00, 0x56, 0x00
     004E 0056 
48E2 005E 0001 01735         db      0x5e, 0x00, 0x01, 0x00, 0x6c, 0x00, 0x01, 0x00
     006C 0001 
48EA 0001 007E 01736         db      0x01, 0x00, 0x7e, 0x00, 0x84, 0x00, 0x8a, 0x00
     0084 008A 
48F2 0090 0096 01737         db      0x90, 0x00, 0x96, 0x00, 0x9c, 0x00, 0xa2, 0x00
     009C 00A2 
48FA 00B0 0001 01738         db      0xb0, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4902 00BE 0001 01739         db      0xbe, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
490A 0001 0001 01740         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xe0, 0x00
     0001 00E0 
4912 00E8 00F0 01741         db      0xe8, 0x00, 0xf0, 0x00, 0xf8, 0x00, 0x00, 0x01
     00F8 0100 
491A 0001 0001 01742         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4922 0001 0108 01743         db      0x01, 0x00, 0x08, 0x01, 0x14, 0x01, 0x20, 0x01
     0114 0120 
492A 012C 0138 01744         db      0x2c, 0x01, 0x38, 0x01, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4932 0001 0001 01745         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
493A 0001 0001 01746         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4942 0001 0001 01747         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
494A 0144 0148 01748         db      0x44, 0x01, 0x48, 0x01, 0x4c, 0x01, 0x01, 0x00
     014C 0001 
4952 0150 0001 01749         db      0x50, 0x01, 0x01, 0x00, 0x54, 0x01, 0x01, 0x00
     0154 0001 
495A 0158 0001 01750         db      0x58, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4962 0001 0001 01751         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
496A 0001 0001 01752         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4972 0001 0001 01753         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
497A 0001 0001 01754         db      0x01, 0x00, 0x01, 0x00, 0x5c, 0x01, 0x01, 0x00
     015C 0001 
4982 0001 0001 01755         db      0x01, 0x00, 0x01, 0x00, 0x6e, 0x01, 0x01, 0x00
     016E 0001 
498A 0001 0001 01756         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
4992 0001 0001 01757         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
499A 0001 0001 01758         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
     0001 0001 
49A2 0176 017A 01759         db      0x76, 0x01, 0x7a, 0x01, 0x01, 0x00, 0x7e, 0x01
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     0001 017E 
49AA 018E 0001 01760         db      0x8e, 0x01, 0x01, 0x00, 0x9c, 0x01, 0x01, 0x00
     019C 0001 
49B2 0001 0001 01761         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xa0, 0x01
     0001 01A0 
49BA 0001 0001 01762         db      0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xa4, 0x01
     0001 01A4 
49C2 01A8 0001 01763         db      0xa8, 0x01, 0x01, 0x00, 0xac, 0x01, 0xb0, 0x01
     01AC 01B0 
49CA 01B4 01B8 01764         db      0xb4, 0x01, 0xb8, 0x01, 0xbc, 0x01, 0xc0, 0x01
     01BC 01C0 
49D2 0001 0001 01765         db      0x01, 0x00, 0x01, 0x00, 0xc4, 0x01, 0x01, 0x00
     01C4 0001 
49DA 01CC 01D4 01766         db      0xcc, 0x01, 0xd4, 0x01, 0xda, 0x01, 0x01, 0x00
     01DA 0001 
49E2 0001 01E2 01767         db      0x01, 0x00, 0xe2, 0x01, 0x01, 0x00, 0xea, 0x01
     0001 01EA 
49EA 01768 caml_globals_init_heap:
49EA 02FD 0000 01769         db      0xfd, 0x02, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x02
     0000 02FD 
49F2 0000 8000 01770         db      0x00, 0x00, 0x00, 0x80, 0xfc, 0x03, 0x2b, 0x69
     03FC 692B 
49FA 666E 0100 01771         db      0x6e, 0x66, 0x00, 0x01, 0xfc, 0x02, 0x69, 0x6e
     02FC 6E69 
4A02 0066 03FC 01772         db      0x66, 0x00, 0xfc, 0x03, 0x2d, 0x69, 0x6e, 0x66
     692D 666E 
4A0A 0100 02FC 01773         db      0x00, 0x01, 0xfc, 0x02, 0x6e, 0x61, 0x6e, 0x00
     616E 006E 
4A12 01FC 002B 01774         db      0xfc, 0x01, 0x2b, 0x00, 0xfc, 0x01, 0x2d, 0x00
     01FC 002D 
4A1A 02FD 0000 01775         db      0xfd, 0x02, 0x00, 0x00, 0x20, 0x82, 0xfd, 0x02
     8220 02FD 
4A22 0000 7E00 01776         db      0x00, 0x00, 0x00, 0x7e, 0xfd, 0x02, 0x00, 0x00
     02FD 0000 
4A2A 7F00 02FD 01777         db      0x00, 0x7f, 0xfd, 0x02, 0x00, 0x24, 0x74, 0x92
     2400 9274 
4A32 01FC 002E 01778         db      0xfc, 0x01, 0x2e, 0x00, 0xfc, 0x03, 0x74, 0x72
     03FC 7274 
4A3A 6575 0100 01779         db      0x75, 0x65, 0x00, 0x01, 0xfc, 0x03, 0x66, 0x61
     03FC 6166 
4A42 736C 0065 01780         db      0x6c, 0x73, 0x65, 0x00, 0xfc, 0x06, 0x63, 0x68
     06FC 6863 
4A4A 7261 6F5F 01781         db      0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e
     5F66 6E69 
4A52 0074 08FC 01782         db      0x74, 0x00, 0xfc, 0x08, 0x69, 0x6e, 0x76, 0x61
     6E69 6176 
4A5A 696C 2064 01783         db      0x6c, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d
     6F66 6D72 
4A62 7461 0100 01784         db      0x61, 0x74, 0x00, 0x01, 0xfc, 0x02, 0x5c, 0x62
     02FC 625C 
4A6A 0100 02FC 01785         db      0x00, 0x01, 0xfc, 0x02, 0x5c, 0x74, 0x00, 0x01
     745C 0100 
4A72 02FC 6E5C 01786         db      0xfc, 0x02, 0x5c, 0x6e, 0x00, 0x01, 0xfc, 0x02
     0100 02FC 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4A7A 725C 0100 01787         db      0x5c, 0x72, 0x00, 0x01, 0xfc, 0x02, 0x5c, 0x5c
     02FC 5C5C 
4A82 0100 02FC 01788         db      0x00, 0x01, 0xfc, 0x02, 0x5c, 0x27, 0x00, 0x01
     275C 0100 
4A8A 06FC 7453 01789         db      0xfc, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67
     6972 676E 
4A92 622E 696C 01790         db      0x2e, 0x62, 0x6c, 0x69, 0x74, 0x00, 0xfc, 0x06
     0074 06FC 
4A9A 7453 6972 01791         db      0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x73
     676E 732E 
4AA2 6275 0100 01792         db      0x75, 0x62, 0x00, 0x01, 0xfc, 0x10, 0x42, 0x75
     10FC 7542 
4AAA 6666 7265 01793         db      0x66, 0x66, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x64
     612E 6464 
4AB2 203A 6163 01794         db      0x3a, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74
     6E6E 746F 
4ABA 6720 6F72 01795         db      0x20, 0x67, 0x72, 0x6f, 0x77, 0x20, 0x62, 0x75
     2077 7562 
4AC2 6666 7265 01796         db      0x66, 0x66, 0x65, 0x72, 0x00, 0x01, 0xff, 0x03
     0100 03FF 
4ACA 15E0 0000 01797         db      0xe0, 0x15, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03
     0000 03FF 
4AD2 15E0 0001 01798         db      0xe0, 0x15, 0x01, 0x00, 0x00, 0x00, 0xff, 0x03
     0000 03FF 
4ADA 15E0 000A 01799         db      0xe0, 0x15, 0x0a, 0x00, 0x00, 0x00, 0xff, 0x03
     0000 03FF 
4AE2 15E0 0000 01800         db      0xe0, 0x15, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03
     8000 03FF 
4AEA 15E0 FFFF 01801         db      0xe0, 0x15, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x05
     7FFF 05FF 
4AF2 15F0 0000 01802         db      0xf0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
     0000 0000 
4AFA 0000 05FF 01803         db      0x00, 0x00, 0xff, 0x05, 0xf0, 0x15, 0x01, 0x00
     15F0 0001 
4B02 0000 0000 01804         db      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x05
     0000 05FF 
4B0A 15F0 000A 01805         db      0xf0, 0x15, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00
     0000 0000 
4B12 0000 05FF 01806         db      0x00, 0x00, 0xff, 0x05, 0xf0, 0x15, 0x00, 0x00
     15F0 0000 
4B1A 0000 0000 01807         db      0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x05
     8000 05FF 
4B22 15F0 FFFF 01808         db      0xf0, 0x15, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
     FFFF FFFF 
4B2A 7FFF 01FC 01809         db      0xff, 0x7f, 0xfc, 0x01, 0x25, 0x00, 0xfc, 0x01
     0025 01FC 
4B32 0100 01FC 01810         db      0x00, 0x01, 0xfc, 0x01, 0x22, 0x00, 0xfc, 0x01
     0022 01FC 
4B3A 0022 01FC 01811         db      0x22, 0x00, 0xfc, 0x01, 0x27, 0x00, 0xfc, 0x01
     0027 01FC 
4B42 0027 02FC 01812         db      0x27, 0x00, 0xfc, 0x02, 0x25, 0x5f, 0x00, 0x01
     5F25 0100 
4B4A 05FC 7270 01813         db      0xfc, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x66
     6E69 6674 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4B52 6D2E 006C 01814         db      0x2e, 0x6d, 0x6c, 0x00, 0x00, 0x03, 0x62, 0x01
     0300 0162 
4B5A 0339 0011 01815         db      0x39, 0x03, 0x11, 0x00, 0xfc, 0x01, 0x2b, 0x00
     01FC 002B 
4B62 01FC 0030 01816         db      0xfc, 0x01, 0x30, 0x00, 0xfc, 0x07, 0x45, 0x65
     07FC 6545 
4B6A 7270 6D6F 01817         db      0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x77, 0x72, 0x69
     772E 6972 
4B72 6574 0100 01818         db      0x74, 0x65, 0x00, 0x01, 0xfc, 0x06, 0x45, 0x65
     06FC 6545 
4B7A 7270 6D6F 01819         db      0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x61
     722E 6165 
4B82 0064 0100 01820         db      0x64, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
     0001 0100 
4B8A 0003 0100 01821         db      0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
     0001 0100 
4B92 0003 0100 01822         db      0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
     0001 0100 
4B9A 0003 0100 01823         db      0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
     0001 0100 
4BA2 0003 0100 01824         db      0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
     0001 0100 
4BAA 0003 03FC 01825         db      0x03, 0x00, 0xfc, 0x03, 0x2b, 0x2b, 0x2e, 0x2b
     2B2B 2B2E 
4BB2 0100 03FC 01826         db      0x00, 0x01, 0xfc, 0x03, 0x2d, 0x2d, 0x2e, 0x2d
     2D2D 2D2E 
4BBA 0100 02FD 01827         db      0x00, 0x01, 0xfd, 0x02, 0x51, 0xb8, 0x3a, 0x82
     B851 823A 
4BC2 03FC 3425 01828         db      0xfc, 0x03, 0x25, 0x34, 0x2e, 0x31, 0x66, 0x00
     312E 0066 
4BCA 03FC 6F4E 01829         db      0xfc, 0x03, 0x4e, 0x6f, 0x6e, 0x65, 0x00, 0x01
     656E 0100 
4BD2 09FC 3301 01830         db      0xfc, 0x09, 0x01, 0x33, 0x32, 0x2e, 0x35, 0x00
     2E32 0035 
4BDA 0243 200A 01831         db      0x43, 0x02, 0x0a, 0x20, 0x33, 0x32, 0x2e, 0x35
     3233 352E 
4BE2 4300 0020 01832         db      0x00, 0x43, 0x20, 0x00
4BE6 01833 caml_globals_init_end:
               01834 
               01835         include "/usr/local/lib/ocapic/default-config.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
300000 08FF    00012         config OSC     = INTIO67
300000 08FF    00013         config FCMEN   = OFF
               00014         config PWRT    = ON
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00015         config BOREN   = OFF
300002 1E18    00016         config WDT     = OFF
300004 03FF    00017         config MCLRE   = OFF
300004 03FF    00018         config LPT1OSC = OFF
300004 01FF    00019         config PBADEN  = OFF
300006 FFC4    00020         config STVREN  = OFF
300006 FFC0    00021         config LVP     = OFF
300006 FFC0    00022         config DEBUG   = OFF
               00023         config CP0     = ON
               00024         config CP1     = ON
               00025         config CP2     = ON
               00026         config CP3     = ON
300008 C000    00027         config CPB     = OFF
300008 C000    00028         config CPD     = OFF
               00029         config WRT0    = ON
               00030         config WRT1    = ON
               00031         config WRT2    = ON
               00032         config WRT3    = ON
30000A E000    00033         config WRTB    = OFF
30000A E000    00034         config WRTC    = OFF
30000A E000    00035         config WRTD    = OFF
               00036         config EBTR0   = OFF
               00037         config EBTR1   = OFF
               00038         config EBTR2   = OFF
               00039         config EBTR3   = OFF
30000C 400F    00040         config EBTRB   = OFF
               01836         include "/usr/local/lib/ocapic/stdlib.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
               00012 
               00013 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00014 ;;;;;;;;                                   ;;;;;;;;
               00015 ;;;;;;;;             STRINGS               ;;;;;;;;
               00016 ;;;;;;;;                                   ;;;;;;;;
               00017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00018 
               00019 #ifdef caml_useprim_caml_blit_string
4BE6 00020 caml_blit_string:
               00021         ;; ACCU = src
               00022         ;; [0x2]:[0x1] = srcoff
               00023         ;; [0x4]:[0x3] = dst
               00024         ;; [0x6]:[0x5] = dstoff
               00025         ;; [0x8]:[0x7] = len
4BE6 CFE1 FF68 00026         movff   FSR1L, TMP_REG_1 ; save FSR1 in TMP_REG_2:1
4BEA CFE2 FF69 00027         movff   FSR1H, TMP_REG_2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4BEE 90D8      00028         bcf     STATUS, C       ; FSR0 <- src + srcoff
4BF0 3202      00029         rrcf    [0x2], F
4BF2 3001      00030         rrcf    [0x1], W
4BF4 2556      00031         addwf   ACCUL, W
4BF6 6EE9      00032         movwf   FSR0L
4BF8 5002      00033         movf    [0x2], W
4BFA 2157      00034         addwfc  ACCUH, W
4BFC 6EEA      00035         movwf   FSR0H
4BFE 90D8      00036         bcf     STATUS, C       ; FSR1 <- dst + dstoff
4C00 3206      00037         rrcf    [0x6], F
4C02 3005      00038         rrcf    [0x5], W
4C04 2403      00039         addwf   [0x3], W
4C06 6EE1      00040         movwf   FSR1L
4C08 5006      00041         movf    [0x6], W
4C0A 2004      00042         addwfc  [0x4], W
4C0C 6EE2      00043         movwf   FSR1H
4C0E 90D8      00044         bcf     STATUS, C       ; [0x8]:[0x7] <- len
4C10 3208      00045         rrcf    [0x8], F
4C12 3207      00046         rrcf    [0x7], F
4C14 E004      00047         bz      caml_blit_string_loop_test
4C16 00048 caml_blit_string_loop:
4C16 CFEE FFE6 00049         movff   POSTINC0, POSTINC1
4C1A 2E07      00050         decfsz  [0x7], F
4C1C D7FC      00051         bra     caml_blit_string_loop
4C1E 00052 caml_blit_string_loop_test:
4C1E 0608      00053         decf    [0x8], F
4C20 E0FA      00054         bz      caml_blit_string_loop
4C22 CF68 FFE1 00055         movff   TMP_REG_1, FSR1L ; restore FSR1
4C26 CF69 FFE2 00056         movff   TMP_REG_2, FSR1H
               00057         M_CONST 0               ; return unit
4C2A 0E01          M                 movlw   2 * N + 1
4C2C 6F56          M                 movwf   ACCUL
4C2E 6B57          M                 clrf    ACCUH
4C30 0012      00058         return
               00059 #endif
               00060 
               00061 #ifdef caml_useprim_caml_ml_string_length
4C32 00062 caml_ml_string_length:
               00063         ;; ACCU = str
4C32 CF56 FFE9 00064         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
4C36 CF57 FFEA 00065         movff   ACCUH, FSR0H
4C3A E901      00066         subfsr  FSR0, 0x1       ; W <- block_size
4C3C 50EE      00067         movf    POSTINC0, W
4C3E 26E9      00068         addwf   FSR0L, F        ; FSR0 += 2 * block_size - 1 ; W --
4C40 B0D8      00069         btfsc   STATUS, C
4C42 2AEA      00070         incf    FSR0H, F
4C44 0FFF      00071         addlw   -0x1
4C46 26E9      00072         addwf   FSR0L, F
4C48 B0D8      00073         btfsc   STATUS, C
4C4A 2AEA      00074         incf    FSR0H, F
4C4C 6F56      00075         movwf   ACCUL           ; ACCU <- int_val(2 * W)
4C4E 6B57      00076         clrf    ACCUH
4C50 90D8      00077         bcf     STATUS, C
4C52 3756      00078         rlcf    ACCUL, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4C54 3757      00079         rlcf    ACCUH, F
4C56 80D8      00080         bsf     STATUS, C
4C58 3756      00081         rlcf    ACCUL, F
4C5A 3757      00082         rlcf    ACCUH, F
4C5C A0EF      00083         btfss   INDF0, 0        ; if INDF0.0 = 0 then ACCU ++
4C5E 8356      00084         bsf     ACCUL, 1
4C60 0012      00085         return
               00086 #endif
               00087 
               00088 #ifdef caml_useprim_caml_fill_string
4C62 00089 caml_fill_string:
               00090         ;; ACCU = str
               00091         ;; [0x2]:[0x1] = start
               00092         ;; [0x4]:[0x3] = len
               00093         ;; [0x6]:[0x5] = c
4C62 90D8      00094         bcf     STATUS, C       ; FSR0 <- str + start
4C64 3202      00095         rrcf    [0x2], F
4C66 3001      00096         rrcf    [0x1], W
4C68 2556      00097         addwf   ACCUL, W
4C6A 6EE9      00098         movwf   FSR0L
4C6C 5002      00099         movf    [0x2], W
4C6E 2157      00100         addwfc  ACCUH, W
4C70 6EEA      00101         movwf   FSR0H
4C72 3006      00102         rrcf    [0x6], W        ; [0x5] <- c
4C74 3205      00103         rrcf    [0x5], F
4C76 90D8      00104         bcf     STATUS, C       ; [0x4]:[0x3] <- len
4C78 3204      00105         rrcf    [0x4], F
4C7A 3203      00106         rrcf    [0x3], F
4C7C E004      00107         bz      caml_fill_string_miloop
4C7E 00108 caml_fill_string_loop:
4C7E 5005      00109         movf    [0x5], W
4C80 6EEE      00110         movwf   POSTINC0
4C82 2E03      00111         decfsz  [0x3], F
4C84 D7FC      00112         bra     caml_fill_string_loop
4C86 00113 caml_fill_string_miloop:
4C86 0604      00114         decf    [0x4], F
4C88 E0FA      00115         bz      caml_fill_string_loop
               00116         M_CONST 0               ; return unit
4C8A 0E01          M                 movlw   2 * N + 1
4C8C 6F56          M                 movwf   ACCUL
4C8E 6B57          M                 clrf    ACCUH
4C90 0012      00117         return
               00118 #endif
               00119 
               00120 #ifdef caml_useprim_caml_is_printable
4C92 00121 caml_is_printable:
               00122         M_CONST 1
4C92 0E03          M                 movlw   2 * N + 1
4C94 6F56          M                 movwf   ACCUL
4C96 6B57          M                 clrf    ACCUH
4C98 0012      00123         return
               00124 #endif
               00125 
               00126 #ifdef caml_useprim_caml_create_string
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00127 #ifndef caml_useprim_caml_raise_ia_string_create
4C9A 00128 #define caml_useprim_caml_raise_ia_string_create
               00129 #endif
4C9A 00130 caml_create_string:
               00131         ;; ACCU = len
4C9A 3157      00132         rrcf    ACCUH, W        ; STATUS.C ignored
4C9C 6F68      00133         movwf   TMP_REG_1
4C9E 3156      00134         rrcf    ACCUL, W
4CA0 6EF5      00135         movwf   TABLAT
4CA2 6F69      00136         movwf   TMP_REG_2
4CA4 3168      00137         rrcf    TMP_REG_1, W    ; STATUS.C ignored
4CA6 0B3F      00138         andlw   0x3F
4CA8 E176      00139         bnz     caml_raise_ia_string_create
4CAA 32F5      00140         rrcf    TABLAT, F
4CAC 2AF5      00141         incf    TABLAT, F
4CAE E073      00142         bz      caml_raise_ia_string_create
4CB0 EC03 F00A 00143         call    _CHECK_UNFULL_HEAP_GEN
4CB4 0EFC      00144         movlw   STRING_TAG      ; write tag
4CB6 6EE6      00145         movwf   POSTINC1
4CB8 50F5      00146         movf    TABLAT, W       ; write size
4CBA 6EE6      00147         movwf   POSTINC1
4CBC CFE1 FF56 00148         movff   FSR1L, ACCUL    ; ACCU <- string
4CC0 CFE2 FF57 00149         movff   FSR1H, ACCUH
4CC4 0FFF      00150         addlw   -0x1            ; FSR1 += 2 * size - 2
4CC6 26E1      00151         addwf   FSR1L, F
4CC8 B0D8      00152         btfsc   STATUS, C
4CCA 2AE2      00153         incf    FSR1H, F
4CCC 26E1      00154         addwf   FSR1L, F
4CCE B0D8      00155         btfsc   STATUS, C
4CD0 2AE2      00156         incf    FSR1H, F
4CD2 6AE6      00157         clrf    POSTINC1        ; write 0
4CD4 0E00      00158         movlw   0x0             ; if odd size then write 0 else write 1
4CD6 A169      00159         btfss   TMP_REG_2, 0
4CD8 0E01      00160         movlw   0x1
4CDA 6EE6      00161         movwf   POSTINC1
4CDC 0012      00162         return
               00163 #endif
               00164 
               00165 #ifdef caml_useprim_caml_string_get
               00166 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds_string
4CDE 00167 #define caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00168 #endif
4CDE 00169 caml_string_get:
               00170         ;; ACCU = str
               00171         ;; [0x2]:[0x1] = ind
4CDE CF56 FFE9 00172         movff   ACCUL, FSR0L    ; FSR0 <- @size
4CE2 CF57 FFEA 00173         movff   ACCUH, FSR0H
4CE6 E901      00174         subfsr  FSR0, 0x1
4CE8 90D8      00175         bcf     STATUS, C       ; [0x2]:[0x1] <- valint(ind)
4CEA 3202      00176         rrcf    [0x2], F
4CEC 3201      00177         rrcf    [0x1], F
4CEE 90D8      00178         bcf     STATUS, C       ; check indH
4CF0 3002      00179         rrcf    [0x2], W        ; C <- LSB(indH)
4CF2 E14B      00180         bnz     caml_raise_ia_index_out_of_bounds_string
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4CF4 3001      00181         rrcf    [0x1], W        ; W <- ind / 2
4CF6 64EF      00182         cpfsgt  INDF0           ; size > ind / 2 ?
4CF8 D048      00183         bra     caml_raise_ia_index_out_of_bounds_string ; no -> error
4CFA 0F01      00184         addlw   0x1             ; W <- ind / 2 + 1
4CFC 64EE      00185         cpfsgt  POSTINC0        ; size = ind / 2 + 1 ?
4CFE D00A      00186         bra     caml_string_get_last_char ; yes -> goto last_char
4D00 5001      00187         movf    [0x1], W        ; no -> ok ; FSR0 += size
4D02 26E9      00188         addwf   FSR0L, F
4D04 5002      00189         movf    [0x2], W
4D06 22EA      00190         addwfc  FSR0H, F
4D08 6B57      00191         clrf    ACCUH           ; read char
4D0A 80D8      00192         bsf     STATUS, C
4D0C 34EF      00193         rlcf    INDF0, W
4D0E 3757      00194         rlcf    ACCUH, F
4D10 6F56      00195         movwf   ACCUL
4D12 0012      00196         return
4D14 00197 caml_string_get_last_char:
4D14 B001      00198         btfsc   [0x1], 0        ; parity of ind ?
4D16 D039      00199         bra     caml_raise_ia_index_out_of_bounds_string ; odd -> error
4D18 5001      00200         movf    [0x1], W        ; FSR0 <- @last byte (0 or 1)
4D1A 26E9      00201         addwf   FSR0L, F
4D1C 5002      00202         movf    [0x2], W
4D1E 22EA      00203         addwfc  FSR0H, F
4D20 E801      00204         addfsr  FSR0, 0x1
4D22 50ED      00205         movf    POSTDEC0, W     ; test last byte
4D24 E132      00206         bnz     caml_raise_ia_index_out_of_bounds_string ; if 1 -> raise
4D26 6B57      00207         clrf    ACCUH           ; if 0 -> ok, read char
4D28 80D8      00208         bsf     STATUS, C
4D2A 34EF      00209         rlcf    INDF0, W
4D2C 3757      00210         rlcf    ACCUH, F
4D2E 6F56      00211         movwf   ACCUL
4D30 0012      00212         return
               00213 #endif
               00214 
               00215 #ifdef caml_useprim_caml_string_set
               00216 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00217 #define caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00218 #endif
4D32 00219 caml_string_set:
               00220         ;; ACCU = str
               00221         ;; [0x2]:[0x1] = ind
               00222         ;; [0x4]:[0x3] = c
4D32 CF56 FFE9 00223         movff   ACCUL, FSR0L    ; FSR0 <- @size
4D36 CF57 FFEA 00224         movff   ACCUH, FSR0H
4D3A E901      00225         subfsr  FSR0, 0x1
4D3C 90D8      00226         bcf     STATUS, C       ; [0x2]:[0x1] <- valint(ind)
4D3E 3202      00227         rrcf    [0x2], F
4D40 3201      00228         rrcf    [0x1], F
4D42 90D8      00229         bcf     STATUS, C       ; check indH
4D44 3002      00230         rrcf    [0x2], W        ; C <- LSB(indH)
4D46 E121      00231         bnz     caml_raise_ia_index_out_of_bounds_string
4D48 3001      00232         rrcf    [0x1], W        ; W <- ind / 2
4D4A 64EF      00233         cpfsgt  INDF0           ; size > ind / 2 ?
4D4C D01E      00234         bra     caml_raise_ia_index_out_of_bounds_string ; no -> error
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4D4E 0F01      00235         addlw   0x1             ; W <- ind / 2 + 1
4D50 64EE      00236         cpfsgt  POSTINC0        ; size = ind / 2 + 1 ?
4D52 D00B      00237         bra     caml_string_set_last_char ; yes -> goto last_char
4D54 5001      00238         movf    [0x1], W        ; no -> ok ; FSR0 += size
4D56 26E9      00239         addwf   FSR0L, F
4D58 5002      00240         movf    [0x2], W
4D5A 22EA      00241         addwfc  FSR0H, F
4D5C 3004      00242         rrcf    [0x4], W        ; W <- c ; STATUS.C ignored
4D5E 3003      00243         rrcf    [0x3], W
4D60 6EEF      00244         movwf   INDF0           ; write char
               00245         M_CONST 0               ; return ()
4D62 0E01          M                 movlw   2 * N + 1
4D64 6F56          M                 movwf   ACCUL
4D66 6B57          M                 clrf    ACCUH
4D68 0012      00246         return
4D6A 00247 caml_string_set_last_char:
4D6A B001      00248         btfsc   [0x1], 0        ; parity of ind ?
4D6C D00E      00249         bra     caml_raise_ia_index_out_of_bounds_string ; odd -> error
4D6E 5001      00250         movf    [0x1], W        ; FSR0 <- @last byte (0 or 1)
4D70 26E9      00251         addwf   FSR0L, F
4D72 5002      00252         movf    [0x2], W
4D74 22EA      00253         addwfc  FSR0H, F
4D76 E801      00254         addfsr  FSR0, 0x1
4D78 50ED      00255         movf    POSTDEC0, W     ; test last byte
4D7A E107      00256         bnz     caml_raise_ia_index_out_of_bounds_string ; if 1 -> raise
4D7C 3004      00257         rrcf    [0x4], W        ; W <- c ; STATUS.C ignored
4D7E 3003      00258         rrcf    [0x3], W
4D80 6EEF      00259         movwf   INDF0           ; write char
               00260         M_CONST 0               ; return ()
4D82 0E01          M                 movlw   2 * N + 1
4D84 6F56          M                 movwf   ACCUL
4D86 6B57          M                 clrf    ACCUH
4D88 0012      00261         return
               00262 #endif
               00263 
               00264 #ifdef caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00265 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
4D8A 00266 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00267 #endif
4D8A 00268 caml_raise_ia_index_out_of_bounds_string:
4D8A 0E01      00269         movlw   0x1                     ; erase ACCU and stack[0]
4D8C 6F56      00270         movwf   ACCUL
4D8E 6E01      00271         movwf   [0x1]
4D90 6B57      00272         clrf    ACCUH
4D92 6A02      00273         clrf    [0x2]
4D94 D0F3      00274         bra     caml_raise_ia_index_out_of_bounds
               00275 #endif
               00276 
               00277 #ifdef caml_useprim_caml_raise_ia_string_create
               00278 #ifndef caml_useprim_caml_raise_ia
4D96 00279 #define caml_useprim_caml_raise_ia
               00280 #endif
4D96 00281 caml_raise_ia_string_create:
               00282         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4D96 515E          M                 movf    CUR_HEAP_END, W
4D98 62E2          M                 cpfseq  FSR1H
4D9A D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4D9C 0E16          M                 movlw   (N * 0x2 + 0x2)
4D9E 24E1          M                 addwf   FSR1L, W
4DA0 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
4DA2 EC6D F00A     M                 call    caml_gc_exec
                   M 
4DA6 515E          M                 movf    CUR_HEAP_END, W
4DA8 62E2          M                 cpfseq  FSR1H
4DAA D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4DAC 0E16          M                 movlw   (N * 0x2 + 0x2)
4DAE 24E1          M                 addwf   FSR1L, W
4DB0 B0D8          M                 btfsc   STATUS, C
4DB2 EFAC F009     M                 goto    caml_raise_out_of_memory
4DB6     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000007         M CPT_CUH = CPT_CUH + 1
               00283         M_WRITE_BYTE STRING_TAG         ; write string tag
4DB6 0EFC          M                 movlw   C
4DB8 6EE6          M                 movwf   POSTINC1
               00284         M_WRITE_BYTE 0x7                ; write string size
4DBA 0E07          M                 movlw   C
4DBC 6EE6          M                 movwf   POSTINC1
4DBE CFE1 FF68 00285         movff   FSR1L, TMP_REG_1        ; mem string addr
4DC2 CFE2 FF69 00286         movff   FSR1H, TMP_REG_2
               00287         M_WRITE_BYTE 'S'                ; write string content
4DC6 0E53          M                 movlw   C
4DC8 6EE6          M                 movwf   POSTINC1
               00288         M_WRITE_BYTE 't'
4DCA 0E74          M                 movlw   C
4DCC 6EE6          M                 movwf   POSTINC1
               00289         M_WRITE_BYTE 'r'
4DCE 0E72          M                 movlw   C
4DD0 6EE6          M                 movwf   POSTINC1
               00290         M_WRITE_BYTE 'i'
4DD2 0E69          M                 movlw   C
4DD4 6EE6          M                 movwf   POSTINC1
               00291         M_WRITE_BYTE 'n'
4DD6 0E6E          M                 movlw   C
4DD8 6EE6          M                 movwf   POSTINC1
               00292         M_WRITE_BYTE 'g'
4DDA 0E67          M                 movlw   C
4DDC 6EE6          M                 movwf   POSTINC1
               00293         M_WRITE_BYTE '.'
4DDE 0E2E          M                 movlw   C
4DE0 6EE6          M                 movwf   POSTINC1
               00294         M_WRITE_BYTE 'c'
4DE2 0E63          M                 movlw   C
4DE4 6EE6          M                 movwf   POSTINC1
               00295         M_WRITE_BYTE 'r'
4DE6 0E72          M                 movlw   C
4DE8 6EE6          M                 movwf   POSTINC1
               00296         M_WRITE_BYTE 'e'
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4DEA 0E65          M                 movlw   C
4DEC 6EE6          M                 movwf   POSTINC1
               00297         M_WRITE_BYTE 'a'
4DEE 0E61          M                 movlw   C
4DF0 6EE6          M                 movwf   POSTINC1
               00298         M_WRITE_BYTE 't'
4DF2 0E74          M                 movlw   C
4DF4 6EE6          M                 movwf   POSTINC1
               00299         M_WRITE_BYTE 'e'
4DF6 0E65          M                 movlw   C
4DF8 6EE6          M                 movwf   POSTINC1
               00300         M_WRITE_BYTE 0x0                ; write string \0
4DFA 0E00          M                 movlw   C
4DFC 6EE6          M                 movwf   POSTINC1
4DFE EF17 F032 00301         goto    caml_raise_ia
               00302 #endif
               00303 
               00304 
               00305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00306 ;;;;;;;;                                   ;;;;;;;;
               00307 ;;;;;;;;              ARRAYS               ;;;;;;;;
               00308 ;;;;;;;;                                   ;;;;;;;;
               00309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00310 
               00311 #ifdef caml_useprim_caml_make_array
               00312 caml_make_array:
               00313         ;; ACCU = tbl
               00314         movff   ACCUL, FSR0L
               00315         movff   ACCUH, FSR0H
               00316         subfsr  FSR0, 0x1
               00317         movf    POSTINC0, F     ; atom ?
               00318         btfsc   STATUS, Z
               00319         return
               00320         btfsc   INDF0, 0        ; is_int(tbl[0]) ?
               00321         return
               00322         movf    POSTINC0, W     ; tag(tbl[0]) = DOUBLE_TAG ?
               00323         movff   INDF0, FSR0H
               00324         movwf   FSR0L
               00325         subfsr  FSR0, 0x2
               00326         movf    INDF0, W
               00327         xorlw   DOUBLE_TAG
               00328         btfss   STATUS, Z
               00329         return
               00330         movff   ACCUL, FSR0L    ; TABLAT <- size(tbl) * 2
               00331         movff   ACCUH, FSR0H
               00332         subfsr  FSR0, 0x1
               00333         movff   INDF0, TABLAT
               00334         bcf     STATUS, C
               00335         rlcf    TABLAT, F       ; size(tbl) > 127 ?
               00336         bc      caml_raise_ia_array_make
               00337         call    _CHECK_UNFULL_HEAP_GEN ; check allocation
               00338         movlw   DOUBLE_ARRAY_TAG ; write tag
               00339         movwf   POSTINC1
               00340         movf    TABLAT, W        ; write size
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00341         movwf   POSTINC1
               00342         rrncf   TABLAT, F        ; TABLAT <- size / 2
               00343         movff   FSR2L, TMP_REG_1 ; save FSR2
               00344         movff   FSR2H, TMP_REG_2
               00345         movff   ACCUL, FSR0L     ; FSR0 <- tbl
               00346         movff   ACCUH, FSR0H
               00347 caml_make_array_loop:
               00348         movff   POSTINC0, FSR2L  ; FSR2 <- tbl[i]
               00349         movff   POSTINC0, FSR2H
               00350         movff   POSTINC2, POSTINC1 ; copy float
               00351         movff   POSTINC2, POSTINC1
               00352         movff   POSTINC2, POSTINC1
               00353         movff   POSTINC2, POSTINC1
               00354         decfsz  TABLAT, F
               00355         bra     caml_make_array_loop ; loop
               00356         movff   TMP_REG_1, FSR2L     ; restore FSR2
               00357         movff   TMP_REG_2, FSR2H
               00358         return
               00359 #endif
               00360 
               00361 #ifdef caml_useprim_caml_make_vect
               00362 #ifndef caml_useprim_caml_raise_ia_array_make
4E02 00363 #define caml_useprim_caml_raise_ia_array_make
               00364 #endif
4E02 00365 caml_make_vect:
               00366         ;; ACCU = size
               00367         ;; [0x2]:[0x1] = val
4E02 90D8      00368         bcf     STATUS, C
4E04 3157      00369         rrcf    ACCUH, W
4E06 E118      00370         bnz     caml_raise_ia_array_make
4E08 3156      00371         rrcf    ACCUL, W
4E0A E011      00372         bz      caml_make_vect_atom
4E0C 6EF5      00373         movwf   TABLAT
4E0E EC03 F00A 00374         call    _CHECK_UNFULL_HEAP_GEN
4E12 6AE6      00375         clrf    POSTINC1                ; write tag (0)
4E14 CFF5 FFE6 00376         movff   TABLAT, POSTINC1        ; write size
4E18 CFE1 FF56 00377         movff   FSR1L, ACCUL
4E1C CFE2 FF57 00378         movff   FSR1H, ACCUH
4E20 00379 caml_make_vect_loop:
4E20 5001      00380         movf    [0x1], W
4E22 6EE6      00381         movwf   POSTINC1
4E24 5002      00382         movf    [0x2], W
4E26 6EE6      00383         movwf   POSTINC1
4E28 2EF5      00384         decfsz  TABLAT, F
4E2A D7FA      00385         bra     caml_make_vect_loop
4E2C 0012      00386         return
4E2E 00387 caml_make_vect_atom:
               00388         M_ATOM0
4E2E 0E88          M                 movlw   low ATOM0_ADR
4E30 6F56          M                 movwf   ACCUL
4E32 0E0F          M                 movlw   high ATOM0_ADR
4E34 6F57          M                 movwf   ACCUH
4E36 0012      00389         return
               00390 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00391 
               00392 #ifdef caml_useprim_caml_raise_ia_array_make
               00393 #ifndef caml_useprim_caml_raise_ia
               00394 #define caml_useprim_caml_raise_ia
               00395 #endif
4E38 00396 caml_raise_ia_array_make:
               00397         M_CHECK_UNFULL_HEAP 0x9         ; check allocation of string and exn
4E38 515E          M                 movf    CUR_HEAP_END, W
4E3A 62E2          M                 cpfseq  FSR1H
4E3C D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4E3E 0E14          M                 movlw   (N * 0x2 + 0x2)
4E40 24E1          M                 addwf   FSR1L, W
4E42 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
4E44 EC6D F00A     M                 call    caml_gc_exec
                   M 
4E48 515E          M                 movf    CUR_HEAP_END, W
4E4A 62E2          M                 cpfseq  FSR1H
4E4C D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4E4E 0E14          M                 movlw   (N * 0x2 + 0x2)
4E50 24E1          M                 addwf   FSR1L, W
4E52 B0D8          M                 btfsc   STATUS, C
4E54 EFAC F009     M                 goto    caml_raise_out_of_memory
4E58     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000008         M CPT_CUH = CPT_CUH + 1
               00398         M_WRITE_BYTE STRING_TAG         ; write string tag
4E58 0EFC          M                 movlw   C
4E5A 6EE6          M                 movwf   POSTINC1
               00399         M_WRITE_BYTE 0x6                ; write string size
4E5C 0E06          M                 movlw   C
4E5E 6EE6          M                 movwf   POSTINC1
4E60 CFE1 FF68 00400         movff   FSR1L, TMP_REG_1        ; mem string addr
4E64 CFE2 FF69 00401         movff   FSR1H, TMP_REG_2
               00402         M_WRITE_BYTE 'A'                ; write string content
4E68 0E41          M                 movlw   C
4E6A 6EE6          M                 movwf   POSTINC1
               00403         M_WRITE_BYTE 'r'
4E6C 0E72          M                 movlw   C
4E6E 6EE6          M                 movwf   POSTINC1
               00404         M_WRITE_BYTE 'r'
4E70 0E72          M                 movlw   C
4E72 6EE6          M                 movwf   POSTINC1
               00405         M_WRITE_BYTE 'a'
4E74 0E61          M                 movlw   C
4E76 6EE6          M                 movwf   POSTINC1
               00406         M_WRITE_BYTE 'y'
4E78 0E79          M                 movlw   C
4E7A 6EE6          M                 movwf   POSTINC1
               00407         M_WRITE_BYTE '.'
4E7C 0E2E          M                 movlw   C
4E7E 6EE6          M                 movwf   POSTINC1
               00408         M_WRITE_BYTE 'm'
4E80 0E6D          M                 movlw   C
4E82 6EE6          M                 movwf   POSTINC1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00409         M_WRITE_BYTE 'a'
4E84 0E61          M                 movlw   C
4E86 6EE6          M                 movwf   POSTINC1
               00410         M_WRITE_BYTE 'k'
4E88 0E6B          M                 movlw   C
4E8A 6EE6          M                 movwf   POSTINC1
               00411         M_WRITE_BYTE 'e'
4E8C 0E65          M                 movlw   C
4E8E 6EE6          M                 movwf   POSTINC1
               00412         M_WRITE_BYTE 0x0                ; write string \0\1
4E90 0E00          M                 movlw   C
4E92 6EE6          M                 movwf   POSTINC1
               00413         M_WRITE_BYTE 0x1
4E94 0E01          M                 movlw   C
4E96 6EE6          M                 movwf   POSTINC1
4E98 EF17 F032 00414         goto    caml_raise_ia
               00415 #endif
               00416 
               00417 #ifdef caml_useprim_caml_array_unsafe_get
               00418 #ifndef caml_useprim_caml_array_unsafe_get_addr
               00419 #define caml_useprim_caml_array_unsafe_get_addr
               00420 #endif
               00421 #ifndef caml_useprim_caml_array_unsafe_get_float
               00422 #define caml_useprim_caml_array_unsafe_get_float
               00423 #endif
               00424 caml_array_unsafe_get:
               00425         ;; ACCU = tbl
               00426         ;; [0x2]:[0x1] = ind
               00427         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00428         movff   ACCUH, FSR0H
               00429         subfsr  FSR0, 0x2
               00430         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
               00431         cpfseq  POSTINC0
               00432         bra     caml_array_unsafe_get_addr ; no
               00433         bra     caml_array_unsafe_get_float ; yes
               00434 #endif
               00435 
               00436 #ifdef caml_useprim_caml_array_get
               00437 #ifndef caml_useprim_caml_array_get_addr
4E9C 00438 #define caml_useprim_caml_array_get_addr
               00439 #endif
               00440 #ifndef caml_useprim_caml_array_get_float
4E9C 00441 #define caml_useprim_caml_array_get_float
               00442 #endif
4E9C 00443 caml_array_get:
               00444         ;; ACCU = tbl
               00445         ;; [0x2]:[0x1] = ind
4E9C CF56 FFE9 00446         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
4EA0 CF57 FFEA 00447         movff   ACCUH, FSR0H
4EA4 E902      00448         subfsr  FSR0, 0x2
4EA6 0EFE      00449         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
4EA8 62EE      00450         cpfseq  POSTINC0
4EAA D00A      00451         bra     caml_array_get_addr     ; no
4EAC D01D      00452         bra     caml_array_get_float    ; yes
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00453 #endif
               00454 
               00455 #ifdef caml_useprim_caml_array_unsafe_set
               00456 #ifndef caml_useprim_caml_array_unsafe_set_addr
               00457 #define caml_useprim_caml_array_unsafe_set_addr
               00458 #endif
               00459 #ifndef caml_useprim_caml_array_unsafe_set_float
               00460 #define caml_useprim_caml_array_unsafe_set_float
               00461 #endif
               00462 caml_array_unsafe_set:
               00463         ;; ACCU = tbl
               00464         ;; [0x2]:[0x1] = ind
               00465         ;; [0x4]:[0x3] = val
               00466         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00467         movff   ACCUH, FSR0H
               00468         subfsr  FSR0, 0x2
               00469         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
               00470         cpfseq  POSTINC0
               00471         bra     caml_array_unsafe_set_addr ; no
               00472         bra     caml_array_unsafe_set_float ; yes
               00473 #endif
               00474 
               00475 #ifdef caml_useprim_caml_array_set
               00476 #ifndef caml_useprim_caml_array_set_addr
4EAE 00477 #define caml_useprim_caml_array_set_addr
               00478 #endif
               00479 #ifndef caml_useprim_caml_array_set_float
4EAE 00480 #define caml_useprim_caml_array_set_float
               00481 #endif
4EAE 00482 caml_array_set:
               00483         ;; ACCU = tbl
               00484         ;; [0x2]:[0x1] = ind
               00485         ;; [0x4]:[0x3] = val
4EAE CF56 FFE9 00486         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
4EB2 CF57 FFEA 00487         movff   ACCUH, FSR0H
4EB6 E902      00488         subfsr  FSR0, 0x2
4EB8 0EFE      00489         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
4EBA 62EE      00490         cpfseq  POSTINC0
4EBC D048      00491         bra     caml_array_set_addr     ; no
4EBE D0A0      00492         bra     caml_array_set_float    ; yes
               00493 #endif
               00494 
               00495 #ifdef caml_useprim_caml_array_unsafe_get_addr
               00496 caml_array_unsafe_get_addr:
               00497         ;; ACCU = tbl
               00498         ;; [0x2]:[0x1] = ind
               00499         decf    [0x1], W        ; FSR0 <- tbl + ind
               00500         addwf   ACCUL, W
               00501         movwf   FSR0L
               00502         movf    ACCUH, W
               00503         addwfc  [0x2], W
               00504         movwf   FSR0H
               00505         movff   POSTINC0, ACCUL ; ACCU <- *FSR0
               00506         movff   INDF0, ACCUH
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00507         return
               00508 #endif
               00509 
               00510 #ifdef caml_useprim_caml_array_unsafe_set_addr
               00511 caml_array_unsafe_set_addr:
               00512         ;; ACCU = tbl
               00513         ;; [0x2]:[0x1] = ind
               00514         ;; [0x4]:[0x3] = val
               00515         decf    [0x1], W        ; FSR0 <- tbl + ind
               00516         addwf   ACCUL, W
               00517         movwf   FSR0L
               00518         movf    ACCUH, W
               00519         addwfc  [0x2], W
               00520         movwf   FSR0H
               00521         movf    [0x3], W        ; *FSR0 <- val
               00522         movwf   POSTINC0
               00523         movf    [0x4], W
               00524         movwf   INDF0
               00525         M_CONST 0               ; return ()
               00526         return
               00527 #endif
               00528 
               00529 #ifdef caml_useprim_caml_array_unsafe_get_float
               00530 caml_array_unsafe_get_float:
               00531         ;; ACCU = tbl
               00532         ;; [0x2]:[0x1] = ind
               00533         M_CHECK_UNFULL_HEAP 0x2
               00534         decf    [0x1], W        ; FSR0 <- ACCU + 2 * ind
               00535         addwf   ACCUL, W
               00536         movwf   FSR0L
               00537         movf    [0x2], W
               00538         addwfc  ACCUH, W
               00539         movwf   FSR0H
               00540         decf    [0x1], W
               00541         addwf   FSR0L, F
               00542         movf    [0x2], W
               00543         addwfc  FSR0H, F
               00544         movlw   DOUBLE_TAG      ; write tag
               00545         movwf   POSTINC1
               00546         movlw   0x2             ; write size
               00547         movwf   POSTINC1
               00548         movff   FSR1L, ACCUL    ; ACCU <- @float
               00549         movff   FSR1H, ACCUH
               00550         movff   POSTINC0, POSTINC1 ; copy float
               00551         movff   POSTINC0, POSTINC1
               00552         movff   POSTINC0, POSTINC1
               00553         movff   INDF0, POSTINC1
               00554         return
               00555 #endif
               00556 
               00557 #ifdef caml_useprim_caml_array_unsafe_set_float
               00558 caml_array_unsafe_set_float:
               00559         ;; ACCU = tbl
               00560         ;; [0x2]:[0x1] = ind
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00561         ;; [0x4]:[0x3] = val
               00562         movsf   [0x3], FSR0L            ; TMP_REG_2:1 <- *val
               00563         movsf   [0x4], FSR0H
               00564         movff   POSTINC0, TMP_REG_1
               00565         movff   POSTINC0, TMP_REG_2
               00566         movff   POSTINC0, TMP_REG_3
               00567         movff   INDF0, TMP_REG_4
               00568         decf    [0x1], W        ; FSR0 <- ACCU + 2 * ind
               00569         addwf   ACCUL, W
               00570         movwf   FSR0L
               00571         movf    [0x2], W
               00572         addwfc  ACCUH, W
               00573         movwf   FSR0H
               00574         decf    [0x1], W
               00575         addwf   FSR0L, F
               00576         movf    [0x2], W
               00577         addwfc  FSR0H, F
               00578         movff   TMP_REG_1, POSTINC0     ; write the float
               00579         movff   TMP_REG_2, POSTINC0
               00580         movff   TMP_REG_3, POSTINC0
               00581         movff   TMP_REG_4, INDF0
               00582         M_CONST 0                       ; return ()
               00583         return
               00584 #endif
               00585 
               00586 #ifdef caml_useprim_caml_array_get_addr
               00587 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00588 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00589 #endif
4EC0 00590 caml_array_get_addr:
               00591         ;; ACCU = tbl
               00592         ;; [0x2]:[0x1] = ind
4EC0 CF56 FFE9 00593         movff   ACCUL, FSR0L    ; FSR0 <- @size
4EC4 CF57 FFEA 00594         movff   ACCUH, FSR0H
4EC8 E901      00595         subfsr  FSR0, 0x1
4ECA 90D8      00596         bcf     STATUS, C       ; check indH
4ECC 3002      00597         rrcf    [0x2], W        ; C <- LSB(indH)
4ECE E156      00598         bnz     caml_raise_ia_index_out_of_bounds
4ED0 3001      00599         rrcf    [0x1], W        ; W <- ind
4ED2 64EE      00600         cpfsgt  POSTINC0        ; size > ind ? FSR0++
4ED4 D053      00601         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
4ED6 0401      00602         decf    [0x1], W        ; FSR0 += ind
4ED8 26E9      00603         addwf   FSR0L, F
4EDA 5002      00604         movf    [0x2], W
4EDC 22EA      00605         addwfc  FSR0H, F
4EDE CFEE FF56 00606         movff   POSTINC0, ACCUL ; ACCU <- *FSR0
4EE2 CFEF FF57 00607         movff   INDF0, ACCUH
4EE6 0012      00608         return
               00609 #endif
               00610 
               00611 #ifdef caml_useprim_caml_array_get_float
               00612 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00613 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00614 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4EE8 00615 caml_array_get_float:
               00616         ;; ACCU = tbl
               00617         ;; [0x2]:[0x1] = ind
               00618         M_CHECK_UNFULL_HEAP 0x2
4EE8 515E          M                 movf    CUR_HEAP_END, W
4EEA 62E2          M                 cpfseq  FSR1H
4EEC D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4EEE 0E06          M                 movlw   (N * 0x2 + 0x2)
4EF0 24E1          M                 addwf   FSR1L, W
4EF2 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
4EF4 EC6D F00A     M                 call    caml_gc_exec
                   M 
4EF8 515E          M                 movf    CUR_HEAP_END, W
4EFA 62E2          M                 cpfseq  FSR1H
4EFC D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4EFE 0E06          M                 movlw   (N * 0x2 + 0x2)
4F00 24E1          M                 addwf   FSR1L, W
4F02 B0D8          M                 btfsc   STATUS, C
4F04 EFAC F009     M                 goto    caml_raise_out_of_memory
4F08     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000009         M CPT_CUH = CPT_CUH + 1
4F08 CF56 FFE9 00619         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
4F0C CF57 FFEA 00620         movff   ACCUH, FSR0H
4F10 E901      00621         subfsr  FSR0, 0x1
4F12 5002      00622         movf    [0x2], W        ; C <- LSB(indH)
4F14 E133      00623         bnz     caml_raise_ia_index_out_of_bounds
4F16 0401      00624         decf    [0x1], W        ; W <- 2 * ind
4F18 64EE      00625         cpfsgt  POSTINC0        ; size > ind ? FSR0++
4F1A D030      00626         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
4F1C 0401      00627         decf    [0x1], W        ; FSR0 += 2 * ind
4F1E 26E9      00628         addwf   FSR0L, F
4F20 5002      00629         movf    [0x2], W
4F22 22EA      00630         addwfc  FSR0H, F
4F24 0401      00631         decf    [0x1], W
4F26 26E9      00632         addwf   FSR0L, F
4F28 5002      00633         movf    [0x2], W
4F2A 22EA      00634         addwfc  FSR0H, F
4F2C 0EFD      00635         movlw   DOUBLE_TAG      ; write tag
4F2E 6EE6      00636         movwf   POSTINC1
4F30 0E02      00637         movlw   0x2             ; write size
4F32 6EE6      00638         movwf   POSTINC1
4F34 CFE1 FF56 00639         movff   FSR1L, ACCUL    ; ACCU <- @float
4F38 CFE2 FF57 00640         movff   FSR1H, ACCUH
4F3C CFEE FFE6 00641         movff   POSTINC0, POSTINC1 ; copy float
4F40 CFEE FFE6 00642         movff   POSTINC0, POSTINC1
4F44 CFEE FFE6 00643         movff   POSTINC0, POSTINC1
4F48 CFEF FFE6 00644         movff   INDF0, POSTINC1
4F4C 0012      00645         return
               00646 #endif
               00647 
               00648 #ifdef caml_useprim_caml_array_set_addr
               00649 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00650 #define caml_useprim_caml_raise_ia_index_out_of_bounds
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00651 #endif
4F4E 00652 caml_array_set_addr:
               00653         ;; ACCU = tbl
               00654         ;; [0x2]:[0x1] = ind
               00655         ;; [0x4]:[0x3] = val
4F4E CF56 FFE9 00656         movff   ACCUL, FSR0L    ; FSR0 <- @size
4F52 CF57 FFEA 00657         movff   ACCUH, FSR0H
4F56 E901      00658         subfsr  FSR0, 0x1
4F58 90D8      00659         bcf     STATUS, C       ; check indH
4F5A 3002      00660         rrcf    [0x2], W        ; C <- LSB(indH)
4F5C E10F      00661         bnz     caml_raise_ia_index_out_of_bounds
4F5E 3001      00662         rrcf    [0x1], W        ; W <- ind
4F60 64EE      00663         cpfsgt  POSTINC0        ; size > ind ? FSR0++
4F62 D00C      00664         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
4F64 0401      00665         decf    [0x1], W        ; FSR0 += ind
4F66 26E9      00666         addwf   FSR0L, F
4F68 5002      00667         movf    [0x2], W
4F6A 22EA      00668         addwfc  FSR0H, F
4F6C 5003      00669         movf    [0x3], W        ; *FSR0 <- val
4F6E 6EEE      00670         movwf   POSTINC0
4F70 5004      00671         movf    [0x4], W
4F72 6EEF      00672         movwf   INDF0
               00673         M_CONST 0               ; return ()
4F74 0E01          M                 movlw   2 * N + 1
4F76 6F56          M                 movwf   ACCUL
4F78 6B57          M                 clrf    ACCUH
4F7A 0012      00674         return
               00675 #endif
               00676 
               00677 #ifdef caml_useprim_caml_array_set_float
               00678 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00679 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00680 #endif
               00681 #endif
               00682 
               00683 #ifdef caml_useprim_caml_raise_ia_index_out_of_bounds
               00684 #ifndef caml_useprim_caml_raise_ia
               00685 #define caml_useprim_caml_raise_ia
               00686 #endif
4F7C 00687 caml_raise_ia_index_out_of_bounds:
               00688         M_CHECK_UNFULL_HEAP 0xD         ; check allocation of string and exn
4F7C 515E          M                 movf    CUR_HEAP_END, W
4F7E 62E2          M                 cpfseq  FSR1H
4F80 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4F82 0E1C          M                 movlw   (N * 0x2 + 0x2)
4F84 24E1          M                 addwf   FSR1L, W
4F86 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
4F88 EC6D F00A     M                 call    caml_gc_exec
                   M 
4F8C 515E          M                 movf    CUR_HEAP_END, W
4F8E 62E2          M                 cpfseq  FSR1H
4F90 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
4F92 0E1C          M                 movlw   (N * 0x2 + 0x2)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4F94 24E1          M                 addwf   FSR1L, W
4F96 B0D8          M                 btfsc   STATUS, C
4F98 EFAC F009     M                 goto    caml_raise_out_of_memory
4F9C     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000A         M CPT_CUH = CPT_CUH + 1
               00689         M_WRITE_BYTE STRING_TAG         ; write string tag
4F9C 0EFC          M                 movlw   C
4F9E 6EE6          M                 movwf   POSTINC1
               00690         M_WRITE_BYTE 0xA                ; write string size
4FA0 0E0A          M                 movlw   C
4FA2 6EE6          M                 movwf   POSTINC1
4FA4 CFE1 FF68 00691         movff   FSR1L, TMP_REG_1        ; mem string addr
4FA8 CFE2 FF69 00692         movff   FSR1H, TMP_REG_2
               00693         M_WRITE_BYTE 'i'                ; write string content
4FAC 0E69          M                 movlw   C
4FAE 6EE6          M                 movwf   POSTINC1
               00694         M_WRITE_BYTE 'n'
4FB0 0E6E          M                 movlw   C
4FB2 6EE6          M                 movwf   POSTINC1
               00695         M_WRITE_BYTE 'd'
4FB4 0E64          M                 movlw   C
4FB6 6EE6          M                 movwf   POSTINC1
               00696         M_WRITE_BYTE 'e'
4FB8 0E65          M                 movlw   C
4FBA 6EE6          M                 movwf   POSTINC1
               00697         M_WRITE_BYTE 'x'
4FBC 0E78          M                 movlw   C
4FBE 6EE6          M                 movwf   POSTINC1
               00698         M_WRITE_BYTE ' '
4FC0 0E20          M                 movlw   C
4FC2 6EE6          M                 movwf   POSTINC1
               00699         M_WRITE_BYTE 'o'
4FC4 0E6F          M                 movlw   C
4FC6 6EE6          M                 movwf   POSTINC1
               00700         M_WRITE_BYTE 'u'
4FC8 0E75          M                 movlw   C
4FCA 6EE6          M                 movwf   POSTINC1
               00701         M_WRITE_BYTE 't'
4FCC 0E74          M                 movlw   C
4FCE 6EE6          M                 movwf   POSTINC1
               00702         M_WRITE_BYTE ' '
4FD0 0E20          M                 movlw   C
4FD2 6EE6          M                 movwf   POSTINC1
               00703         M_WRITE_BYTE 'o'
4FD4 0E6F          M                 movlw   C
4FD6 6EE6          M                 movwf   POSTINC1
               00704         M_WRITE_BYTE 'f'
4FD8 0E66          M                 movlw   C
4FDA 6EE6          M                 movwf   POSTINC1
               00705         M_WRITE_BYTE ' '
4FDC 0E20          M                 movlw   C
4FDE 6EE6          M                 movwf   POSTINC1
               00706         M_WRITE_BYTE 'b'
4FE0 0E62          M                 movlw   C
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4FE2 6EE6          M                 movwf   POSTINC1
               00707         M_WRITE_BYTE 'o'
4FE4 0E6F          M                 movlw   C
4FE6 6EE6          M                 movwf   POSTINC1
               00708         M_WRITE_BYTE 'u'
4FE8 0E75          M                 movlw   C
4FEA 6EE6          M                 movwf   POSTINC1
               00709         M_WRITE_BYTE 'n'
4FEC 0E6E          M                 movlw   C
4FEE 6EE6          M                 movwf   POSTINC1
               00710         M_WRITE_BYTE 'd'
4FF0 0E64          M                 movlw   C
4FF2 6EE6          M                 movwf   POSTINC1
               00711         M_WRITE_BYTE 's'
4FF4 0E73          M                 movlw   C
4FF6 6EE6          M                 movwf   POSTINC1
               00712         M_WRITE_BYTE 0x0                ; write string \0
4FF8 0E00          M                 movlw   C
4FFA 6EE6          M                 movwf   POSTINC1
4FFC EF17 F032 00713         goto    caml_raise_ia
               00714 #endif
               00715 
               00716 #ifdef caml_useprim_caml_array_set_float
               00717 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00718 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00719 #endif
5000 00720 caml_array_set_float:
               00721         ;; ACCU = tbl
               00722         ;; [0x2]:[0x1] = ind
               00723         ;; [0x4]:[0x3] = val
5000 EB03 FFE9 00724         movsf   [0x3], FSR0L            ; TMP_REG_2:1 <- *val
5004 EB04 FFEA 00725         movsf   [0x4], FSR0H
5008 CFEE FF68 00726         movff   POSTINC0, TMP_REG_1
500C CFEE FF69 00727         movff   POSTINC0, TMP_REG_2
5010 CFEE FF6A 00728         movff   POSTINC0, TMP_REG_3
5014 CFEF FF6B 00729         movff   INDF0, TMP_REG_4
5018 CF56 FFE9 00730         movff   ACCUL, FSR0L            ; FSR0 <- ACCU
501C CF57 FFEA 00731         movff   ACCUH, FSR0H
5020 E901      00732         subfsr  FSR0, 0x1
5022 5002      00733         movf    [0x2], W        ; C <- LSB(indH)
5024 E1AB      00734         bnz     caml_raise_ia_index_out_of_bounds
5026 0401      00735         decf    [0x1], W        ; W <- 2 * ind
5028 64EE      00736         cpfsgt  POSTINC0        ; size > ind ? FSR0++
502A D7A8      00737         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
502C 0401      00738         decf    [0x1], W        ; FSR0 += 2 * ind
502E 26E9      00739         addwf   FSR0L, F
5030 5002      00740         movf    [0x2], W
5032 22EA      00741         addwfc  FSR0H, F
5034 0401      00742         decf    [0x1], W
5036 26E9      00743         addwf   FSR0L, F
5038 5002      00744         movf    [0x2], W
503A 22EA      00745         addwfc  FSR0H, F
503C CF68 FFEE 00746         movff   TMP_REG_1, POSTINC0     ; write the float
5040 CF69 FFEE 00747         movff   TMP_REG_2, POSTINC0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5044 CF6A FFEE 00748         movff   TMP_REG_3, POSTINC0
5048 CF6B FFEF 00749         movff   TMP_REG_4, INDF0
               00750         M_CONST 0                       ; return ()
504C 0E01          M                 movlw   2 * N + 1
504E 6F56          M                 movwf   ACCUL
5050 6B57          M                 clrf    ACCUH
5052 0012      00751         return
               00752 #endif
               00753 
               00754 
               00755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00756 ;;;;;;;;                                   ;;;;;;;;
               00757 ;;;;;;;;              HASH                 ;;;;;;;;
               00758 ;;;;;;;;                                   ;;;;;;;;
               00759 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00760 
               00761 #ifdef caml_useprim_caml_hash_univ_param
               00762 caml_hash_univ_param:
               00763         ;; ACCU = count
               00764         ;; [0x2]:[0x1] = limit
               00765         ;; [0x4]:[0x3] = obj
               00766         movff   ACCUL, TMP_REG_7 ; TMP_REG_8:7 <- count * 2 + 1
               00767         movff   ACCUH, TMP_REG_8
               00768         bcf     STATUS, C        ; TMP_REG_A:9 <- limit + 1
               00769         rrcf    [0x2], W
               00770         movwf   TMP_REG_A
               00771         rrcf    [0x1], W
               00772         movwf   TMP_REG_9
               00773         infsnz  TMP_REG_9, F
               00774         incf    TMP_REG_A, F
               00775         movsf   [0x4], FSR0H     ; FSR0 <- obj
               00776         movsf   [0x3], FSR0L
               00777         movff   FSR2H, TMP_REG_6 ; TMP_REG_6:5 <- FSR2
               00778         movff   FSR2L, TMP_REG_5
               00779         clrf    ACCUH            ; ACCU <- 0
               00780         clrf    ACCUL
               00781 caml_hash_univ_param_beg:
               00782         btfss   FSR0L, 0         ; isint(ACCU) ?
               00783         bra     caml_hash_univ_param_block ; no -> goto block
               00784         movf    FSR0L, W         ; yes -> hash(int)
               00785         rcall   caml_hash_univ_param_routine
               00786         movf    FSR0H, W
               00787         rcall   caml_hash_univ_param_routine
               00788 caml_hash_univ_param_back:
               00789         movf    FSR2L, W         ; check stack top
               00790         cpfseq  TMP_REG_5
               00791         bra     caml_hash_univ_param_pop
               00792         movf    FSR2H, W
               00793         cpfslt  TMP_REG_6
               00794         bra     caml_hash_univ_param_return
               00795 caml_hash_univ_param_pop:        ; go backward
               00796         movff   PREINC2, TMP_REG_B
               00797         movff   PREINC2, FSR0L
               00798         movff   PREINC2, FSR0H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00799         bra     caml_hash_univ_param_loop
               00800 caml_hash_univ_param_block:
               00801         subfsr  FSR0, 0x2        ; FSR0 <- @tag
               00802         movf    POSTINC0, W      ; W <- tag ; FSR0 ++
               00803         xorlw   STRING_TAG       ; string ?
               00804         bz      caml_hash_univ_param_data
               00805         xorlw   (DOUBLE_TAG ^ STRING_TAG)         ; float ?
               00806         bz      caml_hash_univ_param_data
               00807         xorlw   (DOUBLE_ARRAY_TAG ^ DOUBLE_TAG)   ; float[] ?
               00808         bz      caml_hash_univ_param_data
               00809         xorlw   (ABSTRACT_TAG ^ DOUBLE_ARRAY_TAG) ; abstract ?
               00810         bz      caml_hash_univ_param_back
               00811         xorlw   (INFIX_TAG ^ ABSTRACT_TAG)        ; infix ?
               00812         bz      caml_hash_univ_param_infix
               00813         xorlw   (FORWARD_TAG ^ INFIX_TAG)         ; forward ?
               00814         bz      caml_hash_univ_param_forward
               00815         xorlw   (OBJECT_TAG ^ FORWARD_TAG)        ; object ?
               00816         bz      caml_hash_univ_param_object
               00817         xorlw   (CUSTOM_TAG ^ OBJECT_TAG)         ; custom ?
               00818         bz      caml_hash_univ_param_custom
               00819 caml_hash_univ_param_beg_loop:
               00820         rcall   caml_hash_univ_param_routine    ; hash(tag)
               00821         movff   POSTINC0, TMP_REG_B             ; TMP_REG_B <- size
               00822 caml_hash_univ_param_loop:
               00823         decf    TMP_REG_9, F                    ; check limit
               00824         bnz     caml_hash_univ_param_loop_continue
               00825         decf    TMP_REG_A, F
               00826         bz      caml_hash_univ_param_popstop
               00827 caml_hash_univ_param_loop_continue:
               00828         movf    TMP_REG_B, W                    ; last field ?
               00829         bz      caml_hash_univ_param_back       ; yes -> go back
               00830         movf    POSTINC0, W                     ; isint(field) ?
               00831         btfss   WREG, 0
               00832         bra     caml_hash_univ_param_loop_block ; no -> goto loop_block
               00833         rcall   caml_hash_univ_param_routine    ; yes -> hash(int)
               00834         movf    POSTINC0, W
               00835         rcall   caml_hash_univ_param_routine
               00836         decf    TMP_REG_B, F                    ; size --;
               00837         bra     caml_hash_univ_param_loop       ; loop
               00838 caml_hash_univ_param_loop_block:
               00839         movwf   TMP_REG_C                       ; TMP_REG_C <- fieldL
               00840         dcfsnz  TMP_REG_B, F                    ; size --; if size = 0
               00841         bra     caml_hash_univ_param_loop_block_last ; then goto loop_block_last
               00842         subfsr  FSR2, 3                         ; push3
               00843         movlw   (STACK_END - 0x1)               ; check STACK OVERFLOW
               00844         cpfsgt  FSR2H
               00845         goto    caml_raise_stack_overflow
               00846         movf    TMP_REG_B, W                    ; push (size, FSR0)
               00847         movwf   [0x1]
               00848         movf    FSR0L, W
               00849         movwf   [0x2]
               00850         movf    FSR0H, W
               00851         movwf   [0x3]
               00852 caml_hash_univ_param_loop_block_last:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00853         movf    INDF0, W                        ; forward
               00854         movwf   FSR0H
               00855         movff   TMP_REG_C, FSR0L
               00856         bra     caml_hash_univ_param_beg
               00857 caml_hash_univ_param_data:                      ; hash all data block
               00858         incf    POSTINC0, W                     ; TMP_REG_C <- size + 1
               00859         movwf   TMP_REG_C
               00860         rcall   caml_hash_univ_param_routine    ; hash(size)
               00861 caml_hash_univ_param_data_loop:
               00862         dcfsnz  TMP_REG_C, F                    ; if TMP_REG_C -- = 0
               00863         bra     caml_hash_univ_param_back       ; then go back
               00864         movf    POSTINC0, W                     ; hash fieldL
               00865         rcall   caml_hash_univ_param_routine
               00866         movf    POSTINC0, W                     ; hash fieldH
               00867         rcall   caml_hash_univ_param_routine
               00868         bra     caml_hash_univ_param_data_loop  ; loop
               00869 caml_hash_univ_param_infix:
               00870         movf    INDF0, W        ; FSR0 -= 2 * (*FSR0)
               00871         subwf   FSR0L, F
               00872         btfss   STATUS, C
               00873         decf    FSR0H, F
               00874         subwf   FSR0L, F
               00875         btfss   STATUS, C
               00876         decf    FSR0H, F
               00877         bra     caml_hash_univ_param_beg_loop
               00878 caml_hash_univ_param_forward:
               00879         addfsr  FSR0, 1             ; FSR0++
               00880         movff   POSTINC0, TMP_REG_C ; FSR0 <- *FSR0
               00881         movf    INDF0, W
               00882         movwf   FSR0H
               00883         movff   TMP_REG_C, FSR0L
               00884         bra     caml_hash_univ_param_beg ; hash forwarded
               00885 caml_hash_univ_param_object:
               00886         addfsr  FSR0, 3         ; FSR0 += 3
               00887         movf    POSTINC0, W     ; hash(object_id)
               00888         rcall   caml_hash_univ_param_routine
               00889         movf    INDF0, W
               00890         rcall   caml_hash_univ_param_routine
               00891         bra     caml_hash_univ_param_back ; go back
               00892 caml_hash_univ_param_custom:
               00893         movff   ACCUL, TMP_REG_D ; save counter
               00894         movff   ACCUH, TMP_REG_E
               00895         addfsr  FSR0, 0x1        ; FSR0 <- @
               00896         movff   FSR0L, ACCUL     ; ACCU <- @
               00897         movff   FSR0H, ACCUH
               00898         movlw   0x2              ; PRODL <- hash custom index (2)
               00899         movwf   PRODL
               00900         movf    POSTINC0, W      ; call custom indirection table
               00901         movff   INDF0, PCLATH
               00902         callw
               00903         movf    ACCUL, W         ; restore ACCU and hash result
               00904         movff   TMP_REG_D, ACCUL
               00905         movwf   TMP_REG_D
               00906         movf    ACCUH, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00907         movff   TMP_REG_E, ACCUH
               00908         rcall   caml_hash_univ_param_routine
               00909         movf    TMP_REG_D, W
               00910         rcall   caml_hash_univ_param_routine
               00911         bra     caml_hash_univ_param_back ; go back
               00912 caml_hash_univ_param_popstop:
               00913         pop
               00914 caml_hash_univ_param_stop:
               00915         movff   TMP_REG_5, FSR2L
               00916         movff   TMP_REG_6, FSR2H
               00917 caml_hash_univ_param_return:
               00918         bcf     ACCUH, 7
               00919         bsf     ACCUL, 0
               00920         return
               00921 caml_hash_univ_param_routine:
               00922         decf    TMP_REG_7, F
               00923         bnz     caml_hash_univ_param_routine_continue
               00924         decf    TMP_REG_8, F
               00925         bz      caml_hash_univ_param_popstop
               00926 caml_hash_univ_param_routine_continue:
               00927         addwf   ACCUL, F
               00928         btfsc   STATUS, C
               00929         incf    ACCUH, F
               00930         movlw   0xDF
               00931         mulwf   ACCUL
               00932         movff   PRODL, ACCUL
               00933         movf    PRODH, W
               00934         addwf   ACCUH, F
               00935         return
               00936 #endif
               00937 
               00938         
               00939 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00940 ;;;;;;;;                                   ;;;;;;;;
               00941 ;;;;;;;;               OBJ                 ;;;;;;;;
               00942 ;;;;;;;;                                   ;;;;;;;;
               00943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00944 
               00945 #ifdef caml_useprim_caml_obj_dup
               00946 caml_obj_dup:
               00947         ;; ACCU = obj
               00948         movff   ACCUL, FSR0L
               00949         movff   ACCUH, FSR0H
               00950         subfsr  FSR0, 0x1
               00951         movf    POSTDEC0, W
               00952         bz      caml_obj_dup_end
               00953         movwf   TABLAT
               00954         call    _CHECK_UNFULL_HEAP_GEN
               00955         movff   ACCUL, FSR0L
               00956         movff   ACCUH, FSR0H
               00957         subfsr  FSR0, 0x2
               00958         movff   POSTINC0, POSTINC1 ; copy tag
               00959         movff   POSTINC0, POSTINC1 ; copy size
               00960         movff   FSR1L, ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00961         movff   FSR1H, ACCUH
               00962 caml_obj_dup_loop:
               00963         movff   POSTINC0, POSTINC1 ; copy 1 element
               00964         movff   POSTINC0, POSTINC1
               00965         decfsz  TABLAT, F          ; loop size times
               00966         bra     caml_obj_dup_loop
               00967 caml_obj_dup_end:
               00968         return
               00969 #endif
               00970 
               00971 #ifdef caml_useprim_caml_obj_block
               00972 caml_obj_block:
               00973         ;; ACCU = tag
               00974         ;; [0x2]:[0x1] = size
               00975         rrcf    [0x2], W        ; check allocation
               00976         rrcf    [0x1], W
               00977         bz      caml_obj_block_atom
               00978         movwf   TABLAT
               00979         call    _CHECK_UNFULL_HEAP_GEN
               00980         rrcf    ACCUH, W        ; write tag
               00981         rrcf    ACCUL, W
               00982         movwf   POSTINC1
               00983         rrcf    [0x2], W        ; write size
               00984         rrcf    [0x1], W
               00985         movwf   POSTINC1
               00986         movff   FSR1L, ACCUL
               00987         movff   FSR1H, ACCUH
               00988 caml_obj_block_loop:            ; fill with unit
               00989         clrf    INDF1
               00990         bsf     POSTINC1, 0
               00991         clrf    POSTINC1
               00992         decfsz  WREG, F         ; loop size times
               00993         bra     caml_obj_block_loop
               00994         return
               00995 caml_obj_block_atom:
               00996         M_ATOM0
               00997         return
               00998 #endif
               00999 
               01000 #ifdef caml_useprim_caml_obj_set_tag
               01001 caml_obj_set_tag:
               01002         ;; ACCU = obj
               01003         ;; [0x2]:[0x1] = tag
               01004         movff   ACCUL, FSR0L    ; FSR0 <- obj
               01005         movff   ACCUH, FSR0H
               01006         subfsr  FSR0, 0x2       ; FSR0 <- @old_tag
               01007         rrcf    [0x2], W        ; W <- new_tag
               01008         rrcf    [0x1], W
               01009         movwf   INDF0           ; write new_tag
               01010         return
               01011 #endif
               01012 
               01013 #ifdef caml_useprim_caml_obj_tag
               01014 caml_obj_tag:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01015         btfsc   ACCUL, 0                ; is int ?
               01016         bra     caml_obj_tag_int        ; yes -> return Int
               01017         movf    ACCUH, W                ; in heap ?
               01018         subwf   CUR_HEAP_END, W
               01019         bnc     caml_obj_tag_out_of_memory ; no -> return Out_of_heap
               01020         addlw   -HEAP_SIZE
               01021         bc      caml_obj_tag_out_of_memory ; no -> return Out_of_heap
               01022         movff   ACCUL, FSR0L            ; FSR0 <- obj
               01023         movff   ACCUH, FSR0H
               01024         subfsr  FSR0, 0x2               ; FSR0 <- @tag
               01025         clrf    ACCUH                   ; ACCU <- tag
               01026         bsf     STATUS, C
               01027         rlcf    INDF0, W
               01028         rlcf    ACCUH, F
               01029         movwf   ACCUL
               01030         return
               01031 caml_obj_tag_int:
               01032         movlw   low ((OBJ_TAG_INT * 0x2) + 0x1)
               01033         movwf   ACCUL
               01034         movlw   high ((OBJ_TAG_INT * 0x2) + 0x1)
               01035         movwf   ACCUH
               01036         return
               01037 caml_obj_tag_out_of_memory:
               01038         movlw   low ((OBJ_TAG_OUT_OF_MEMORY * 0x2) + 0x1)
               01039         movwf   ACCUL
               01040         movlw   high ((OBJ_TAG_OUT_OF_MEMORY * 0x2) + 0x1)
               01041         movwf   ACCUH
               01042         return
               01043 #endif
               01044 
               01045 #ifdef caml_useprim_caml_obj_is_block
               01046 caml_obj_is_block:
               01047         movlw   0x1
               01048         btfss   ACCUL, 0
               01049         movlw   0x3
               01050         movwf   ACCUL
               01051         clrf    ACCUH
               01052         return
               01053 #endif
               01054 
               01055 #ifdef caml_useprim_caml_obj_truncate
               01056 #ifndef caml_useprim_caml_raise_ia_obj_truncate
               01057 #define caml_useprim_caml_raise_ia_obj_truncate
               01058 #endif
               01059 caml_obj_truncate:
               01060         ;; ACCU = obj
               01061         ;; [0x2]:[0x1] = size
               01062         movff   ACCUL, FSR0L    ; FSR0 <- obj
               01063         movff   ACCUH, FSR0H
               01064         subfsr  FSR0, 0x1       ; FSR0 <- @old_size
               01065         bcf     STATUS, C       ; W <- new_size
               01066         rrcf    [0x2], W
               01067         bnz     caml_raise_ia_obj_truncate ; if new_size > 255 -> raise
               01068         rrcf    [0x1], W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01069         bz      caml_raise_ia_obj_truncate ; if new_size = 0 -> raise
               01070         subwf   INDF0, W        ; W <- old_size - new_size
               01071         bnc     caml_raise_ia_obj_truncate ; if new_s > old_s -> raise
               01072         subwf   INDF0, F        ; write (old_size - (old_size - new_size))
               01073         return
               01074 #endif
               01075 
               01076 #ifdef caml_useprim_caml_raise_ia_obj_truncate
               01077 #ifndef caml_useprim_caml_raise_ia
               01078 #define caml_useprim_caml_raise_ia
               01079 #endif
               01080 caml_raise_ia_obj_truncate:
               01081         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
               01082         M_WRITE_BYTE STRING_TAG         ; write string tag
               01083         M_WRITE_BYTE 0x7                ; write string size
               01084         movff   FSR1L, TMP_REG_1        ; mem string addr
               01085         movff   FSR1H, TMP_REG_2
               01086         M_WRITE_BYTE 'O'                ; write string content
               01087         M_WRITE_BYTE 'b'
               01088         M_WRITE_BYTE 'j'
               01089         M_WRITE_BYTE '.'
               01090         M_WRITE_BYTE 't'
               01091         M_WRITE_BYTE 'r'
               01092         M_WRITE_BYTE 'u'
               01093         M_WRITE_BYTE 'n'
               01094         M_WRITE_BYTE 'c'
               01095         M_WRITE_BYTE 'a'
               01096         M_WRITE_BYTE 't'
               01097         M_WRITE_BYTE 'e'
               01098         M_WRITE_BYTE 0x0                ; write string \0\1
               01099         M_WRITE_BYTE 0x1
               01100         goto    caml_raise_ia
               01101 #endif
               01102 
               01103 
               01104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01105 ;;;;;;;;                                   ;;;;;;;;
               01106 ;;;;;;;;                GC                 ;;;;;;;;
               01107 ;;;;;;;;                                   ;;;;;;;;
               01108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01109 
               01110 #ifdef caml_useprim_caml_heap_size
               01111 caml_heap_size:
               01112         movlw   low (((HEAP_SIZE * 0x100) * 0x2) + 0x1)
               01113         movwf   ACCUL
               01114         movlw   high (((HEAP_SIZE * 0x100) * 0x2) + 0x1)
               01115         movwf   ACCUH
               01116         return
               01117 #endif
               01118 
               01119 #ifdef caml_useprim_caml_stack_size
               01120 caml_stack_size:
               01121         movlw   low (((STACK_ANCHOR - 0xEFF) + (STACK_SIZE * 0x100)) + 0x1)
               01122         movwf   ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01123         movlw   high (((STACK_ANCHOR - 0xEFF) + (STACK_SIZE * 0x100)) + 0x1)
               01124         movwf   ACCUH
               01125         return
               01126 #endif
               01127 
               01128 #ifdef caml_useprim_caml_heap_occupation
               01129 caml_heap_occupation:
               01130         movf    CUR_HEAP_END, W
               01131         addlw   (-HEAP_SIZE + 0x1)
               01132         subwf   FSR1H, W
               01133         movwf   ACCUH
               01134         bsf     STATUS, C
               01135         rlcf    FSR1L, W
               01136         movwf   ACCUL
               01137         rlcf    ACCUH, F
               01138         return
               01139 #endif
               01140 
               01141 #ifdef caml_useprim_caml_stack_occupation
               01142 caml_stack_occupation:
               01143         movf    FSR2L, W
               01144         sublw   low (STACK_ANCHOR + 0x1)
               01145         movwf   ACCUL
               01146         movlw   high (STACK_ANCHOR + 0x1)
               01147         subfwb  FSR2H, W
               01148         movwf   ACCUH
               01149         bsf     ACCUL, 0
               01150         return
               01151 #endif
               01152 
               01153 #ifdef caml_useprim_caml_running_number
               01154 caml_running_number:
               01155         bsf     STATUS, C
               01156         rlcf    GC_COUNTER_L, W
               01157         movwf   ACCUL
               01158         rlcf    GC_COUNTER_H, W
               01159         movwf   ACCUH
               01160         return
               01161 #endif
               01162 
               01163 #ifdef caml_useprim_caml_gc_run
               01164 caml_gc_run:
               01165         goto    caml_gc_exec
               01166 #endif
               01167 
               01168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01169 ;;;;;;;;                                   ;;;;;;;;
               01170 ;;;;;;;;              RANDOM               ;;;;;;;;
               01171 ;;;;;;;;                                   ;;;;;;;;
               01172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01173 
               01174 #ifdef caml_useprim_caml_random_bits
               01175 #ifndef caml_useprim_caml_random_round
               01176 #define caml_useprim_caml_random_round
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01177 #endif
               01178 caml_random_bits:
               01179         rcall   caml_random_round
               01180         movff   RAND_CUR_L, ACCUL
               01181         movff   RAND_CUR_H, ACCUH
               01182         bsf     ACCUL, 0
               01183         bcf     ACCUH, 7
               01184         return
               01185 #endif
               01186 
               01187 #ifdef caml_useprim_caml_random_bool
               01188 #ifndef caml_useprim_caml_random_round
               01189 #define caml_useprim_caml_random_round
               01190 #endif
               01191 caml_random_bool:
               01192         rcall   caml_random_round
               01193         clrf    ACCUH
               01194         movf    RAND_CUR_L, W
               01195         andlw   0x03
               01196         iorlw   0x01
               01197         movwf   ACCUL
               01198         return
               01199 #endif
               01200 
               01201 #ifdef caml_useprim_caml_random_round
               01202 caml_random_round:
               01203         movlw   0x4
               01204         movwf   TMP_REG_1
               01205 caml_random_round_loop:
               01206         movff   RAND_CUR_L, FSR0L
               01207         movf    RAND_CUR_H, W
               01208         iorlw   0xF0
               01209         incfsz  WREG, W
               01210         decf    WREG, W
               01211         movwf   FSR0H
               01212         movf    POSTINC0, W
               01213         xorlw   0xAA
               01214         xorwf   RAND_CUR_L, F
               01215         movf    POSTINC0, W
               01216         xorlw   0xAA
               01217         xorwf   RAND_CUR_H, F
               01218         swapf   RAND_CUR_L, F
               01219         swapf   RAND_CUR_H, F
               01220         rlcf    RAND_CUR_L, W
               01221         rlcf    RAND_CUR_H, F
               01222         rlcf    RAND_CUR_L, F
               01223         movlw   .223
               01224         addwf   RAND_CUR_L, F
               01225         addwf   RAND_CUR_H, F
               01226         decfsz  TMP_REG_1, F
               01227         bra     caml_random_round_loop
               01228         return
               01229 #endif
               01230 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01231 
               01232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01233 ;;;;;;;;                                   ;;;;;;;;
               01234 ;;;;;;;;            SFR ACCESS             ;;;;;;;;
               01235 ;;;;;;;;                                   ;;;;;;;;
               01236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01237 
               01238 #ifdef caml_useprim_caml_pic_write_reg
5054 01239 caml_pic_write_reg:
5054 80D8      01240         bsf     STATUS, C       ; FSR0 <- 0x0F70 | (ACCUL >> 1)
5056 3156      01241         rrcf    ACCUL, W
5058 6EE9      01242         movwf   FSR0L
505A 68EA      01243         setf    FSR0H
505C 3002      01244         rrcf    [0x2], W        ; STATUS.C ignored
505E 3001      01245         rrcf    [0x1], W        ; INDF0 <- stack[0] >> 1
5060 6EEF      01246         movwf   INDF0
               01247         M_CONST 0
5062 0E01          M                 movlw   2 * N + 1
5064 6F56          M                 movwf   ACCUL
5066 6B57          M                 clrf    ACCUH
5068 0012      01248         return
               01249 #endif
               01250 
               01251 #ifdef caml_useprim_caml_pic_read_reg
506A 01252 caml_pic_read_reg:
506A 80D8      01253         bsf     STATUS, C       ; FSR0 <- 0x0F70 | (ACCUL >> 1)
506C 3156      01254         rrcf    ACCUL, W
506E 6EE9      01255         movwf   FSR0L
5070 68EA      01256         setf    FSR0H
5072 34EF      01257         rlcf    INDF0, W        ; ACCU <- (INDF0 << 1) | 1
5074 6F56      01258         movwf   ACCUL
5076 3757      01259         rlcf    ACCUH, F
5078 0012      01260         return
               01261 #endif
               01262 
               01263 #ifdef caml_useprim_caml_pic_set_bit
507A 01264 caml_pic_set_bit:
507A 80D8      01265         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
507C 3156      01266         rrcf    ACCUL, W
507E 6EE9      01267         movwf   FSR0L
5080 68EA      01268         setf    FSR0H
5082 50EF      01269         movf    INDF0, W        ; INDF0 <- INDF0 | ACCUH
5084 1157      01270         iorwf   ACCUH, W
5086 6EEF      01271         movwf   INDF0
               01272         M_CONST 0
5088 0E01          M                 movlw   2 * N + 1
508A 6F56          M                 movwf   ACCUL
508C 6B57          M                 clrf    ACCUH
508E 0012      01273         return
               01274 #endif
               01275 
               01276 #ifdef caml_useprim_caml_pic_clear_bit
5090 01277 caml_pic_clear_bit:
5090 80D8      01278         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5092 3156      01279         rrcf    ACCUL, W
5094 6EE9      01280         movwf   FSR0L
5096 68EA      01281         setf    FSR0H
5098 1F57      01282         comf    ACCUH, F        ; INDF0 <- INDF0 & ~ACCUH
509A 50EF      01283         movf    INDF0, W
509C 1557      01284         andwf   ACCUH, W
509E 6EEF      01285         movwf   INDF0
               01286         M_CONST 0
50A0 0E01          M                 movlw   2 * N + 1
50A2 6F56          M                 movwf   ACCUL
50A4 6B57          M                 clrf    ACCUH
50A6 0012      01287         return
               01288 #endif
               01289 
               01290 #ifdef caml_useprim_caml_pic_test_bit
50A8 01291 caml_pic_test_bit:
50A8 80D8      01292         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
50AA 3156      01293         rrcf    ACCUL, W
50AC 6EE9      01294         movwf   FSR0L
50AE 68EA      01295         setf    FSR0H
50B0 5157      01296         movf    ACCUH, W        ; INDF0 & ACCUH
50B2 14EF      01297         andwf   INDF0, W
50B4 0E01      01298         movlw   0x1             ; ACCU <- if Z then 1 else 3
50B6 A4D8      01299         btfss   STATUS, Z
50B8 0E03      01300         movlw   0x3
50BA 6F56      01301         movwf   ACCUL
50BC 6B57      01302         clrf    ACCUH
50BE 0012      01303         return
               01304 #endif
               01305 
               01306 #ifdef caml_useprim_caml_pic_tris_of_port
50C0 01307 caml_pic_tris_of_port:
50C0 0E12      01308         movlw   ((0x2 * LATA) & 0xFF)
50C2 6156      01309         cpfslt  ACCUL
50C4 0FEE      01310         addlw   (0x2 * (PORTA - LATA))
50C6 0F12      01311         addlw   ((0x2 * (TRISA - PORTA) - (0x2 * LATA)) & 0xFF)
50C8 2756      01312         addwf   ACCUL, F
50CA 0012      01313         return
               01314 #endif
               01315 
               01316 
               01317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01318 ;;;;;;;;                                   ;;;;;;;;
               01319 ;;;;;;;;             FORMATS               ;;;;;;;;
               01320 ;;;;;;;;                                   ;;;;;;;;
               01321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01322 
               01323 #ifdef caml_useprim_caml_int_of_string
               01324 #ifndef caml_useprim_caml_raise_ios_failure
50CC 01325 #define caml_useprim_caml_raise_ios_failure
               01326 #endif
50CC 01327 caml_int_of_string:
50CC CF56 FFE9 01328         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
50D0 CF57 FFEA 01329         movff   ACCUH, FSR0H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
50D4 6B56      01330         clrf    ACCUL           ; ACCU <- 0
50D6 6B57      01331         clrf    ACCUH
50D8 50EE      01332         movf    POSTINC0, W
50DA E079      01333         bz      caml_raise_ios_failure
50DC 082D      01334         sublw   '-'             ; W <- '-' - str[0]
50DE 916C      01335         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = 0  <=>  res >= 0
50E0 E102      01336         bnz     caml_int_of_string_sign_tested
50E2 816C      01337         bsf     TMP_REG_5, 0
50E4 50EE      01338         movf    POSTINC0, W
50E6 01339 caml_int_of_string_sign_tested:
50E6 08FD      01340         sublw   ('-' - '0')     ; W <- str[0] - '0'
50E8 E10F      01341         bnz     caml_int_of_string_dec
50EA 50EE      01342         movf    POSTINC0, W     ; W <- str[1]
50EC E06E      01343         bz      caml_int_of_string_return_zero
50EE 0878      01344         sublw   'x'             ; W <- 'x' - str[1]
50F0 E03E      01345         bz      caml_int_of_string_hex
50F2 0820      01346         sublw   ('x' - 'X')     ; W <- str[1] - 'X'
50F4 E03C      01347         bz      caml_int_of_string_hex
50F6 080A      01348         sublw   ('b' - 'X')     ; W <- 'b' - str[1]
50F8 E02E      01349         bz      caml_int_of_string_bin
50FA 0820      01350         sublw   ('b' - 'B')     ; W <- str[1] - 'B'
50FC E02C      01351         bz      caml_int_of_string_bin
50FE 082D      01352         sublw   ('o' - 'B')     ; W <- 'o' - str[1]
5100 E014      01353         bz      caml_int_of_string_oct
5102 0820      01354         sublw   ('o' - 'O')     ; W <- str[1] - 'O'
5104 E012      01355         bz      caml_int_of_string_oct
5106 0F1F      01356         addlw   ('O' - '0')     ; W <- str[1] - '0'
5108 01357 caml_int_of_string_dec:
5108 0809      01358         sublw   ('9' - '0')     ; W <- ('9' - '0') - (c - '0')
510A E361      01359         bnc     caml_raise_ios_failure
510C 0809      01360         sublw   ('9' - '0')     ; W <- ('9' - '0') - ('9' - c)
510E E35F      01361         bnc     caml_raise_ios_failure
5110 6F68      01362         movwf   TMP_REG_1
5112 5156      01363         movf    ACCUL, W
5114 0D0A      01364         mullw   .10
5116 5168      01365         movf    TMP_REG_1, W
5118 24F3      01366         addwf   PRODL, W
511A 6F56      01367         movwf   ACCUL
511C 50F4      01368         movf    PRODH, W
511E 2357      01369         addwfc  ACCUH, F
5120 E656      01370         bn      caml_raise_ios_failure
5122 50EE      01371         movf    POSTINC0, W     ; W <- str[i++]
5124 E048      01372         bz      caml_int_of_string_return
5126 0FD0      01373         addlw   (-'0')          ; W <- c - '0'
5128 D7EF      01374         bra     caml_int_of_string_dec
512A 01375 caml_int_of_string_oct:
512A 50EE      01376         movf    POSTINC0, W     ; W <- str[i++]
512C E050      01377         bz      caml_raise_ios_failure
512E 01378 caml_int_of_string_oct_loop:
512E 0FD0      01379         addlw   (-'0')          ; W <- c - '0'
5130 3AE8      01380         swapf   WREG, F
5132 46E8      01381         rlncf   WREG, F
5134 36E8      01382         rlcf    WREG, F
5136 3756      01383         rlcf    ACCUL, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5138 3757      01384         rlcf    ACCUH, F
513A E649      01385         bn      caml_raise_ios_failure
513C 36E8      01386         rlcf    WREG, F
513E 3756      01387         rlcf    ACCUL, F
5140 3757      01388         rlcf    ACCUH, F
5142 E645      01389         bn      caml_raise_ios_failure
5144 36E8      01390         rlcf    WREG, F
5146 3756      01391         rlcf    ACCUL, F
5148 3757      01392         rlcf    ACCUH, F
514A E641      01393         bn      caml_raise_ios_failure
514C 0BF8      01394         andlw   B'11111000'     ; check range
514E E13F      01395         bnz     caml_raise_ios_failure
5150 50EE      01396         movf    POSTINC0, W     ; W <- str[i++]
5152 E1ED      01397         bnz     caml_int_of_string_oct_loop
5154 D030      01398         bra     caml_int_of_string_return
5156 01399 caml_int_of_string_bin:
5156 50EE      01400         movf    POSTINC0, W     ; W <- str[i++]
5158 E03A      01401         bz      caml_raise_ios_failure
515A 01402 caml_int_of_string_bin_loop:
515A 0FD0      01403         addlw   (-'0')          ; W <- c - '0'
515C 32E8      01404         rrcf    WREG, F
515E 3756      01405         rlcf    ACCUL, F
5160 3757      01406         rlcf    ACCUH, F
5162 E635      01407         bn      caml_raise_ios_failure
5164 0B7F      01408         andlw   B'01111111'     ; check range
5166 E133      01409         bnz     caml_raise_ios_failure
5168 50EE      01410         movf    POSTINC0, W     ; W <- str[i++]
516A E1F7      01411         bnz     caml_int_of_string_bin_loop
516C D024      01412         bra     caml_int_of_string_return
516E 01413 caml_int_of_string_hex:
516E 50EE      01414         movf    POSTINC0, W     ; W <- str[i++]
5170 E02E      01415         bz      caml_raise_ios_failure
5172 01416 caml_int_of_string_hex_loop:
5172 0FD0      01417         addlw   (-'0')          ; W <- c - '0'
5174 E32C      01418         bnc     caml_raise_ios_failure
5176 0FF6      01419         addlw   ('0' - '9' - 1) ; W <- (c - '0') + ('0' - '9' - 1)
5178 E30A      01420         bnc     caml_int_of_string_hex_09
517A 0FF9      01421         addlw   ('9' - 'A' + 1) ; W <- (c - '9' - 1) + ('9' - 'A' + 1)
517C E328      01422         bnc     caml_raise_ios_failure
517E 0FFA      01423         addlw   ('A' - 'F' - 1) ; W <- (c - 'A') + ('A' - 'F' - 1)
5180 E305      01424         bnc     caml_int_of_string_hex_AF
5182 0FE6      01425         addlw   ('F' - 'a' + 1) ; W <- (c - 'F' - 1) + ('F' - 'a' + 1)
5184 E324      01426         bnc     caml_raise_ios_failure
5186 0FFA      01427         addlw   ('a' - 'f' - 1) ; W <- (c - 'a') + ('a' - 'f' - 1)
5188 E222      01428         bc      caml_raise_ios_failure
518A 01429 caml_int_of_string_hex_af:
518A 0F00      01430         addlw   ('f' - 'F' + 'A' - 'a')
518C 01431 caml_int_of_string_hex_AF:
518C 0F06      01432         addlw   ('F' - '9' + '0' - 'A' + .10)
518E 01433 caml_int_of_string_hex_09:
518E 0F0A      01434         addlw   ('9' - '0' + 1)
5190 01435 caml_int_of_string_hex_shift:
5190 3AE8      01436         swapf   WREG, F
5192 36E8      01437         rlcf    WREG, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5194 3756      01438         rlcf    ACCUL, F
5196 3757      01439         rlcf    ACCUH, F
5198 E61A      01440         bn      caml_raise_ios_failure
519A 36E8      01441         rlcf    WREG, F
519C 3756      01442         rlcf    ACCUL, F
519E 3757      01443         rlcf    ACCUH, F
51A0 E616      01444         bn      caml_raise_ios_failure
51A2 36E8      01445         rlcf    WREG, F
51A4 3756      01446         rlcf    ACCUL, F
51A6 3757      01447         rlcf    ACCUH, F
51A8 E612      01448         bn      caml_raise_ios_failure
51AA 36E8      01449         rlcf    WREG, F
51AC 3756      01450         rlcf    ACCUL, F
51AE 3757      01451         rlcf    ACCUH, F
51B0 E60E      01452         bn      caml_raise_ios_failure
51B2 50EE      01453         movf    POSTINC0, W
51B4 E1DE      01454         bnz     caml_int_of_string_hex_loop
51B6 01455 caml_int_of_string_return:
51B6 80D8      01456         bsf     STATUS, C
51B8 3756      01457         rlcf    ACCUL, F
51BA 3757      01458         rlcf    ACCUH, F
51BC A16C      01459         btfss   TMP_REG_5, 0    ; negate ?
51BE 0012      01460         return                  ; no -> return
51C0 1F56      01461         comf    ACCUL, F        ; yes -> ACCU <- -ACCU
51C2 1F57      01462         comf    ACCUH, F
51C4 4B56      01463         infsnz  ACCUL, F
51C6 2B57      01464         incf    ACCUH, F
51C8 0012      01465         return
51CA 01466 caml_int_of_string_return_zero:
51CA 8156      01467         bsf     ACCUL, 0
51CC 0012      01468         return
               01469 #endif
               01470 
               01471 #ifdef caml_useprim_caml_raise_ios_failure
51CE 01472 caml_raise_ios_failure:
51CE 0E01      01473         movlw   0x1                     ; erase ACCU
51D0 6F56      01474         movwf   ACCUL
51D2 6B57      01475         clrf    ACCUH
               01476         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
51D4 515E          M                 movf    CUR_HEAP_END, W
51D6 62E2          M                 cpfseq  FSR1H
51D8 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
51DA 0E16          M                 movlw   (N * 0x2 + 0x2)
51DC 24E1          M                 addwf   FSR1L, W
51DE E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
51E0 EC6D F00A     M                 call    caml_gc_exec
                   M 
51E4 515E          M                 movf    CUR_HEAP_END, W
51E6 62E2          M                 cpfseq  FSR1H
51E8 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
51EA 0E16          M                 movlw   (N * 0x2 + 0x2)
51EC 24E1          M                 addwf   FSR1L, W
51EE B0D8          M                 btfsc   STATUS, C
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
51F0 EFAC F009     M                 goto    caml_raise_out_of_memory
51F4     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000B         M CPT_CUH = CPT_CUH + 1
               01477         M_WRITE_BYTE STRING_TAG         ; write string tag
51F4 0EFC          M                 movlw   C
51F6 6EE6          M                 movwf   POSTINC1
               01478         M_WRITE_BYTE 0x7                ; write string size
51F8 0E07          M                 movlw   C
51FA 6EE6          M                 movwf   POSTINC1
51FC CFE1 FF68 01479         movff   FSR1L, TMP_REG_1        ; mem string addr
5200 CFE2 FF69 01480         movff   FSR1H, TMP_REG_2
               01481         M_WRITE_BYTE 'i'                ; write string content
5204 0E69          M                 movlw   C
5206 6EE6          M                 movwf   POSTINC1
               01482         M_WRITE_BYTE 'n'
5208 0E6E          M                 movlw   C
520A 6EE6          M                 movwf   POSTINC1
               01483         M_WRITE_BYTE 't'
520C 0E74          M                 movlw   C
520E 6EE6          M                 movwf   POSTINC1
               01484         M_WRITE_BYTE '_'
5210 0E5F          M                 movlw   C
5212 6EE6          M                 movwf   POSTINC1
               01485         M_WRITE_BYTE 'o'
5214 0E6F          M                 movlw   C
5216 6EE6          M                 movwf   POSTINC1
               01486         M_WRITE_BYTE 'f'
5218 0E66          M                 movlw   C
521A 6EE6          M                 movwf   POSTINC1
               01487         M_WRITE_BYTE '_'
521C 0E5F          M                 movlw   C
521E 6EE6          M                 movwf   POSTINC1
               01488         M_WRITE_BYTE 's'
5220 0E73          M                 movlw   C
5222 6EE6          M                 movwf   POSTINC1
               01489         M_WRITE_BYTE 't'
5224 0E74          M                 movlw   C
5226 6EE6          M                 movwf   POSTINC1
               01490         M_WRITE_BYTE 'r'
5228 0E72          M                 movlw   C
522A 6EE6          M                 movwf   POSTINC1
               01491         M_WRITE_BYTE 'i'
522C 0E69          M                 movlw   C
522E 6EE6          M                 movwf   POSTINC1
               01492         M_WRITE_BYTE 'n'
5230 0E6E          M                 movlw   C
5232 6EE6          M                 movwf   POSTINC1
               01493         M_WRITE_BYTE 'g'
5234 0E67          M                 movlw   C
5236 6EE6          M                 movwf   POSTINC1
               01494         M_WRITE_BYTE 0x0                ; write string \0
5238 0E00          M                 movlw   C
523A 6EE6          M                 movwf   POSTINC1
               01495         M_WRITE_BYTE 0x0                ; write exn tag
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
523C 0E00          M                 movlw   C
523E 6EE6          M                 movwf   POSTINC1
               01496         M_WRITE_BYTE 0x2                ; write exn size
5240 0E02          M                 movlw   C
5242 6EE6          M                 movwf   POSTINC1
5244 CFE1 FF56 01497         movff   FSR1L, ACCUL            ; ACCU <- exn
5248 CFE2 FF57 01498         movff   FSR1H, ACCUH
524C 0E05      01499         movlw   (FAILURE_IND * 0x2 + 0x1) ; write FAILURE_IND
524E 6EE6      01500         movwf   POSTINC1
5250 6AE6      01501         clrf    POSTINC1
5252 CF68 FFE6 01502         movff   TMP_REG_1, POSTINC1     ; write string addr
5256 CF69 FFE6 01503         movff   TMP_REG_2, POSTINC1
525A EFE8 F009 01504         goto    caml_extern_raise
               01505 #endif
               01506 
               01507 
               01508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01509 ;;;;;;;;                                   ;;;;;;;;
               01510 ;;;;;;;;               INT32               ;;;;;;;;
               01511 ;;;;;;;;                                   ;;;;;;;;
               01512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01513 
               01514 M_CREATE_INT32 macro
               01515 #ifndef caml_useprim_caml_int32_custom
               01516 #define caml_useprim_caml_int32_custom
               01517 #endif
               01518                 M_CHECK_UNFULL_HEAP 0x3
               01519                 setf    POSTINC1                ; write tag
               01520                 movlw   0x3
               01521                 movwf   POSTINC1                ; write size
               01522                 movff   FSR1L, ACCUL
               01523                 movff   FSR1H, ACCUH            ; ACCU <- @
               01524                 movlw   low caml_int32_custom
               01525                 movwf   POSTINC1                ; write custom @L
               01526                 movlw   high caml_int32_custom
               01527                 movwf   POSTINC1                ; write custom @H
               01528         endm
               01529 
               01530 M_PRIM_INT32_1ARG_INIT macro
               01531 #ifndef caml_useprim_caml_int32_1arg
               01532 #define caml_useprim_caml_int32_1arg
               01533 #endif
               01534                 call    caml_int32_1arg_init
               01535         endm
               01536 
               01537 M_PRIM_INT32_1ARG_END macro
               01538                 return
               01539         endm
               01540 
               01541 M_PRIM_INT32_2ARG_INIT macro
               01542 #ifndef caml_useprim_caml_int32_2arg    
               01543 #define caml_useprim_caml_int32_2arg
               01544 #endif
               01545                 call    caml_int32_2arg_init
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01546         endm
               01547 
               01548 M_PRIM_INT32_2ARG_END macro
               01549                 movff   TMP_REG_1, FSR2L
               01550                 movff   TMP_REG_2, FSR2H
               01551                 return
               01552         endm
               01553         
               01554 #ifdef caml_useprim_caml_int32_neg
525E 01555 caml_int32_neg:
               01556         M_PRIM_INT32_1ARG_INIT
                   M #ifndef caml_useprim_caml_int32_1arg
525E     M #define caml_useprim_caml_int32_1arg
                   M #endif
525E EC23 F02B     M                 call    caml_int32_1arg_init
5262 1CEE      01557         comf    POSTINC0, W     ; copy and incr lowest byte
5264 2AE8      01558         incf    WREG, F
5266 6EE6      01559         movwf   POSTINC1
5268 1CEE      01560         comf    POSTINC0, W     ; 2
526A B0D8      01561         btfsc   STATUS, C
526C 2AE8      01562         incf    WREG, F
526E 6EE6      01563         movwf   POSTINC1
5270 1CEE      01564         comf    POSTINC0, W     ; 3
5272 B0D8      01565         btfsc   STATUS, C
5274 2AE8      01566         incf    WREG, F
5276 6EE6      01567         movwf   POSTINC1
5278 1CEF      01568         comf    INDF0, W        ; 4
527A B0D8      01569         btfsc   STATUS, C
527C 2AE8      01570         incf    WREG, F
527E 6EE6      01571         movwf   POSTINC1
               01572         M_PRIM_INT32_1ARG_END
5280 0012          M                 return
               01573 #endif
               01574 
               01575 #ifdef caml_useprim_caml_int32_add
5282 01576 caml_int32_add:
               01577         M_PRIM_INT32_2ARG_INIT
                   M #ifndef caml_useprim_caml_int32_2arg    
5282     M #define caml_useprim_caml_int32_2arg
                   M #endif
5282 EC48 F02B     M                 call    caml_int32_2arg_init
5286 50DE      01578         movf    POSTINC2, W      ; 1
5288 24EE      01579         addwf   POSTINC0, W
528A 6EE6      01580         movwf   POSTINC1
528C 50DE      01581         movf    POSTINC2, W      ; 2
528E 20EE      01582         addwfc  POSTINC0, W
5290 6EE6      01583         movwf   POSTINC1
5292 50DE      01584         movf    POSTINC2, W      ; 3
5294 20EE      01585         addwfc  POSTINC0, W
5296 6EE6      01586         movwf   POSTINC1
5298 50DF      01587         movf    INDF2, W         ; 4
529A 20EF      01588         addwfc  INDF0, W
529C 6EE6      01589         movwf   POSTINC1
               01590         M_PRIM_INT32_2ARG_END
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
529E CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
52A2 CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
52A6 0012          M                 return
               01591 #endif
               01592 
               01593 #ifdef caml_useprim_caml_int32_sub
52A8 01594 caml_int32_sub:
               01595         M_PRIM_INT32_2ARG_INIT
                   M #ifndef caml_useprim_caml_int32_2arg    
                   M #define caml_useprim_caml_int32_2arg
                   M #endif
52A8 EC48 F02B     M                 call    caml_int32_2arg_init
52AC 50DE      01596         movf    POSTINC2, W      ; 1
52AE 5CEE      01597         subwf   POSTINC0, W
52B0 6EE6      01598         movwf   POSTINC1
52B2 50DE      01599         movf    POSTINC2, W      ; 2
52B4 58EE      01600         subwfb  POSTINC0, W
52B6 6EE6      01601         movwf   POSTINC1
52B8 50DE      01602         movf    POSTINC2, W      ; 3
52BA 58EE      01603         subwfb  POSTINC0, W
52BC 6EE6      01604         movwf   POSTINC1
52BE 50DF      01605         movf    INDF2, W         ; 4
52C0 58EF      01606         subwfb  INDF0, W
52C2 6EE6      01607         movwf   POSTINC1
               01608         M_PRIM_INT32_2ARG_END
52C4 CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
52C8 CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
52CC 0012          M                 return
               01609 #endif
               01610 
               01611 #ifdef caml_useprim_caml_int32_mul
               01612 caml_int32_mul:
               01613         M_PRIM_INT32_2ARG_INIT
               01614         movf    INDF0, W         ; r0 += (x0*y0)L ; r1 += (x0*y0)H
               01615         mulwf   [0x0]            ; FSR1 ++
               01616         movff   PRODL, POSTINC1
               01617         movff   PRODH, INDF1
               01618         mulwf   [0x1]            ; r1 += (x0*y1)L ; r2 += (x0*y1)H
               01619         movff   PRODH, TMP_REG_3
               01620         clrf    TMP_REG_4
               01621         movf    PRODL, W
               01622         addwf   INDF1, F
               01623         movlw   0x00
               01624         addwfc  TMP_REG_3, F
               01625         addwfc  TMP_REG_4, F
               01626         movf    INDF0, W         ; r2 += (x0*y2)L ; r3 += (x0*y2)H
               01627         mulwf   [0x2]
               01628         movf    PRODL, W
               01629         addwf   TMP_REG_3, F
               01630         movlw   0x00
               01631         addwfc  TMP_REG_4, F
               01632         movf    PRODH, W
               01633         addwf   TMP_REG_4, F
               01634         movf    POSTINC0, W      ; r3 += (x0*y3)L
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01635         mulwf   [0x3]            ; FSR0 ++
               01636         movf    PRODL, W
               01637         addwf   TMP_REG_4, F
               01638         movf    INDF0, W         ; r1 += (x1*y0)L ; r2 += (x1*y0)H
               01639         mulwf   [0x0]            ; FSR1 ++
               01640         movf    PRODL, W
               01641         addwf   POSTINC1, F
               01642         movlw   0x00
               01643         addwfc  TMP_REG_3, F
               01644         addwfc  TMP_REG_4, F
               01645         movf    PRODH, W
               01646         addwf   TMP_REG_3, F
               01647         movlw   0x00
               01648         addwfc  TMP_REG_4, F
               01649         movf    INDF0, W         ; r2 += (x1*y1)L ; r3 += (x1*y1)H
               01650         mulwf   [0x1]
               01651         movf    PRODL, W
               01652         addwf   TMP_REG_3, F
               01653         movlw   0x00
               01654         addwfc  TMP_REG_4, F
               01655         movf    PRODH, W
               01656         addwf   TMP_REG_4, F
               01657         movf    POSTINC0, W      ; r3 += (x1*y2)L
               01658         mulwf   [0x2]            ; FSR0 ++
               01659         movf    PRODL, W
               01660         addwf   TMP_REG_4, F
               01661         movf    INDF0, W         ; r2 += (x2*y0)L ; r3 += (x2*y0)H
               01662         mulwf   [0x0]
               01663         movf    PRODL, W
               01664         addwf   TMP_REG_3, F
               01665         movlw   0x00
               01666         addwfc  TMP_REG_4, F
               01667         movf    PRODH, W
               01668         addwf   TMP_REG_4, F
               01669         movf    POSTINC0, W      ; r3 += (x2*y1)L
               01670         mulwf   [0x1]            ; FSR0 ++
               01671         movf    PRODL, W
               01672         addwf   TMP_REG_4, F
               01673         movf    INDF0, W         ; r3 += (x3*y0)L
               01674         mulwf   [0x0]
               01675         movf    PRODL, W
               01676         addwf   TMP_REG_4, F
               01677         movff   TMP_REG_3, POSTINC1 ; flush r2 ; FSR1 ++
               01678         movff   TMP_REG_4, POSTINC1 ; flush r3 ; FSR1 ++
               01679         M_PRIM_INT32_2ARG_END
               01680 #endif
               01681 
               01682 #ifdef caml_useprim_caml_int32_div
52CE 01683 caml_int32_div:
52CE EB01 FFE9 01684         movsf   [0x1], FSR0L
52D2 EB02 FFEA 01685         movsf   [0x2], FSR0H
52D6 E802      01686         addfsr  FSR0, 0x2
52D8 CFEE FF6C 01687         movff   POSTINC0, TMP_REG_5 ; y = TMP_REG_8:7:6:5
52DC CFEE FF6D 01688         movff   POSTINC0, TMP_REG_6
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
52E0 CFEE FF6E 01689         movff   POSTINC0, TMP_REG_7
52E4 50EF      01690         movf    INDF0, W
52E6 6F6F      01691         movwf   TMP_REG_8
52E8 116E      01692         iorwf   TMP_REG_7, W        ; y = 0 ?
52EA 116D      01693         iorwf   TMP_REG_6, W
52EC 116C      01694         iorwf   TMP_REG_5, W
52EE B4D8      01695         btfsc   STATUS, Z
52F0 EFB2 F009 01696         goto    caml_raise_division_by_0
52F4 CF56 FFE9 01697         movff   ACCUL, FSR0L
52F8 CF57 FFEA 01698         movff   ACCUH, FSR0H
52FC E802      01699         addfsr  FSR0, 0x2
52FE CFEE FF68 01700         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_4:3:2:1
5302 CFEE FF69 01701         movff   POSTINC0, TMP_REG_2
5306 CFEE FF6A 01702         movff   POSTINC0, TMP_REG_3
530A CFEF FF6B 01703         movff   INDF0, TMP_REG_4
               01704         M_CREATE_INT32              ; ACCU <- new int32
                   M #ifndef caml_useprim_caml_int32_custom
                   M #define caml_useprim_caml_int32_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x3
530E 515E          M                 movf    CUR_HEAP_END, W
5310 62E2          M                 cpfseq  FSR1H
5312 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5314 0E08          M                 movlw   (N * 0x2 + 0x2)
5316 24E1          M                 addwf   FSR1L, W
5318 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
531A EC6D F00A     M                 call    caml_gc_exec
                   M 
531E 515E          M                 movf    CUR_HEAP_END, W
5320 62E2          M                 cpfseq  FSR1H
5322 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5324 0E08          M                 movlw   (N * 0x2 + 0x2)
5326 24E1          M                 addwf   FSR1L, W
5328 B0D8          M                 btfsc   STATUS, C
532A EFAC F009     M                 goto    caml_raise_out_of_memory
532E     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000C         M CPT_CUH = CPT_CUH + 1
532E 68E6          M                 setf    POSTINC1                ; write tag
5330 0E03          M                 movlw   0x3
5332 6EE6          M                 movwf   POSTINC1                ; write size
5334 CFE1 FF56     M                 movff   FSR1L, ACCUL
5338 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
533C 0EE0          M                 movlw   low caml_int32_custom
533E 6EE6          M                 movwf   POSTINC1                ; write custom @L
5340 0E15          M                 movlw   high caml_int32_custom
5342 6EE6          M                 movwf   POSTINC1                ; write custom @H
5344 9170      01705         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
5346 AF6B      01706         btfss   TMP_REG_4, 7        ; x < 0 ?
5348 D00C      01707         bra     caml_int32_div_l0   ; no => skip
534A 7170      01708         btg     TMP_REG_9, 0        ; update result sign
534C 1F68      01709         comf    TMP_REG_1, F        ; negate x
534E 1F69      01710         comf    TMP_REG_2, F
5350 1F6A      01711         comf    TMP_REG_3, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5352 1F6B      01712         comf    TMP_REG_4, F
5354 2B68      01713         incf    TMP_REG_1, F
5356 E305      01714         bnc     caml_int32_div_l0
5358 2B69      01715         incf    TMP_REG_2, F
535A E303      01716         bnc     caml_int32_div_l0
535C 2B6A      01717         incf    TMP_REG_3, F
535E E301      01718         bnc     caml_int32_div_l0
5360 2B6B      01719         incf    TMP_REG_4, F
5362 01720 caml_int32_div_l0:
5362 AF6F      01721         btfss   TMP_REG_8, 7    ; y < 0 ?
5364 D00C      01722         bra     caml_int32_div_l1 ; no => skip
5366 7170      01723         btg     TMP_REG_9, 0    ; update result sign
5368 1F6C      01724         comf    TMP_REG_5, F    ; negate y
536A 1F6D      01725         comf    TMP_REG_6, F
536C 1F6E      01726         comf    TMP_REG_7, F
536E 1F6F      01727         comf    TMP_REG_8, F
5370 2B6C      01728         incf    TMP_REG_5, F
5372 E305      01729         bnc     caml_int32_div_l1
5374 2B6D      01730         incf    TMP_REG_6, F
5376 E303      01731         bnc     caml_int32_div_l1
5378 2B6E      01732         incf    TMP_REG_7, F
537A E301      01733         bnc     caml_int32_div_l1
537C 2B6F      01734         incf    TMP_REG_8, F
537E 01735 caml_int32_div_l1:
537E 6B71      01736         clrf    TMP_REG_A       ; init result to 0
5380 6B72      01737         clrf    TMP_REG_B
5382 6B73      01738         clrf    TMP_REG_C
5384 6B74      01739         clrf    TMP_REG_D
5386 6B63      01740         clrf    GC_TMP_REG_1    ; init bit raw to 00...01
5388 6B64      01741         clrf    GC_TMP_REG_2
538A 6B65      01742         clrf    GC_TMP_REG_3
538C 6B66      01743         clrf    GC_TMP_REG_4
538E 8163      01744         bsf     GC_TMP_REG_1, 0
5390 01745 caml_int32_div_loop1:
5390 90D8      01746         bcf     STATUS, C       ; y <- y << 1
5392 376C      01747         rlcf    TMP_REG_5, F
5394 376D      01748         rlcf    TMP_REG_6, F
5396 376E      01749         rlcf    TMP_REG_7, F
5398 376F      01750         rlcf    TMP_REG_8, F
539A 516F      01751         movf    TMP_REG_8, W    ; x - y
539C 5D6B      01752         subwf   TMP_REG_4, W
539E E312      01753         bnc     caml_int32_div_loop2 ; if x < y then break
53A0 E10B      01754         bnz     caml_int32_div_if_l1 ; if x > y then continue
53A2 516E      01755         movf    TMP_REG_7, W
53A4 5D6A      01756         subwf   TMP_REG_3, W
53A6 E30E      01757         bnc     caml_int32_div_loop2 ; if x < y then break
53A8 E107      01758         bnz     caml_int32_div_if_l1 ; if w > y then continue
53AA 516D      01759         movf    TMP_REG_6, W
53AC 5D69      01760         subwf   TMP_REG_2, W
53AE E30A      01761         bnc     caml_int32_div_loop2 ; if x < y then break
53B0 E103      01762         bnz     caml_int32_div_if_l1 ; if w > y then continue
53B2 516C      01763         movf    TMP_REG_5, W
53B4 5D68      01764         subwf   TMP_REG_1, W
53B6 E306      01765         bnc     caml_int32_div_loop2 ; if x < y then break
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
53B8 01766 caml_int32_div_if_l1:
53B8 90D8      01767         bcf     STATUS, C       ; raw <- raw << 1
53BA 3763      01768         rlcf    GC_TMP_REG_1, F
53BC 3764      01769         rlcf    GC_TMP_REG_2, F
53BE 3765      01770         rlcf    GC_TMP_REG_3, F
53C0 3766      01771         rlcf    GC_TMP_REG_4, F
53C2 D7E6      01772         bra     caml_int32_div_loop1 ; loop
53C4 01773 caml_int32_div_loop2:
53C4 90D8      01774         bcf     STATUS, C       ; y <- y >> 1
53C6 336F      01775         rrcf    TMP_REG_8, F
53C8 336E      01776         rrcf    TMP_REG_7, F
53CA 336D      01777         rrcf    TMP_REG_6, F
53CC 336C      01778         rrcf    TMP_REG_5, F
53CE 516F      01779         movf    TMP_REG_8, W    ; x - y
53D0 5D6B      01780         subwf   TMP_REG_4, W
53D2 E31C      01781         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
53D4 E10B      01782         bnz     caml_int32_div_if_l2  ; if x > y then continue
53D6 516E      01783         movf    TMP_REG_7, W
53D8 5D6A      01784         subwf   TMP_REG_3, W
53DA E318      01785         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
53DC E107      01786         bnz     caml_int32_div_if_l2  ; if x > y then continue
53DE 516D      01787         movf    TMP_REG_6, W
53E0 5D69      01788         subwf   TMP_REG_2, W
53E2 E314      01789         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
53E4 E103      01790         bnz     caml_int32_div_if_l2  ; if x > y then continue
53E6 516C      01791         movf    TMP_REG_5, W
53E8 5D68      01792         subwf   TMP_REG_1, W
53EA E310      01793         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
53EC 01794 caml_int32_div_if_l2:
53EC 516C      01795         movf    TMP_REG_5, W    ; x <- x - y
53EE 5F68      01796         subwf   TMP_REG_1, F
53F0 516D      01797         movf    TMP_REG_6, W
53F2 5B69      01798         subwfb  TMP_REG_2, F
53F4 516E      01799         movf    TMP_REG_7, W
53F6 5B6A      01800         subwfb  TMP_REG_3, F
53F8 516F      01801         movf    TMP_REG_8, W
53FA 5B6B      01802         subwfb  TMP_REG_4, F
53FC 5163      01803         movf    GC_TMP_REG_1, W ; res <- res | raw
53FE 1371      01804         iorwf   TMP_REG_A, F
5400 5164      01805         movf    GC_TMP_REG_2, W
5402 1372      01806         iorwf   TMP_REG_B, F
5404 5165      01807         movf    GC_TMP_REG_3, W
5406 1373      01808         iorwf   TMP_REG_C, F
5408 5166      01809         movf    GC_TMP_REG_4, W
540A 1374      01810         iorwf   TMP_REG_D, F
540C 01811 caml_int32_div_ifn_l2:
540C 90D8      01812         bcf     STATUS, C       ; raw <- raw >> 1
540E 3366      01813         rrcf    GC_TMP_REG_4, F
5410 3365      01814         rrcf    GC_TMP_REG_3, F
5412 3364      01815         rrcf    GC_TMP_REG_2, F
5414 3363      01816         rrcf    GC_TMP_REG_1, F
5416 A0D8      01817         btfss   STATUS, C               ; if CARRY = 0
5418 D7D5      01818         bra     caml_int32_div_loop2    ; then loop
541A A170      01819         btfss   TMP_REG_9, 0            ; negative result ?
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
541C D00B      01820         bra     caml_int32_div_end      ; no => division done
541E 1F71      01821         comf    TMP_REG_A, F            ; yes => negate result
5420 1F72      01822         comf    TMP_REG_B, F
5422 1F73      01823         comf    TMP_REG_C, F
5424 1F74      01824         comf    TMP_REG_D, F
5426 2B71      01825         incf    TMP_REG_A, F
5428 E305      01826         bnc     caml_int32_div_end
542A 2B72      01827         incf    TMP_REG_B, F
542C E303      01828         bnc     caml_int32_div_end
542E 2B73      01829         incf    TMP_REG_C, F
5430 E301      01830         bnc     caml_int32_div_end
5432 2B74      01831         incf    TMP_REG_D, F
5434 01832 caml_int32_div_end:
5434 CF71 FFE6 01833         movff   TMP_REG_A, POSTINC1 ; flush result
5438 CF72 FFE6 01834         movff   TMP_REG_B, POSTINC1
543C CF73 FFE6 01835         movff   TMP_REG_C, POSTINC1
5440 CF74 FFE6 01836         movff   TMP_REG_D, POSTINC1
5444 0012      01837         return
               01838 #endif
               01839 
               01840 #ifdef caml_useprim_caml_int32_mod
5446 01841 caml_int32_mod:
5446 EB01 FFE9 01842         movsf   [0x1], FSR0L
544A EB02 FFEA 01843         movsf   [0x2], FSR0H
544E E802      01844         addfsr  FSR0, 0x2
5450 CFEE FF6C 01845         movff   POSTINC0, TMP_REG_5 ; y = TMP_REG_8:7:6:5
5454 CFEE FF6D 01846         movff   POSTINC0, TMP_REG_6
5458 CFEE FF6E 01847         movff   POSTINC0, TMP_REG_7
545C 50EF      01848         movf    INDF0, W
545E 6F6F      01849         movwf   TMP_REG_8
5460 116E      01850         iorwf   TMP_REG_7, W        ; y = 0 ?
5462 116D      01851         iorwf   TMP_REG_6, W
5464 116C      01852         iorwf   TMP_REG_5, W
5466 B4D8      01853         btfsc   STATUS, Z
5468 EFB2 F009 01854         goto    caml_raise_division_by_0
546C CF56 FFE9 01855         movff   ACCUL, FSR0L
5470 CF57 FFEA 01856         movff   ACCUH, FSR0H
5474 E802      01857         addfsr  FSR0, 0x2
5476 CFEE FF68 01858         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_4:3:2:1
547A CFEE FF69 01859         movff   POSTINC0, TMP_REG_2
547E CFEE FF6A 01860         movff   POSTINC0, TMP_REG_3
5482 CFEF FF6B 01861         movff   INDF0, TMP_REG_4
               01862         M_CREATE_INT32              ; ACCU <- new int32
                   M #ifndef caml_useprim_caml_int32_custom
                   M #define caml_useprim_caml_int32_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x3
5486 515E          M                 movf    CUR_HEAP_END, W
5488 62E2          M                 cpfseq  FSR1H
548A D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
548C 0E08          M                 movlw   (N * 0x2 + 0x2)
548E 24E1          M                 addwf   FSR1L, W
5490 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5492 EC6D F00A     M                 call    caml_gc_exec
                   M 
5496 515E          M                 movf    CUR_HEAP_END, W
5498 62E2          M                 cpfseq  FSR1H
549A D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
549C 0E08          M                 movlw   (N * 0x2 + 0x2)
549E 24E1          M                 addwf   FSR1L, W
54A0 B0D8          M                 btfsc   STATUS, C
54A2 EFAC F009     M                 goto    caml_raise_out_of_memory
54A6     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000D         M CPT_CUH = CPT_CUH + 1
54A6 68E6          M                 setf    POSTINC1                ; write tag
54A8 0E03          M                 movlw   0x3
54AA 6EE6          M                 movwf   POSTINC1                ; write size
54AC CFE1 FF56     M                 movff   FSR1L, ACCUL
54B0 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
54B4 0EE0          M                 movlw   low caml_int32_custom
54B6 6EE6          M                 movwf   POSTINC1                ; write custom @L
54B8 0E15          M                 movlw   high caml_int32_custom
54BA 6EE6          M                 movwf   POSTINC1                ; write custom @H
54BC 9170      01863         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
54BE AF6B      01864         btfss   TMP_REG_4, 7        ; x < 0 ?
54C0 D00C      01865         bra     caml_int32_mod_l0   ; no => skip
54C2 7170      01866         btg     TMP_REG_9, 0        ; update result sign
54C4 1F68      01867         comf    TMP_REG_1, F        ; negate x
54C6 1F69      01868         comf    TMP_REG_2, F
54C8 1F6A      01869         comf    TMP_REG_3, F
54CA 1F6B      01870         comf    TMP_REG_4, F
54CC 2B68      01871         incf    TMP_REG_1, F
54CE E305      01872         bnc     caml_int32_mod_l0
54D0 2B69      01873         incf    TMP_REG_2, F
54D2 E303      01874         bnc     caml_int32_mod_l0
54D4 2B6A      01875         incf    TMP_REG_3, F
54D6 E301      01876         bnc     caml_int32_mod_l0
54D8 2B6B      01877         incf    TMP_REG_4, F
54DA 01878 caml_int32_mod_l0:
54DA AF6F      01879         btfss   TMP_REG_8, 7    ; y < 0 ?
54DC D00C      01880         bra     caml_int32_mod_l1 ; no => skip
54DE 7170      01881         btg     TMP_REG_9, 0    ; update result sign
54E0 1F6C      01882         comf    TMP_REG_5, F    ; negate y
54E2 1F6D      01883         comf    TMP_REG_6, F
54E4 1F6E      01884         comf    TMP_REG_7, F
54E6 1F6F      01885         comf    TMP_REG_8, F
54E8 2B6C      01886         incf    TMP_REG_5, F
54EA E305      01887         bnc     caml_int32_mod_l1
54EC 2B6D      01888         incf    TMP_REG_6, F
54EE E303      01889         bnc     caml_int32_mod_l1
54F0 2B6E      01890         incf    TMP_REG_7, F
54F2 E301      01891         bnc     caml_int32_mod_l1
54F4 2B6F      01892         incf    TMP_REG_8, F
54F6 01893 caml_int32_mod_l1:
54F6 6B75      01894         clrf    TMP_REG_E       ; counter = TMP_REG_E <- 0
54F8 01895 caml_int32_mod_loop1:
54F8 90D8      01896         bcf     STATUS, C       ; y <- y << 1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
54FA 376C      01897         rlcf    TMP_REG_5, F
54FC 376D      01898         rlcf    TMP_REG_6, F
54FE 376E      01899         rlcf    TMP_REG_7, F
5500 376F      01900         rlcf    TMP_REG_8, F
5502 2B75      01901         incf    TMP_REG_E, F    ; incr counter
5504 516F      01902         movf    TMP_REG_8, W    ; x - y
5506 5D6B      01903         subwf   TMP_REG_4, W
5508 E30C      01904         bnc     caml_int32_mod_loop2 ; if x < y then break
550A E1F6      01905         bnz     caml_int32_mod_loop1 ; if x > y then loop
550C 516E      01906         movf    TMP_REG_7, W
550E 5D6A      01907         subwf   TMP_REG_3, W
5510 E308      01908         bnc     caml_int32_mod_loop2 ; if x < y then break
5512 E1F2      01909         bnz     caml_int32_mod_loop1 ; if x > y then loop
5514 516D      01910         movf    TMP_REG_6, W
5516 5D69      01911         subwf   TMP_REG_2, W
5518 E304      01912         bnc     caml_int32_mod_loop2 ; if x < y then break
551A E1EE      01913         bnz     caml_int32_mod_loop1 ; if x > y then loop
551C 516C      01914         movf    TMP_REG_5, W
551E 5D68      01915         subwf   TMP_REG_1, W
5520 E2EB      01916         bc      caml_int32_mod_loop1 ; if x >= y then loop
5522 01917 caml_int32_mod_loop2:
5522 90D8      01918         bcf     STATUS, C       ; y <- y >> 1
5524 336F      01919         rrcf    TMP_REG_8, F
5526 336E      01920         rrcf    TMP_REG_7, F
5528 336D      01921         rrcf    TMP_REG_6, F
552A 336C      01922         rrcf    TMP_REG_5, F
552C 516F      01923         movf    TMP_REG_8, W    ; x - y
552E 5D6B      01924         subwf   TMP_REG_4, W
5530 E314      01925         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
5532 E10B      01926         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
5534 516E      01927         movf    TMP_REG_7, W
5536 5D6A      01928         subwf   TMP_REG_3, W
5538 E310      01929         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
553A E107      01930         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
553C 516D      01931         movf    TMP_REG_6, W
553E 5D69      01932         subwf   TMP_REG_2, W
5540 E30C      01933         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
5542 E103      01934         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
5544 516C      01935         movf    TMP_REG_5, W
5546 5D68      01936         subwf   TMP_REG_1, W
5548 E308      01937         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
554A 01938 caml_int32_mod_if_l2:
554A 516C      01939         movf    TMP_REG_5, W    ; x <- x - y
554C 5F68      01940         subwf   TMP_REG_1, F
554E 516D      01941         movf    TMP_REG_6, W
5550 5B69      01942         subwfb  TMP_REG_2, F
5552 516E      01943         movf    TMP_REG_7, W
5554 5B6A      01944         subwfb  TMP_REG_3, F
5556 516F      01945         movf    TMP_REG_8, W
5558 5B6B      01946         subwfb  TMP_REG_4, F
555A 01947 caml_int32_mod_ifn_l2:
555A 2F75      01948         decfsz  TMP_REG_E, F    ; decr counter
555C D7E2      01949         bra     caml_int32_mod_loop2 ; if counter <> 0 then loop
555E A170      01950         btfss   TMP_REG_9, 0    ; negative result ?
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5560 D00B      01951         bra     caml_int32_mod_end ; no => modulo done
5562 1F68      01952         comf    TMP_REG_1, F       ; yes => negate result
5564 1F69      01953         comf    TMP_REG_2, F
5566 1F6A      01954         comf    TMP_REG_3, F
5568 1F6B      01955         comf    TMP_REG_4, F
556A 2B68      01956         incf    TMP_REG_1, F
556C E305      01957         bnc     caml_int32_mod_end
556E 2B69      01958         incf    TMP_REG_2, F
5570 E303      01959         bnc     caml_int32_mod_end
5572 2B6A      01960         incf    TMP_REG_3, F
5574 E301      01961         bnc     caml_int32_mod_end
5576 2B6B      01962         incf    TMP_REG_4, F
5578 01963 caml_int32_mod_end:
5578 CF68 FFE6 01964         movff   TMP_REG_1, POSTINC1
557C CF69 FFE6 01965         movff   TMP_REG_2, POSTINC1
5580 CF6A FFE6 01966         movff   TMP_REG_3, POSTINC1
5584 CF6B FFE6 01967         movff   TMP_REG_4, POSTINC1
5588 0012      01968         return
               01969 #endif
               01970 
               01971 #ifdef caml_useprim_caml_int32_and
558A 01972 caml_int32_and:
               01973         M_PRIM_INT32_2ARG_INIT
                   M #ifndef caml_useprim_caml_int32_2arg    
                   M #define caml_useprim_caml_int32_2arg
                   M #endif
558A EC48 F02B     M                 call    caml_int32_2arg_init
558E 50DE      01974         movf    POSTINC2, W      ; 1
5590 14EE      01975         andwf   POSTINC0, W
5592 6EE6      01976         movwf   POSTINC1
5594 50DE      01977         movf    POSTINC2, W      ; 2
5596 14EE      01978         andwf   POSTINC0, W
5598 6EE6      01979         movwf   POSTINC1
559A 50DE      01980         movf    POSTINC2, W      ; 3
559C 14EE      01981         andwf   POSTINC0, W
559E 6EE6      01982         movwf   POSTINC1
55A0 50DF      01983         movf    INDF2, W         ; 4
55A2 14EF      01984         andwf   INDF0, W
55A4 6EE6      01985         movwf   POSTINC1
               01986         M_PRIM_INT32_2ARG_END
55A6 CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
55AA CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
55AE 0012          M                 return
               01987 #endif
               01988 
               01989 #ifdef caml_useprim_caml_int32_or
               01990 caml_int32_or:
               01991         M_PRIM_INT32_2ARG_INIT
               01992         movf    POSTINC2, W      ; 1
               01993         iorwf   POSTINC0, W
               01994         movwf   POSTINC1
               01995         movf    POSTINC2, W      ; 2
               01996         iorwf   POSTINC0, W
               01997         movwf   POSTINC1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01998         movf    POSTINC2, W      ; 3
               01999         iorwf   POSTINC0, W
               02000         movwf   POSTINC1
               02001         movf    INDF2, W         ; 4
               02002         iorwf   INDF0, W
               02003         movwf   POSTINC1
               02004         M_PRIM_INT32_2ARG_END
               02005 #endif
               02006 
               02007 #ifdef caml_useprim_caml_int32_xor
               02008 caml_int32_xor:
               02009         M_PRIM_INT32_2ARG_INIT
               02010         movf    POSTINC2, W      ; 1
               02011         xorwf   POSTINC0, W
               02012         movwf   POSTINC1
               02013         movf    POSTINC2, W      ; 2
               02014         xorwf   POSTINC0, W
               02015         movwf   POSTINC1
               02016         movf    POSTINC2, W      ; 3
               02017         xorwf   POSTINC0, W
               02018         movwf   POSTINC1
               02019         movf    INDF2, W         ; 4
               02020         xorwf   INDF0, W
               02021         movwf   POSTINC1
               02022         M_PRIM_INT32_2ARG_END
               02023 #endif
               02024 
               02025 #ifdef caml_useprim_caml_int32_shift_left
               02026 caml_int32_shift_left:
               02027         M_PRIM_INT32_1ARG_INIT
               02028         movff   POSTINC0, TMP_REG_1
               02029         movff   POSTINC0, TMP_REG_2
               02030         movff   POSTINC0, TMP_REG_3
               02031         movff   INDF0, TMP_REG_4
               02032         bcf     STATUS, C
               02033         rrcf    [0x1], F
               02034         bz      caml_int32_shift_left_end_loop
               02035 caml_int32_shift_left_loop:
               02036         bcf     STATUS, C
               02037         rlcf    TMP_REG_1, F
               02038         rlcf    TMP_REG_2, F
               02039         rlcf    TMP_REG_3, F
               02040         rlcf    TMP_REG_4, F
               02041         decfsz  [0x1], F
               02042         bra     caml_int32_shift_left_loop
               02043 caml_int32_shift_left_end_loop:
               02044         movff   TMP_REG_1, POSTINC1
               02045         movff   TMP_REG_2, POSTINC1
               02046         movff   TMP_REG_3, POSTINC1
               02047         movff   TMP_REG_4, POSTINC1
               02048         M_PRIM_INT32_1ARG_END
               02049 #endif
               02050 
               02051 #ifdef caml_useprim_caml_int32_shift_right
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02052 caml_int32_shift_right:
               02053         M_PRIM_INT32_1ARG_INIT
               02054         movff   POSTINC0, TMP_REG_1
               02055         movff   POSTINC0, TMP_REG_2
               02056         movff   POSTINC0, TMP_REG_3
               02057         movff   INDF0, TMP_REG_4
               02058         bcf     STATUS, C
               02059         rrcf    [0x1], F
               02060         bz      caml_int32_shift_right_end_loop
               02061 caml_int32_shift_right_loop:
               02062         rlcf    TMP_REG_4, W    ; STATUS.C ignored
               02063         rrcf    TMP_REG_4, F
               02064         rrcf    TMP_REG_3, F
               02065         rrcf    TMP_REG_2, F
               02066         rrcf    TMP_REG_1, F
               02067         decfsz  [0x1], F
               02068         bra     caml_int32_shift_right_loop
               02069 caml_int32_shift_right_end_loop:
               02070         movff   TMP_REG_1, POSTINC1
               02071         movff   TMP_REG_2, POSTINC1
               02072         movff   TMP_REG_3, POSTINC1
               02073         movff   TMP_REG_4, POSTINC1
               02074         M_PRIM_INT32_1ARG_END
               02075 #endif
               02076 
               02077 #ifdef caml_useprim_caml_int32_shift_right_unsigned
55B0 02078 caml_int32_shift_right_unsigned:
               02079         M_PRIM_INT32_1ARG_INIT
                   M #ifndef caml_useprim_caml_int32_1arg
                   M #define caml_useprim_caml_int32_1arg
                   M #endif
55B0 EC23 F02B     M                 call    caml_int32_1arg_init
55B4 CFEE FF68 02080         movff   POSTINC0, TMP_REG_1
55B8 CFEE FF69 02081         movff   POSTINC0, TMP_REG_2
55BC CFEE FF6A 02082         movff   POSTINC0, TMP_REG_3
55C0 CFEF FF6B 02083         movff   INDF0, TMP_REG_4
55C4 90D8      02084         bcf     STATUS, C
55C6 3201      02085         rrcf    [0x1], F
55C8 E007      02086         bz      caml_int32_shift_right_unsigned_end_loop
55CA 02087 caml_int32_shift_right_unsigned_loop:
55CA 90D8      02088         bcf     STATUS, C
55CC 336B      02089         rrcf    TMP_REG_4, F
55CE 336A      02090         rrcf    TMP_REG_3, F
55D0 3369      02091         rrcf    TMP_REG_2, F
55D2 3368      02092         rrcf    TMP_REG_1, F
55D4 2E01      02093         decfsz  [0x1], F
55D6 D7F9      02094         bra     caml_int32_shift_right_unsigned_loop
55D8 02095 caml_int32_shift_right_unsigned_end_loop:
55D8 CF68 FFE6 02096         movff   TMP_REG_1, POSTINC1
55DC CF69 FFE6 02097         movff   TMP_REG_2, POSTINC1
55E0 CF6A FFE6 02098         movff   TMP_REG_3, POSTINC1
55E4 CF6B FFE6 02099         movff   TMP_REG_4, POSTINC1
               02100         M_PRIM_INT32_1ARG_END
55E8 0012          M                 return
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02101 #endif
               02102 
               02103 #ifdef caml_useprim_caml_int32_of_int
55EA 02104 caml_int32_of_int:
55EA CF56 FF68 02105         movff   ACCUL, TMP_REG_1 ; TMP_REG_1:2 <- ACCU
55EE CF57 FF69 02106         movff   ACCUH, TMP_REG_2
               02107         M_CREATE_INT32
                   M #ifndef caml_useprim_caml_int32_custom
                   M #define caml_useprim_caml_int32_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x3
55F2 515E          M                 movf    CUR_HEAP_END, W
55F4 62E2          M                 cpfseq  FSR1H
55F6 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
55F8 0E08          M                 movlw   (N * 0x2 + 0x2)
55FA 24E1          M                 addwf   FSR1L, W
55FC E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
55FE EC6D F00A     M                 call    caml_gc_exec
                   M 
5602 515E          M                 movf    CUR_HEAP_END, W
5604 62E2          M                 cpfseq  FSR1H
5606 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5608 0E08          M                 movlw   (N * 0x2 + 0x2)
560A 24E1          M                 addwf   FSR1L, W
560C B0D8          M                 btfsc   STATUS, C
560E EFAC F009     M                 goto    caml_raise_out_of_memory
5612     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000E         M CPT_CUH = CPT_CUH + 1
5612 68E6          M                 setf    POSTINC1                ; write tag
5614 0E03          M                 movlw   0x3
5616 6EE6          M                 movwf   POSTINC1                ; write size
5618 CFE1 FF56     M                 movff   FSR1L, ACCUL
561C CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5620 0EE0          M                 movlw   low caml_int32_custom
5622 6EE6          M                 movwf   POSTINC1                ; write custom @L
5624 0E15          M                 movlw   high caml_int32_custom
5626 6EE6          M                 movwf   POSTINC1                ; write custom @H
5628 3169      02108         rrcf    TMP_REG_2, W     ; STATUS.C ignored
562A 3168      02109         rrcf    TMP_REG_1, W
562C 6EE6      02110         movwf   POSTINC1
562E 3569      02111         rlcf    TMP_REG_2, W
5630 E205      02112         bc      caml_int32_of_int_neg
5632 3169      02113         rrcf    TMP_REG_2, W
5634 6EE6      02114         movwf   POSTINC1
5636 6AE6      02115         clrf    POSTINC1
5638 6AE6      02116         clrf    POSTINC1
563A 0012      02117         return
563C 02118 caml_int32_of_int_neg:
563C 3169      02119         rrcf    TMP_REG_2, W
563E 6EE6      02120         movwf   POSTINC1
5640 68E6      02121         setf    POSTINC1
5642 68E6      02122         setf    POSTINC1
5644 0012      02123         return
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02124 #endif
               02125 
               02126 #ifdef caml_useprim_caml_int32_1arg
5646 02127 caml_int32_1arg_init:
5646 CF56 FF68 02128         movff   ACCUL, TMP_REG_1
564A CF57 FF69 02129         movff   ACCUH, TMP_REG_2
               02130         M_CREATE_INT32           ; ACCU <- alloc(int32)
                   M #ifndef caml_useprim_caml_int32_custom
                   M #define caml_useprim_caml_int32_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x3
564E 515E          M                 movf    CUR_HEAP_END, W
5650 62E2          M                 cpfseq  FSR1H
5652 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5654 0E08          M                 movlw   (N * 0x2 + 0x2)
5656 24E1          M                 addwf   FSR1L, W
5658 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
565A EC6D F00A     M                 call    caml_gc_exec
                   M 
565E 515E          M                 movf    CUR_HEAP_END, W
5660 62E2          M                 cpfseq  FSR1H
5662 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5664 0E08          M                 movlw   (N * 0x2 + 0x2)
5666 24E1          M                 addwf   FSR1L, W
5668 B0D8          M                 btfsc   STATUS, C
566A EFAC F009     M                 goto    caml_raise_out_of_memory
566E     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000000F         M CPT_CUH = CPT_CUH + 1
566E 68E6          M                 setf    POSTINC1                ; write tag
5670 0E03          M                 movlw   0x3
5672 6EE6          M                 movwf   POSTINC1                ; write size
5674 CFE1 FF56     M                 movff   FSR1L, ACCUL
5678 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
567C 0EE0          M                 movlw   low caml_int32_custom
567E 6EE6          M                 movwf   POSTINC1                ; write custom @L
5680 0E15          M                 movlw   high caml_int32_custom
5682 6EE6          M                 movwf   POSTINC1                ; write custom @H
5684 CF68 FFE9 02131         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
5688 CF69 FFEA 02132         movff   TMP_REG_2, FSR0H
568C E802      02133         addfsr  FSR0, 0x2
568E 0012      02134         return
               02135 #endif
               02136 
               02137 #ifdef caml_useprim_caml_int32_2arg
5690 02138 caml_int32_2arg_init:
5690 CF56 FF68 02139         movff   ACCUL, TMP_REG_1
5694 CF57 FF69 02140         movff   ACCUH, TMP_REG_2
               02141         M_CREATE_INT32           ; ACCU <- alloc(int32)
                   M #ifndef caml_useprim_caml_int32_custom
                   M #define caml_useprim_caml_int32_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x3
5698 515E          M                 movf    CUR_HEAP_END, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
569A 62E2          M                 cpfseq  FSR1H
569C D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
569E 0E08          M                 movlw   (N * 0x2 + 0x2)
56A0 24E1          M                 addwf   FSR1L, W
56A2 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
56A4 EC6D F00A     M                 call    caml_gc_exec
                   M 
56A8 515E          M                 movf    CUR_HEAP_END, W
56AA 62E2          M                 cpfseq  FSR1H
56AC D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
56AE 0E08          M                 movlw   (N * 0x2 + 0x2)
56B0 24E1          M                 addwf   FSR1L, W
56B2 B0D8          M                 btfsc   STATUS, C
56B4 EFAC F009     M                 goto    caml_raise_out_of_memory
56B8     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000010         M CPT_CUH = CPT_CUH + 1
56B8 68E6          M                 setf    POSTINC1                ; write tag
56BA 0E03          M                 movlw   0x3
56BC 6EE6          M                 movwf   POSTINC1                ; write size
56BE CFE1 FF56     M                 movff   FSR1L, ACCUL
56C2 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
56C6 0EE0          M                 movlw   low caml_int32_custom
56C8 6EE6          M                 movwf   POSTINC1                ; write custom @L
56CA 0E15          M                 movlw   high caml_int32_custom
56CC 6EE6          M                 movwf   POSTINC1                ; write custom @H
56CE CF68 FFE9 02142         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
56D2 CF69 FFEA 02143         movff   TMP_REG_2, FSR0H
56D6 E802      02144         addfsr  FSR0, 0x2
56D8 CFD9 FF68 02145         movff   FSR2L, TMP_REG_1 ; save FSR2
56DC CFDA FF69 02146         movff   FSR2H, TMP_REG_2
56E0 5001      02147         movf    [0x1], W         ; FSR2 <- arg2
56E2 EB02 FFDA 02148         movsf   [0x2], FSR2H
56E6 6ED9      02149         movwf   FSR2L
56E8 E882      02150         addfsr  FSR2, 0x2
56EA 0012      02151         return
               02152 #endif
               02153 
               02154 
               02155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02156 ;;;;;;;;                                   ;;;;;;;;
               02157 ;;;;;;;;               INT64               ;;;;;;;;
               02158 ;;;;;;;;                                   ;;;;;;;;
               02159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02160 
               02161 M_CREATE_INT64 macro
               02162 #ifndef caml_useprim_caml_int64_custom
               02163 #define caml_useprim_caml_int64_custom
               02164 #endif
               02165                 M_CHECK_UNFULL_HEAP 0x5
               02166                 setf    POSTINC1                ; write tag
               02167                 movlw   0x5
               02168                 movwf   POSTINC1                ; write size
               02169                 movff   FSR1L, ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02170                 movff   FSR1H, ACCUH            ; ACCU <- @
               02171                 movlw   low caml_int64_custom
               02172                 movwf   POSTINC1                ; write custom @L
               02173                 movlw   high caml_int64_custom
               02174                 movwf   POSTINC1                ; write custom @H
               02175         endm
               02176 
               02177 M_PRIM_INT64_1ARG_INIT macro
               02178 #ifndef caml_useprim_caml_int64_1arg
               02179 #define caml_useprim_caml_int64_1arg
               02180 #endif
               02181                 call    caml_int64_1arg_init
               02182         endm
               02183 
               02184 M_PRIM_INT64_1ARG_END macro
               02185                 return
               02186         endm
               02187 
               02188 M_PRIM_INT64_2ARG_INIT macro
               02189 #ifndef caml_useprim_caml_int64_2arg
               02190 #define caml_useprim_caml_int64_2arg
               02191 #endif
               02192                 call    caml_int64_2arg_init
               02193         endm
               02194 
               02195 M_PRIM_INT64_2ARG_END macro
               02196                 movff   TMP_REG_1, FSR2L
               02197                 movff   TMP_REG_2, FSR2H
               02198                 return
               02199         endm
               02200         
               02201 #ifdef caml_useprim_caml_int64_neg
56EC 02202 caml_int64_neg:
               02203         M_PRIM_INT64_1ARG_INIT
                   M #ifndef caml_useprim_caml_int64_1arg
56EC     M #define caml_useprim_caml_int64_1arg
                   M #endif
56EC ECAB F02E     M                 call    caml_int64_1arg_init
56F0 1CEE      02204         comf    POSTINC0, W     ; 1
56F2 2AE8      02205         incf    WREG, F
56F4 6EE6      02206         movwf   POSTINC1
56F6 1CEE      02207         comf    POSTINC0, W     ; 2
56F8 B0D8      02208         btfsc   STATUS, C
56FA 2AE8      02209         incf    WREG, F
56FC 6EE6      02210         movwf   POSTINC1
56FE 1CEE      02211         comf    POSTINC0, W     ; 3
5700 B0D8      02212         btfsc   STATUS, C
5702 2AE8      02213         incf    WREG, F
5704 6EE6      02214         movwf   POSTINC1
5706 1CEE      02215         comf    POSTINC0, W     ; 4
5708 B0D8      02216         btfsc   STATUS, C
570A 2AE8      02217         incf    WREG, F
570C 6EE6      02218         movwf   POSTINC1
570E 1CEE      02219         comf    POSTINC0, W     ; 5
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5710 B0D8      02220         btfsc   STATUS, C
5712 2AE8      02221         incf    WREG, F
5714 6EE6      02222         movwf   POSTINC1
5716 1CEE      02223         comf    POSTINC0, W     ; 6
5718 B0D8      02224         btfsc   STATUS, C
571A 2AE8      02225         incf    WREG, F
571C 6EE6      02226         movwf   POSTINC1
571E 1CEE      02227         comf    POSTINC0, W     ; 7
5720 B0D8      02228         btfsc   STATUS, C
5722 2AE8      02229         incf    WREG, F
5724 6EE6      02230         movwf   POSTINC1
5726 1CEF      02231         comf    INDF0, W        ; 8
5728 B0D8      02232         btfsc   STATUS, C
572A 2AE8      02233         incf    WREG, F
572C 6EE6      02234         movwf   POSTINC1
               02235         M_PRIM_INT64_1ARG_END
572E 0012          M                 return
               02236 #endif
               02237 
               02238 #ifdef caml_useprim_caml_int64_add
5730 02239 caml_int64_add:
               02240         M_PRIM_INT64_2ARG_INIT
                   M #ifndef caml_useprim_caml_int64_2arg
5730     M #define caml_useprim_caml_int64_2arg
                   M #endif
5730 ECD0 F02E     M                 call    caml_int64_2arg_init
5734 50DE      02241         movf    POSTINC2, W      ; 1
5736 24EE      02242         addwf   POSTINC0, W
5738 6EE6      02243         movwf   POSTINC1
573A 50DE      02244         movf    POSTINC2, W      ; 2
573C 20EE      02245         addwfc  POSTINC0, W
573E 6EE6      02246         movwf   POSTINC1
5740 50DE      02247         movf    POSTINC2, W      ; 3
5742 20EE      02248         addwfc  POSTINC0, W
5744 6EE6      02249         movwf   POSTINC1
5746 50DE      02250         movf    POSTINC2, W      ; 4
5748 20EE      02251         addwfc  POSTINC0, W
574A 6EE6      02252         movwf   POSTINC1
574C 50DE      02253         movf    POSTINC2, W      ; 5
574E 20EE      02254         addwfc  POSTINC0, W
5750 6EE6      02255         movwf   POSTINC1
5752 50DE      02256         movf    POSTINC2, W      ; 6
5754 20EE      02257         addwfc  POSTINC0, W
5756 6EE6      02258         movwf   POSTINC1
5758 50DE      02259         movf    POSTINC2, W      ; 7
575A 20EE      02260         addwfc  POSTINC0, W
575C 6EE6      02261         movwf   POSTINC1
575E 50DF      02262         movf    INDF2, W         ; 8
5760 20EF      02263         addwfc  INDF0, W
5762 6EE6      02264         movwf   POSTINC1
               02265         M_PRIM_INT64_2ARG_END
5764 CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
5768 CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
576C 0012          M                 return
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02266 #endif
               02267 
               02268 #ifdef caml_useprim_caml_int64_sub
576E 02269 caml_int64_sub:
               02270         M_PRIM_INT64_2ARG_INIT
                   M #ifndef caml_useprim_caml_int64_2arg
                   M #define caml_useprim_caml_int64_2arg
                   M #endif
576E ECD0 F02E     M                 call    caml_int64_2arg_init
5772 50DE      02271         movf    POSTINC2, W      ; 1
5774 5CEE      02272         subwf   POSTINC0, W
5776 6EE6      02273         movwf   POSTINC1
5778 50DE      02274         movf    POSTINC2, W      ; 2
577A 58EE      02275         subwfb  POSTINC0, W
577C 6EE6      02276         movwf   POSTINC1
577E 50DE      02277         movf    POSTINC2, W      ; 3
5780 58EE      02278         subwfb  POSTINC0, W
5782 6EE6      02279         movwf   POSTINC1
5784 50DE      02280         movf    POSTINC2, W      ; 4
5786 58EE      02281         subwfb  POSTINC0, W
5788 6EE6      02282         movwf   POSTINC1
578A 50DE      02283         movf    POSTINC2, W      ; 5
578C 58EE      02284         subwfb  POSTINC0, W
578E 6EE6      02285         movwf   POSTINC1
5790 50DE      02286         movf    POSTINC2, W      ; 6
5792 58EE      02287         subwfb  POSTINC0, W
5794 6EE6      02288         movwf   POSTINC1
5796 50DE      02289         movf    POSTINC2, W      ; 7
5798 58EE      02290         subwfb  POSTINC0, W
579A 6EE6      02291         movwf   POSTINC1
579C 50DF      02292         movf    INDF2, W         ; 8
579E 58EF      02293         subwfb  INDF0, W
57A0 6EE6      02294         movwf   POSTINC1
               02295         M_PRIM_INT64_2ARG_END
57A2 CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
57A6 CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
57AA 0012          M                 return
               02296 #endif
               02297 
               02298 #ifdef caml_useprim_caml_int64_mul
               02299 caml_int64_mul:
               02300         M_PRIM_INT64_2ARG_INIT
               02301         movf    INDF0, W         ; r0 += (x0*y0)L ; r1 += (x0*y0)H
               02302         mulwf   [0x0]            ; FSR1 ++
               02303         movff   PRODL, POSTINC1
               02304         movff   PRODH, INDF1
               02305         mulwf   [0x1]            ; r1 += (x0*y1)L ; r2 += (x0*y1)H
               02306         movff   PRODH, TMP_REG_3
               02307         clrf    TMP_REG_4
               02308         clrf    TMP_REG_5
               02309         clrf    TMP_REG_6
               02310         clrf    TMP_REG_7
               02311         clrf    TMP_REG_8
               02312         movf    PRODL, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02313         addwf   INDF1, F
               02314         movlw   0x00
               02315         addwfc  TMP_REG_3, F
               02316         addwfc  TMP_REG_4, F
               02317         addwfc  TMP_REG_5, F
               02318         addwfc  TMP_REG_6, F
               02319         addwfc  TMP_REG_7, F
               02320         addwfc  TMP_REG_8, F
               02321         movf    INDF0, W         ; r2 += (x0*y2)L ; r3 += (x0*y2)H
               02322         mulwf   [0x2]
               02323         movf    PRODL, W
               02324         addwf   TMP_REG_3, F
               02325         movlw   0x00
               02326         addwfc  TMP_REG_4, F
               02327         addwfc  TMP_REG_5, F
               02328         addwfc  TMP_REG_6, F
               02329         addwfc  TMP_REG_7, F
               02330         addwfc  TMP_REG_8, F
               02331         movf    PRODH, W
               02332         addwf   TMP_REG_4, F
               02333         movlw   0x00
               02334         addwfc  TMP_REG_5, F
               02335         addwfc  TMP_REG_6, F
               02336         addwfc  TMP_REG_7, F
               02337         addwfc  TMP_REG_8, F
               02338         movf    INDF0, W         ; r3 += (x0*y3)L ; r4 += (x0*y3)H
               02339         mulwf   [0x3]
               02340         movf    PRODL, W
               02341         addwf   TMP_REG_4, F
               02342         movlw   0x00
               02343         addwfc  TMP_REG_5, F
               02344         addwfc  TMP_REG_6, F
               02345         addwfc  TMP_REG_7, F
               02346         addwfc  TMP_REG_8, F
               02347         movf    PRODH, W
               02348         addwf   TMP_REG_5, F
               02349         movlw   0x00
               02350         addwfc  TMP_REG_6, F
               02351         addwfc  TMP_REG_7, F
               02352         addwfc  TMP_REG_8, F
               02353         movf    INDF0, W         ; r4 += (x0*y4)L ; r5 += (x0*y4)H
               02354         mulwf   [0x4]
               02355         movf    PRODL, W
               02356         addwf   TMP_REG_5, F
               02357         movlw   0x00
               02358         addwfc  TMP_REG_6, F
               02359         addwfc  TMP_REG_7, F
               02360         addwfc  TMP_REG_8, F
               02361         movf    PRODH, W
               02362         addwf   TMP_REG_6, F
               02363         movlw   0x00
               02364         addwfc  TMP_REG_7, F
               02365         addwfc  TMP_REG_8, F
               02366         movf    INDF0, W         ; r5 += (x0*y5)L ; r6 += (x0*y5)H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02367         mulwf   [0x5]
               02368         movf    PRODL, W
               02369         addwf   TMP_REG_6, F
               02370         movlw   0x00
               02371         addwfc  TMP_REG_7, F
               02372         addwfc  TMP_REG_8, F
               02373         movf    PRODH, W
               02374         addwf   TMP_REG_7, F
               02375         movlw   0x00
               02376         addwfc  TMP_REG_8, F
               02377         movf    INDF0, W         ; r6 += (x0*y6)L ; r7 += (x0*y6)H
               02378         mulwf   [0x6]
               02379         movf    PRODL, W
               02380         addwf   TMP_REG_7, F
               02381         movlw   0x00
               02382         addwfc  TMP_REG_8, F
               02383         movf    PRODH, W
               02384         addwf   TMP_REG_8, F
               02385         movf    POSTINC0, W      ; r7 += (x0*y7)L
               02386         mulwf   [0x7]            ; FSR0 ++
               02387         movf    PRODL, W
               02388         addwf   TMP_REG_8, F
               02389         movf    INDF0, W         ; r1 += (x1*y0)L ; r2 += (x1*y0)H
               02390         mulwf   [0x0]
               02391         movf    PRODL, W
               02392         addwf   POSTINC1, F
               02393         movlw   0x00
               02394         addwfc  TMP_REG_3, F
               02395         addwfc  TMP_REG_4, F
               02396         addwfc  TMP_REG_5, F
               02397         addwfc  TMP_REG_6, F
               02398         addwfc  TMP_REG_7, F
               02399         addwfc  TMP_REG_8, F
               02400         movf    PRODH, W
               02401         addwf   TMP_REG_3, F
               02402         movlw   0x00
               02403         addwfc  TMP_REG_4, F
               02404         addwfc  TMP_REG_5, F
               02405         addwfc  TMP_REG_6, F
               02406         addwfc  TMP_REG_7, F
               02407         addwfc  TMP_REG_8, F
               02408         movf    INDF0, W         ; r2 += (x1*y1)L ; r3 += (x1*y1)H
               02409         mulwf   [0x1]
               02410         movf    PRODL, W
               02411         addwf   TMP_REG_3, F
               02412         movlw   0x00
               02413         addwfc  TMP_REG_4, F
               02414         addwfc  TMP_REG_5, F
               02415         addwfc  TMP_REG_6, F
               02416         addwfc  TMP_REG_7, F
               02417         addwfc  TMP_REG_8, F
               02418         movf    PRODH, W
               02419         addwf   TMP_REG_4, F
               02420         movlw   0x00
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02421         addwfc  TMP_REG_5, F
               02422         addwfc  TMP_REG_6, F
               02423         addwfc  TMP_REG_7, F
               02424         addwfc  TMP_REG_8, F
               02425         movf    INDF0, W         ; r3 += (x1*y2)L ; r4 += (x1*y2)H
               02426         mulwf   [0x2]
               02427         movf    PRODL, W
               02428         addwf   TMP_REG_4, F
               02429         movlw   0x00
               02430         addwfc  TMP_REG_5, F
               02431         addwfc  TMP_REG_6, F
               02432         addwfc  TMP_REG_7, F
               02433         addwfc  TMP_REG_8, F
               02434         movf    PRODH, W
               02435         addwf   TMP_REG_5, F
               02436         movlw   0x00
               02437         addwfc  TMP_REG_6, F
               02438         addwfc  TMP_REG_7, F
               02439         addwfc  TMP_REG_8, F
               02440         movf    INDF0, W         ; r4 += (x1*y3)L ; r5 += (x1*y3)H
               02441         mulwf   [0x3]
               02442         movf    PRODL, W
               02443         addwf   TMP_REG_5, F
               02444         movlw   0x00
               02445         addwfc  TMP_REG_6, F
               02446         addwfc  TMP_REG_7, F
               02447         addwfc  TMP_REG_8, F
               02448         movf    PRODH, W
               02449         addwf   TMP_REG_6, F
               02450         movlw   0x00
               02451         addwfc  TMP_REG_7, F
               02452         addwfc  TMP_REG_8, F
               02453         movf    INDF0, W         ; r5 += (x1*y4)L ; r6 += (x1*y4)H
               02454         mulwf   [0x4]
               02455         movf    PRODL, W
               02456         addwf   TMP_REG_6, F
               02457         movlw   0x00
               02458         addwfc  TMP_REG_7, F
               02459         addwfc  TMP_REG_8, F
               02460         movf    PRODH, W
               02461         addwf   TMP_REG_7, F
               02462         movlw   0x00
               02463         addwfc  TMP_REG_8, F
               02464         movf    INDF0, W         ; r6 += (x1*y5)L ; r7 += (x1*y5)H
               02465         mulwf   [0x5]
               02466         movf    PRODL, W
               02467         addwf   TMP_REG_7, F
               02468         movlw   0x00
               02469         addwfc  TMP_REG_8, F
               02470         movf    PRODH, W
               02471         addwf   TMP_REG_8, F
               02472         movf    POSTINC0, W      ; r7 += (x1*y6)L
               02473         mulwf   [0x6]            ; FSR0 ++
               02474         movf    PRODL, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02475         addwf   TMP_REG_8, F
               02476         movf    INDF0, W         ; r2 += (x2*y0)L ; r3 += (x2*y0)H
               02477         mulwf   [0x0]
               02478         movf    PRODL, W
               02479         addwf   TMP_REG_3, F
               02480         movlw   0x00
               02481         addwfc  TMP_REG_4, F
               02482         addwfc  TMP_REG_5, F
               02483         addwfc  TMP_REG_6, F
               02484         addwfc  TMP_REG_7, F
               02485         addwfc  TMP_REG_8, F
               02486         movf    PRODH, W
               02487         addwf   TMP_REG_4, F
               02488         movlw   0x00
               02489         addwfc  TMP_REG_5, F
               02490         addwfc  TMP_REG_6, F
               02491         addwfc  TMP_REG_7, F
               02492         addwfc  TMP_REG_8, F
               02493         movf    INDF0, W         ; r3 += (x2*y1)L ; r4 += (x2*y1)H
               02494         mulwf   [0x1]
               02495         movf    PRODL, W
               02496         addwf   TMP_REG_4, F
               02497         movlw   0x00
               02498         addwfc  TMP_REG_5, F
               02499         addwfc  TMP_REG_6, F
               02500         addwfc  TMP_REG_7, F
               02501         addwfc  TMP_REG_8, F
               02502         movf    PRODH, W
               02503         addwf   TMP_REG_5, F
               02504         movlw   0x00
               02505         addwfc  TMP_REG_6, F
               02506         addwfc  TMP_REG_7, F
               02507         addwfc  TMP_REG_8, F
               02508         movf    INDF0, W         ; r4 += (x2*y2)L ; r5 += (x2*y2)H
               02509         mulwf   [0x2]
               02510         movf    PRODL, W
               02511         addwf   TMP_REG_5, F
               02512         movlw   0x00
               02513         addwfc  TMP_REG_6, F
               02514         addwfc  TMP_REG_7, F
               02515         addwfc  TMP_REG_8, F
               02516         movf    PRODH, W
               02517         addwf   TMP_REG_6, F
               02518         movlw   0x00
               02519         addwfc  TMP_REG_7, F
               02520         addwfc  TMP_REG_8, F
               02521         movf    INDF0, W         ; r5 += (x2*y3)L ; r6 += (x2*y3)H
               02522         mulwf   [0x3]
               02523         movf    PRODL, W
               02524         addwf   TMP_REG_6, F
               02525         movlw   0x00
               02526         addwfc  TMP_REG_7, F
               02527         addwfc  TMP_REG_8, F
               02528         movf    PRODH, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02529         addwf   TMP_REG_7, F
               02530         movlw   0x00
               02531         addwfc  TMP_REG_8, F
               02532         movf    INDF0, W         ; r6 += (x2*y4)L ; r7 += (x2*y4)H
               02533         mulwf   [0x4]
               02534         movf    PRODL, W
               02535         addwf   TMP_REG_7, F
               02536         movlw   0x00
               02537         addwfc  TMP_REG_8, F
               02538         movf    PRODH, W
               02539         addwf   TMP_REG_8, F
               02540         movf    POSTINC0, W      ; r7 += (x2*y5)L
               02541         mulwf   [0x5]            ; FSR0 ++
               02542         movf    PRODL, W
               02543         addwf   TMP_REG_8, F
               02544         movf    INDF0, W         ; r3 += (x3*y0)L ; r4 += (x3*y0)H
               02545         mulwf   [0x0]
               02546         movf    PRODL, W
               02547         addwf   TMP_REG_4, F
               02548         movlw   0x00
               02549         addwfc  TMP_REG_5, F
               02550         addwfc  TMP_REG_6, F
               02551         addwfc  TMP_REG_7, F
               02552         addwfc  TMP_REG_8, F
               02553         movf    PRODH, W
               02554         addwf   TMP_REG_5, F
               02555         movlw   0x00
               02556         addwfc  TMP_REG_6, F
               02557         addwfc  TMP_REG_7, F
               02558         addwfc  TMP_REG_8, F
               02559         movf    INDF0, W         ; r4 += (x3*y1)L ; r5 += (x3*y1)H
               02560         mulwf   [0x1]
               02561         movf    PRODL, W
               02562         addwf   TMP_REG_5, F
               02563         movlw   0x00
               02564         addwfc  TMP_REG_6, F
               02565         addwfc  TMP_REG_7, F
               02566         addwfc  TMP_REG_8, F
               02567         movf    PRODH, W
               02568         addwf   TMP_REG_6, F
               02569         movlw   0x00
               02570         addwfc  TMP_REG_7, F
               02571         addwfc  TMP_REG_8, F
               02572         movf    INDF0, W         ; r5 += (x3*y2)L ; r6 += (x3*y2)H
               02573         mulwf   [0x2]
               02574         movf    PRODL, W
               02575         addwf   TMP_REG_6, F
               02576         movlw   0x00
               02577         addwfc  TMP_REG_7, F
               02578         addwfc  TMP_REG_8, F
               02579         movf    PRODH, W
               02580         addwf   TMP_REG_7, F
               02581         movlw   0x00
               02582         addwfc  TMP_REG_8, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02583         movf    INDF0, W         ; r6 += (x3*y3)L ; r7 += (x3*y3)H
               02584         mulwf   [0x3]
               02585         movf    PRODL, W
               02586         addwf   TMP_REG_7, F
               02587         movlw   0x00
               02588         addwfc  TMP_REG_8, F
               02589         movf    PRODH, W
               02590         addwf   TMP_REG_8, F
               02591         movf    POSTINC0, W      ; r7 += (x3*y4)L
               02592         mulwf   [0x4]            ; FSR0 ++
               02593         movf    PRODL, W
               02594         addwf   TMP_REG_8, F
               02595         movf    INDF0, W         ; r4 += (x4*y0)L ; r5 += (x4*y0)H
               02596         mulwf   [0x0]
               02597         movf    PRODL, W
               02598         addwf   TMP_REG_5, F
               02599         movlw   0x00
               02600         addwfc  TMP_REG_6, F
               02601         addwfc  TMP_REG_7, F
               02602         addwfc  TMP_REG_8, F
               02603         movf    PRODH, W
               02604         addwf   TMP_REG_6, F
               02605         movlw   0x00
               02606         addwfc  TMP_REG_7, F
               02607         addwfc  TMP_REG_8, F
               02608         movf    INDF0, W         ; r5 += (x4*y1)L ; r6 += (x4*y1)H
               02609         mulwf   [0x1]
               02610         movf    PRODL, W
               02611         addwf   TMP_REG_6, F
               02612         movlw   0x00
               02613         addwfc  TMP_REG_7, F
               02614         addwfc  TMP_REG_8, F
               02615         movf    PRODH, W
               02616         addwf   TMP_REG_7, F
               02617         movlw   0x00
               02618         addwfc  TMP_REG_8, F
               02619         movf    INDF0, W         ; r6 += (x4*y2)L ; r7 += (x4*y2)H
               02620         mulwf   [0x2]
               02621         movf    PRODL, W
               02622         addwf   TMP_REG_7, F
               02623         movlw   0x00
               02624         addwfc  TMP_REG_8, F
               02625         movf    PRODH, W
               02626         addwf   TMP_REG_8, F
               02627         movf    POSTINC0, W      ; r7 += (x4*y3)L
               02628         mulwf   [0x3]            ; FSR0 ++
               02629         movf    PRODL, W
               02630         addwf   TMP_REG_8, F
               02631         movf    INDF0, W         ; r5 += (x5*y0)L ; r6 += (x5*y0)H
               02632         mulwf   [0x0]
               02633         movf    PRODL, W
               02634         addwf   TMP_REG_6, F
               02635         movlw   0x00
               02636         addwfc  TMP_REG_7, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02637         addwfc  TMP_REG_8, F
               02638         movf    PRODH, W
               02639         addwf   TMP_REG_7, F
               02640         movlw   0x00
               02641         addwfc  TMP_REG_8, F
               02642         movf    INDF0, W         ; r6 += (x5*y1)L ; r7 += (x5*y1)H
               02643         mulwf   [0x1]
               02644         movf    PRODL, W
               02645         addwf   TMP_REG_7, F
               02646         movlw   0x00
               02647         addwfc  TMP_REG_8, F
               02648         movf    PRODH, W
               02649         addwf   TMP_REG_8, F
               02650         movf    POSTINC0, W      ; r7 += (x5*y2)L
               02651         mulwf   [0x2]            ; FSR0 ++
               02652         movf    PRODL, W
               02653         addwf   TMP_REG_8, F
               02654         movf    INDF0, W         ; r6 += (x6*y0)L ; r7 += (x6*y0)H
               02655         mulwf   [0x0]
               02656         movf    PRODL, W
               02657         addwf   TMP_REG_7, F
               02658         movlw   0x00
               02659         addwfc  TMP_REG_8, F
               02660         movf    PRODH, W
               02661         addwf   TMP_REG_8, F
               02662         movf    POSTINC0, W      ; r7 += (x6*y1)L
               02663         mulwf   [0x1]            ; FSR0 ++
               02664         movf    PRODL, W
               02665         addwf   TMP_REG_8, F
               02666         movf    INDF0, W         ; r7 += (x7*y0)L
               02667         mulwf   [0x0]
               02668         movf    PRODL, W
               02669         addwf   TMP_REG_8, F
               02670         movff   TMP_REG_3, POSTINC1 ; flush r2 ; FSR1 ++
               02671         movff   TMP_REG_4, POSTINC1 ; flush r3 ; FSR1 ++
               02672         movff   TMP_REG_5, POSTINC1 ; flush r4 ; FSR1 ++
               02673         movff   TMP_REG_6, POSTINC1 ; flush r5 ; FSR1 ++
               02674         movff   TMP_REG_7, POSTINC1 ; flush r6 ; FSR1 ++
               02675         movff   TMP_REG_8, POSTINC1 ; flush r7 ; FSR1 ++
               02676         M_PRIM_INT64_2ARG_END
               02677 #endif
               02678 
               02679 #ifdef caml_useprim_caml_int64_div
57AC 02680 caml_int64_div:
57AC EB01 FFE9 02681         movsf   [0x1], FSR0L        ; y = 0 ?
57B0 EB02 FFEA 02682         movsf   [0x2], FSR0H
57B4 E802      02683         addfsr  FSR0, 0x2
57B6 50EE      02684         movf    POSTINC0, W
57B8 10EE      02685         iorwf   POSTINC0, W
57BA 10EE      02686         iorwf   POSTINC0, W
57BC 10EE      02687         iorwf   POSTINC0, W
57BE 10EE      02688         iorwf   POSTINC0, W
57C0 10EE      02689         iorwf   POSTINC0, W
57C2 10EE      02690         iorwf   POSTINC0, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
57C4 10EF      02691         iorwf   INDF0, W
57C6 B4D8      02692         btfsc   STATUS, Z
57C8 EFB2 F009 02693         goto    caml_raise_division_by_0
57CC CF56 FFE9 02694         movff   ACCUL, FSR0L
57D0 CF57 FFEA 02695         movff   ACCUH, FSR0H
57D4 E802      02696         addfsr  FSR0, 0x2
57D6 CFEE FF68 02697         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_D:C:B:A:4:3:2:1
57DA CFEE FF69 02698         movff   POSTINC0, TMP_REG_2
57DE CFEE FF6A 02699         movff   POSTINC0, TMP_REG_3
57E2 CFEE FF6B 02700         movff   POSTINC0, TMP_REG_4
57E6 CFEE FF71 02701         movff   POSTINC0, TMP_REG_A
57EA CFEE FF72 02702         movff   POSTINC0, TMP_REG_B
57EE CFEE FF73 02703         movff   POSTINC0, TMP_REG_C
57F2 CFEF FF74 02704         movff   INDF0, TMP_REG_D
               02705         M_CREATE_INT64              ; ACCU <- new int64
                   M #ifndef caml_useprim_caml_int64_custom
                   M #define caml_useprim_caml_int64_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x5
57F6 515E          M                 movf    CUR_HEAP_END, W
57F8 62E2          M                 cpfseq  FSR1H
57FA D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
57FC 0E0C          M                 movlw   (N * 0x2 + 0x2)
57FE 24E1          M                 addwf   FSR1L, W
5800 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
5802 EC6D F00A     M                 call    caml_gc_exec
                   M 
5806 515E          M                 movf    CUR_HEAP_END, W
5808 62E2          M                 cpfseq  FSR1H
580A D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
580C 0E0C          M                 movlw   (N * 0x2 + 0x2)
580E 24E1          M                 addwf   FSR1L, W
5810 B0D8          M                 btfsc   STATUS, C
5812 EFAC F009     M                 goto    caml_raise_out_of_memory
5816     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000011         M CPT_CUH = CPT_CUH + 1
5816 68E6          M                 setf    POSTINC1                ; write tag
5818 0E05          M                 movlw   0x5
581A 6EE6          M                 movwf   POSTINC1                ; write size
581C CFE1 FF56     M                 movff   FSR1L, ACCUL
5820 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5824 0EF0          M                 movlw   low caml_int64_custom
5826 6EE6          M                 movwf   POSTINC1                ; write custom @L
5828 0E15          M                 movlw   high caml_int64_custom
582A 6EE6          M                 movwf   POSTINC1                ; write custom @H
582C EB01 FFE9 02706         movsf   [0x1], FSR0L        ; y = GC_TMP_REG_4:3:2:1:TMP_REG_8:7:6:5
5830 EB02 FFEA 02707         movsf   [0x2], FSR0H
5834 E802      02708         addfsr  FSR0, 0x2
5836 CFEE FF6C 02709         movff   POSTINC0, TMP_REG_5
583A CFEE FF6D 02710         movff   POSTINC0, TMP_REG_6
583E CFEE FF6E 02711         movff   POSTINC0, TMP_REG_7
5842 CFEE FF6F 02712         movff   POSTINC0, TMP_REG_8
5846 CFEE FF63 02713         movff   POSTINC0, GC_TMP_REG_1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
584A CFEE FF64 02714         movff   POSTINC0, GC_TMP_REG_2
584E CFEE FF65 02715         movff   POSTINC0, GC_TMP_REG_3
5852 CFEF FF66 02716         movff   INDF0, GC_TMP_REG_4
5856 9170      02717         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
5858 AF74      02718         btfss   TMP_REG_D, 7        ; x < 0 ?
585A D018      02719         bra     caml_int64_div_l0   ; no => skip
585C 7170      02720         btg     TMP_REG_9, 0        ; update result sign
585E 1F68      02721         comf    TMP_REG_1, F        ; negate x
5860 1F69      02722         comf    TMP_REG_2, F
5862 1F6A      02723         comf    TMP_REG_3, F
5864 1F6B      02724         comf    TMP_REG_4, F
5866 1F71      02725         comf    TMP_REG_A, F
5868 1F72      02726         comf    TMP_REG_B, F
586A 1F73      02727         comf    TMP_REG_C, F
586C 1F74      02728         comf    TMP_REG_D, F
586E 2B68      02729         incf    TMP_REG_1, F
5870 E30D      02730         bnc     caml_int64_div_l0
5872 2B69      02731         incf    TMP_REG_2, F
5874 E30B      02732         bnc     caml_int64_div_l0
5876 2B6A      02733         incf    TMP_REG_3, F
5878 E309      02734         bnc     caml_int64_div_l0
587A 2B6B      02735         incf    TMP_REG_4, F
587C E307      02736         bnc     caml_int64_div_l0
587E 2B71      02737         incf    TMP_REG_A, F
5880 E305      02738         bnc     caml_int64_div_l0
5882 2B72      02739         incf    TMP_REG_B, F
5884 E303      02740         bnc     caml_int64_div_l0
5886 2B73      02741         incf    TMP_REG_C, F
5888 E301      02742         bnc     caml_int64_div_l0
588A 2B74      02743         incf    TMP_REG_D, F
588C 02744 caml_int64_div_l0:
588C AF66      02745         btfss   GC_TMP_REG_4, 7 ; y < 0 ?
588E D018      02746         bra     caml_int64_div_l1 ; no => skip
5890 7170      02747         btg     TMP_REG_9, 0    ; update result sign
5892 1F6C      02748         comf    TMP_REG_5, F    ; negate y
5894 1F6D      02749         comf    TMP_REG_6, F
5896 1F6E      02750         comf    TMP_REG_7, F
5898 1F6F      02751         comf    TMP_REG_8, F
589A 1F63      02752         comf    GC_TMP_REG_1, F
589C 1F64      02753         comf    GC_TMP_REG_2, F
589E 1F65      02754         comf    GC_TMP_REG_3, F
58A0 1F66      02755         comf    GC_TMP_REG_4, F
58A2 2B6C      02756         incf    TMP_REG_5, F
58A4 E30D      02757         bnc     caml_int64_div_l1
58A6 2B6D      02758         incf    TMP_REG_6, F
58A8 E30B      02759         bnc     caml_int64_div_l1
58AA 2B6E      02760         incf    TMP_REG_7, F
58AC E309      02761         bnc     caml_int64_div_l1
58AE 2B6F      02762         incf    TMP_REG_8, F
58B0 E307      02763         bnc     caml_int64_div_l1
58B2 2B63      02764         incf    GC_TMP_REG_1, F
58B4 E305      02765         bnc     caml_int64_div_l1
58B6 2B64      02766         incf    GC_TMP_REG_2, F
58B8 E303      02767         bnc     caml_int64_div_l1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
58BA 2B65      02768         incf    GC_TMP_REG_3, F
58BC E301      02769         bnc     caml_int64_div_l1
58BE 2B66      02770         incf    GC_TMP_REG_4, F
58C0 02771 caml_int64_div_l1:
58C0 6AE6      02772         clrf    POSTINC1        ; init result to 0
58C2 6AE6      02773         clrf    POSTINC1
58C4 6AE6      02774         clrf    POSTINC1
58C6 6AE6      02775         clrf    POSTINC1
58C8 6AE6      02776         clrf    POSTINC1
58CA 6AE6      02777         clrf    POSTINC1
58CC 6AE6      02778         clrf    POSTINC1
58CE 6AE7      02779         clrf    INDF1
58D0 E947      02780         subfsr  FSR1, 0x7
58D2 6AF3      02781         clrf    PRODL           ; init bit raw to 00...01
58D4 6AF4      02782         clrf    PRODH
58D6 80F3      02783         bsf     PRODL, 0
58D8 02784 caml_int64_div_loop1:
58D8 90D8      02785         bcf     STATUS, C       ; y <- y << 1
58DA 376C      02786         rlcf    TMP_REG_5, F
58DC 376D      02787         rlcf    TMP_REG_6, F
58DE 376E      02788         rlcf    TMP_REG_7, F
58E0 376F      02789         rlcf    TMP_REG_8, F
58E2 3763      02790         rlcf    GC_TMP_REG_1, F
58E4 3764      02791         rlcf    GC_TMP_REG_2, F
58E6 3765      02792         rlcf    GC_TMP_REG_3, F
58E8 3766      02793         rlcf    GC_TMP_REG_4, F
58EA 5166      02794         movf    GC_TMP_REG_4, W ; x - y
58EC 5D74      02795         subwf   TMP_REG_D, W
58EE E322      02796         bnc     caml_int64_div_loop2 ; if x < y then break
58F0 E11B      02797         bnz     caml_int64_div_if_l1 ; if x > y then continue
58F2 5165      02798         movf    GC_TMP_REG_3, W
58F4 5D73      02799         subwf   TMP_REG_C, W
58F6 E31E      02800         bnc     caml_int64_div_loop2 ; if x < y then break
58F8 E117      02801         bnz     caml_int64_div_if_l1 ; if x > y then continue
58FA 5164      02802         movf    GC_TMP_REG_2, W
58FC 5D72      02803         subwf   TMP_REG_B, W
58FE E31A      02804         bnc     caml_int64_div_loop2 ; if x < y then break
5900 E113      02805         bnz     caml_int64_div_if_l1 ; if x > y then continue
5902 5163      02806         movf    GC_TMP_REG_1, W
5904 5D71      02807         subwf   TMP_REG_A, W
5906 E316      02808         bnc     caml_int64_div_loop2 ; if x < y then break
5908 E10F      02809         bnz     caml_int64_div_if_l1 ; if x > y then continue
590A 516F      02810         movf    TMP_REG_8, W
590C 5D6B      02811         subwf   TMP_REG_4, W
590E E312      02812         bnc     caml_int64_div_loop2 ; if x < y then break
5910 E10B      02813         bnz     caml_int64_div_if_l1 ; if x > y then continue
5912 516E      02814         movf    TMP_REG_7, W
5914 5D6A      02815         subwf   TMP_REG_3, W
5916 E30E      02816         bnc     caml_int64_div_loop2 ; if x < y then break
5918 E107      02817         bnz     caml_int64_div_if_l1 ; if w > y then continue
591A 516D      02818         movf    TMP_REG_6, W
591C 5D69      02819         subwf   TMP_REG_2, W
591E E30A      02820         bnc     caml_int64_div_loop2 ; if x < y then break
5920 E103      02821         bnz     caml_int64_div_if_l1 ; if w > y then continue
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5922 516C      02822         movf    TMP_REG_5, W
5924 5D68      02823         subwf   TMP_REG_1, W
5926 E306      02824         bnc     caml_int64_div_loop2 ; if x < y then break
5928 02825 caml_int64_div_if_l1:
5928 90D8      02826         bcf     STATUS, C       ; raw <- raw << 1
592A 36F3      02827         rlcf    PRODL, F
592C E3D5      02828         bnc     caml_int64_div_loop1 ; loop
592E 80F3      02829         bsf     PRODL, 0
5930 2AF4      02830         incf    PRODH, F
5932 D7D2      02831         bra     caml_int64_div_loop1 ; loop
5934 02832 caml_int64_div_loop2:
5934 90D8      02833         bcf     STATUS, C       ; y <- y >> 1
5936 3366      02834         rrcf    GC_TMP_REG_4, F
5938 3365      02835         rrcf    GC_TMP_REG_3, F
593A 3364      02836         rrcf    GC_TMP_REG_2, F
593C 3363      02837         rrcf    GC_TMP_REG_1, F
593E 336F      02838         rrcf    TMP_REG_8, F
5940 336E      02839         rrcf    TMP_REG_7, F
5942 336D      02840         rrcf    TMP_REG_6, F
5944 336C      02841         rrcf    TMP_REG_5, F
5946 5166      02842         movf    GC_TMP_REG_4, W ; x - y
5948 5D74      02843         subwf   TMP_REG_D, W
594A E336      02844         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
594C E11B      02845         bnz     caml_int64_div_if_l2  ; if x > y then continue
594E 5165      02846         movf    GC_TMP_REG_3, W
5950 5D73      02847         subwf   TMP_REG_C, W
5952 E332      02848         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
5954 E117      02849         bnz     caml_int64_div_if_l2  ; if x > y then continue
5956 5164      02850         movf    GC_TMP_REG_2, W
5958 5D72      02851         subwf   TMP_REG_B, W
595A E32E      02852         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
595C E113      02853         bnz     caml_int64_div_if_l2  ; if x > y then continue
595E 5163      02854         movf    GC_TMP_REG_1, W
5960 5D71      02855         subwf   TMP_REG_A, W
5962 E32A      02856         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
5964 E10F      02857         bnz     caml_int64_div_if_l2  ; if x > y then continue
5966 516F      02858         movf    TMP_REG_8, W
5968 5D6B      02859         subwf   TMP_REG_4, W
596A E326      02860         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
596C E10B      02861         bnz     caml_int64_div_if_l2  ; if x > y then continue
596E 516E      02862         movf    TMP_REG_7, W
5970 5D6A      02863         subwf   TMP_REG_3, W
5972 E322      02864         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
5974 E107      02865         bnz     caml_int64_div_if_l2  ; if x > y then continue
5976 516D      02866         movf    TMP_REG_6, W
5978 5D69      02867         subwf   TMP_REG_2, W
597A E31E      02868         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
597C E103      02869         bnz     caml_int64_div_if_l2  ; if x > y then continue
597E 516C      02870         movf    TMP_REG_5, W
5980 5D68      02871         subwf   TMP_REG_1, W
5982 E31A      02872         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
5984 02873 caml_int64_div_if_l2:
5984 516C      02874         movf    TMP_REG_5, W    ; x <- x - y
5986 5F68      02875         subwf   TMP_REG_1, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5988 516D      02876         movf    TMP_REG_6, W
598A 5B69      02877         subwfb  TMP_REG_2, F
598C 516E      02878         movf    TMP_REG_7, W
598E 5B6A      02879         subwfb  TMP_REG_3, F
5990 516F      02880         movf    TMP_REG_8, W
5992 5B6B      02881         subwfb  TMP_REG_4, F
5994 5163      02882         movf    GC_TMP_REG_1, W
5996 5B71      02883         subwfb  TMP_REG_A, F
5998 5164      02884         movf    GC_TMP_REG_2, W
599A 5B72      02885         subwfb  TMP_REG_B, F
599C 5165      02886         movf    GC_TMP_REG_3, W
599E 5B73      02887         subwfb  TMP_REG_C, F
59A0 5166      02888         movf    GC_TMP_REG_4, W
59A2 5B74      02889         subwfb  TMP_REG_D, F
59A4 50F4      02890         movf    PRODH, W        ; res <- res | raw
59A6 26E1      02891         addwf   FSR1L, F
59A8 B0D8      02892         btfsc   STATUS, C
59AA 2AE2      02893         incf    FSR1H, F
59AC 50F3      02894         movf    PRODL, W
59AE 12E7      02895         iorwf   INDF1, F
59B0 50F4      02896         movf    PRODH, W
59B2 5EE1      02897         subwf   FSR1L, F
59B4 A0D8      02898         btfss   STATUS, C
59B6 06E2      02899         decf    FSR1H, F
59B8 02900 caml_int64_div_ifn_l2:
59B8 90D8      02901         bcf     STATUS, C       ; raw <- raw >> 1
59BA 32F3      02902         rrcf    PRODL, F
59BC E3BB      02903         bnc     caml_int64_div_loop2
59BE 8EF3      02904         bsf     PRODL, 7
59C0 06F4      02905         decf    PRODH, F
59C2 AEF4      02906         btfss   PRODH, 7                ; if not raw overflow
59C4 D7B7      02907         bra     caml_int64_div_loop2    ; then loop
59C6 E848      02908         addfsr  FSR1, 0x8
59C8 A170      02909         btfss   TMP_REG_9, 0            ; negative result ?
59CA 0012      02910         return                          ; no => division done
59CC E941      02911         subfsr  FSR1, 0x1               ; yes => negate result
59CE 1EE5      02912         comf    POSTDEC1, F
59D0 1EE5      02913         comf    POSTDEC1, F
59D2 1EE5      02914         comf    POSTDEC1, F
59D4 1EE5      02915         comf    POSTDEC1, F
59D6 1EE5      02916         comf    POSTDEC1, F
59D8 1EE5      02917         comf    POSTDEC1, F
59DA 1EE5      02918         comf    POSTDEC1, F
59DC 1EE7      02919         comf    INDF1, F
59DE 2AE6      02920         incf    POSTINC1, F
59E0 E30E      02921         bnc     caml_int64_div_end7
59E2 2AE6      02922         incf    POSTINC1, F
59E4 E30E      02923         bnc     caml_int64_div_end6
59E6 2AE6      02924         incf    POSTINC1, F
59E8 E30E      02925         bnc     caml_int64_div_end5
59EA 2AE6      02926         incf    POSTINC1, F
59EC E30E      02927         bnc     caml_int64_div_end4
59EE 2AE6      02928         incf    POSTINC1, F
59F0 E30E      02929         bnc     caml_int64_div_end3
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
59F2 2AE6      02930         incf    POSTINC1, F
59F4 E30E      02931         bnc     caml_int64_div_end2
59F6 2AE6      02932         incf    POSTINC1, F
59F8 E30E      02933         bnc     caml_int64_div_end1
59FA 2AE6      02934         incf    POSTINC1, F
59FC 0012      02935         return
59FE 02936 caml_int64_div_end7:
59FE E847      02937         addfsr  FSR1, 0x7
5A00 0012      02938         return
5A02 02939 caml_int64_div_end6:
5A02 E846      02940         addfsr  FSR1, 0x6
5A04 0012      02941         return
5A06 02942 caml_int64_div_end5:
5A06 E845      02943         addfsr  FSR1, 0x5
5A08 0012      02944         return
5A0A 02945 caml_int64_div_end4:
5A0A E844      02946         addfsr  FSR1, 0x4
5A0C 0012      02947         return
5A0E 02948 caml_int64_div_end3:
5A0E E843      02949         addfsr  FSR1, 0x3
5A10 0012      02950         return
5A12 02951 caml_int64_div_end2:
5A12 E842      02952         addfsr  FSR1, 0x2
5A14 0012      02953         return
5A16 02954 caml_int64_div_end1:
5A16 E841      02955         addfsr  FSR1, 0x1
5A18 0012      02956         return
               02957 #endif
               02958 
               02959 #ifdef caml_useprim_caml_int64_mod
5A1A 02960 caml_int64_mod:
5A1A EB01 FFE9 02961         movsf   [0x1], FSR0L        ; y = 0 ?
5A1E EB02 FFEA 02962         movsf   [0x2], FSR0H
5A22 E802      02963         addfsr  FSR0, 0x2
5A24 50EE      02964         movf    POSTINC0, W
5A26 10EE      02965         iorwf   POSTINC0, W
5A28 10EE      02966         iorwf   POSTINC0, W
5A2A 10EE      02967         iorwf   POSTINC0, W
5A2C 10EE      02968         iorwf   POSTINC0, W
5A2E 10EE      02969         iorwf   POSTINC0, W
5A30 10EE      02970         iorwf   POSTINC0, W
5A32 10EF      02971         iorwf   INDF0, W
5A34 B4D8      02972         btfsc   STATUS, Z
5A36 EFB2 F009 02973         goto    caml_raise_division_by_0
5A3A CF56 FFE9 02974         movff   ACCUL, FSR0L
5A3E CF57 FFEA 02975         movff   ACCUH, FSR0H
5A42 E802      02976         addfsr  FSR0, 0x2
5A44 CFEE FF68 02977         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_D:C:B:A:4:3:2:1
5A48 CFEE FF69 02978         movff   POSTINC0, TMP_REG_2
5A4C CFEE FF6A 02979         movff   POSTINC0, TMP_REG_3
5A50 CFEE FF6B 02980         movff   POSTINC0, TMP_REG_4
5A54 CFEE FF71 02981         movff   POSTINC0, TMP_REG_A
5A58 CFEE FF72 02982         movff   POSTINC0, TMP_REG_B
5A5C CFEE FF73 02983         movff   POSTINC0, TMP_REG_C
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5A60 CFEF FF74 02984         movff   INDF0, TMP_REG_D
               02985         M_CREATE_INT64              ; ACCU <- new int64
                   M #ifndef caml_useprim_caml_int64_custom
                   M #define caml_useprim_caml_int64_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x5
5A64 515E          M                 movf    CUR_HEAP_END, W
5A66 62E2          M                 cpfseq  FSR1H
5A68 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5A6A 0E0C          M                 movlw   (N * 0x2 + 0x2)
5A6C 24E1          M                 addwf   FSR1L, W
5A6E E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
5A70 EC6D F00A     M                 call    caml_gc_exec
                   M 
5A74 515E          M                 movf    CUR_HEAP_END, W
5A76 62E2          M                 cpfseq  FSR1H
5A78 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5A7A 0E0C          M                 movlw   (N * 0x2 + 0x2)
5A7C 24E1          M                 addwf   FSR1L, W
5A7E B0D8          M                 btfsc   STATUS, C
5A80 EFAC F009     M                 goto    caml_raise_out_of_memory
5A84     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000012         M CPT_CUH = CPT_CUH + 1
5A84 68E6          M                 setf    POSTINC1                ; write tag
5A86 0E05          M                 movlw   0x5
5A88 6EE6          M                 movwf   POSTINC1                ; write size
5A8A CFE1 FF56     M                 movff   FSR1L, ACCUL
5A8E CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5A92 0EF0          M                 movlw   low caml_int64_custom
5A94 6EE6          M                 movwf   POSTINC1                ; write custom @L
5A96 0E15          M                 movlw   high caml_int64_custom
5A98 6EE6          M                 movwf   POSTINC1                ; write custom @H
5A9A EB01 FFE9 02986         movsf   [0x1], FSR0L        ; y = GC_TMP_REG_4:3:2:1:TMP_REG_8:7:6:5
5A9E EB02 FFEA 02987         movsf   [0x2], FSR0H
5AA2 E802      02988         addfsr  FSR0, 0x2
5AA4 CFEE FF6C 02989         movff   POSTINC0, TMP_REG_5
5AA8 CFEE FF6D 02990         movff   POSTINC0, TMP_REG_6
5AAC CFEE FF6E 02991         movff   POSTINC0, TMP_REG_7
5AB0 CFEE FF6F 02992         movff   POSTINC0, TMP_REG_8
5AB4 CFEE FF63 02993         movff   POSTINC0, GC_TMP_REG_1
5AB8 CFEE FF64 02994         movff   POSTINC0, GC_TMP_REG_2
5ABC CFEE FF65 02995         movff   POSTINC0, GC_TMP_REG_3
5AC0 CFEF FF66 02996         movff   INDF0, GC_TMP_REG_4
5AC4 9170      02997         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
5AC6 AF74      02998         btfss   TMP_REG_D, 7        ; x < 0 ?
5AC8 D018      02999         bra     caml_int64_mod_l0   ; no => skip
5ACA 7170      03000         btg     TMP_REG_9, 0        ; update result sign
5ACC 1F68      03001         comf    TMP_REG_1, F        ; negate x
5ACE 1F69      03002         comf    TMP_REG_2, F
5AD0 1F6A      03003         comf    TMP_REG_3, F
5AD2 1F6B      03004         comf    TMP_REG_4, F
5AD4 1F71      03005         comf    TMP_REG_A, F
5AD6 1F72      03006         comf    TMP_REG_B, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5AD8 1F73      03007         comf    TMP_REG_C, F
5ADA 1F74      03008         comf    TMP_REG_D, F
5ADC 2B68      03009         incf    TMP_REG_1, F
5ADE E30D      03010         bnc     caml_int64_mod_l0
5AE0 2B69      03011         incf    TMP_REG_2, F
5AE2 E30B      03012         bnc     caml_int64_mod_l0
5AE4 2B6A      03013         incf    TMP_REG_3, F
5AE6 E309      03014         bnc     caml_int64_mod_l0
5AE8 2B6B      03015         incf    TMP_REG_4, F
5AEA E307      03016         bnc     caml_int64_mod_l0
5AEC 2B71      03017         incf    TMP_REG_A, F
5AEE E305      03018         bnc     caml_int64_mod_l0
5AF0 2B72      03019         incf    TMP_REG_B, F
5AF2 E303      03020         bnc     caml_int64_mod_l0
5AF4 2B73      03021         incf    TMP_REG_C, F
5AF6 E301      03022         bnc     caml_int64_mod_l0
5AF8 2B74      03023         incf    TMP_REG_D, F
5AFA 03024 caml_int64_mod_l0:
5AFA AF66      03025         btfss   GC_TMP_REG_4, 7 ; y < 0 ?
5AFC D018      03026         bra     caml_int64_mod_l1 ; no => skip
5AFE 7170      03027         btg     TMP_REG_9, 0    ; update result sign
5B00 1F6C      03028         comf    TMP_REG_5, F    ; negate y
5B02 1F6D      03029         comf    TMP_REG_6, F
5B04 1F6E      03030         comf    TMP_REG_7, F
5B06 1F6F      03031         comf    TMP_REG_8, F
5B08 1F63      03032         comf    GC_TMP_REG_1, F
5B0A 1F64      03033         comf    GC_TMP_REG_2, F
5B0C 1F65      03034         comf    GC_TMP_REG_3, F
5B0E 1F66      03035         comf    GC_TMP_REG_4, F
5B10 2B6C      03036         incf    TMP_REG_5, F
5B12 E30D      03037         bnc     caml_int64_mod_l1
5B14 2B6D      03038         incf    TMP_REG_6, F
5B16 E30B      03039         bnc     caml_int64_mod_l1
5B18 2B6E      03040         incf    TMP_REG_7, F
5B1A E309      03041         bnc     caml_int64_mod_l1
5B1C 2B6F      03042         incf    TMP_REG_8, F
5B1E E307      03043         bnc     caml_int64_mod_l1
5B20 2B63      03044         incf    GC_TMP_REG_1, F
5B22 E305      03045         bnc     caml_int64_mod_l1
5B24 2B64      03046         incf    GC_TMP_REG_2, F
5B26 E303      03047         bnc     caml_int64_mod_l1
5B28 2B65      03048         incf    GC_TMP_REG_3, F
5B2A E301      03049         bnc     caml_int64_mod_l1
5B2C 2B66      03050         incf    GC_TMP_REG_4, F
5B2E 03051 caml_int64_mod_l1:
5B2E 6B75      03052         clrf    TMP_REG_E       ; counter = TMP_REG_E <- 0
5B30 03053 caml_int64_mod_loop1:
5B30 90D8      03054         bcf     STATUS, C       ; y <- y << 1
5B32 376C      03055         rlcf    TMP_REG_5, F
5B34 376D      03056         rlcf    TMP_REG_6, F
5B36 376E      03057         rlcf    TMP_REG_7, F
5B38 376F      03058         rlcf    TMP_REG_8, F
5B3A 3763      03059         rlcf    GC_TMP_REG_1, F
5B3C 3764      03060         rlcf    GC_TMP_REG_2, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5B3E 3765      03061         rlcf    GC_TMP_REG_3, F
5B40 3766      03062         rlcf    GC_TMP_REG_4, F
5B42 2B75      03063         incf    TMP_REG_E, F    ; incr counter
5B44 5166      03064         movf    GC_TMP_REG_4, W ; x - y
5B46 5D74      03065         subwf   TMP_REG_D, W
5B48 E31C      03066         bnc     caml_int64_mod_loop2 ; if x < y then break
5B4A E1F2      03067         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B4C 5165      03068         movf    GC_TMP_REG_3, W
5B4E 5D73      03069         subwf   TMP_REG_C, W
5B50 E318      03070         bnc     caml_int64_mod_loop2 ; if x < y then break
5B52 E1EE      03071         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B54 5164      03072         movf    GC_TMP_REG_2, W
5B56 5D72      03073         subwf   TMP_REG_B, W
5B58 E314      03074         bnc     caml_int64_mod_loop2 ; if x < y then break
5B5A E1EA      03075         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B5C 5163      03076         movf    GC_TMP_REG_1, W
5B5E 5D71      03077         subwf   TMP_REG_A, W
5B60 E310      03078         bnc     caml_int64_mod_loop2 ; if x < y then break
5B62 E1E6      03079         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B64 516F      03080         movf    TMP_REG_8, W
5B66 5D6B      03081         subwf   TMP_REG_4, W
5B68 E30C      03082         bnc     caml_int64_mod_loop2 ; if x < y then break
5B6A E1E2      03083         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B6C 516E      03084         movf    TMP_REG_7, W
5B6E 5D6A      03085         subwf   TMP_REG_3, W
5B70 E308      03086         bnc     caml_int64_mod_loop2 ; if x < y then break
5B72 E1DE      03087         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B74 516D      03088         movf    TMP_REG_6, W
5B76 5D69      03089         subwf   TMP_REG_2, W
5B78 E304      03090         bnc     caml_int64_mod_loop2 ; if x < y then break
5B7A E1DA      03091         bnz     caml_int64_mod_loop1 ; if x > y then loop
5B7C 516C      03092         movf    TMP_REG_5, W
5B7E 5D68      03093         subwf   TMP_REG_1, W
5B80 E2D7      03094         bc      caml_int64_mod_loop1 ; if x >= y then loop
5B82 03095 caml_int64_mod_loop2:
5B82 90D8      03096         bcf     STATUS, C       ; y <- y >> 1
5B84 3366      03097         rrcf    GC_TMP_REG_4, F
5B86 3365      03098         rrcf    GC_TMP_REG_3, F
5B88 3364      03099         rrcf    GC_TMP_REG_2, F
5B8A 3363      03100         rrcf    GC_TMP_REG_1, F
5B8C 336F      03101         rrcf    TMP_REG_8, F
5B8E 336E      03102         rrcf    TMP_REG_7, F
5B90 336D      03103         rrcf    TMP_REG_6, F
5B92 336C      03104         rrcf    TMP_REG_5, F
5B94 5166      03105         movf    GC_TMP_REG_4, W ; x - y
5B96 5D74      03106         subwf   TMP_REG_D, W
5B98 E32C      03107         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5B9A E11B      03108         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5B9C 5165      03109         movf    GC_TMP_REG_3, W
5B9E 5D73      03110         subwf   TMP_REG_C, W
5BA0 E328      03111         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BA2 E117      03112         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BA4 5164      03113         movf    GC_TMP_REG_2, W
5BA6 5D72      03114         subwf   TMP_REG_B, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 210


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5BA8 E324      03115         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BAA E113      03116         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BAC 5163      03117         movf    GC_TMP_REG_1, W
5BAE 5D71      03118         subwf   TMP_REG_A, W
5BB0 E320      03119         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BB2 E10F      03120         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BB4 516F      03121         movf    TMP_REG_8, W
5BB6 5D6B      03122         subwf   TMP_REG_4, W
5BB8 E31C      03123         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BBA E10B      03124         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BBC 516E      03125         movf    TMP_REG_7, W
5BBE 5D6A      03126         subwf   TMP_REG_3, W
5BC0 E318      03127         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BC2 E107      03128         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BC4 516D      03129         movf    TMP_REG_6, W
5BC6 5D69      03130         subwf   TMP_REG_2, W
5BC8 E314      03131         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BCA E103      03132         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
5BCC 516C      03133         movf    TMP_REG_5, W
5BCE 5D68      03134         subwf   TMP_REG_1, W
5BD0 E310      03135         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
5BD2 03136 caml_int64_mod_if_l2:
5BD2 516C      03137         movf    TMP_REG_5, W    ; x <- x - y
5BD4 5F68      03138         subwf   TMP_REG_1, F
5BD6 516D      03139         movf    TMP_REG_6, W
5BD8 5B69      03140         subwfb  TMP_REG_2, F
5BDA 516E      03141         movf    TMP_REG_7, W
5BDC 5B6A      03142         subwfb  TMP_REG_3, F
5BDE 516F      03143         movf    TMP_REG_8, W
5BE0 5B6B      03144         subwfb  TMP_REG_4, F
5BE2 5163      03145         movf    GC_TMP_REG_1, W
5BE4 5B71      03146         subwfb  TMP_REG_A, F
5BE6 5164      03147         movf    GC_TMP_REG_2, W
5BE8 5B72      03148         subwfb  TMP_REG_B, F
5BEA 5165      03149         movf    GC_TMP_REG_3, W
5BEC 5B73      03150         subwfb  TMP_REG_C, F
5BEE 5166      03151         movf    GC_TMP_REG_4, W
5BF0 5B74      03152         subwfb  TMP_REG_D, F
5BF2 03153 caml_int64_mod_ifn_l2:
5BF2 2F75      03154         decfsz  TMP_REG_E, F    ; decr counter
5BF4 D7C6      03155         bra     caml_int64_mod_loop2 ; if counter <> 0 then loop
5BF6 A170      03156         btfss   TMP_REG_9, 0    ; negative result ?
5BF8 D017      03157         bra     caml_int64_mod_end ; no => modulo done
5BFA 1F68      03158         comf    TMP_REG_1, F       ; yes => negate result
5BFC 1F69      03159         comf    TMP_REG_2, F
5BFE 1F6A      03160         comf    TMP_REG_3, F
5C00 1F6B      03161         comf    TMP_REG_4, F
5C02 1F71      03162         comf    TMP_REG_A, F
5C04 1F72      03163         comf    TMP_REG_B, F
5C06 1F73      03164         comf    TMP_REG_C, F
5C08 1F74      03165         comf    TMP_REG_D, F
5C0A 2B68      03166         incf    TMP_REG_1, F
5C0C E30D      03167         bnc     caml_int64_mod_end
5C0E 2B69      03168         incf    TMP_REG_2, F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 211


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5C10 E30B      03169         bnc     caml_int64_mod_end
5C12 2B6A      03170         incf    TMP_REG_3, F
5C14 E309      03171         bnc     caml_int64_mod_end
5C16 2B6B      03172         incf    TMP_REG_4, F
5C18 E307      03173         bnc     caml_int64_mod_end
5C1A 2B71      03174         incf    TMP_REG_A, F
5C1C E305      03175         bnc     caml_int64_mod_end
5C1E 2B72      03176         incf    TMP_REG_B, F
5C20 E303      03177         bnc     caml_int64_mod_end
5C22 2B73      03178         incf    TMP_REG_C, F
5C24 E301      03179         bnc     caml_int64_mod_end
5C26 2B74      03180         incf    TMP_REG_D, F
5C28 03181 caml_int64_mod_end:
5C28 CF68 FFE6 03182         movff   TMP_REG_1, POSTINC1
5C2C CF69 FFE6 03183         movff   TMP_REG_2, POSTINC1
5C30 CF6A FFE6 03184         movff   TMP_REG_3, POSTINC1
5C34 CF6B FFE6 03185         movff   TMP_REG_4, POSTINC1
5C38 CF71 FFE6 03186         movff   TMP_REG_A, POSTINC1
5C3C CF72 FFE6 03187         movff   TMP_REG_B, POSTINC1
5C40 CF73 FFE6 03188         movff   TMP_REG_C, POSTINC1
5C44 CF74 FFE6 03189         movff   TMP_REG_D, POSTINC1
5C48 0012      03190         return
               03191 #endif
               03192 
               03193 #ifdef caml_useprim_caml_int64_and
5C4A 03194 caml_int64_and:
               03195         M_PRIM_INT64_2ARG_INIT
                   M #ifndef caml_useprim_caml_int64_2arg
                   M #define caml_useprim_caml_int64_2arg
                   M #endif
5C4A ECD0 F02E     M                 call    caml_int64_2arg_init
5C4E 50DE      03196         movf    POSTINC2, W      ; 1
5C50 14EE      03197         andwf   POSTINC0, W
5C52 6EE6      03198         movwf   POSTINC1
5C54 50DE      03199         movf    POSTINC2, W      ; 2
5C56 14EE      03200         andwf   POSTINC0, W
5C58 6EE6      03201         movwf   POSTINC1
5C5A 50DE      03202         movf    POSTINC2, W      ; 3
5C5C 14EE      03203         andwf   POSTINC0, W
5C5E 6EE6      03204         movwf   POSTINC1
5C60 50DE      03205         movf    POSTINC2, W      ; 4
5C62 14EE      03206         andwf   POSTINC0, W
5C64 6EE6      03207         movwf   POSTINC1
5C66 50DE      03208         movf    POSTINC2, W      ; 5
5C68 14EE      03209         andwf   POSTINC0, W
5C6A 6EE6      03210         movwf   POSTINC1
5C6C 50DE      03211         movf    POSTINC2, W      ; 6
5C6E 14EE      03212         andwf   POSTINC0, W
5C70 6EE6      03213         movwf   POSTINC1
5C72 50DE      03214         movf    POSTINC2, W      ; 7
5C74 14EE      03215         andwf   POSTINC0, W
5C76 6EE6      03216         movwf   POSTINC1
5C78 50DF      03217         movf    INDF2, W         ; 8
5C7A 14EF      03218         andwf   INDF0, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 212


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5C7C 6EE6      03219         movwf   POSTINC1
               03220         M_PRIM_INT64_2ARG_END
5C7E CF68 FFD9     M                 movff   TMP_REG_1, FSR2L
5C82 CF69 FFDA     M                 movff   TMP_REG_2, FSR2H
5C86 0012          M                 return
               03221 #endif
               03222 
               03223 #ifdef caml_useprim_caml_int64_or
               03224 caml_int64_or:
               03225         M_PRIM_INT64_2ARG_INIT
               03226         movf    POSTINC2, W      ; 1
               03227         iorwf   POSTINC0, W
               03228         movwf   POSTINC1
               03229         movf    POSTINC2, W      ; 2
               03230         iorwf   POSTINC0, W
               03231         movwf   POSTINC1
               03232         movf    POSTINC2, W      ; 3
               03233         iorwf   POSTINC0, W
               03234         movwf   POSTINC1
               03235         movf    POSTINC2, W      ; 4
               03236         iorwf   POSTINC0, W
               03237         movwf   POSTINC1
               03238         movf    POSTINC2, W      ; 5
               03239         iorwf   POSTINC0, W
               03240         movwf   POSTINC1
               03241         movf    POSTINC2, W      ; 6
               03242         iorwf   POSTINC0, W
               03243         movwf   POSTINC1
               03244         movf    POSTINC2, W      ; 7
               03245         iorwf   POSTINC0, W
               03246         movwf   POSTINC1
               03247         movf    INDF2, W         ; 8
               03248         iorwf   INDF0, W
               03249         movwf   POSTINC1
               03250         M_PRIM_INT64_2ARG_END
               03251 #endif
               03252 
               03253 #ifdef caml_useprim_caml_int64_xor
               03254 caml_int64_xor:
               03255         M_PRIM_INT64_2ARG_INIT
               03256         movf    POSTINC2, W      ; 1
               03257         xorwf   POSTINC0, W
               03258         movwf   POSTINC1
               03259         movf    POSTINC2, W      ; 2
               03260         xorwf   POSTINC0, W
               03261         movwf   POSTINC1
               03262         movf    POSTINC2, W      ; 3
               03263         xorwf   POSTINC0, W
               03264         movwf   POSTINC1
               03265         movf    POSTINC2, W      ; 4
               03266         xorwf   POSTINC0, W
               03267         movwf   POSTINC1
               03268         movf    POSTINC2, W      ; 5
               03269         xorwf   POSTINC0, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 213


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03270         movwf   POSTINC1
               03271         movf    POSTINC2, W      ; 6
               03272         xorwf   POSTINC0, W
               03273         movwf   POSTINC1
               03274         movf    POSTINC2, W      ; 7
               03275         xorwf   POSTINC0, W
               03276         movwf   POSTINC1
               03277         movf    INDF2, W         ; 8
               03278         xorwf   INDF0, W
               03279         movwf   POSTINC1
               03280         M_PRIM_INT64_2ARG_END
               03281 #endif
               03282 
               03283 #ifdef caml_useprim_caml_int64_shift_left
               03284 caml_int64_shift_left:
               03285         M_PRIM_INT64_1ARG_INIT
               03286         movff   POSTINC0, TMP_REG_1
               03287         movff   POSTINC0, TMP_REG_2
               03288         movff   POSTINC0, TMP_REG_3
               03289         movff   POSTINC0, TMP_REG_4
               03290         movff   POSTINC0, TMP_REG_5
               03291         movff   POSTINC0, TMP_REG_6
               03292         movff   POSTINC0, TMP_REG_7
               03293         movff   INDF0, TMP_REG_8
               03294         bcf     STATUS, C
               03295         rrcf    [0x1], F
               03296         bz      caml_int64_shift_left_end_loop
               03297 caml_int64_shift_left_loop:
               03298         rlcf    TMP_REG_8, W    ; STATUS.C ignored
               03299         rlcf    TMP_REG_1, F
               03300         rlcf    TMP_REG_2, F
               03301         rlcf    TMP_REG_3, F
               03302         rlcf    TMP_REG_4, F
               03303         rlcf    TMP_REG_5, F
               03304         rlcf    TMP_REG_6, F
               03305         rlcf    TMP_REG_7, F
               03306         rlcf    TMP_REG_8, F
               03307         decfsz  [0x1], F
               03308         bra     caml_int64_shift_left_loop
               03309 caml_int64_shift_left_end_loop:
               03310         movff   TMP_REG_1, POSTINC1
               03311         movff   TMP_REG_2, POSTINC1
               03312         movff   TMP_REG_3, POSTINC1
               03313         movff   TMP_REG_4, POSTINC1
               03314         movff   TMP_REG_5, POSTINC1
               03315         movff   TMP_REG_6, POSTINC1
               03316         movff   TMP_REG_7, POSTINC1
               03317         movff   TMP_REG_8, POSTINC1
               03318         M_PRIM_INT64_1ARG_END
               03319 #endif
               03320 
               03321 #ifdef caml_useprim_caml_int64_shift_right
               03322 caml_int64_shift_right:
               03323         M_PRIM_INT64_1ARG_INIT
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 214


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03324         movff   POSTINC0, TMP_REG_1
               03325         movff   POSTINC0, TMP_REG_2
               03326         movff   POSTINC0, TMP_REG_3
               03327         movff   POSTINC0, TMP_REG_4
               03328         movff   POSTINC0, TMP_REG_5
               03329         movff   POSTINC0, TMP_REG_6
               03330         movff   POSTINC0, TMP_REG_7
               03331         movff   INDF0, TMP_REG_8
               03332         bcf     STATUS, C
               03333         rrcf    [0x1], F
               03334         bz      caml_int64_shift_right_end_loop
               03335 caml_int64_shift_right_loop:
               03336         bcf     STATUS, C
               03337         rrcf    TMP_REG_8, F
               03338         rrcf    TMP_REG_7, F
               03339         rrcf    TMP_REG_6, F
               03340         rrcf    TMP_REG_5, F
               03341         rrcf    TMP_REG_4, F
               03342         rrcf    TMP_REG_3, F
               03343         rrcf    TMP_REG_2, F
               03344         rrcf    TMP_REG_1, F
               03345         decfsz  [0x1], F
               03346         bra     caml_int64_shift_right_loop
               03347 caml_int64_shift_right_end_loop:
               03348         movff   TMP_REG_1, POSTINC1
               03349         movff   TMP_REG_2, POSTINC1
               03350         movff   TMP_REG_3, POSTINC1
               03351         movff   TMP_REG_4, POSTINC1
               03352         movff   TMP_REG_5, POSTINC1
               03353         movff   TMP_REG_6, POSTINC1
               03354         movff   TMP_REG_7, POSTINC1
               03355         movff   TMP_REG_8, POSTINC1
               03356         M_PRIM_INT64_1ARG_END
               03357 #endif
               03358 
               03359 #ifdef caml_useprim_caml_int64_shift_right_unsigned
5C88 03360 caml_int64_shift_right_unsigned:
               03361         M_PRIM_INT64_1ARG_INIT
                   M #ifndef caml_useprim_caml_int64_1arg
                   M #define caml_useprim_caml_int64_1arg
                   M #endif
5C88 ECAB F02E     M                 call    caml_int64_1arg_init
5C8C CFEE FF68 03362         movff   POSTINC0, TMP_REG_1
5C90 CFEE FF69 03363         movff   POSTINC0, TMP_REG_2
5C94 CFEE FF6A 03364         movff   POSTINC0, TMP_REG_3
5C98 CFEE FF6B 03365         movff   POSTINC0, TMP_REG_4
5C9C CFEE FF6C 03366         movff   POSTINC0, TMP_REG_5
5CA0 CFEE FF6D 03367         movff   POSTINC0, TMP_REG_6
5CA4 CFEE FF6E 03368         movff   POSTINC0, TMP_REG_7
5CA8 CFEF FF6F 03369         movff   INDF0, TMP_REG_8
5CAC 90D8      03370         bcf     STATUS, C
5CAE 3201      03371         rrcf    [0x1], F
5CB0 E00B      03372         bz      caml_int64_shift_right_unsigned_end_loop
5CB2 03373 caml_int64_shift_right_unsigned_loop:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 215


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5CB2 90D8      03374         bcf     STATUS, C
5CB4 336F      03375         rrcf    TMP_REG_8, F
5CB6 336E      03376         rrcf    TMP_REG_7, F
5CB8 336D      03377         rrcf    TMP_REG_6, F
5CBA 336C      03378         rrcf    TMP_REG_5, F
5CBC 336B      03379         rrcf    TMP_REG_4, F
5CBE 336A      03380         rrcf    TMP_REG_3, F
5CC0 3369      03381         rrcf    TMP_REG_2, F
5CC2 3368      03382         rrcf    TMP_REG_1, F
5CC4 2E01      03383         decfsz  [0x1], F
5CC6 D7F5      03384         bra     caml_int64_shift_right_unsigned_loop
5CC8 03385 caml_int64_shift_right_unsigned_end_loop:
5CC8 CF68 FFE6 03386         movff   TMP_REG_1, POSTINC1
5CCC CF69 FFE6 03387         movff   TMP_REG_2, POSTINC1
5CD0 CF6A FFE6 03388         movff   TMP_REG_3, POSTINC1
5CD4 CF6B FFE6 03389         movff   TMP_REG_4, POSTINC1
5CD8 CF6C FFE6 03390         movff   TMP_REG_5, POSTINC1
5CDC CF6D FFE6 03391         movff   TMP_REG_6, POSTINC1
5CE0 CF6E FFE6 03392         movff   TMP_REG_7, POSTINC1
5CE4 CF6F FFE6 03393         movff   TMP_REG_8, POSTINC1
               03394         M_PRIM_INT64_1ARG_END
5CE8 0012          M                 return
               03395 #endif
               03396 
               03397 #ifdef caml_useprim_caml_int64_of_int
5CEA 03398 caml_int64_of_int:
5CEA CF56 FF68 03399         movff   ACCUL, TMP_REG_1 ; TMP_REG_1:2 <- ACCU
5CEE CF57 FF69 03400         movff   ACCUH, TMP_REG_2
               03401         M_CREATE_INT64
                   M #ifndef caml_useprim_caml_int64_custom
                   M #define caml_useprim_caml_int64_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x5
5CF2 515E          M                 movf    CUR_HEAP_END, W
5CF4 62E2          M                 cpfseq  FSR1H
5CF6 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5CF8 0E0C          M                 movlw   (N * 0x2 + 0x2)
5CFA 24E1          M                 addwf   FSR1L, W
5CFC E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
5CFE EC6D F00A     M                 call    caml_gc_exec
                   M 
5D02 515E          M                 movf    CUR_HEAP_END, W
5D04 62E2          M                 cpfseq  FSR1H
5D06 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5D08 0E0C          M                 movlw   (N * 0x2 + 0x2)
5D0A 24E1          M                 addwf   FSR1L, W
5D0C B0D8          M                 btfsc   STATUS, C
5D0E EFAC F009     M                 goto    caml_raise_out_of_memory
5D12     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000013         M CPT_CUH = CPT_CUH + 1
5D12 68E6          M                 setf    POSTINC1                ; write tag
5D14 0E05          M                 movlw   0x5
5D16 6EE6          M                 movwf   POSTINC1                ; write size
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 216


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5D18 CFE1 FF56     M                 movff   FSR1L, ACCUL
5D1C CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5D20 0EF0          M                 movlw   low caml_int64_custom
5D22 6EE6          M                 movwf   POSTINC1                ; write custom @L
5D24 0E15          M                 movlw   high caml_int64_custom
5D26 6EE6          M                 movwf   POSTINC1                ; write custom @H
5D28 3169      03402         rrcf    TMP_REG_2, W     ; STATUS.C ignored
5D2A 3168      03403         rrcf    TMP_REG_1, W
5D2C 6EE6      03404         movwf   POSTINC1
5D2E 3569      03405         rlcf    TMP_REG_2, W     ; STATUS.C ignored
5D30 E209      03406         bc      caml_int64_of_int_neg
5D32 3169      03407         rrcf    TMP_REG_2, W
5D34 6EE6      03408         movwf   POSTINC1
5D36 6AE6      03409         clrf    POSTINC1
5D38 6AE6      03410         clrf    POSTINC1
5D3A 6AE6      03411         clrf    POSTINC1
5D3C 6AE6      03412         clrf    POSTINC1
5D3E 6AE6      03413         clrf    POSTINC1
5D40 6AE6      03414         clrf    POSTINC1
5D42 0012      03415         return
5D44 03416 caml_int64_of_int_neg:
5D44 3169      03417         rrcf    TMP_REG_2, W
5D46 6EE6      03418         movwf   POSTINC1
5D48 68E6      03419         setf    POSTINC1
5D4A 68E6      03420         setf    POSTINC1
5D4C 68E6      03421         setf    POSTINC1
5D4E 68E6      03422         setf    POSTINC1
5D50 68E6      03423         setf    POSTINC1
5D52 68E6      03424         setf    POSTINC1
5D54 0012      03425         return
               03426 #endif
               03427 
               03428 #ifdef caml_useprim_caml_int64_of_int32
               03429 caml_int64_of_int32:
               03430         M_PRIM_INT64_1ARG_INIT
               03431         movff   POSTINC0, POSTINC1
               03432         movff   POSTINC0, POSTINC1
               03433         movff   POSTINC0, POSTINC1
               03434         movff   INDF0, POSTINC1
               03435         btfsc   INDF0, 7
               03436         bra     caml_int64_of_int32_neg
               03437         clrf    POSTINC1
               03438         clrf    POSTINC1
               03439         clrf    POSTINC1
               03440         clrf    POSTINC1
               03441         M_PRIM_INT64_1ARG_END
               03442 caml_int64_of_int32_neg:
               03443         setf    POSTINC1
               03444         setf    POSTINC1
               03445         setf    POSTINC1
               03446         setf    POSTINC1
               03447         M_PRIM_INT64_1ARG_END
               03448 #endif
               03449 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 217


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03450 #ifdef caml_useprim_caml_int64_to_int32
               03451 caml_int64_to_int32:
               03452         M_PRIM_INT32_1ARG_INIT
               03453         movff   POSTINC0, POSTINC1
               03454         movff   POSTINC0, POSTINC1
               03455         movff   POSTINC0, POSTINC1
               03456         movff   POSTINC0, POSTINC1
               03457         M_PRIM_INT32_1ARG_END
               03458 #endif
               03459 
               03460 #ifdef caml_useprim_caml_int64_1arg
5D56 03461 caml_int64_1arg_init:
5D56 CF56 FF68 03462         movff   ACCUL, TMP_REG_1
5D5A CF57 FF69 03463         movff   ACCUH, TMP_REG_2
               03464         M_CREATE_INT64           ; ACCU <- alloc(int64)
                   M #ifndef caml_useprim_caml_int64_custom
                   M #define caml_useprim_caml_int64_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x5
5D5E 515E          M                 movf    CUR_HEAP_END, W
5D60 62E2          M                 cpfseq  FSR1H
5D62 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5D64 0E0C          M                 movlw   (N * 0x2 + 0x2)
5D66 24E1          M                 addwf   FSR1L, W
5D68 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
5D6A EC6D F00A     M                 call    caml_gc_exec
                   M 
5D6E 515E          M                 movf    CUR_HEAP_END, W
5D70 62E2          M                 cpfseq  FSR1H
5D72 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5D74 0E0C          M                 movlw   (N * 0x2 + 0x2)
5D76 24E1          M                 addwf   FSR1L, W
5D78 B0D8          M                 btfsc   STATUS, C
5D7A EFAC F009     M                 goto    caml_raise_out_of_memory
5D7E     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000014         M CPT_CUH = CPT_CUH + 1
5D7E 68E6          M                 setf    POSTINC1                ; write tag
5D80 0E05          M                 movlw   0x5
5D82 6EE6          M                 movwf   POSTINC1                ; write size
5D84 CFE1 FF56     M                 movff   FSR1L, ACCUL
5D88 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5D8C 0EF0          M                 movlw   low caml_int64_custom
5D8E 6EE6          M                 movwf   POSTINC1                ; write custom @L
5D90 0E15          M                 movlw   high caml_int64_custom
5D92 6EE6          M                 movwf   POSTINC1                ; write custom @H
5D94 CF68 FFE9 03465         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
5D98 CF69 FFEA 03466         movff   TMP_REG_2, FSR0H
5D9C E802      03467         addfsr  FSR0, 0x2
5D9E 0012      03468         return
               03469 #endif
               03470 
               03471 #ifdef caml_useprim_caml_int64_2arg
5DA0 03472 caml_int64_2arg_init:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 218


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5DA0 CF56 FF68 03473         movff   ACCUL, TMP_REG_1
5DA4 CF57 FF69 03474         movff   ACCUH, TMP_REG_2
               03475         M_CREATE_INT64           ; ACCU <- alloc(int64)
                   M #ifndef caml_useprim_caml_int64_custom
                   M #define caml_useprim_caml_int64_custom
                   M #endif
                   M                 M_CHECK_UNFULL_HEAP 0x5
5DA8 515E          M                 movf    CUR_HEAP_END, W
5DAA 62E2          M                 cpfseq  FSR1H
5DAC D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5DAE 0E0C          M                 movlw   (N * 0x2 + 0x2)
5DB0 24E1          M                 addwf   FSR1L, W
5DB2 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
5DB4 EC6D F00A     M                 call    caml_gc_exec
                   M 
5DB8 515E          M                 movf    CUR_HEAP_END, W
5DBA 62E2          M                 cpfseq  FSR1H
5DBC D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
5DBE 0E0C          M                 movlw   (N * 0x2 + 0x2)
5DC0 24E1          M                 addwf   FSR1L, W
5DC2 B0D8          M                 btfsc   STATUS, C
5DC4 EFAC F009     M                 goto    caml_raise_out_of_memory
5DC8     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000015         M CPT_CUH = CPT_CUH + 1
5DC8 68E6          M                 setf    POSTINC1                ; write tag
5DCA 0E05          M                 movlw   0x5
5DCC 6EE6          M                 movwf   POSTINC1                ; write size
5DCE CFE1 FF56     M                 movff   FSR1L, ACCUL
5DD2 CFE2 FF57     M                 movff   FSR1H, ACCUH            ; ACCU <- @
5DD6 0EF0          M                 movlw   low caml_int64_custom
5DD8 6EE6          M                 movwf   POSTINC1                ; write custom @L
5DDA 0E15          M                 movlw   high caml_int64_custom
5DDC 6EE6          M                 movwf   POSTINC1                ; write custom @H
5DDE CF68 FFE9 03476         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
5DE2 CF69 FFEA 03477         movff   TMP_REG_2, FSR0H
5DE6 E802      03478         addfsr  FSR0, 0x2
5DE8 CFD9 FF68 03479         movff   FSR2L, TMP_REG_1 ; save FSR2
5DEC CFDA FF69 03480         movff   FSR2H, TMP_REG_2
5DF0 5001      03481         movf    [0x1], W         ; FSR2 <- arg2
5DF2 EB02 FFDA 03482         movsf   [0x2], FSR2H
5DF6 6ED9      03483         movwf   FSR2L
5DF8 E882      03484         addfsr  FSR2, 0x2
5DFA 0012      03485         return
               03486 #endif
               03487 
               03488 
               03489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03490 ;;;;;;;;                                   ;;;;;;;;
               03491 ;;;;;;;;              CUSTOMS              ;;;;;;;;
               03492 ;;;;;;;;                                   ;;;;;;;;
               03493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03494 
5DFC 03495 caml_custom_skip_addr:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 219


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03496 
               03497 #ifdef caml_useprim_caml_int32_custom
               03498 #ifndef caml_useprim_caml_int32_compare
5DFC 03499 #define caml_useprim_caml_int32_compare
               03500 #endif
               03501 #ifndef caml_useprim_caml_int32_to_int
               03502 #define caml_useprim_caml_int32_to_int
               03503 #endif
15E0           03504         org     (caml_externals - 0x20) ; WARNING: copy in bc2asm/constants.ml
15E0 03505 caml_int32_custom:
15E0 4EF3      03506         dcfsnz  PRODL, F
15E2 EF44 F031 03507         goto    caml_int32_compare      ; compare
15E6 4EF3      03508         dcfsnz  PRODL, F
15E8 EFFE F02E 03509         goto    caml_int32_to_int       ; hash
15EC EFC2 F007 03510         goto    _STOP
               03511 #endif
               03512 
               03513 #ifdef caml_useprim_caml_int64_custom
               03514 #ifndef caml_useprim_caml_int64_compare
15F0 03515 #define caml_useprim_caml_int64_compare
               03516 #endif
               03517 #ifndef caml_useprim_caml_int64_to_int
               03518 #define caml_useprim_caml_int64_to_int
               03519 #endif
15F0           03520         org     (caml_externals - 0x10) ; WARNING: copy in bc2asm/constants.ml
15F0 03521 caml_int64_custom:
15F0 4EF3      03522         dcfsnz  PRODL, F
15F2 EF70 F031 03523         goto    caml_int64_compare      ; compare
15F6 4EF3      03524         dcfsnz  PRODL, F
15F8 EFFE F02E 03525         goto    caml_int64_to_int       ; hash
15FC EFC2 F007 03526         goto    _STOP
               03527 #endif
               03528 
5DFC           03529         org caml_custom_skip_addr
               03530 
               03531 #ifdef caml_useprim_caml_int32_to_int
               03532 #ifndef caml_useprim_caml_int64_or_int32_to_int
5DFC 03533 #define caml_useprim_caml_int64_or_int32_to_int
               03534 #endif
5DFC 03535 caml_int32_to_int:
               03536 #endif
               03537 #ifdef caml_useprim_caml_int64_to_int
               03538 #ifndef caml_useprim_caml_int64_or_int32_to_int
               03539 #define caml_useprim_caml_int64_or_int32_to_int
               03540 #endif
5DFC 03541 caml_int64_to_int:
               03542 #endif
               03543 #ifdef caml_useprim_caml_int64_or_int32_to_int
5DFC CF56 FFE9 03544         movff   ACCUL, FSR0L
5E00 CF57 FFEA 03545         movff   ACCUH, FSR0H
5E04 E802      03546         addfsr  FSR0, 0x2
5E06 80D8      03547         bsf     STATUS, C
5E08 34EE      03548         rlcf    POSTINC0, W
5E0A 6F56      03549         movwf   ACCUL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 220


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5E0C 34EF      03550         rlcf    INDF0, W
5E0E 6F57      03551         movwf   ACCUH
5E10 0012      03552         return
               03553 #endif
               03554 
               03555 
               03556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03557 ;;;;;;;;                                   ;;;;;;;;
               03558 ;;;;;;;;             COMPARE               ;;;;;;;;
               03559 ;;;;;;;;                                   ;;;;;;;;
               03560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03561 
               03562 #ifdef caml_useprim_caml_equal
               03563 #ifndef caml_useprim_caml_compare
5E12 03564 #define caml_useprim_caml_compare
               03565 #endif
               03566 #ifndef caml_useprim_caml_compare_to_eq
5E12 03567 #define caml_useprim_caml_compare_to_eq
               03568 #endif
5E12 03569 caml_equal:
5E12 D811      03570         rcall   caml_compare
5E14 D2A5      03571         bra     caml_compare_to_eq
               03572 #endif
               03573 
               03574 #ifdef caml_useprim_caml_eq_float
               03575 #ifndef caml_useprim_caml_float_compare
5E16 03576 #define caml_useprim_caml_float_compare
               03577 #endif
               03578 #ifndef caml_useprim_caml_compare_to_eq
               03579 #define caml_useprim_caml_compare_to_eq
               03580 #endif
5E16 03581 caml_eq_float:
5E16 D9F6      03582         rcall   caml_float_compare
5E18 D2A3      03583         bra     caml_compare_to_eq
               03584 #endif
               03585 
               03586 #ifdef caml_useprim_caml_notequal
               03587 #ifndef caml_useprim_caml_compare
               03588 #define caml_useprim_caml_compare
               03589 #endif
               03590 #ifndef caml_useprim_caml_compare_to_neq
5E1A 03591 #define caml_useprim_caml_compare_to_neq
               03592 #endif
5E1A 03593 caml_notequal:
5E1A D80D      03594         rcall   caml_compare
5E1C D2A6      03595         bra     caml_compare_to_neq
               03596 #endif
               03597 
               03598 #ifdef caml_useprim_caml_neq_float
               03599 #ifndef caml_useprim_caml_float_compare
               03600 #define caml_useprim_caml_float_compare
               03601 #endif
               03602 #ifndef caml_useprim_caml_compare_to_neq
               03603 #define caml_useprim_caml_compare_to_neq
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 221


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03604 #endif
5E1E 03605 caml_neq_float:
5E1E D9F2      03606         rcall   caml_float_compare
5E20 D2A4      03607         bra     caml_compare_to_neq
               03608 #endif
               03609 
               03610 #ifdef caml_useprim_caml_lessthan
               03611 #ifndef caml_useprim_caml_compare
               03612 #define caml_useprim_caml_compare
               03613 #endif
               03614 #ifndef caml_useprim_caml_compare_to_lt
5E22 03615 #define caml_useprim_caml_compare_to_lt
               03616 #endif
5E22 03617 caml_lessthan:
5E22 D809      03618         rcall   caml_compare
5E24 D2A6      03619         bra     caml_compare_to_lt
               03620 #endif
               03621 
               03622 #ifdef caml_useprim_caml_string_lessthan
               03623 #ifndef caml_useprim_caml_string_compare
               03624 #define caml_useprim_caml_string_compare
               03625 #endif
               03626 #ifndef caml_useprim_caml_compare_to_lt
               03627 #define caml_useprim_caml_compare_to_lt
               03628 #endif
               03629 caml_string_lessthan:
               03630         rcall   caml_string_compare
               03631         bra     caml_compare_to_lt
               03632 #endif
               03633 
               03634 #ifdef caml_useprim_caml_lt_float
               03635 #ifndef caml_useprim_caml_float_compare
               03636 #define caml_useprim_caml_float_compare
               03637 #endif
               03638 #ifndef caml_useprim_caml_compare_to_lt
               03639 #define caml_useprim_caml_compare_to_lt
               03640 #endif
5E26 03641 caml_lt_float:
5E26 D9EE      03642         rcall   caml_float_compare
5E28 D2A4      03643         bra     caml_compare_to_lt
               03644 #endif
               03645 
               03646 #ifdef caml_useprim_caml_lessequal
               03647 #ifndef caml_useprim_caml_compare
               03648 #define caml_useprim_caml_compare
               03649 #endif
               03650 #ifndef caml_useprim_caml_compare_to_le
               03651 #define caml_useprim_caml_compare_to_le
               03652 #endif
               03653 caml_lessequal:
               03654         rcall   caml_compare
               03655         bra     caml_compare_to_le
               03656 #endif
               03657 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 222


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03658 #ifdef caml_useprim_caml_string_lessequal
               03659 #ifndef caml_useprim_caml_string_compare
               03660 #define caml_useprim_caml_string_compare
               03661 #endif
               03662 #ifndef caml_useprim_caml_compare_to_le
               03663 #define caml_useprim_caml_compare_to_le
               03664 #endif
               03665 caml_string_lessequal:
               03666         rcall   caml_string_compare
               03667         bra     caml_compare_to_le
               03668 #endif
               03669 
               03670 #ifdef caml_useprim_caml_le_float
               03671 #ifndef caml_useprim_caml_float_compare
               03672 #define caml_useprim_caml_float_compare
               03673 #endif
               03674 #ifndef caml_useprim_caml_compare_to_le
               03675 #define caml_useprim_caml_compare_to_le
               03676 #endif
               03677 caml_le_float:
               03678         rcall   caml_float_compare
               03679         bra     caml_compare_to_le
               03680 #endif
               03681 
               03682 #ifdef caml_useprim_caml_greaterthan
               03683 #ifndef caml_useprim_caml_compare
               03684 #define caml_useprim_caml_compare
               03685 #endif
               03686 #ifndef caml_useprim_caml_compare_to_gt
               03687 #define caml_useprim_caml_compare_to_gt
               03688 #endif
               03689 caml_greaterthan:
               03690         rcall   caml_compare
               03691         bra     caml_compare_to_gt
               03692 #endif
               03693 
               03694 #ifdef caml_useprim_caml_string_greaterthan
               03695 #ifndef caml_useprim_caml_string_compare
               03696 #define caml_useprim_caml_string_compare
               03697 #endif
               03698 #ifndef caml_useprim_caml_compare_to_gt
               03699 #define caml_useprim_caml_compare_to_gt
               03700 #endif
               03701 caml_string_greaterthan:
               03702         rcall   caml_string_compare
               03703         bra     caml_compare_to_gt
               03704 #endif
               03705 
               03706 #ifdef caml_useprim_caml_gt_float
               03707 #ifndef caml_useprim_caml_float_compare
               03708 #define caml_useprim_caml_float_compare
               03709 #endif
               03710 #ifndef caml_useprim_caml_compare_to_gt
5E2A 03711 #define caml_useprim_caml_compare_to_gt
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 223


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03712 #endif
5E2A 03713 caml_gt_float:
5E2A D9EC      03714         rcall   caml_float_compare
5E2C D2A8      03715         bra     caml_compare_to_gt
               03716 #endif
               03717 
               03718 #ifdef caml_useprim_caml_greaterequal
               03719 #ifndef caml_useprim_caml_compare
               03720 #define caml_useprim_caml_compare
               03721 #endif
               03722 #ifndef caml_useprim_caml_compare_to_ge
5E2E 03723 #define caml_useprim_caml_compare_to_ge
               03724 #endif
5E2E 03725 caml_greaterequal:
5E2E D803      03726         rcall   caml_compare
5E30 D2AC      03727         bra     caml_compare_to_ge
               03728 #endif
               03729 
               03730 #ifdef caml_useprim_caml_string_greaterequal
               03731 #ifndef caml_useprim_caml_string_compare
               03732 #define caml_useprim_caml_string_compare
               03733 #endif
               03734 #ifndef caml_useprim_caml_compare_to_ge
               03735 #define caml_useprim_caml_compare_to_ge
               03736 #endif
               03737 caml_string_greaterequal:
               03738         rcall   caml_string_compare
               03739         bra     caml_compare_to_ge
               03740 #endif
               03741 
               03742 #ifdef caml_useprim_caml_ge_float
               03743 #ifndef caml_useprim_caml_float_compare
               03744 #define caml_useprim_caml_float_compare
               03745 #endif
               03746 #ifndef caml_useprim_caml_compare_to_ge
               03747 #define caml_useprim_caml_compare_to_ge
               03748 #endif
5E32 03749 caml_ge_float:
5E32 D9E8      03750         rcall   caml_float_compare
5E34 D2AA      03751         bra     caml_compare_to_ge
               03752 #endif
               03753 
               03754 ;;;
               03755 
               03756 #ifdef caml_useprim_caml_compare
               03757 #ifndef caml_useprim_caml_int_compare
5E36 03758 #define caml_useprim_caml_int_compare
               03759 #endif
               03760 #ifndef caml_useprim_caml_string_compare
5E36 03761 #define caml_useprim_caml_string_compare
               03762 #endif
               03763 #ifndef caml_useprim_caml_float_compare
               03764 #define caml_useprim_caml_float_compare
               03765 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 224


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03766 #ifndef caml_useprim_caml_float_array_compare
5E36 03767 #define caml_useprim_caml_float_array_compare
               03768 #endif
               03769 #ifndef caml_useprim_caml_custom_compare
5E36 03770 #define caml_useprim_caml_custom_compare
               03771 #endif
               03772 #ifndef caml_useprim_caml_raise_ia_compare
5E36 03773 #define caml_useprim_caml_raise_ia_compare
               03774 #endif
5E36 03775 caml_compare:
               03776         ;; ACCU = o1
               03777         ;; [0x2]:[0x1] = o2
               03778         
               03779 ;;; Fast traitment in simple cases
5E36 5156      03780         movf    ACCUL, W                ; == ?
5E38 1801      03781         xorwf   [0x1], W
5E3A E103      03782         bnz     caml_compare_A_phydiff
5E3C 5157      03783         movf    ACCUH, W
5E3E 1802      03784         xorwf   [0x2], W
5E40 E07E      03785         bz      caml_compare_A_1eq2
5E42 03786 caml_compare_A_phydiff:
5E42 A156      03787         btfss   ACCUL, 0                ; is_int(o1) ?
5E44 D003      03788         bra     caml_compare_A_addr_x   ; no
5E46 A001      03789         btfss   [0x1], 0                ; yes ; is_int(o2) ?
5E48 D05E      03790         bra     caml_compare_A_1lt2     ; no  ; compare int addr -> return -1
5E4A D159      03791         bra     caml_int_compare        ; yes ; compare int int
5E4C 03792 caml_compare_A_addr_x:
5E4C B001      03793         btfsc   [0x1], 0                ; is_int(o2) ?
5E4E D066      03794         bra     caml_compare_A_1gt2     ; yes ; compare addr int -> return 1
               03795         
5E50 CFE1 FF6D 03796         movff   FSR1L, TMP_REG_6        ; save FSR1
5E54 CFE2 FF6E 03797         movff   FSR1H, TMP_REG_7
5E58 CF56 FFE1 03798         movff   ACCUL, FSR1L            ; FSR1 <- o1
5E5C CF57 FFE2 03799         movff   ACCUH, FSR1H
5E60 EB01 FFE9 03800         movsf   [0x1], FSR0L            ; FSR0 <- o2
5E64 EB02 FFEA 03801         movsf   [0x2], FSR0H
5E68 E942      03802         subfsr  FSR1, 0x2               ; FSR1 -= 2
5E6A E902      03803         subfsr  FSR0, 0x2               ; FSR0 -= 2
               03804         
5E6C 50E6      03805         movf    POSTINC1, W             ; read tag(o1) ; FSR1 ++
5E6E 5CEF      03806         subwf   INDF0, W                ; tag(o2) - tag(o1)
5E70 E351      03807         bnc     caml_compare_B_1gt2
5E72 E145      03808         bnz     caml_compare_B_1lt2
               03809 
5E74 50EE      03810         movf    POSTINC0, W
5E76 0AFC      03811         xorlw   STRING_TAG              ; strings ?
5E78 E020      03812         bz      caml_compare_B_string_compare
5E7A 0A01      03813         xorlw   (STRING_TAG^DOUBLE_TAG) ; float ?
5E7C E023      03814         bz      caml_compare_B_float_compare
5E7E 0A03      03815         xorlw   (DOUBLE_TAG^DOUBLE_ARRAY_TAG) ; float[] ?
5E80 E026      03816         bz      caml_compare_B_float_array_compare
5E82 0A05      03817         xorlw   (DOUBLE_ARRAY_TAG^ABSTRACT_TAG) ; abstract ?
5E84 E032      03818         bz      caml_compare_B_raise_ia_compare
5E86 0A0C      03819         xorlw   (ABSTRACT_TAG^CLOSURE_TAG) ; closure ?
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 225


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5E88 E030      03820         bz      caml_compare_B_raise_ia_compare
5E8A 0A0E      03821         xorlw   (CLOSURE_TAG^INFIX_TAG) ; infix ?
5E8C E02E      03822         bz      caml_compare_B_raise_ia_compare
5E8E 0A06      03823         xorlw   (INFIX_TAG^CUSTOM_TAG)  ; custom ?
5E90 E023      03824         bz      caml_compare_B_custom_compare
               03825         
5E92 50E6      03826         movf    POSTINC1, W             ; size equals ? FSR1 ++
5E94 6F71      03827         movwf   TMP_REG_A               ; TMP_REG_A <- size
               03828 
5E96 5CEE      03829         subwf   POSTINC0, W             ; size(o2) - size(o1)
5E98 E33D      03830         bnc     caml_compare_B_1gt2
5E9A E131      03831         bnz     caml_compare_B_1lt2
               03832 
               03833 ;;; Not a simple case -> go through data trees
5E9C CFD9 FF6F 03834         movff   FSR2L, TMP_REG_8        ; save FSR2
5EA0 CFDA FF70 03835         movff   FSR2H, TMP_REG_9
5EA4 D052      03836         bra     caml_compare_loop
               03837 
               03838 ;;; Tools
5EA6 03839 caml_compare_raise_stack_overflow:
5EA6 CF6D FFE1 03840         movff   TMP_REG_6, FSR1L        ; restore FSR1
5EAA CF6E FFE2 03841         movff   TMP_REG_7, FSR1H
5EAE CF6F FFD9 03842         movff   TMP_REG_8, FSR2L        ; restore FSR2
5EB2 CF70 FFDA 03843         movff   TMP_REG_9, FSR2H
5EB6 EFCD F009 03844         goto    caml_raise_stack_overflow ; raise Stack_overflow
5EBA 03845 caml_compare_B_string_compare:
5EBA CF6D FFE1 03846         movff   TMP_REG_6, FSR1L        ; restore FSR1
5EBE CF6E FFE2 03847         movff   TMP_REG_7, FSR1H
5EC2 D0C0      03848         bra     caml_string_compare     ; goto string_compare
5EC4 03849 caml_compare_B_float_compare:
5EC4 CF6D FFE1 03850         movff   TMP_REG_6, FSR1L        ; restore FSR1
5EC8 CF6E FFE2 03851         movff   TMP_REG_7, FSR1H
5ECC D19B      03852         bra     caml_float_compare      ; goto float_compare
5ECE 03853 caml_compare_B_float_array_compare:
5ECE CF6D FFE1 03854         movff   TMP_REG_6, FSR1L        ; restore FSR1
5ED2 CF6E FFE2 03855         movff   TMP_REG_7, FSR1H
5ED6 D127      03856         bra     caml_float_array_compare; goto float_array_compare
5ED8 03857 caml_compare_B_custom_compare:
5ED8 CF6D FFE1 03858         movff   TMP_REG_6, FSR1L        ; restore FSR1
5EDC CF6E FFE2 03859         movff   TMP_REG_7, FSR1H
5EE0 D1C9      03860         bra     caml_custom_compare     ; goto custom_compare
5EE2 03861 caml_compare_CD_raise_ia_compare:
5EE2 CF6F FFD9 03862         movff   TMP_REG_8, FSR2L        ; restore FSR2
5EE6 CF70 FFDA 03863         movff   TMP_REG_9, FSR2H
5EEA 03864 caml_compare_B_raise_ia_compare:
5EEA CF6D FFE1 03865         movff   TMP_REG_6, FSR1L        ; restore FSR1
5EEE CF6E FFE2 03866         movff   TMP_REG_7, FSR1H
5EF2 EFCC F031 03867         goto    caml_raise_ia_compare   ; raise Invalid_argument "compare"
5EF6 03868 caml_compare_CD_1lt2:
5EF6 CF6F FFD9 03869         movff   TMP_REG_8, FSR2L        ; restore FSR2
5EFA CF70 FFDA 03870         movff   TMP_REG_9, FSR2H
5EFE 03871 caml_compare_B_1lt2:
5EFE CF6D FFE1 03872         movff   TMP_REG_6, FSR1L        ; restore FSR1
5F02 CF6E FFE2 03873         movff   TMP_REG_7, FSR1H
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 226


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5F06 03874 caml_compare_A_1lt2:
5F06 6956      03875         setf    ACCUL                   ; return -1
5F08 6957      03876         setf    ACCUH
5F0A 0012      03877         return
5F0C 03878 caml_compare_CD_1gt2:
5F0C CF6F FFD9 03879         movff   TMP_REG_8, FSR2L        ; restore FSR2
5F10 CF70 FFDA 03880         movff   TMP_REG_9, FSR2H
5F14 03881 caml_compare_B_1gt2:
5F14 CF6D FFE1 03882         movff   TMP_REG_6, FSR1L        ; restore FSR1
5F18 CF6E FFE2 03883         movff   TMP_REG_7, FSR1H
5F1C 03884 caml_compare_A_1gt2:
               03885         M_CONST 1                       ; return 1
5F1C 0E03          M                 movlw   2 * N + 1
5F1E 6F56          M                 movwf   ACCUL
5F20 6B57          M                 clrf    ACCUH
5F22 0012      03886         return
5F24 03887 caml_compare_CD_1ne2:
5F24 CF6F FFD9 03888         movff   TMP_REG_8, FSR2L        ; restore FSR2
5F28 CF70 FFDA 03889         movff   TMP_REG_9, FSR2H
5F2C CF6D FFE1 03890         movff   TMP_REG_6, FSR1L        ; restore FSR1
5F30 CF6E FFE2 03891         movff   TMP_REG_7, FSR1H
5F34 0012      03892         return
5F36 03893 caml_compare_CD_1eq2:
5F36 CF6D FFE1 03894         movff   TMP_REG_6, FSR1L        ; restore FSR1
5F3A CF6E FFE2 03895         movff   TMP_REG_7, FSR1H
5F3E 03896 caml_compare_A_1eq2:
               03897         M_CONST 0                       ; return 0
5F3E 0E01          M                 movlw   2 * N + 1
5F40 6F56          M                 movwf   ACCUL
5F42 6B57          M                 clrf    ACCUH
5F44 0012      03898         return
               03899         
               03900 ;;; Loop
5F46 03901 caml_compare_forward:
5F46 CFEE FF71 03902         movff   POSTINC0, TMP_REG_A     ; TMP_REG_A <- size ; FSR0 ++
5F4A 03903 caml_compare_loop:
5F4A 50EE      03904         movf    POSTINC0, W             ; stack[0] <- *FSR0++
5F4C 6E01      03905         movwf   [0x1]
5F4E 50EE      03906         movf    POSTINC0, W
5F50 6E02      03907         movwf   [0x2]
5F52 CFE6 FF56 03908         movff   POSTINC1, ACCUL         ; ACCU <- *FSR1++
5F56 CFE6 FF57 03909         movff   POSTINC1, ACCUH
               03910 
               03911 ;;; Simple cases
5F5A 5156      03912         movf    ACCUL, W                ; == ?
5F5C 1801      03913         xorwf   [0x1], W
5F5E E103      03914         bnz     caml_compare_C_phydiff
5F60 5157      03915         movf    ACCUH, W
5F62 1802      03916         xorwf   [0x2], W
5F64 E05B      03917         bz      caml_compare_C_1eq2     ; if e1 == e2 -> branch
5F66 03918 caml_compare_C_phydiff:
5F66 A156      03919         btfss   ACCUL, 0                ; is_int(e1) ?
5F68 D004      03920         bra     caml_compare_C_addr_x   ; no
5F6A A001      03921         btfss   [0x1], 0                ; yes ; is_int(e2) ?
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 227


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5F6C D7C4      03922         bra     caml_compare_CD_1lt2    ; no  ; compare int addr -> return -1
5F6E D8C7      03923         rcall   caml_int_compare        ; yes ; compare int int
5F70 D040      03924         bra     caml_compare_C_compared
5F72 03925 caml_compare_C_addr_x:
5F72 B001      03926         btfsc   [0x1], 0                ; is_int(e2) ?
5F74 D7CB      03927         bra     caml_compare_CD_1gt2    ; yes ; compare addr int -> return 1
               03928 
5F76 CFE9 FF72 03929         movff   FSR0L, TMP_REG_B        ; save FSR0 and FSR1
5F7A CFEA FF73 03930         movff   FSR0H, TMP_REG_C
5F7E CFE1 FF74 03931         movff   FSR1L, TMP_REG_D
5F82 CFE2 FF75 03932         movff   FSR1H, TMP_REG_E
5F86 EB01 FFE9 03933         movsf   [0x1], FSR0L            ; FSR0 <- stack[0]
5F8A EB02 FFEA 03934         movsf   [0x2], FSR0H
5F8E CF56 FFE1 03935         movff   ACCUL, FSR1L            ; FSR1 <- ACCU
5F92 CF57 FFE2 03936         movff   ACCUH, FSR1H
5F96 E942      03937         subfsr  FSR1, 0x2               ; FSR1 -= 2
5F98 E902      03938         subfsr  FSR0, 0x2               ; FSR0 -= 2
               03939 
5F9A 50E6      03940         movf    POSTINC1, W             ; read tag(e1) ; FSR1 ++
5F9C 5CEF      03941         subwf   INDF0, W                ; tag(e2) - tag(e1)
5F9E E3B6      03942         bnc     caml_compare_CD_1gt2
5FA0 E1AA      03943         bnz     caml_compare_CD_1lt2
               03944 
5FA2 50EE      03945         movf    POSTINC0, W
5FA4 0AFC      03946         xorlw   STRING_TAG              ; strings ?
5FA6 E028      03947         bz      caml_compare_D_string_compare
5FA8 0A01      03948         xorlw   (STRING_TAG^DOUBLE_TAG) ; float ?
5FAA E028      03949         bz      caml_compare_D_float_compare
5FAC 0A03      03950         xorlw   (DOUBLE_TAG^DOUBLE_ARRAY_TAG) ; float[] ?
5FAE E028      03951         bz      caml_compare_D_float_array_compare
5FB0 0A01      03952         xorlw   (DOUBLE_ARRAY_TAG^CUSTOM_TAG) ; custom ?
5FB2 E028      03953         bz      caml_compare_D_custom_compare
5FB4 0A04      03954         xorlw   (CUSTOM_TAG^ABSTRACT_TAG) ; abstract ?
5FB6 E095      03955         bz      caml_compare_CD_raise_ia_compare
5FB8 0A0C      03956         xorlw   (ABSTRACT_TAG^CLOSURE_TAG) ; closure ?
5FBA E093      03957         bz      caml_compare_CD_raise_ia_compare
5FBC 0A0E      03958         xorlw   (CLOSURE_TAG^INFIX_TAG) ; infix ?
5FBE E091      03959         bz      caml_compare_CD_raise_ia_compare
               03960         
5FC0 50E6      03961         movf    POSTINC1, W             ; compare sizes
5FC2 5CEF      03962         subwf   INDF0, W                ; size(e2) - size(e1)
5FC4 E3A3      03963         bnc     caml_compare_CD_1gt2
5FC6 E197      03964         bnz     caml_compare_CD_1lt2
               03965 
               03966 ;;; Complex case -> forward
5FC8 4D71      03967         dcfsnz  TMP_REG_A, W            ; if counter = 1
5FCA D7BD      03968         bra     caml_compare_forward    ; then skip push
5FCC 03969 caml_compare_push_forward:
5FCC 0E0C      03970         movlw   STACK_END               ; check stack overflow
5FCE 62DA      03971         cpfseq  FSR2H
5FD0 D004      03972         bra     caml_compare_canpush3
5FD2 0EFA      03973         movlw   -0x6
5FD4 24D9      03974         addwf   FSR2L, W
5FD6 A0D8      03975         btfss   STATUS, C
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 228


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5FD8 D766      03976         bra     caml_compare_raise_stack_overflow
5FDA 03977 caml_compare_canpush3:
5FDA 5171      03978         movf    TMP_REG_A, W            ; stack[0] <- counter
5FDC 6E01      03979         movwf   [0x1]
5FDE CF73 FFDD 03980         movff   TMP_REG_C, POSTDEC2     ; push save(FSR0)
5FE2 CF72 FFDD 03981         movff   TMP_REG_B, POSTDEC2
5FE6 CF75 FFDD 03982         movff   TMP_REG_E, POSTDEC2     ; push save(FSR1)
5FEA CF74 FFDD 03983         movff   TMP_REG_D, POSTDEC2
5FEE E982      03984         subfsr  FSR2, 0x2               ; push X
5FF0 D7AA      03985         bra     caml_compare_forward    ; forward
               03986 
5FF2 03987 caml_compare_C_compared:
5FF2 B356      03988         btfsc   ACCUL, 1                ; sub-rountine returned 0 ?
5FF4 D797      03989         bra     caml_compare_CD_1ne2
5FF6 D012      03990         bra     caml_compare_C_1eq2
               03991         
5FF8 03992 caml_compare_D_string_compare:
5FF8 D825      03993         rcall   caml_string_compare     ; compare string string
5FFA D006      03994         bra     caml_compare_D_compared
5FFC 03995 caml_compare_D_float_compare:
5FFC D903      03996         rcall   caml_float_compare      ; compare float float
5FFE D004      03997         bra     caml_compare_D_compared
6000 03998 caml_compare_D_float_array_compare:
6000 D892      03999         rcall   caml_float_array_compare; compare float[] float[]
6002 D002      04000         bra     caml_compare_D_compared
6004 04001 caml_compare_D_custom_compare:          ; compare custom custom
6004 D937      04002         rcall   caml_custom_compare
6006 D000      04003         bra     caml_compare_D_compared
               04004 
6008 04005 caml_compare_D_compared:
6008 B356      04006         btfsc   ACCUL, 1                ; sub-rountine returned 0 ?
600A D78C      04007         bra     caml_compare_CD_1ne2    ; no -> finished
600C 04008 caml_compare_D_1eq2:
600C CF72 FFE9 04009         movff   TMP_REG_B, FSR0L        ; restore FSR0 and FSR1
6010 CF73 FFEA 04010         movff   TMP_REG_C, FSR0H
6014 CF74 FFE1 04011         movff   TMP_REG_D, FSR1L
6018 CF75 FFE2 04012         movff   TMP_REG_E, FSR1H
601C 04013 caml_compare_C_1eq2:
601C 2F71      04014         decfsz  TMP_REG_A, F            ; decr counter ; counter = 0 ?
601E D795      04015         bra     caml_compare_loop       ; no -> loop
6020 50D9      04016         movf    FSR2L, W                ; FSR2 = save(FSR2) ?
6022 196F      04017         xorwf   TMP_REG_8, W
6024 E103      04018         bnz     caml_compare_goback
6026 50DA      04019         movf    FSR2H, W
6028 1970      04020         xorwf   TMP_REG_9, W
602A E085      04021         bz      caml_compare_CD_1eq2
602C 04022 caml_compare_goback:
602C E882      04023         addfsr  FSR2, 0x2               ; pop X
602E CFDC FFE1 04024         movff   PREINC2, FSR1L          ; pop FSR1
6032 CFDC FFE2 04025         movff   PREINC2, FSR1H
6036 CFDC FFE9 04026         movff   PREINC2, FSR0L          ; pop FSR0
603A CFDC FFEA 04027         movff   PREINC2, FSR0H
603E 0401      04028         decf    [0x1], W                ; peek counter--
6040 6F71      04029         movwf   TMP_REG_A
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 229


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6042 D783      04030         bra     caml_compare_loop       ; loop
               04031 #endif
               04032 
               04033 ;;;
               04034         
               04035 #ifdef caml_useprim_caml_string_compare
6044 04036 caml_string_compare:
               04037         ;; ACCU = str1
               04038         ;; [0x2]:[0x1] = str2
6044 CFD9 FF68 04039         movff   FSR2L, TMP_REG_1        ; save stack top
6048 CFDA FF69 04040         movff   FSR2H, TMP_REG_2
604C EB01 FF6A 04041         movsf   [0x1], TMP_REG_3        ; FSR2 <- str2
6050 EB02 FF6B 04042         movsf   [0x2], TMP_REG_4
6054 CF6A FFD9 04043         movff   TMP_REG_3, FSR2L
6058 CF6B FFDA 04044         movff   TMP_REG_4, FSR2H
605C CF56 FFE9 04045         movff   ACCUL, FSR0L            ; FSR0 <- str1
6060 CF57 FFEA 04046         movff   ACCUH, FSR0H
6064 E901      04047         subfsr  FSR0, 0x1               ; FSR0 --
6066 E981      04048         subfsr  FSR2, 0x1               ; FSR2 --
6068 04EE      04049         decf    POSTINC0, W             ; TMP_REG_{3,5} <- blk_size(str1) - 1
606A 6F6A      04050         movwf   TMP_REG_3
606C 6F6C      04051         movwf   TMP_REG_5
606E 04DE      04052         decf    POSTINC2, W             ; TMP_REG_4 <- blk_size(str2) - 1
6070 6F6B      04053         movwf   TMP_REG_4
6072 5D6C      04054         subwf   TMP_REG_5, W            ; blk_size(str1) - blk_size(str2)
6074 E302      04055         bnc     caml_string_compare_L0
6076 CF6B FF6C 04056         movff   TMP_REG_4, TMP_REG_5    ; TMP_REG_5 = min(blk_sizes) - 1
607A 04057 caml_string_compare_L0:
607A 536C      04058         movf    TMP_REG_5, F
607C E008      04059         bz      caml_string_compare_loop_end
607E 04060 caml_string_compare_loop:
607E 50EE      04061         movf    POSTINC0, W
6080 5CDE      04062         subwf   POSTINC2, W             ; str2.[i] - str1.[i]
6082 E12D      04063         bnz     caml_string_compare_diff
6084 50EE      04064         movf    POSTINC0, W
6086 5CDE      04065         subwf   POSTINC2, W
6088 E12A      04066         bnz     caml_string_compare_diff
608A 2F6C      04067         decfsz  TMP_REG_5, F            ; loop min(blk_size) - 1 times
608C D7F8      04068         bra     caml_string_compare_loop
608E 04069 caml_string_compare_loop_end:
608E 516B      04070         movf    TMP_REG_4, W
6090 5D6A      04071         subwf   TMP_REG_3, W            ; blk_size(str1) - blk_size(str2)
6092 E008      04072         bz      caml_string_compare_blen_eq
6094 E303      04073         bnc     caml_string_compre_bl1_lt_bl2
6096 04074 caml_string_compare_bl1_gt_bl2:
6096 5001      04075         movf    [0x1], W
6098 E020      04076         bz      caml_string_compare_cont1
609A D022      04077         bra     caml_string_compare_1gt2
609C 04078 caml_string_compre_bl1_lt_bl2:
609C E801      04079         addfsr  FSR0, 0x1
609E 50ED      04080         movf    POSTDEC0, W
60A0 E01C      04081         bz      caml_string_compare_cont1
60A2 D026      04082         bra     caml_string_compare_1lt2
60A4 04083 caml_string_compare_blen_eq:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 230


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
60A4 5001      04084         movf    [0x1], W
60A6 E00B      04085         bz      caml_string_compare_l2odd
60A8 E801      04086         addfsr  FSR0, 0x1
60AA 50ED      04087         movf    POSTDEC0, W
60AC E019      04088         bz      caml_string_compare_1gt2
               04089         M_CONST 0                       ; str1 = str2 ; return 0
60AE 0E01          M                 movlw   2 * N + 1
60B0 6F56          M                 movwf   ACCUL
60B2 6B57          M                 clrf    ACCUH
60B4 CF68 FFD9 04090         movff   TMP_REG_1, FSR2L        ; restore stack top
60B8 CF69 FFDA 04091         movff   TMP_REG_2, FSR2H
60BC 0012      04092         return
60BE 04093 caml_string_compare_l2odd:
60BE E801      04094         addfsr  FSR0, 0x1
60C0 50ED      04095         movf    POSTDEC0, W
60C2 E116      04096         bnz     caml_string_compare_1lt2
60C4 50EE      04097         movf    POSTINC0, W
60C6 5CDE      04098         subwf   POSTINC2, W
60C8 E10A      04099         bnz     caml_string_compare_diff
               04100         M_CONST 0                       ; str1 = str2 ; return 0
60CA 0E01          M                 movlw   2 * N + 1
60CC 6F56          M                 movwf   ACCUL
60CE 6B57          M                 clrf    ACCUH
60D0 CF68 FFD9 04101         movff   TMP_REG_1, FSR2L        ; restore stack top
60D4 CF69 FFDA 04102         movff   TMP_REG_2, FSR2H
60D8 0012      04103         return
60DA 04104 caml_string_compare_cont1:
60DA 50EE      04105         movf    POSTINC0, W
60DC 5CDE      04106         subwf   POSTINC2, W
60DE 04107 caml_string_compare_diff:
60DE E208      04108         bc      caml_string_compare_1lt2
60E0 04109 caml_string_compare_1gt2
               04110         M_CONST 1                       ; str1 > str2 ; return 1
60E0 0E03          M                 movlw   2 * N + 1
60E2 6F56          M                 movwf   ACCUL
60E4 6B57          M                 clrf    ACCUH
60E6 CF68 FFD9 04111         movff   TMP_REG_1, FSR2L        ; restore stack top
60EA CF69 FFDA 04112         movff   TMP_REG_2, FSR2H
60EE 0012      04113         return
60F0 04114 caml_string_compare_1lt2:               ; str1 < str2
60F0 6956      04115         setf    ACCUL                   ; return -1
60F2 6957      04116         setf    ACCUH
60F4 CF68 FFD9 04117         movff   TMP_REG_1, FSR2L        ; restore stack top
60F8 CF69 FFDA 04118         movff   TMP_REG_2, FSR2H
60FC 0012      04119         return
               04120 #endif
               04121 
               04122 #ifdef caml_useprim_caml_string_notequal
               04123 #ifndef caml_useprim_caml_string_equal
               04124 #define caml_useprim_caml_string_equal
               04125 #endif
               04126 caml_string_notequal:
               04127         rcall   caml_string_equal
               04128         btg     ACCUL, 1
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 231


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04129         return
               04130 #endif
               04131 
               04132 #ifdef caml_useprim_caml_string_equal
               04133 caml_string_equal:
               04134         ;; ACCU = str1
               04135         ;; [0x2]:[0x1] = str2
               04136         movff   FSR2L, TMP_REG_1        ; save stack top
               04137         movff   FSR2H, TMP_REG_2
               04138         movsf   [0x1], TMP_REG_3        ; FSR2 <- str2
               04139         movsf   [0x2], TMP_REG_4
               04140         movff   TMP_REG_3, FSR2L
               04141         movff   TMP_REG_4, FSR2H
               04142         movff   ACCUL, FSR0L            ; FSR0 <- str1
               04143         movff   ACCUH, FSR0H
               04144         subfsr  FSR0, 0x1               ; FSR0 --
               04145         subfsr  FSR2, 0x1               ; FSR2 --
               04146         movf    POSTINC0, W             ; compare size
               04147         xorwf   INDF2, W
               04148         bnz     caml_string_equal_diff  ; if different sizes -> return false
               04149         movff   POSTINC2, TMP_REG_3     ; TMP_REG_3 <- size
               04150 caml_string_equal_loop:
               04151         movf    POSTINC0, W
               04152         xorwf   POSTINC2, W
               04153         bnz     caml_string_equal_diff
               04154         movf    POSTINC0, W
               04155         xorwf   POSTINC2, W
               04156         bnz     caml_string_equal_diff
               04157         decfsz  TMP_REG_3, F
               04158         bra     caml_string_equal_loop
               04159         M_CONST 1                       ; return 1 = true
               04160         movff   TMP_REG_1, FSR2L        ; restore stack top
               04161         movff   TMP_REG_2, FSR2H
               04162         return
               04163 caml_string_equal_diff:
               04164         M_CONST 0                       ; return 0 = false
               04165         movff   TMP_REG_1, FSR2L        ; restore stack top
               04166         movff   TMP_REG_2, FSR2H
               04167         return
               04168 #endif
               04169 
               04170 ;;;
               04171 
               04172 #ifdef caml_useprim_caml_int_compare
60FE 04173 caml_int_compare:
               04174         ;; ACCU = v1
               04175         ;; [0x2]:[0x1] = v2
60FE 0E80      04176         movlw   0x80            ; ACCUH = v1H + 0x80
6100 2757      04177         addwf   ACCUH, F
6102 2402      04178         addwf   [0x2], W        ; W <- v2H + 0x80
6104 5D57      04179         subwf   ACCUH, W        ; (v1H + 0x80) - (v2H + 0x80)
6106 E103      04180         bnz     caml_int_compare_L0
6108 5001      04181         movf    [0x1], W
610A 5D56      04182         subwf   ACCUL, W        ; v1L - v2L
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 232


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
610C E008      04183         bz      caml_int_compare_1eq2
610E 04184 caml_int_compare_L0:
610E E304      04185         bnc     caml_int_compare_1lt2
               04186         M_CONST 1               ; v1 > v2 => return 1
6110 0E03          M                 movlw   2 * N + 1
6112 6F56          M                 movwf   ACCUL
6114 6B57          M                 clrf    ACCUH
6116 0012      04187         return
6118 04188 caml_int_compare_1lt2:
6118 6957      04189         setf    ACCUH           ; v1 < v2 => return -1
611A 6956      04190         setf    ACCUL
611C 0012      04191         return
611E 04192 caml_int_compare_1eq2:
               04193         M_CONST 0               ; v1 = v2 => return 0
611E 0E01          M                 movlw   2 * N + 1
6120 6F56          M                 movwf   ACCUL
6122 6B57          M                 clrf    ACCUH
6124 0012      04194         return
               04195 #endif
               04196 
               04197 ;;;
               04198 
               04199 #ifdef caml_useprim_caml_float_array_compare
               04200 #ifndef caml_useprim_caml_float_compare_1xx2
6126 04201 #define caml_useprim_caml_float_compare_1xx2
               04202 #endif
6126 04203 caml_float_array_compare:
6126 B156      04204         btfsc   ACCUL, 0
6128 D053      04205         bra     caml_float_array_compare_0_x
612A B001      04206         btfsc   [0x1], 0
612C D063      04207         bra     caml_float_compare_1gt2
612E CFE1 FF68 04208         movff   FSR1L, TMP_REG_1        ; save FSR1
6132 CFE2 FF69 04209         movff   FSR1H, TMP_REG_2
6136 CF56 FFE9 04210         movff   ACCUL, FSR0L            ; FSR0 <- @f2[]
613A CF57 FFEA 04211         movff   ACCUH, FSR0H
613E EB01 FFE1 04212         movsf   [0x1], FSR1L            ; FSR1 <- @f1[]
6142 EB02 FFE2 04213         movsf   [0x2], FSR1H
6146 E901      04214         subfsr  FSR0, 0x1
6148 E941      04215         subfsr  FSR1, 0x1
614A 50EF      04216         movf    INDF0, W
614C 5CE6      04217         subwf   POSTINC1, W             ; size1 - size2
614E E352      04218         bnc     caml_float_compare_1gt2
6150 E14A      04219         bnz     caml_float_compare_1lt2
6152 50EE      04220         movf    POSTINC0, W             ; size = 0 ?
6154 E040      04221         bz      caml_float_compare_1eq2
6156 6F6B      04222         movwf   TMP_REG_4               ; TMP_REG_4 <- size
6158 E801      04223         addfsr  FSR0, 0x1
615A E841      04224         addfsr  FSR1, 0x1
615C 04225 caml_float_array_compare_loop:
615C BEEF      04226         btfsc   INDF0, 7                ; test sign
615E D003      04227         bra     caml_float_array_compare_XN
6160 AEE7      04228         btfss   INDF1, 7
6162 D00B      04229         bra     caml_float_array_compare_PP
6164 D040      04230         bra     caml_float_compare_1lt2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 233


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6166 04231 caml_float_array_compare_XN:
6166 AEE7      04232         btfss   INDF1, 7
6168 D045      04233         bra     caml_float_compare_1gt2
616A 04234 caml_float_array_compare_NN:
616A 50E1      04235         movf    FSR1L, W                ; FSR1 <-> FSR0
616C CFE9 FFE1 04236         movff   FSR0L, FSR1L
6170 6EE9      04237         movwf   FSR0L
6172 50E2      04238         movf    FSR1H, W
6174 CFEA FFE2 04239         movff   FSR0H, FSR1H
6178 6EEA      04240         movwf   FSR0H
617A 04241 caml_float_array_compare_PP:
617A 50E7      04242         movf    INDF1, W                ; TMP_REG_3 <- e1 + 0x80
617C 0B1F      04243         andlw   B'00011111'
617E B8E8      04244         btfsc   WREG, 4
6180 09E0      04245         iorlw   B'11100000'
6182 0F80      04246         addlw   0x80
6184 6F6A      04247         movwf   TMP_REG_3
6186 50EF      04248         movf    INDF0, W                ; W <- e2 + 0x80
6188 0B1F      04249         andlw   B'00011111'
618A B8E8      04250         btfsc   WREG, 4
618C 09E0      04251         iorlw   B'11100000'
618E 0F80      04252         addlw   0x80
6190 5D6A      04253         subwf   TMP_REG_3, W            ; (e1 + 0x80) - (e2 + 0x80)
6192 E330      04254         bnc     caml_float_compare_1gt2
6194 E128      04255         bnz     caml_float_compare_1lt2
6196 38E5      04256         swapf   POSTDEC1, W             ; TMP_REG_3 <- m1H
6198 42E8      04257         rrncf   WREG, F
619A 0B03      04258         andlw   B'00000011'
619C 6F6A      04259         movwf   TMP_REG_3
619E 38ED      04260         swapf   POSTDEC0, W             ; W <- m2H
61A0 42E8      04261         rrncf   WREG, F
61A2 0B03      04262         andlw   B'00000011'
61A4 5D6A      04263         subwf   TMP_REG_3, W            ; m1H - m2H
61A6 E326      04264         bnc     caml_float_compare_1gt2
61A8 E11E      04265         bnz     caml_float_compare_1lt2
61AA 50EE      04266         movf    POSTINC0, W
61AC 5CE6      04267         subwf   POSTINC1, W             ; m1L - m2L
61AE E322      04268         bnc     caml_float_compare_1gt2
61B0 E11A      04269         bnz     caml_float_compare_1lt2
61B2 4F6B      04270         dcfsnz  TMP_REG_4, F            ; loop size times
61B4 D010      04271         bra     caml_float_compare_1eq2
61B6 AEE7      04272         btfss   INDF1, 7                ; NN ?
61B8 D008      04273         bra     caml_float_array_compare_continue
61BA 50E1      04274         movf    FSR1L, W                ; FSR1 <-> FSR0
61BC CFE9 FFE1 04275         movff   FSR0L, FSR1L
61C0 6EE9      04276         movwf   FSR0L
61C2 50E2      04277         movf    FSR1H, W
61C4 CFEA FFE2 04278         movff   FSR0H, FSR1H
61C8 6EEA      04279         movwf   FSR0H
61CA 04280 caml_float_array_compare_continue:
61CA E802      04281         addfsr  FSR0, 0x2
61CC E842      04282         addfsr  FSR1, 0x2
61CE D7C6      04283         bra     caml_float_array_compare_loop
61D0 04284 caml_float_array_compare_0_x:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 234


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
61D0 B001      04285         btfsc   [0x1], 0
61D2 D001      04286         bra     caml_float_compare_1eq2
61D4 D008      04287         bra     caml_float_compare_1lt2
               04288 #endif
               04289 
               04290 #ifdef caml_useprim_caml_float_compare
               04291 #ifndef caml_useprim_caml_float_compare_1xx2
               04292 #define caml_useprim_caml_float_compare_1xx2
               04293 #endif
               04294 #endif
               04295 #ifdef caml_useprim_caml_float_compare_1xx2
61D6 04296 caml_float_compare_1eq2:
61D6 CF68 FFE1 04297         movff   TMP_REG_1, FSR1L        ; restore FSR1
61DA CF69 FFE2 04298         movff   TMP_REG_2, FSR1H
               04299         M_CONST 0                       ; return 0
61DE 0E01          M                 movlw   2 * N + 1
61E0 6F56          M                 movwf   ACCUL
61E2 6B57          M                 clrf    ACCUH
61E4 0012      04300         return
61E6 04301 caml_float_compare_1lt2:
61E6 CF68 FFE1 04302         movff   TMP_REG_1, FSR1L        ; restore FSR1
61EA CF69 FFE2 04303         movff   TMP_REG_2, FSR1H
61EE 6956      04304         setf    ACCUL
61F0 6957      04305         setf    ACCUH
61F2 0012      04306         return
61F4 04307 caml_float_compare_1gt2:
61F4 CF68 FFE1 04308         movff   TMP_REG_1, FSR1L        ; restore FSR1
61F8 CF69 FFE2 04309         movff   TMP_REG_2, FSR1H
               04310         M_CONST 1                       ; return 1
61FC 0E03          M                 movlw   2 * N + 1
61FE 6F56          M                 movwf   ACCUL
6200 6B57          M                 clrf    ACCUH
6202 0012      04311         return
               04312 #endif
               04313 
               04314 #ifdef caml_useprim_caml_float_compare
               04315 #ifndef caml_useprim_caml_float_compare_1xx2
               04316 #define caml_useprim_caml_float_compare_1xx2
               04317 #endif
6204 04318 caml_float_compare:
6204 CFE1 FF68 04319         movff   FSR1L, TMP_REG_1        ; save FSR1
6208 CFE2 FF69 04320         movff   FSR1H, TMP_REG_2
620C CF56 FFE1 04321         movff   ACCUL, FSR1L            ; FSR0 <- @f2
6210 CF57 FFE2 04322         movff   ACCUH, FSR1H
6214 EB01 FFE9 04323         movsf   [0x1], FSR0L            ; FSR1 <- @f1
6218 EB02 FFEA 04324         movsf   [0x2], FSR0H
621C E802      04325         addfsr  FSR0, 0x2
621E E842      04326         addfsr  FSR1, 0x2
6220 BEEF      04327         btfsc   INDF0, 7                ; test sign
6222 D003      04328         bra     caml_float_compare_XN
6224 AEE7      04329         btfss   INDF1, 7
6226 D00B      04330         bra     caml_float_compare_PP
6228 D7DE      04331         bra     caml_float_compare_1lt2
622A 04332 caml_float_compare_XN:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 235


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
622A AEE7      04333         btfss   INDF1, 7
622C D7E3      04334         bra     caml_float_compare_1gt2
622E 04335 caml_float_compare_NN:
622E 50E1      04336         movf    FSR1L, W                ; FSR1 <-> FSR0
6230 CFE9 FFE1 04337         movff   FSR0L, FSR1L
6234 6EE9      04338         movwf   FSR0L
6236 50E2      04339         movf    FSR1H, W
6238 CFEA FFE2 04340         movff   FSR0H, FSR1H
623C 6EEA      04341         movwf   FSR0H
623E 04342 caml_float_compare_PP:
623E 50E4      04343         movf    PREINC1, W              ; TMP_REG_3 <- e1 + 0x80
6240 0F02      04344         addlw   0x2
6242 6F6A      04345         movwf   TMP_REG_3
6244 50EC      04346         movf    PREINC0, W              ; W <- e2 + 0x80
6246 0F02      04347         addlw   0x2
6248 5D6A      04348         subwf   TMP_REG_3, W            ; (e1 + 0x80) - (e2 + 0x80)
624A E3CD      04349         bnc     caml_float_compare_1lt2
624C E1D3      04350         bnz     caml_float_compare_1gt2
624E E901      04351         subfsr  FSR0, 0x1
6250 E941      04352         subfsr  FSR1, 0x1
6252 50E5      04353         movf    POSTDEC1, W             ; TMP_REG_3 <- m1H
6254 0B7F      04354         andlw   B'01111111'
6256 6F6A      04355         movwf   TMP_REG_3
6258 50ED      04356         movf    POSTDEC0, W             ; W <- m2U
625A 0B7F      04357         andlw   B'01111111'
625C 5D6A      04358         subwf   TMP_REG_3, W            ; m1U - m2U
625E E3C3      04359         bnc     caml_float_compare_1lt2
6260 E1C9      04360         bnz     caml_float_compare_1gt2
6262 50ED      04361         movf    POSTDEC0, W
6264 5CE5      04362         subwf   POSTDEC1, W             ; m1H - m2H
6266 E3BF      04363         bnc     caml_float_compare_1lt2
6268 E1C5      04364         bnz     caml_float_compare_1gt2
626A 50EF      04365         movf    INDF0, W
626C 5CE7      04366         subwf   INDF1, W                ; m1L - m2L
626E E3BB      04367         bnc     caml_float_compare_1lt2
6270 E1C1      04368         bnz     caml_float_compare_1gt2
6272 D7B1      04369         bra     caml_float_compare_1eq2
               04370 #endif
               04371 
               04372 ;;;
               04373 
               04374 #ifdef caml_useprim_caml_custom_compare
6274 04375 caml_custom_compare:
6274 CF56 FFE9 04376         movff   ACCUL, FSR0L
6278 CF57 FFEA 04377         movff   ACCUH, FSR0H
627C 0E01      04378         movlw   0x1
627E 6EF3      04379         movwf   PRODL                   ; PRODL <- compare custom index (1)
6280 50EE      04380         movf    POSTINC0, W
6282 CFEF FFFA 04381         movff   INDF0, PCLATH           ; WARNING: write PCLATH
6286 6EF9      04382         movwf   PCL                     ; goto custom indirection table
               04383 #endif
               04384 
               04385 #ifdef caml_useprim_caml_int32_compare
6288 04386 caml_int32_compare:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 236


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6288 CF56 FFE9 04387         movff   ACCUL, FSR0L
628C CF57 FFEA 04388         movff   ACCUH, FSR0H
6290 E802      04389         addfsr  FSR0, 0x2
6292 CFEE FF68 04390         movff   POSTINC0, TMP_REG_1
6296 CFEE FF69 04391         movff   POSTINC0, TMP_REG_2
629A CFEE FF6A 04392         movff   POSTINC0, TMP_REG_3
629E CFEF FF6B 04393         movff   INDF0, TMP_REG_4
62A2 EB01 FFE9 04394         movsf   [0x1], FSR0L
62A6 EB02 FFEA 04395         movsf   [0x2], FSR0H
62AA E805      04396         addfsr  FSR0, 0x5
62AC 0E80      04397         movlw   0x80
62AE 276B      04398         addwf   TMP_REG_4, F
62B0 24ED      04399         addwf   POSTDEC0, W
62B2 5D6B      04400         subwf   TMP_REG_4, W
62B4 E10D      04401         bnz     caml_int32_compare_1neq2
62B6 50ED      04402         movf    POSTDEC0, W
62B8 5D6A      04403         subwf   TMP_REG_3, W
62BA E10A      04404         bnz     caml_int32_compare_1neq2
62BC 50ED      04405         movf    POSTDEC0, W
62BE 5D69      04406         subwf   TMP_REG_2, W
62C0 E107      04407         bnz     caml_int32_compare_1neq2
62C2 50EF      04408         movf    INDF0, W
62C4 5D68      04409         subwf   TMP_REG_1, W
62C6 E104      04410         bnz     caml_int32_compare_1neq2
               04411         M_CONST 0
62C8 0E01          M                 movlw   2 * N + 1
62CA 6F56          M                 movwf   ACCUL
62CC 6B57          M                 clrf    ACCUH
62CE 0012      04412         return
62D0 04413 caml_int32_compare_1neq2:
62D0 E304      04414         bnc     caml_int32_compare_1lt2
               04415         M_CONST 1
62D2 0E03          M                 movlw   2 * N + 1
62D4 6F56          M                 movwf   ACCUL
62D6 6B57          M                 clrf    ACCUH
62D8 0012      04416         return
62DA 04417 caml_int32_compare_1lt2:
62DA 6957      04418         setf    ACCUH
62DC 6956      04419         setf    ACCUL
62DE 0012      04420         return
               04421 #endif
               04422 
               04423 #ifdef caml_useprim_caml_int64_compare
62E0 04424 caml_int64_compare:
62E0 CF56 FFE9 04425         movff   ACCUL, FSR0L
62E4 CF57 FFEA 04426         movff   ACCUH, FSR0H
62E8 E802      04427         addfsr  FSR0, 0x2
62EA CFEE FF68 04428         movff   POSTINC0, TMP_REG_1
62EE CFEE FF69 04429         movff   POSTINC0, TMP_REG_2
62F2 CFEE FF6A 04430         movff   POSTINC0, TMP_REG_3
62F6 CFEE FF6B 04431         movff   POSTINC0, TMP_REG_4
62FA CFEE FF56 04432         movff   POSTINC0, ACCUL
62FE CFEE FF57 04433         movff   POSTINC0, ACCUH
6302 CFEE FFF3 04434         movff   POSTINC0, PRODL
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 237


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6306 CFEF FFF4 04435         movff   INDF0, PRODH
630A EB01 FFE9 04436         movsf   [0x1], FSR0L
630E EB02 FFEA 04437         movsf   [0x2], FSR0H
6312 E809      04438         addfsr  FSR0, 0x9
6314 0E80      04439         movlw   0x80
6316 26F4      04440         addwf   PRODH, F
6318 24ED      04441         addwf   POSTDEC0, W
631A 5CF4      04442         subwf   PRODH, W
631C E119      04443         bnz     caml_int64_compare_1neq2
631E 50ED      04444         movf    POSTDEC0, W
6320 5CF3      04445         subwf   PRODL, W
6322 E116      04446         bnz     caml_int64_compare_1neq2
6324 50ED      04447         movf    POSTDEC0, W
6326 5D57      04448         subwf   ACCUH, W
6328 E113      04449         bnz     caml_int64_compare_1neq2
632A 50ED      04450         movf    POSTDEC0, W
632C 5D56      04451         subwf   ACCUL, W
632E E110      04452         bnz     caml_int64_compare_1neq2
6330 50ED      04453         movf    POSTDEC0, W
6332 5D6B      04454         subwf   TMP_REG_4, W
6334 E10D      04455         bnz     caml_int64_compare_1neq2
6336 50ED      04456         movf    POSTDEC0, W
6338 5D6A      04457         subwf   TMP_REG_3, W
633A E10A      04458         bnz     caml_int64_compare_1neq2
633C 50ED      04459         movf    POSTDEC0, W
633E 5D69      04460         subwf   TMP_REG_2, W
6340 E107      04461         bnz     caml_int64_compare_1neq2
6342 50EF      04462         movf    INDF0, W
6344 5D68      04463         subwf   TMP_REG_1, W
6346 E104      04464         bnz     caml_int64_compare_1neq2
               04465         M_CONST 0
6348 0E01          M                 movlw   2 * N + 1
634A 6F56          M                 movwf   ACCUL
634C 6B57          M                 clrf    ACCUH
634E 0012      04466         return
6350 04467 caml_int64_compare_1neq2:
6350 E304      04468         bnc     caml_int64_compare_1lt2
               04469         M_CONST 1
6352 0E03          M                 movlw   2 * N + 1
6354 6F56          M                 movwf   ACCUL
6356 6B57          M                 clrf    ACCUH
6358 0012      04470         return
635A 04471 caml_int64_compare_1lt2:
635A 6957      04472         setf    ACCUH
635C 6956      04473         setf    ACCUL
635E 0012      04474         return
               04475 #endif
               04476 
               04477 ;;;
               04478         
               04479 #ifdef caml_useprim_caml_compare_to_eq
6360 04480 caml_compare_to_eq:
6360 7356      04481         btg     ACCUL, 1                ; 00 -> 1
6362 0E03      04482         movlw   0x03                    ; 01 -> 0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 238


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6364 1756      04483         andwf   ACCUL, F                ; 11 -> 0
6366 6B57      04484         clrf    ACCUH
6368 0012      04485         return
               04486 #endif
               04487 
               04488 #ifdef caml_useprim_caml_compare_to_neq
636A 04489 caml_compare_to_neq:
636A 0E03      04490         movlw   0x03                    ; 00 -> 0
636C 1756      04491         andwf   ACCUL, F                ; 01 -> 1
636E 6B57      04492         clrf    ACCUH                   ; 11 -> 1
6370 0012      04493         return
               04494 #endif
               04495 
               04496 #ifdef caml_useprim_caml_compare_to_lt
6372 04497 caml_compare_to_lt:
6372 4356      04498         rrncf   ACCUL, F                ; 00 -> 0
6374 8156      04499         bsf     ACCUL, 0                ; 01 -> 0
6376 0E03      04500         movlw   0x03                    ; 11 -> 1
6378 1756      04501         andwf   ACCUL, F
637A 6B57      04502         clrf    ACCUH
637C 0012      04503         return
               04504 #endif
               04505 
               04506 #ifdef caml_useprim_caml_compare_to_le
               04507 caml_compare_to_le:
               04508         btg     ACCUL, 1                ; 00 -> 1
               04509         btfsc   ACCUL, 2                ; 01 -> 0
               04510         bsf     ACCUL, 1                ; 11 -> 1
               04511         movlw   0x03
               04512         andwf   ACCUL, F
               04513         clrf    ACCUH
               04514         return
               04515 #endif
               04516 
               04517 #ifdef caml_useprim_caml_compare_to_gt
637E 04518 caml_compare_to_gt:
637E B556      04519         btfsc   ACCUL, 2                ; 00 -> 0
6380 9356      04520         bcf     ACCUL, 1                ; 01 -> 1
6382 0E03      04521         movlw   0x03                    ; 11 -> 0
6384 1756      04522         andwf   ACCUL, F
6386 6B57      04523         clrf    ACCUH
6388 0012      04524         return
               04525 #endif
               04526 
               04527 #ifdef caml_useprim_caml_compare_to_ge
638A 04528 caml_compare_to_ge:
638A 4356      04529         rrncf   ACCUL, F                ; 00 -> 1
638C 7356      04530         btg     ACCUL, 1                ; 01 -> 1
638E 8156      04531         bsf     ACCUL, 0                ; 11 -> 0
6390 0E03      04532         movlw   0x03
6392 1756      04533         andwf   ACCUL, F
6394 6B57      04534         clrf    ACCUH
6396 0012      04535         return
               04536 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 239


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04537 
               04538 #ifdef caml_useprim_caml_raise_ia_compare
               04539 #ifndef caml_useprim_caml_raise_ia
               04540 #define caml_useprim_caml_raise_ia
               04541 #endif
6398 04542 caml_raise_ia_compare:
6398 0E01      04543         movlw   0x1                     ; erase ACCU and stack[0]
639A 6F56      04544         movwf   ACCUL
639C 6E01      04545         movwf   [0x1]
639E 6B57      04546         clrf    ACCUH
63A0 6A02      04547         clrf    [0x2]
               04548         M_CHECK_UNFULL_HEAP 0x7         ; check allocation of string and exn
63A2 515E          M                 movf    CUR_HEAP_END, W
63A4 62E2          M                 cpfseq  FSR1H
63A6 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
63A8 0E10          M                 movlw   (N * 0x2 + 0x2)
63AA 24E1          M                 addwf   FSR1L, W
63AC E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
63AE EC6D F00A     M                 call    caml_gc_exec
                   M 
63B2 515E          M                 movf    CUR_HEAP_END, W
63B4 62E2          M                 cpfseq  FSR1H
63B6 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
63B8 0E10          M                 movlw   (N * 0x2 + 0x2)
63BA 24E1          M                 addwf   FSR1L, W
63BC B0D8          M                 btfsc   STATUS, C
63BE EFAC F009     M                 goto    caml_raise_out_of_memory
63C2     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000016         M CPT_CUH = CPT_CUH + 1
               04549         M_WRITE_BYTE STRING_TAG         ; write string tag
63C2 0EFC          M                 movlw   C
63C4 6EE6          M                 movwf   POSTINC1
               04550         M_WRITE_BYTE 0x4                ; write string size
63C6 0E04          M                 movlw   C
63C8 6EE6          M                 movwf   POSTINC1
63CA CFE1 FF68 04551         movff   FSR1L, TMP_REG_1        ; mem string addr
63CE CFE2 FF69 04552         movff   FSR1H, TMP_REG_2
               04553         M_WRITE_BYTE 'c'                ; write string content
63D2 0E63          M                 movlw   C
63D4 6EE6          M                 movwf   POSTINC1
               04554         M_WRITE_BYTE 'o'
63D6 0E6F          M                 movlw   C
63D8 6EE6          M                 movwf   POSTINC1
               04555         M_WRITE_BYTE 'm'
63DA 0E6D          M                 movlw   C
63DC 6EE6          M                 movwf   POSTINC1
               04556         M_WRITE_BYTE 'p'
63DE 0E70          M                 movlw   C
63E0 6EE6          M                 movwf   POSTINC1
               04557         M_WRITE_BYTE 'a'
63E2 0E61          M                 movlw   C
63E4 6EE6          M                 movwf   POSTINC1
               04558         M_WRITE_BYTE 'r'
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 240


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
63E6 0E72          M                 movlw   C
63E8 6EE6          M                 movwf   POSTINC1
               04559         M_WRITE_BYTE 'e'
63EA 0E65          M                 movlw   C
63EC 6EE6          M                 movwf   POSTINC1
               04560         M_WRITE_BYTE 0x0                ; write string \0
63EE 0E00          M                 movlw   C
63F0 6EE6          M                 movwf   POSTINC1
63F2 EF17 F032 04561         goto    caml_raise_ia
               04562 #endif
               04563 
               04564 
               04565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04566 ;;;;;;;;                                   ;;;;;;;;
               04567 ;;;;;;;;          INTERRUPTIONS            ;;;;;;;;
               04568 ;;;;;;;;                                   ;;;;;;;;
               04569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04570 
               04571 #ifdef caml_useprim_caml_set_interruption_handler
               04572 
               04573 caml_set_interruption_handler:
               04574         movff   ACCUL, INT_FUN_L
               04575         movff   ACCUH, INT_FUN_H
               04576         return
               04577 
               04578 asm_interrupt_handler:
               04579         movf    INTCON, W               ; INT_FLAGS_3:2:1 |= *IF
               04580         andlw   B'00000111'
               04581         iorwf   INT_FLAGS_3, F
               04582         movf    INTCON, W
               04583         rlcf    WREG, W
               04584         swapf   WREG, W
               04585         iorlw   B'11111000'
               04586         andwf   INT_FLAGS_3, F
               04587         swapf   INTCON3, W
               04588         andlw   B'00110000'
               04589         iorwf   INT_FLAGS_3, F
               04590         movf    INTCON3, W
               04591         rlcf    WREG, W
               04592         iorlw   B'11001111'
               04593         andwf   INT_FLAGS_3, F
               04594         movf    PIR1, W
               04595         iorwf   INT_FLAGS_1, F
               04596         movf    PIE1, W
               04597         andwf   INT_FLAGS_1, F
               04598         movf    PIR2, W
               04599         iorwf   INT_FLAGS_2, F
               04600         movf    PIE2, W
               04601         andwf   INT_FLAGS_2, F
               04602         clrf    PIR1                    ; *IF <- 0
               04603         clrf    PIR2
               04604         movlw   B'11111000'
               04605         andwf   INTCON, F
               04606         movlw   B'11111100'
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 241


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04607         andwf   INTCON3, F
               04608         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04609         retfie  FAST
               04610 
               04611 caml_interrupt_handler:
               04612         btfss   INT_FUN_L, 0            ; handler defined ?
               04613         bra     caml_interrupt_handler_l0
               04614         clrf    INT_FLAGS_1             ; no -> clear flags
               04615         clrf    INT_FLAGS_2
               04616         clrf    INT_FLAGS_3
               04617         goto    _THE_BIG_LOOP
               04618 caml_interrupt_handler_l0:              ; yes
               04619         clrf    TMP_REG_1
               04620         clrf    TMP_REG_2
               04621         clrf    TMP_REG_3
               04622         comf    INT_RUNS_1, W
               04623         andwf   INT_FLAGS_1, W
               04624         bnz     caml_interrupt_handler_1
               04625         comf    INT_RUNS_2, W                ;; TMP_REG_1 = argL
               04626         andwf   INT_FLAGS_2, W               ;; TMP_REG_2 = argH
               04627         bnz     caml_interrupt_handler_2     ;; TMP_REG_3 = running_flag
               04628         comf    INT_RUNS_3, W
               04629         andwf   INT_FLAGS_3, W
               04630         andlw   B'00110111'
               04631         bnz     caml_interrupt_handler_3
               04632         bcf     INT_FLAGS_3, 7          ; clear interrupt_flag
               04633         goto    _THE_BIG_LOOP           ; nothing to do
               04634 caml_interrupt_handler_1:               ; PIR1 interruption
               04635         bsf     TMP_REG_3, 5
               04636         rcall   caml_interrupt_handler_compute_mask
               04637         iorwf   INT_RUNS_1, F
               04638         xorwf   INT_FLAGS_1, F
               04639         movlw   (((2 * PIR1) & 0xFF) + 1)
               04640         movwf   TMP_REG_1
               04641         bra     caml_interrupt_handler_run
               04642 caml_interrupt_handler_2:               ; PIR2 interruption
               04643         bsf     TMP_REG_3, 6
               04644         rcall   caml_interrupt_handler_compute_mask
               04645         iorwf   INT_RUNS_2, F
               04646         xorwf   INT_FLAGS_2, F
               04647         movlw   (((2 * PIR2) & 0xFF) + 1)
               04648         movwf   TMP_REG_1
               04649         bra     caml_interrupt_handler_run
               04650 caml_interrupt_handler_3:
               04651         bsf     TMP_REG_3, 7
               04652         rcall   caml_interrupt_handler_compute_mask
               04653         iorwf   INT_RUNS_3, F
               04654         xorwf   INT_FLAGS_3, F
               04655         movf    TMP_REG_2, W
               04656         andlw   0x0F
               04657         bz      caml_interrupt_handler_3_INTCON3
               04658         movlw   (((2 * INTCON) & 0xFF) + 1)
               04659         movwf   TMP_REG_1
               04660         bra     caml_interrupt_handler_run
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 242


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04661 caml_interrupt_handler_3_INTCON3:
               04662         movlw   (((2 * INTCON3) & 0xFF) + 1)
               04663         movwf   TMP_REG_1
               04664         swapf   TMP_REG_2, F
               04665 caml_interrupt_handler_run:
               04666         movlw   STACK_END               ; check stack overflow (8 levels)
               04667         cpfseq  FSR2H
               04668         bra     caml_interrupt_handler_l1
               04669         movlw   -0x16
               04670         addwf   FSR2L, W
               04671         btfss   STATUS, C
               04672         goto    caml_raise_stack_overflow
               04673 caml_interrupt_handler_l1:
               04674         bcf     INT_FLAGS_3, 7          ; clear interrupt_flag
               04675         movff   ACCUH, POSTDEC2         ; push accu
               04676         movff   ACCUL, POSTDEC2
               04677         movff   TBLPTRH, POSTDEC2       ; push PC
               04678         movff   TBLPTRL, POSTDEC2
               04679         movff   TRAP_SPH, POSTDEC2      ; push trapSp
               04680         movff   TRAP_SPL, POSTDEC2
               04681         movlw   high (caml_interrupt_handler_raise_instr) ; push @raise_instr
               04682         movwf   POSTDEC2
               04683         movlw   low (caml_interrupt_handler_raise_instr)
               04684         movwf   POSTDEC2
               04685         movff   FSR2H, TRAP_SPH         ; trapSp <- Sp
               04686         movff   FSR2L, TRAP_SPL
               04687         movff   TMP_REG_3, POSTDEC2     ; (1)push running_flag
               04688         movff   EXTRA_ARGS, POSTDEC2    ; (1)push extra_args
               04689         movff   ENVH, POSTDEC2          ; push env
               04690         movff   ENVL, POSTDEC2
               04691         movlw   high (caml_interrupt_handler_return_instr) ; push @return_instr
               04692         movwf   POSTDEC2
               04693         movlw   low (caml_interrupt_handler_return_instr)
               04694         movwf   POSTDEC2
               04695         movff   TMP_REG_2, POSTDEC2     ; push argument
               04696         movff   TMP_REG_1, POSTDEC2
               04697         movf    INT_FUN_L, W            ; ACCU, ENV, FSR0 <- interrupt_handler
               04698         movwf   ACCUL
               04699         movwf   ENVL
               04700         movwf   FSR0L
               04701         movf    INT_FUN_H, W
               04702         movwf   ACCUH
               04703         movwf   ENVH
               04704         movwf   FSR0H
               04705         movff   POSTINC0, TBLPTRL       ; PC <- interrupt_handler[0]
               04706         movff   INDF0, TBLPTRH
               04707         movlw   0x1                     ; extraArgs <- int_val(0)
               04708         movwf   EXTRA_ARGS
               04709         goto    _THE_BIG_LOOP
               04710 caml_interrupt_handler_compute_mask:
               04711         movwf   PRODL
               04712         movlw   0x00
               04713         bsf     STATUS, C
               04714 caml_interrupt_handler_compute_mask_loop:
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 243


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04715         rlcf    WREG, W
               04716         rrcf    PRODL, F
               04717         bnc     caml_interrupt_handler_compute_mask_loop
               04718         movwf   TMP_REG_2
               04719         andlw   0x0F
               04720         bnz     caml_interrupt_handler_compute_mask_l
               04721         bsf     TMP_REG_3, 4
               04722         swapf   TMP_REG_2, W
               04723         iorwf   TMP_REG_3, F
               04724         movf    TMP_REG_2, W
               04725         return
               04726 caml_interrupt_handler_compute_mask_l:
               04727         iorwf   TMP_REG_3, F
               04728         return
               04729 
               04730 caml_interrupt_handler_return_instr:
               04731         db      .146
               04732         
               04733 caml_interrupt_handler_raise_instr:
               04734         db      .147
               04735 
               04736 caml_interrupt_handler_return:
               04737         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04738         rcall   caml_interrupt_restore_runs
               04739         addfsr  FSR2, 0x4               ; pop [ @raise_instr ; trapSp ]
               04740         movff   PREINC2, TBLPTRL        ; PC <- pop()
               04741         movff   PREINC2, TBLPTRH
               04742         movff   PREINC2, ACCUL          ; ACCU <- pop()
               04743         movff   PREINC2, ACCUH
               04744         return
               04745 
               04746 caml_interrupt_handler_raise:
               04747         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04748         subfsr  FSR2, 0x8               ; FSR2 <- @running_flag
               04749         rcall   caml_interrupt_restore_runs
               04750         addfsr  FSR2, 0x8               ; pop [ @ri ; tSp ; PC ; ACCU ]
               04751         goto    _RAISE                  ; raise
               04752 
               04753 caml_interrupt_restore_runs:
               04754         movf    [0x0], W                ; W <- running_flag
               04755         movwf   PRODL                   ; PRODL <- running_flag
               04756         andlw   0x0F                    ; compute mask
               04757         btfsc   PRODL, 4
               04758         swapf   WREG, W
               04759         btfsc   PRODL, 5                ; clear run bit
               04760         xorwf   INT_RUNS_1, F
               04761         btfsc   PRODL, 6
               04762         xorwf   INT_RUNS_2, F
               04763         btfsc   PRODL, 7
               04764         xorwf   INT_RUNS_3, F
               04765         return
               04766 
               04767 #else
               04768 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 244


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
63F6 04769 asm_interrupt_handler:
63F6 0011      04770         retfie  FAST
               04771 
63F8 04772 caml_interrupt_handler:
63F8 EF93 F009 04773         goto    _THE_BIG_LOOP
               04774 
               04775 #endif
               04776 
               04777 
               04778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04779 ;;;;;;;;                                   ;;;;;;;;
               04780 ;;;;;;;;               SLEEP               ;;;;;;;;
               04781 ;;;;;;;;                                   ;;;;;;;;
               04782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04783 
               04784 #ifdef caml_useprim_caml_sleep_millis
63FC 04785 caml_sleep_millis:
63FC 3557      04786         rlcf    ACCUH, W        ; ACCU < 0 ?
63FE E216      04787         bc      caml_sleep_millis_end
6400 3357      04788         rrcf    ACCUH, F        ; ACCU <- val_int(ACCU)
6402 3356      04789         rrcf    ACCUL, F
6404 5156      04790         movf    ACCUL, W        ; ACCU = 0 ?
6406 1157      04791         iorwf   ACCUH, W
6408 E011      04792         bz      caml_sleep_millis_end
640A 2B57      04793         incf    ACCUH, F
640C 0EEA      04794         movlw   .234
640E 6F68      04795         movwf   TMP_REG_1
6410 0E0D      04796         movlw   .13
6412 6F69      04797         movwf   TMP_REG_2
6414 04798 caml_sleep_millis_loop:
6414 2F68      04799         decfsz  TMP_REG_1, F
6416 D7FE      04800         bra     caml_sleep_millis_loop
6418 2F69      04801         decfsz  TMP_REG_2, F
641A D7FC      04802         bra     caml_sleep_millis_loop
641C 0EFA      04803         movlw   .250
641E 6F68      04804         movwf   TMP_REG_1
6420 0E0D      04805         movlw   .13
6422 6F69      04806         movwf   TMP_REG_2
6424 2F56      04807         decfsz  ACCUL, F
6426 2B57      04808         incf    ACCUH, F
6428 2F57      04809         decfsz  ACCUH, F
642A D7F4      04810         bra     caml_sleep_millis_loop
642C 04811 caml_sleep_millis_end:
642C 0012      04812         return
               04813 #endif
               04814         
               04815 
               04816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04817 ;;;;;;;;                                   ;;;;;;;;
               04818 ;;;;;;;;               TOOL                ;;;;;;;;
               04819 ;;;;;;;;                                   ;;;;;;;;
               04820 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04821 
               04822 #ifdef caml_useprim_caml_raise_ia
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 245


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
642E 04823 caml_raise_ia:
               04824         M_WRITE_BYTE 0x0                ; write exn tag
642E 0E00          M                 movlw   C
6430 6EE6          M                 movwf   POSTINC1
               04825         M_WRITE_BYTE 0x2                ; write exn size
6432 0E02          M                 movlw   C
6434 6EE6          M                 movwf   POSTINC1
6436 CFE1 FF56 04826         movff   FSR1L, ACCUL            ; ACCU <- exn
643A CFE2 FF57 04827         movff   FSR1H, ACCUH
643E 0E07      04828         movlw   (0x2 * INVALID_ARG_IND + 0x1) ; write INVALID_ARG_IND
6440 6EE6      04829         movwf   POSTINC1
6442 6AE6      04830         clrf    POSTINC1
6444 CF68 FFE6 04831         movff   TMP_REG_1, POSTINC1     ; write string addr
6448 CF69 FFE6 04832         movff   TMP_REG_2, POSTINC1
644C EFE8 F009 04833         goto    caml_extern_raise
               04834 #endif
               04835 
               04836 
               04837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04838 ;;;;;;;;                                   ;;;;;;;;
               04839 ;;;;;;;;           ALPHA SERIAL            ;;;;;;;;
               04840 ;;;;;;;;                                   ;;;;;;;;
               04841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04842 
6450 04843 #define SERIAL_TICTAC   IPR1,RCIP
               04844 
  0000006B     04845 SERIAL_HASH_INITL       EQU     0x6B
  00000039     04846 SERIAL_HASH_INITH       EQU     0x39
  000000A6     04847 SERIAL_FLAG_BASE        EQU     0xA6
  000000A6     04848 SERIAL_NEWTIC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'00000000')
  00000059     04849 SERIAL_NEWTAC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'11111111')
  000000A9     04850 SERIAL_ENDTIC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'00001111')
  00000056     04851 SERIAL_ENDTAC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'11110000')
  0000009A     04852 SERIAL_RECEIVE_FLAG     EQU     (SERIAL_FLAG_BASE ^ B'00111100')
  00000065     04853 SERIAL_ERROR_FLAG       EQU     (SERIAL_FLAG_BASE ^ B'11000011')
  00000095     04854 SERIAL_GET_FLAG         EQU     (SERIAL_FLAG_BASE ^ B'00110011')
  0000006A     04855 SERIAL_OOM_FLAG         EQU     (SERIAL_FLAG_BASE ^ B'11001100')
  000000FF     04856 SERIAL_ESC_FLAG         EQU     0xFF
  00000003     04857 SERIAL_RES1_FLAG        EQU     0x03
  0000001A     04858 SERIAL_RES2_FLAG        EQU     0x1A
  0000001C     04859 SERIAL_RES3_FLAG        EQU     0x1C
               04860 
               04861 #ifdef caml_useprim_caml_serial_open_channel
               04862 caml_serial_open_channel:
               04863         movlw   B'00100100'
               04864         movwf   TXSTA
               04865         movlw   B'10010000'
               04866         movwf   RCSTA
               04867         bcf     SERIAL_TICTAC
               04868         rrcf    ACCUH, W        ; STATUS.C ignored
               04869         rrcf    ACCUL, W
               04870         movwf   SPBRG
               04871         btfsc   ACCUH, 1
               04872         bsf     TXSTA, BRGH
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 246


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04873         return
               04874 #endif
               04875         
               04876 #ifdef caml_useprim_caml_serial_receive
               04877 #ifndef caml_useprim_caml_serial_receive_byte
               04878 #define caml_useprim_caml_serial_receive_byte
               04879 #endif
               04880 #ifndef caml_useprim_caml_serial_send_byte
               04881 #define caml_useprim_caml_serial_send_byte
               04882 #endif
               04883 #ifndef caml_useprim_caml_serial_receive_flag
               04884 #define caml_useprim_caml_serial_receive_flag
               04885 #endif
               04886 #ifndef caml_useprim_caml_serial_send_flag
               04887 #define caml_useprim_caml_serial_send_flag
               04888 #endif
               04889 #ifndef caml_useprim_caml_compute_hash_init
               04890 #define caml_useprim_caml_compute_hash_init
               04891 #endif
               04892 #ifndef caml_useprim_caml_compute_hash_step
               04893 #define caml_useprim_caml_compute_hash_step
               04894 #endif
               04895 caml_serial_receive:
               04896         rcall   caml_serial_receive_flag        ; receive flag
               04897         xorlw   SERIAL_NEWTIC_FLAG              ; NEWTIC ?
               04898         bnz     caml_serial_receive_notnewtic
               04899         btfsc   SERIAL_TICTAC                   ; TIC ?
               04900         bra     caml_serial_receive_nottic
               04901         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04902         rcall   caml_serial_send_flag
               04903         bra     caml_serial_receive_start
               04904 caml_serial_receive_nottic:
               04905         movlw   SERIAL_ENDTIC_FLAG              ; send ENDTIC
               04906         rcall   caml_serial_send_flag
               04907         bra     caml_serial_receive
               04908 caml_serial_receive_notnewtic:
               04909         xorlw   (SERIAL_NEWTIC_FLAG ^ SERIAL_NEWTAC_FLAG) ; NEWTAC ?
               04910         bnz     caml_serial_receive_notnewtac
               04911         btfss   SERIAL_TICTAC                   ; TAC ?
               04912         bra     caml_serial_receive_nottac
               04913         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04914         rcall   caml_serial_send_flag
               04915         bra     caml_serial_receive_start
               04916 caml_serial_receive_nottac:
               04917         movlw   SERIAL_ENDTAC_FLAG
               04918         rcall   caml_serial_send_flag
               04919         bra     caml_serial_receive
               04920 caml_serial_receive_notnewtac:
               04921         xorlw   (SERIAL_NEWTAC_FLAG ^ SERIAL_ENDTIC_FLAG) ; ENDTIC ?
               04922         bz      caml_serial_receive_nottic
               04923         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC ?
               04924         bz      caml_serial_receive_nottac
               04925         xorlw   (SERIAL_ENDTAC_FLAG ^ SERIAL_RECEIVE_FLAG) ; RECEIVE ?
               04926         bnz     caml_serial_receive
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 247


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04927         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04928         rcall   caml_serial_send_flag
               04929         bra     caml_serial_receive
               04930 
               04931 caml_serial_receive_start:
               04932         rcall   caml_compute_hash_init
               04933         rcall   caml_serial_receive_byte        ; receive sizeL
               04934         movwf   ACCUL                           ; ACCUL <- sizeL or accuL
               04935         rcall   caml_compute_hash_step
               04936         rcall   caml_serial_receive_byte        ; receive sizeH
               04937         movwf   ACCUH                           ; ACCUH <- sizeH or accuH
               04938         rcall   caml_compute_hash_step
               04939         rcall   caml_serial_receive_byte        ; receive HASH
               04940         movwf   TMP_REG_6
               04941         rcall   caml_serial_receive_byte
               04942         cpfseq  TMP_REG_3                       ; check HASH
               04943         bra     caml_serial_receive
               04944         movf    TMP_REG_6, W
               04945         cpfseq  TMP_REG_2
               04946         bra     caml_serial_receive
               04947         btfsc   ACCUL, 0
               04948         bra     caml_serial_receive_end
               04949         movlw   low ATOM0_ADR
               04950         cpfseq  ACCUL
               04951         bra     caml_serial_receive_check_oom
               04952         movlw   high ATOM0_ADR
               04953         xorwf   ACCUH, W
               04954         bz      caml_serial_receive_end
               04955 
               04956 caml_serial_receive_check_oom:
               04957         movf    ACCUL, W
               04958         movwf   TMP_REG_A                       ; TMP_REG_A <- sizeL
               04959         addwf   FSR1L, W                        ; FSR1L + sizeL
               04960         movf    ACCUH, W
               04961         movwf   TMP_REG_B                       ; TMP_REG_B <- sizeH
               04962         addwfc  FSR1H, W                        ; FSR1H + sizeH + carry
               04963         cpfslt  CUR_HEAP_END                    ; check heap overflow
               04964         bra     caml_serial_receive_heap        ; ok
               04965         movlw   0x1                             ; ACCUL <- ()
               04966         movwf   ACCUL
               04967         clrf    ACCUH
               04968         call    caml_gc_exec                    ; run GC
               04969         movf    TMP_REG_A, W                    ; check heap overflow
               04970         addwf   FSR1L, W
               04971         movf    TMP_REG_B, W
               04972         addwfc  FSR1H, W
               04973         cpfslt  CUR_HEAP_END
               04974         bra     caml_serial_receive_heap        ; ok
               04975         bra     caml_serial_receive_oom         ; overflow
               04976 
               04977 caml_serial_receive_heap:
               04978         movlw   SERIAL_GET_FLAG
               04979         rcall   caml_serial_send_flag
               04980         rcall   caml_compute_hash_init
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 248


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04981         movf    FSR1L, W                        ; send FSR1
               04982         rcall   caml_serial_send_byte
               04983         rcall   caml_compute_hash_step
               04984         movf    FSR1H, W
               04985         rcall   caml_serial_send_byte
               04986         rcall   caml_compute_hash_step
               04987         movf    TMP_REG_2, W                    ; send HASH
               04988         rcall   caml_serial_send_byte
               04989         movf    TMP_REG_3, W
               04990         rcall   caml_serial_send_byte
               04991         
               04992 caml_serial_receive_data:
               04993         bcf     STATUS, C                       ; TMP_REG_5:4 <- SIZE / 2
               04994         rrcf    TMP_REG_B, W
               04995         movwf   TMP_REG_5
               04996         rrcf    TMP_REG_A, W
               04997         movwf   TMP_REG_4
               04998         incf    TMP_REG_5, F                    ; TMP_REG_5 ++
               04999         addfsr  FSR1, 0x2                       ; ACCU <- @ first block
               05000         movff   FSR1L, ACCUL
               05001         movff   FSR1H, ACCUH
               05002         subfsr  FSR1, 0x2
               05003         rcall   caml_compute_hash_init
               05004 
               05005 caml_serial_receive_data_loop:
               05006         rcall   caml_serial_receive_byte        ; fill heap
               05007         movwf   POSTINC1
               05008         rcall   caml_compute_hash_step
               05009         rcall   caml_serial_receive_byte
               05010         movwf   POSTINC1
               05011         rcall   caml_compute_hash_step
               05012         dcfsnz  TMP_REG_4, F
               05013         decfsz  TMP_REG_5, F
               05014         bra     caml_serial_receive_data_loop   ; loop
               05015         rcall   caml_serial_receive_byte        ; receive HASH
               05016         movwf   TMP_REG_6
               05017         rcall   caml_serial_receive_byte
               05018         cpfseq  TMP_REG_3                       ; check HASH
               05019         bra     caml_serial_receive_data_error
               05020         movf    TMP_REG_6, W
               05021         cpfseq  TMP_REG_2
               05022         bra     caml_serial_receive_data_error
               05023 
               05024 caml_serial_receive_end:
               05025         movlw   SERIAL_ENDTIC_FLAG
               05026         btfsc   SERIAL_TICTAC
               05027         movlw   SERIAL_ENDTAC_FLAG
               05028         btg     SERIAL_TICTAC
               05029         bra     caml_serial_send_flag
               05030 
               05031 caml_serial_receive_oom:
               05032         movlw   SERIAL_OOM_FLAG                 ; send SERIAL_OOM_FLAG
               05033         rcall   caml_serial_send_flag
               05034         bra     caml_serial_receive             ; restart
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 249


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05035 
               05036 caml_serial_receive_data_error:
               05037         movf    TMP_REG_A, W                    ; restore FSR1
               05038         subwf   FSR1L, F
               05039         movf    TMP_REG_B, W
               05040         subwfb  FSR1H, F
               05041         bra     caml_serial_receive
               05042 #endif
               05043 
               05044 #ifdef caml_useprim_caml_serial_send
               05045 #ifndef caml_useprim_caml_serial_receive_byte
               05046 #define caml_useprim_caml_serial_receive_byte
               05047 #endif
               05048 #ifndef caml_useprim_caml_serial_send_byte
               05049 #define caml_useprim_caml_serial_send_byte
               05050 #endif
               05051 #ifndef caml_useprim_caml_serial_receive_flag
               05052 #define caml_useprim_caml_serial_receive_flag
               05053 #endif
               05054 #ifndef caml_useprim_caml_serial_send_flag
               05055 #define caml_useprim_caml_serial_send_flag
               05056 #endif
               05057 #ifndef caml_useprim_caml_compute_hash_init
               05058 #define caml_useprim_caml_compute_hash_init
               05059 #endif
               05060 #ifndef caml_useprim_caml_compute_hash_step
               05061 #define caml_useprim_caml_compute_hash_step
               05062 #endif
               05063 
               05064 caml_serial_send:
               05065         movlw   SERIAL_NEWTIC_FLAG              ; send NEW_FLAG
               05066         btfsc   SERIAL_TICTAC
               05067         movlw   SERIAL_NEWTAC_FLAG
               05068         rcall   caml_serial_send_flag
               05069         rcall   caml_serial_receive_flag        ; receive
               05070         xorlw   SERIAL_RECEIVE_FLAG             ; RECEIVE_FLAG ?
               05071         bnz     caml_serial_send_notrec
               05072         rcall   caml_compute_hash_init
               05073         movf    [0x1], W                        ; send stack top
               05074         rcall   caml_serial_send_byte
               05075         rcall   caml_compute_hash_step
               05076         movf    [0x2], W
               05077         rcall   caml_serial_send_byte
               05078         rcall   caml_compute_hash_step
               05079         movf    TMP_REG_2, W                    ; send HASH
               05080         rcall   caml_serial_send_byte
               05081         movf    TMP_REG_3, W
               05082         rcall   caml_serial_send_byte
               05083         bra     caml_serial_send_continue       ; -> continue
               05084 caml_serial_send_notrec:
               05085         xorlw   (SERIAL_RECEIVE_FLAG ^ SERIAL_ENDTIC_FLAG) ; ENDTIC_FLAG ?
               05086         bnz     caml_serial_send_nottic
               05087         btfsc   SERIAL_TICTAC                   ; TICTAC = TIC ?
               05088         bra     caml_serial_send
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 250


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05089         movlw   SERIAL_ENDTIC_FLAG              ; send ENDTIC_FLAG
               05090         rcall   caml_serial_send_flag
               05091         bra     caml_serial_send_end            ; -> end
               05092 caml_serial_send_nottic:
               05093         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC_FLAG ?
               05094         bnz     caml_serial_send
               05095         btfss   SERIAL_TICTAC                   ; TICTAC = TAC ?
               05096         bra     caml_serial_send
               05097         movlw   SERIAL_ENDTAC_FLAG              ; send ENDTAC_FLAG
               05098         rcall   caml_serial_send_flag
               05099         bra     caml_serial_send_end            ; -> end
               05100 
               05101 caml_serial_send_block:
               05102         rcall   caml_compute_hash_init
               05103         rcall   caml_serial_receive_byte        ; receive adr
               05104         movwf   FSR0L
               05105         rcall   caml_compute_hash_step
               05106         rcall   caml_serial_receive_byte
               05107         movwf   FSR0H
               05108         rcall   caml_compute_hash_step
               05109         rcall   caml_serial_receive_byte        ; receive HASH
               05110         movwf   TMP_REG_6
               05111         rcall   caml_serial_receive_byte
               05112         cpfseq  TMP_REG_3                       ; check HASH
               05113         bra     caml_serial_send
               05114         movf    TMP_REG_6, W
               05115         cpfseq  TMP_REG_2
               05116         bra     caml_serial_send
               05117 
               05118 caml_serial_send_block_tagsize:
               05119         rcall   caml_compute_hash_init
               05120         subfsr  FSR0, 0x2
               05121         movf    POSTINC0, W                     ; send tag
               05122         rcall   caml_serial_send_byte
               05123         rcall   caml_compute_hash_step
               05124         movf    POSTINC0, W                     ; send size
               05125         movwf   TMP_REG_A                       ; TMP_REG_A <- size
               05126         rcall   caml_serial_send_byte
               05127         rcall   caml_compute_hash_step
               05128         movf    TMP_REG_2, W                    ; send HASH
               05129         rcall   caml_serial_send_byte
               05130         movf    TMP_REG_3, W
               05131         rcall   caml_serial_send_byte
               05132 
               05133 caml_serial_send_block_data_start:
               05134         rcall   caml_compute_hash_init
               05135 
               05136 caml_serial_send_block_data_loop:
               05137         movf    POSTINC0, W                     ; send data
               05138         rcall   caml_serial_send_byte
               05139         rcall   caml_compute_hash_step
               05140         movf    POSTINC0, W
               05141         rcall   caml_serial_send_byte
               05142         rcall   caml_compute_hash_step
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 251


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05143         decfsz  TMP_REG_A, F
               05144         bra     caml_serial_send_block_data_loop
               05145         movf    TMP_REG_2, W                    ; send HASH
               05146         rcall   caml_serial_send_byte
               05147         movf    TMP_REG_3, W
               05148         rcall   caml_serial_send_byte
               05149 
               05150 caml_serial_send_continue:
               05151         rcall   caml_serial_receive_flag        ; receive flag
               05152         xorlw   SERIAL_GET_FLAG                 ; GET_FLAG ?
               05153         bz      caml_serial_send_block
               05154 caml_serial_send_continue_notget:
               05155         xorlw   (SERIAL_GET_FLAG ^ SERIAL_ENDTIC_FLAG)  ; ENDTIC_FLAG ?
               05156         bnz     caml_serial_send_continue_nottic
               05157         btfsc   SERIAL_TICTAC                   ; TICTAC = TIC ?
               05158         bra     caml_serial_send
               05159         movlw   SERIAL_ENDTIC_FLAG
               05160         rcall   caml_serial_send_flag
               05161         bra     caml_serial_send_end
               05162 caml_serial_send_continue_nottic:
               05163         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC_FLAG ?
               05164         bnz     caml_serial_send
               05165         btfss   SERIAL_TICTAC                   ; TICTAC = TAC ?
               05166         bra     caml_serial_send
               05167         movlw   SERIAL_ENDTAC_FLAG
               05168         rcall   caml_serial_send_flag
               05169 
               05170 caml_serial_send_end:
               05171         btg     SERIAL_TICTAC                   ; inverse tictac
               05172         return                                  ; ACCU = () already
               05173 #endif
               05174         
               05175 ;;; flags
               05176 
               05177 #ifdef caml_useprim_caml_serial_receive_flag
               05178 #ifndef caml_useprim_caml_serial_receive_byte
               05179 #define caml_useprim_caml_serial_receive_byte
               05180 #endif
               05181 caml_serial_receive_flag:
               05182         rcall   caml_serial_receive_byte
               05183         movwf   TMP_REG_C
               05184         rcall   caml_serial_receive_byte
               05185         cpfseq  TMP_REG_C
               05186         movlw   SERIAL_ERROR_FLAG
               05187         return
               05188 #endif
               05189 
               05190 #ifdef caml_useprim_caml_serial_send_flag
               05191 #ifndef caml_useprim_caml_serial_send_byte
               05192 #define caml_useprim_caml_serial_send_byte
               05193 #endif
               05194 caml_serial_send_flag:
               05195         rcall   caml_serial_send_byte
               05196         bra     caml_serial_send_byte
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 252


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05197 #endif
               05198 
               05199 ;;; routines
               05200 
               05201 #ifdef caml_useprim_caml_serial_receive_byte
               05202 caml_serial_receive_byte:
               05203         btfss   PIR1, RCIF      ; wait buffer full
               05204         bra     caml_serial_receive_byte
               05205         movf    RCREG, W        ; W <- data
               05206         bcf     RCSTA, CREN
               05207         bsf     RCSTA, CREN
               05208         xorlw   SERIAL_ESC_FLAG
               05209         bz      caml_serial_receive_byte_l0
               05210         xorlw   SERIAL_ESC_FLAG
               05211         return
               05212 caml_serial_receive_byte_l0:
               05213         btfss   PIR1, RCIF
               05214         bra     caml_serial_receive_byte_l0
               05215         movf    RCREG, W
               05216         bcf     RCSTA, CREN
               05217         bsf     RCSTA, CREN
               05218         xorlw   SERIAL_ESC_FLAG
               05219         return
               05220 #endif
               05221 
               05222 #ifdef caml_useprim_caml_serial_send_byte
               05223 caml_serial_send_byte:          ; WARNING: do not overwrite W
               05224         movwf   TMP_REG_E
               05225         xorlw   SERIAL_RES1_FLAG
               05226         bz      caml_serial_send_byte_ESC
               05227         xorlw   (SERIAL_RES1_FLAG ^ SERIAL_RES2_FLAG)
               05228         bz      caml_serial_send_byte_ESC
               05229         xorlw   (SERIAL_RES2_FLAG ^ SERIAL_RES3_FLAG)
               05230         bz      caml_serial_send_byte_ESC
               05231         xorlw   (SERIAL_RES3_FLAG ^ SERIAL_ESC_FLAG)
               05232         bz      caml_serial_send_byte_ESC
               05233         movf    TMP_REG_E, W
               05234 caml_serial_send_byte_l0:
               05235         btfss   PIR1, TXIF
               05236         bra     caml_serial_send_byte_l0
               05237         movwf   TXREG           ; send DATA (from W)
               05238         return
               05239 caml_serial_send_byte_ESC:
               05240         movlw   SERIAL_ESC_FLAG
               05241 caml_serial_send_byte_ESC_l0:
               05242         btfss   PIR1, TXIF
               05243         bra     caml_serial_send_byte_ESC_l0
               05244         movwf   TXREG
               05245         xorwf   TMP_REG_E, W
               05246 caml_serial_send_byte_ESC_l1:
               05247         btfss   PIR1, TXIF
               05248         bra     caml_serial_send_byte_ESC_l1
               05249         movwf   TXREG
               05250         movf    TMP_REG_E, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 253


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05251         return
               05252 #endif
               05253 
               05254 ;;; HASH
               05255 
               05256 #ifdef caml_useprim_caml_compute_hash_init
               05257 caml_compute_hash_init:
               05258         movlw   SERIAL_HASH_INITL        ; TMP_REG_3:2 <- magic
               05259         movwf   TMP_REG_2
               05260         movlw   SERIAL_HASH_INITH
               05261         movwf   TMP_REG_3
               05262         return
               05263 #endif
               05264 
               05265 #ifdef caml_useprim_caml_compute_hash_step
               05266 caml_compute_hash_step:
               05267         movwf   TMP_REG_1               ; TMP_REG_1 <- X
               05268         movf    TMP_REG_2, W            ; TMP_REG_2 <- TMP_REG_2 * TMP_REG_3
               05269         mulwf   TMP_REG_3
               05270         movf    PRODL, W
               05271         movwf   TMP_REG_2
               05272         xorwf   TMP_REG_3, F            ; TMP_REG_3 <- TMP_REG_2 ^ TMP_REG_3
               05273         movf    TMP_REG_1, W
               05274         xorwf   TMP_REG_2, F            ; TMP_REG_2 <- TMP_REG_2 ^ X
               05275         xorwf   TMP_REG_3, F            ; TMP_REG_3 <- TMP_REG_3 ^ X
               05276         return
               05277 #endif
               05278 
               05279 
               05280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05281 ;;;;;;;;                                   ;;;;;;;;
               05282 ;;;;;;;;              EEPROM               ;;;;;;;;
               05283 ;;;;;;;;                                   ;;;;;;;;
               05284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05285 
               05286 #ifdef caml_useprim_caml_eeprom_get_size
6450 05287 caml_eeprom_get_size:
6450 0EFF      05288         movlw   0xFF                    ; search for unimplemented bits of EEADR
6452 6EA9      05289         movwf   EEADR
6454 6EAA      05290         movwf   EEADRH
6456 CFA9 FF56 05291         movff   EEADR, ACCUL
645A CFAA FF57 05292         movff   EEADRH, ACCUH
645E 4B56      05293         infsnz  ACCUL, F
6460 2B57      05294         incf    ACCUH, F
6462 80D8      05295         bsf     STATUS, C
6464 3756      05296         rlcf    ACCUL, F
6466 3757      05297         rlcf    ACCUH, F
6468 0012      05298         return
               05299 #endif
               05300 
               05301 #ifdef caml_useprim_caml_eeprom_read
646A 05302 caml_eeprom_read:
646A 90D8      05303         bcf     STATUS, C       ; EEADRH:EEADR <- Long_val(ACCU)
646C 3157      05304         rrcf    ACCUH, W
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 254


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
646E 6EAA      05305         movwf   EEADRH
6470 3156      05306         rrcf    ACCUL, W
6472 6EA9      05307         movwf   EEADR
6474 9EA6      05308         bcf     EECON1, EEPGD   ; Point to DATA memory
6476 9CA6      05309         bcf     EECON1, CFGS    ; Access EEPROM
6478 80A6      05310         bsf     EECON1, RD      ; EEPROM Read
647A 6B57      05311         clrf    ACCUH           ; ACCU <- Val_long(EEDATA)
647C 80D8      05312         bsf     STATUS, C
647E 34A8      05313         rlcf    EEDATA, W
6480 6F56      05314         movwf   ACCUL
6482 3757      05315         rlcf    ACCUH, F
6484 0012      05316         return
               05317 #endif
               05318 
               05319 #ifdef caml_useprim_caml_eeprom_write
6486 05320 caml_eeprom_write:
6486 90D8      05321         bcf     STATUS, C       ; EEADRH:EEADR <- address
6488 3157      05322         rrcf    ACCUH, W
648A 6EAA      05323         movwf   EEADRH
648C 3156      05324         rrcf    ACCUL, W
648E 6EA9      05325         movwf   EEADR
6490 3002      05326         rrcf    [0x2], W        ; STATUS.C ignored
6492 3001      05327         rrcf    [0x1], W        ; EEDATA <- value
6494 6EA8      05328         movwf   EEDATA
6496 6F69      05329         movwf   TMP_REG_2       ; TMP_REG_2 <- value
6498 9EA6      05330         bcf     EECON1, EEPGD   ; Point to DATA memory
649A 9CA6      05331         bcf     EECON1, CFGS    ; Access EEPROM
649C 84A6      05332         bsf     EECON1, WREN    ; Enable writes
649E 9168      05333         bcf     TMP_REG_1, 0    ; TMP_REG_1.0 <- INTCON.GIE
64A0 BEF2      05334         btfsc   INTCON, GIE
64A2 8168      05335         bsf     TMP_REG_1, 0
64A4 9EF2      05336         bcf     INTCON, GIE     ; Disable Interrupts
64A6 0E55      05337         movlw   0x55            ; Write init sequence
64A8 6EA7      05338         movwf   EECON2
64AA 0EAA      05339         movlw   0xAA
64AC 6EA7      05340         movwf   EECON2
64AE 82A6      05341         bsf     EECON1, WR      ; Begin write
64B0 05342 caml_eeprom_write_loop:
64B0 B2A6      05343         btfsc   EECON1, WR      ; Wait write complete
64B2 D7FE      05344         bra     caml_eeprom_write_loop
64B4 B168      05345         btfsc   TMP_REG_1, 0    ; Restore INTCON.GIE
64B6 8EF2      05346         bsf     INTCON, GIE
64B8 B6A6      05347         btfsc   EECON1, WRERR
64BA D00A      05348         bra     caml_eeprom_write_error
64BC 2AA8      05349         incf    EEDATA, F
64BE 94A6      05350         bcf     EECON1, WREN    ; Disable writes
64C0 80A6      05351         bsf     EECON1, RD      ; Read
64C2 5169      05352         movf    TMP_REG_2, W
64C4 62A8      05353         cpfseq  EEDATA, W
64C6 D004      05354         bra     caml_eeprom_write_error
               05355         M_CONST 0               ; Return ()
64C8 0E01          M                 movlw   2 * N + 1
64CA 6F56          M                 movwf   ACCUL
64CC 6B57          M                 clrf    ACCUH
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 255


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
64CE 0012      05356         return
64D0 05357 caml_eeprom_write_error:
               05358         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
64D0 515E          M                 movf    CUR_HEAP_END, W
64D2 62E2          M                 cpfseq  FSR1H
64D4 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
64D6 0E16          M                 movlw   (N * 0x2 + 0x2)
64D8 24E1          M                 addwf   FSR1L, W
64DA E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
64DC EC6D F00A     M                 call    caml_gc_exec
                   M 
64E0 515E          M                 movf    CUR_HEAP_END, W
64E2 62E2          M                 cpfseq  FSR1H
64E4 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
64E6 0E16          M                 movlw   (N * 0x2 + 0x2)
64E8 24E1          M                 addwf   FSR1L, W
64EA B0D8          M                 btfsc   STATUS, C
64EC EFAC F009     M                 goto    caml_raise_out_of_memory
64F0     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000017         M CPT_CUH = CPT_CUH + 1
               05359         M_WRITE_BYTE STRING_TAG         ; write string tag
64F0 0EFC          M                 movlw   C
64F2 6EE6          M                 movwf   POSTINC1
               05360         M_WRITE_BYTE 0x7                ; write string size
64F4 0E07          M                 movlw   C
64F6 6EE6          M                 movwf   POSTINC1
64F8 CFE1 FF68 05361         movff   FSR1L, TMP_REG_1        ; mem string addr
64FC CFE2 FF69 05362         movff   FSR1H, TMP_REG_2
               05363         M_WRITE_BYTE 'E'                ; write string content
6500 0E45          M                 movlw   C
6502 6EE6          M                 movwf   POSTINC1
               05364         M_WRITE_BYTE 'e'
6504 0E65          M                 movlw   C
6506 6EE6          M                 movwf   POSTINC1
               05365         M_WRITE_BYTE 'p'
6508 0E70          M                 movlw   C
650A 6EE6          M                 movwf   POSTINC1
               05366         M_WRITE_BYTE 'r'
650C 0E72          M                 movlw   C
650E 6EE6          M                 movwf   POSTINC1
               05367         M_WRITE_BYTE 'o'
6510 0E6F          M                 movlw   C
6512 6EE6          M                 movwf   POSTINC1
               05368         M_WRITE_BYTE 'm'
6514 0E6D          M                 movlw   C
6516 6EE6          M                 movwf   POSTINC1
               05369         M_WRITE_BYTE '.'
6518 0E2E          M                 movlw   C
651A 6EE6          M                 movwf   POSTINC1
               05370         M_WRITE_BYTE 'w'
651C 0E77          M                 movlw   C
651E 6EE6          M                 movwf   POSTINC1
               05371         M_WRITE_BYTE 'r'
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 256


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6520 0E72          M                 movlw   C
6522 6EE6          M                 movwf   POSTINC1
               05372         M_WRITE_BYTE 'i'
6524 0E69          M                 movlw   C
6526 6EE6          M                 movwf   POSTINC1
               05373         M_WRITE_BYTE 't'
6528 0E74          M                 movlw   C
652A 6EE6          M                 movwf   POSTINC1
               05374         M_WRITE_BYTE 'e'
652C 0E65          M                 movlw   C
652E 6EE6          M                 movwf   POSTINC1
               05375         M_WRITE_BYTE 0x0                ; write string \0\1
6530 0E00          M                 movlw   C
6532 6EE6          M                 movwf   POSTINC1
               05376         M_WRITE_BYTE 0x1
6534 0E01          M                 movlw   C
6536 6EE6          M                 movwf   POSTINC1
               05377         M_WRITE_BYTE 0x0                ; write exn tag
6538 0E00          M                 movlw   C
653A 6EE6          M                 movwf   POSTINC1
               05378         M_WRITE_BYTE 0x2                ; write exn size
653C 0E02          M                 movlw   C
653E 6EE6          M                 movwf   POSTINC1
6540 CFE1 FF56 05379         movff   FSR1L, ACCUL            ; ACCU <- exn
6544 CFE2 FF57 05380         movff   FSR1H, ACCUH
6548 0E05      05381         movlw   (FAILURE_IND * 0x2 + 0x1) ; write FAILURE_IND
654A 6EE6      05382         movwf   POSTINC1
654C 6AE6      05383         clrf    POSTINC1
654E CF68 FFE6 05384         movff   TMP_REG_1, POSTINC1     ; write string addr
6552 CF69 FFE6 05385         movff   TMP_REG_2, POSTINC1
6556 EFE8 F009 05386         goto    caml_extern_raise
               05387 #endif
               05388 
               05389 #ifdef caml_useprim_caml_eeprom_refresh
               05390 caml_eeprom_refresh:
               05391         clrf    EEADR           ; Clear address
               05392         clrf    EEADRH
               05393         bcf     EECON1, CFGS    ; Set for memory
               05394         bcf     EECON1, EEPGD   ; Set for Data EEPROM
               05395         bcf     TMP_REG_1, 0    ; TMP_REG_1.0 <- INTCON.GIE
               05396         btfsc   INTCON, GIE
               05397         bsf     TMP_REG_1, 0
               05398         bcf     INTCON, GIE     ; Disable interrupts
               05399         bsf     EECON1, WREN    ; Enable writes
               05400 caml_eeprom_refresh_loop:
               05401         bsf     EECON1, RD      ; Read current address
               05402         movlw   0x55            ; Write init sequence
               05403         movwf   EECON2
               05404         movlw   0xAA
               05405         movwf   EECON2
               05406         bsf     EECON1, WR      ; Set WR bit to begin write
               05407 caml_eeprom_refresh_subloop:
               05408         btfsc   EECON1, WR
               05409         bra     caml_eeprom_refresh_subloop
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 257


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05410         incfsz  EEADR, F        ; Loop
               05411         bra     caml_eeprom_refresh_loop
               05412         incfsz  EEADRH, F
               05413         bra     caml_eeprom_refresh_loop
               05414         bcf     EECON1, WREN    ; Disable writes
               05415         btfsc   TMP_REG_1, 0
               05416         bsf     INTCON, GIE
               05417         return                  ; ACCU = () already
               05418 #endif
               05419 
               05420 
               05421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05422 ;;;;;;;;                                   ;;;;;;;;
               05423 ;;;;;;;;              FLOATS               ;;;;;;;;
               05424 ;;;;;;;;                                   ;;;;;;;;
               05425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05426 
               05427 M_ALLOC_FLOAT macro
               05428                 M_CHECK_UNFULL_HEAP 0x2
               05429                 movlw   DOUBLE_TAG              ; write tag
               05430                 movwf   POSTINC1
               05431                 movlw   0x2                     ; write size
               05432                 movwf   POSTINC1
               05433         endm
               05434         
               05435 #ifdef caml_useprim_caml_neg_float
655A 05436 caml_neg_float:
               05437         M_ALLOC_FLOAT
                   M                 M_CHECK_UNFULL_HEAP 0x2
655A 515E          M                 movf    CUR_HEAP_END, W
655C 62E2          M                 cpfseq  FSR1H
655E D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
6560 0E06          M                 movlw   (N * 0x2 + 0x2)
6562 24E1          M                 addwf   FSR1L, W
6564 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
6566 EC6D F00A     M                 call    caml_gc_exec
                   M 
656A 515E          M                 movf    CUR_HEAP_END, W
656C 62E2          M                 cpfseq  FSR1H
656E D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
6570 0E06          M                 movlw   (N * 0x2 + 0x2)
6572 24E1          M                 addwf   FSR1L, W
6574 B0D8          M                 btfsc   STATUS, C
6576 EFAC F009     M                 goto    caml_raise_out_of_memory
657A     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000018         M CPT_CUH = CPT_CUH + 1
657A 0EFD          M                 movlw   DOUBLE_TAG              ; write tag
657C 6EE6          M                 movwf   POSTINC1
657E 0E02          M                 movlw   0x2                     ; write size
6580 6EE6          M                 movwf   POSTINC1
6582 CF56 FFE9 05438         movff   ACCUL, FSR0L
6586 CF57 FFEA 05439         movff   ACCUH, FSR0H
658A CFE1 FF56 05440         movff   FSR1L, ACCUL            ; ACCU <- @result
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 258


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
658E CFE2 FF57 05441         movff   FSR1H, ACCUH
6592 CFEE FFE6 05442         movff   POSTINC0, POSTINC1
6596 CFEE FFE6 05443         movff   POSTINC0, POSTINC1
659A 50EE      05444         movf    POSTINC0, W
659C 0A80      05445         xorlw   0x80
659E 6EE6      05446         movwf   POSTINC1
65A0 CFEE FFE6 05447         movff   POSTINC0, POSTINC1
65A4 0012      05448         return
               05449 #endif
               05450 
               05451 #ifdef caml_useprim_caml_abs_float
65A6 05452 caml_abs_float:
               05453         M_ALLOC_FLOAT
                   M                 M_CHECK_UNFULL_HEAP 0x2
65A6 515E          M                 movf    CUR_HEAP_END, W
65A8 62E2          M                 cpfseq  FSR1H
65AA D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
65AC 0E06          M                 movlw   (N * 0x2 + 0x2)
65AE 24E1          M                 addwf   FSR1L, W
65B0 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
65B2 EC6D F00A     M                 call    caml_gc_exec
                   M 
65B6 515E          M                 movf    CUR_HEAP_END, W
65B8 62E2          M                 cpfseq  FSR1H
65BA D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
65BC 0E06          M                 movlw   (N * 0x2 + 0x2)
65BE 24E1          M                 addwf   FSR1L, W
65C0 B0D8          M                 btfsc   STATUS, C
65C2 EFAC F009     M                 goto    caml_raise_out_of_memory
65C6     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000019         M CPT_CUH = CPT_CUH + 1
65C6 0EFD          M                 movlw   DOUBLE_TAG              ; write tag
65C8 6EE6          M                 movwf   POSTINC1
65CA 0E02          M                 movlw   0x2                     ; write size
65CC 6EE6          M                 movwf   POSTINC1
65CE CF56 FFE9 05454         movff   ACCUL, FSR0L
65D2 CF57 FFEA 05455         movff   ACCUH, FSR0H
65D6 CFE1 FF56 05456         movff   FSR1L, ACCUL            ; ACCU <- @result
65DA CFE2 FF57 05457         movff   FSR1H, ACCUH
65DE CFEE FFE6 05458         movff   POSTINC0, POSTINC1
65E2 CFEE FFE6 05459         movff   POSTINC0, POSTINC1
65E6 50EE      05460         movf    POSTINC0, W
65E8 0B7F      05461         andlw   0x7F
65EA 6EE6      05462         movwf   POSTINC1
65EC CFEE FFE6 05463         movff   POSTINC0, POSTINC1
65F0 0012      05464         return
               05465 #endif
               05466 
               05467 #ifdef caml_useprim_caml_float_of_int
               05468 #ifndef caml_useprim_caml_float_operation_finalize
65F2 05469 #define caml_useprim_caml_float_operation_finalize
               05470 #endif
               05471 #ifndef caml_useprim_FLO2432
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 259


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
65F2 05472 #define caml_useprim_FLO2432
               05473 #endif
65F2 05474 caml_float_of_int:
65F2 3557      05475         rlcf    ACCUH, W        ; ignore STATUS.C
65F4 3157      05476         rrcf    ACCUH, W
65F6 6F69      05477         movwf   AARGB1
65F8 3156      05478         rrcf    ACCUL, W
65FA 6F68      05479         movwf   AARGB2
65FC 6B6A      05480         clrf    AARGB0
65FE BF69      05481         btfsc   AARGB1, 7
6600 696A      05482         setf    AARGB0
               05483         M_ALLOC_FLOAT
                   M                 M_CHECK_UNFULL_HEAP 0x2
6602 515E          M                 movf    CUR_HEAP_END, W
6604 62E2          M                 cpfseq  FSR1H
6606 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
6608 0E06          M                 movlw   (N * 0x2 + 0x2)
660A 24E1          M                 addwf   FSR1L, W
660C E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
660E EC6D F00A     M                 call    caml_gc_exec
                   M 
6612 515E          M                 movf    CUR_HEAP_END, W
6614 62E2          M                 cpfseq  FSR1H
6616 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
6618 0E06          M                 movlw   (N * 0x2 + 0x2)
661A 24E1          M                 addwf   FSR1L, W
661C B0D8          M                 btfsc   STATUS, C
661E EFAC F009     M                 goto    caml_raise_out_of_memory
6622     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000001A         M CPT_CUH = CPT_CUH + 1
6622 0EFD          M                 movlw   DOUBLE_TAG              ; write tag
6624 6EE6          M                 movwf   POSTINC1
6626 0E02          M                 movlw   0x2                     ; write size
6628 6EE6          M                 movwf   POSTINC1
662A CFE1 FF56 05484         movff   FSR1L, ACCUL    ; ACCU <- @result
662E CFE2 FF57 05485         movff   FSR1H, ACCUH
6632 D85A      05486         rcall   FLO2432
6634 D050      05487         bra     caml_float_operation_finalize
               05488 #endif
               05489 
               05490 #ifdef caml_useprim_caml_int_of_float
               05491 #ifndef caml_useprim_INT3224
6636 05492 #define caml_useprim_INT3224
               05493 #endif
6636 05494 caml_int_of_float:
6636 CF56 FFE9 05495         movff   ACCUL, FSR0L
663A CF57 FFEA 05496         movff   ACCUH, FSR0H
663E CFEE FF68 05497         movff   POSTINC0, AARGB2
6642 CFEE FF69 05498         movff   POSTINC0, AARGB1
6646 CFEE FF6A 05499         movff   POSTINC0, AARGB0
664A CFEF FF6B 05500         movff   INDF0, AEXP
664E D8C8      05501         rcall   INT3224
6650 80D8      05502         bsf     STATUS, C
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 260


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6652 3568      05503         rlcf    AARGB2, W
6654 6F56      05504         movwf   ACCUL
6656 3569      05505         rlcf    AARGB1, W
6658 6F57      05506         movwf   ACCUH
665A 0012      05507         return
               05508 #endif
               05509         
               05510 #ifdef caml_useprim_caml_add_float
               05511 #ifndef caml_useprim_caml_float_operation_initialize
665C 05512 #define caml_useprim_caml_float_operation_initialize
               05513 #endif
               05514 #ifndef caml_useprim_FPA32
665C 05515 #define caml_useprim_FPA32
               05516 #endif
               05517 #ifndef caml_useprim_caml_float_operation_finalize
               05518 #define caml_useprim_caml_float_operation_finalize
               05519 #endif
665C 05520 caml_add_float:
665C D80B      05521         rcall   caml_float_operation_initialize
665E DA10      05522         rcall   FPA32
6660 D03A      05523         bra     caml_float_operation_finalize
               05524 #endif
               05525 
               05526 #ifdef caml_useprim_caml_sub_float
               05527 #ifndef caml_useprim_caml_float_operation_initialize
               05528 #define caml_useprim_caml_float_operation_initialize
               05529 #endif
               05530 #ifndef caml_useprim_FPS32
6662 05531 #define caml_useprim_FPS32
               05532 #endif
               05533 #ifndef caml_useprim_caml_float_operation_finalize
               05534 #define caml_useprim_caml_float_operation_finalize
               05535 #endif
6662 05536 caml_sub_float:
6662 D808      05537         rcall   caml_float_operation_initialize
6664 DA0B      05538         rcall   FPS32
6666 D037      05539         bra     caml_float_operation_finalize
               05540 #endif
               05541 
               05542 #ifdef caml_useprim_caml_mul_float
               05543 #ifndef caml_useprim_caml_float_operation_initialize
               05544 #define caml_useprim_caml_float_operation_initialize
               05545 #endif
               05546 #ifndef caml_useprim_FPM32
6668 05547 #define caml_useprim_FPM32
               05548 #endif
               05549 #ifndef caml_useprim_caml_float_operation_finalize
               05550 #define caml_useprim_caml_float_operation_finalize
               05551 #endif
6668 05552 caml_mul_float:
6668 D805      05553         rcall   caml_float_operation_initialize
666A D915      05554         rcall   FPM32
666C D034      05555         bra     caml_float_operation_finalize
               05556 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 261


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05557 
               05558 #ifdef caml_useprim_caml_div_float
               05559 #ifndef caml_useprim_caml_float_operation_initialize
               05560 #define caml_useprim_caml_float_operation_initialize
               05561 #endif
               05562 #ifndef caml_useprim_FPD32
666E 05563 #define caml_useprim_FPD32
               05564 #endif
               05565 #ifndef caml_useprim_caml_float_operation_finalize
               05566 #define caml_useprim_caml_float_operation_finalize
               05567 #endif
666E 05568 caml_div_float:
666E D802      05569         rcall   caml_float_operation_initialize
6670 D970      05570         rcall   FPD32
6672 D031      05571         bra     caml_float_operation_finalize
               05572 #endif
               05573 
               05574 #ifdef caml_useprim_caml_float_operation_initialize
6674 05575 caml_float_operation_initialize:
               05576         M_ALLOC_FLOAT
                   M                 M_CHECK_UNFULL_HEAP 0x2
6674 515E          M                 movf    CUR_HEAP_END, W
6676 62E2          M                 cpfseq  FSR1H
6678 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
667A 0E06          M                 movlw   (N * 0x2 + 0x2)
667C 24E1          M                 addwf   FSR1L, W
667E E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
6680 EC6D F00A     M                 call    caml_gc_exec
                   M 
6684 515E          M                 movf    CUR_HEAP_END, W
6686 62E2          M                 cpfseq  FSR1H
6688 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
668A 0E06          M                 movlw   (N * 0x2 + 0x2)
668C 24E1          M                 addwf   FSR1L, W
668E B0D8          M                 btfsc   STATUS, C
6690 EFAC F009     M                 goto    caml_raise_out_of_memory
6694     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  0000001B         M CPT_CUH = CPT_CUH + 1
6694 0EFD          M                 movlw   DOUBLE_TAG              ; write tag
6696 6EE6          M                 movwf   POSTINC1
6698 0E02          M                 movlw   0x2                     ; write size
669A 6EE6          M                 movwf   POSTINC1
669C CF56 FFE9 05577         movff   ACCUL, FSR0L
66A0 CF57 FFEA 05578         movff   ACCUH, FSR0H
66A4 CFE1 FF56 05579         movff   FSR1L, ACCUL            ; ACCU <- @result
66A8 CFE2 FF57 05580         movff   FSR1H, ACCUH
66AC CFEE FF68 05581         movff   POSTINC0, AARGB2
66B0 CFEE FF69 05582         movff   POSTINC0, AARGB1
66B4 CFEE FF6A 05583         movff   POSTINC0, AARGB0
66B8 CFEF FF6B 05584         movff   INDF0, AEXP
66BC EB01 FFE9 05585         movsf   [0x1], FSR0L
66C0 EB02 FFEA 05586         movsf   [0x2], FSR0H
66C4 CFEE FF6D 05587         movff   POSTINC0, BARGB2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 262


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
66C8 CFEE FF6E 05588         movff   POSTINC0, BARGB1
66CC CFEE FF6F 05589         movff   POSTINC0, BARGB0
66D0 CFEF FF70 05590         movff   INDF0, BEXP
66D4 0012      05591         return
               05592 #endif
               05593 
               05594 #ifdef caml_useprim_caml_float_operation_finalize
66D6 05595 caml_float_operation_finalize:
66D6 CF68 FFE6 05596         movff   AARGB2, POSTINC1
66DA CF69 FFE6 05597         movff   AARGB1, POSTINC1
66DE CF6A FFE6 05598         movff   AARGB0, POSTINC1
66E2 CF6B FFE6 05599         movff   AEXP, POSTINC1
66E6 0012      05600         return
               05601 #endif
               05602 
               05603 #ifdef caml_useprim_FPA32
               05604 #ifndef caml_use_float_library
66E8 05605 #define caml_use_float_library
               05606 #endif
               05607 #endif
               05608 #ifdef caml_useprim_FPS32
               05609 #ifndef caml_use_float_library
               05610 #define caml_use_float_library
               05611 #endif
               05612 #endif
               05613 #ifdef caml_useprim_FPD32
               05614 #ifndef caml_use_float_library
               05615 #define caml_use_float_library
               05616 #endif
               05617 #endif
               05618 #ifdef caml_useprim_FPM32
               05619 #ifndef caml_use_float_library
               05620 #define caml_use_float_library
               05621 #endif
               05622 #endif
               05623 #ifdef caml_useprim_INT3232
               05624 #ifndef caml_use_float_library
               05625 #define caml_use_float_library
               05626 #endif
               05627 #endif
               05628 #ifdef caml_useprim_INT3224
               05629 #ifndef caml_use_float_library
               05630 #define caml_use_float_library
               05631 #endif
               05632 #endif
               05633 #ifdef caml_useprim_NRM4032
               05634 #ifndef caml_use_float_library
               05635 #define caml_use_float_library
               05636 #endif
               05637 #endif
               05638 #ifdef caml_useprim_FLO3232
               05639 #ifndef caml_use_float_library
               05640 #define caml_use_float_library
               05641 #endif
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 263


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05642 #endif
               05643 #ifdef caml_useprim_NRM3232
               05644 #ifndef caml_use_float_library
               05645 #define caml_use_float_library
               05646 #endif
               05647 #endif
               05648 #ifdef caml_useprim_FLO2432
               05649 #ifndef caml_use_float_library
               05650 #define caml_use_float_library
               05651 #endif
               05652 #endif
               05653 
               05654 #ifdef caml_use_float_library
               05655 
               05656 #ifdef caml_useprim_FPS32
               05657 #ifndef caml_useprim_FPA32
               05658 #define caml_useprim_FPA32
               05659 #endif
               05660 #endif
               05661 
               05662 #ifdef caml_useprim_FPA32
               05663 #ifndef caml_useprim_NRM4032
66E8 05664 #define caml_useprim_NRM4032
               05665 #endif
               05666 #ifndef caml_useprim_FPM32
               05667 #define caml_useprim_FPM32
               05668 #endif
               05669 #endif
               05670         
               05671 #ifdef caml_useprim_FLO2432
               05672 #ifndef caml_useprim_NRM3232
66E8 05673 #define caml_useprim_NRM3232
               05674 #endif
               05675 #endif
               05676 
               05677 #ifdef caml_useprim_FLO3232
               05678 #ifndef caml_useprim_NRM4032
               05679 #define caml_useprim_NRM4032
               05680 #endif
               05681 #endif
               05682 
               05683 #ifdef caml_useprim_NRM4032
               05684 #ifndef caml_useprim_SETFUN32
66E8 05685 #define caml_useprim_SETFUN32
               05686 #endif
               05687 #ifndef caml_useprim_NRM3232
               05688 #define caml_useprim_NRM3232
               05689 #endif
               05690 #ifndef caml_useprim_FPM32
               05691 #define caml_useprim_FPM32
               05692 #endif
               05693 #endif
               05694 
               05695 #ifdef caml_useprim_NRM3232
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 264


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05696 #ifndef caml_useprim_SETFUN32
               05697 #define caml_useprim_SETFUN32
               05698 #endif
               05699 #endif
               05700         
               05701 #ifdef caml_useprim_FPD32
               05702 #ifndef caml_useprim_SETFUN32
               05703 #define caml_useprim_SETFUN32
               05704 #endif
               05705 #ifndef caml_useprim_FPM32
               05706 #define caml_useprim_FPM32
               05707 #endif
               05708 #endif
               05709 
               05710 #ifdef caml_useprim_FPM32
               05711 #ifndef caml_useprim_SETFUN32
               05712 #define caml_useprim_SETFUN32
               05713 #endif
               05714 #endif
               05715 
               05716 ;-------------------------------------------;
               05717 ;                                           ;
               05718 ;   File MATH16.INC (modified) from AN575   ;
               05719 ;                                           ;
               05720 ;-------------------------------------------;
               05721         
               05722 ;;      STATUS bit definitions
               05723 
66E8 05724 #define         _C      STATUS,0
66E8 05725 #define         _Z      STATUS,2
               05726 
               05727 ;;      define assembler constants
               05728 
  00000000     05729 B0              equ     0
  00000001     05730 B1              equ     1
  00000002     05731 B2              equ     2
  00000003     05732 B3              equ     3
  00000004     05733 B4              equ     4
  00000005     05734 B5              equ     5
  00000006     05735 B6              equ     6
  00000007     05736 B7              equ     7
               05737 
  00000007     05738 MSB             equ     7
  00000000     05739 LSB             equ     0
               05740 
               05741 ;;      general register variables
               05742 
  00000F63     05743 ACCB7           equ     GC_TMP_REG_1
  00000F64     05744 ACCB6           equ     GC_TMP_REG_2
  00000F65     05745 ACCB5           equ     GC_TMP_REG_3
  00000F66     05746 ACCB4           equ     GC_TMP_REG_4
  00000F67     05747 ACCB3           equ     GC_TMP_REG_5
  00000F68     05748 ACCB2           equ     TMP_REG_1
  00000F69     05749 ACCB1           equ     TMP_REG_2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 265


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000F6A     05750 ACCB0           equ     TMP_REG_3
  00000F6A     05751 ACC             equ     ACCB0        ; most significant byte of contiguous
               05752                                      ; 8 byte accumulator
  00000FF3     05753 SIGN            equ     PRODL        ; save location for sign in MSB
               05754 
  00000F71     05755 TEMPB3          equ     TMP_REG_A
  00000F72     05756 TEMPB2          equ     TMP_REG_B
  00000F73     05757 TEMPB1          equ     TMP_REG_C
  00000F74     05758 TEMPB0          equ     TMP_REG_D
  00000F74     05759 TEMP            equ     TEMPB0    ; temporary storage
               05760 
               05761 ;;       binary operation arguments
               05762 
  00000F63     05763 AARGB7          equ     ACCB7
  00000F64     05764 AARGB6          equ     ACCB6
  00000F65     05765 AARGB5          equ     ACCB5
  00000F66     05766 AARGB4          equ     ACCB4
  00000F67     05767 AARGB3          equ     ACCB3
  00000F68     05768 AARGB2          equ     ACCB2
  00000F69     05769 AARGB1          equ     ACCB1
  00000F6A     05770 AARGB0          equ     ACCB0
  00000F6A     05771 AARG            equ     AARGB0       ; most significant byte of argument A
               05772 
  00000F6C     05773 BARGB3          equ     TMP_REG_5
  00000F6D     05774 BARGB2          equ     TMP_REG_6
  00000F6E     05775 BARGB1          equ     TMP_REG_7
  00000F6F     05776 BARGB0          equ     TMP_REG_8
  00000F6F     05777 BARG            equ     BARGB0       ; most significant byte of argument B
               05778 
               05779 ; Note that AARG and ACC reference the same storage locations
               05780 
               05781 ;;      literal constants
               05782 
  0000007F     05783 EXPBIAS         equ     D'127'
               05784 
               05785 ;;      biased exponents
               05786 
  00000F6B     05787 EXP             equ     TMP_REG_4    ; 8 bit biased exponent
  00000F6B     05788 AEXP            equ     TMP_REG_4    ; 8 bit biased exponent for argument A
  00000F70     05789 BEXP            equ     TMP_REG_9    ; 8 bit biased exponent for argument B
               05790 
               05791 ;;      floating point library exception flags
               05792 
  00000FF4     05793 FPFLAGS         equ     PRODH ; floating point library exception flags
  00000000     05794 IOV             equ     0     ; bit0 = integer overflow flag
  00000001     05795 FOV             equ     1     ; bit1 = floating point overflow flag
  00000002     05796 FUN             equ     2     ; bit2 = floating point underflow flag
  00000003     05797 FDZ             equ     3     ; bit3 = floating point divide by zero flag
  00000004     05798 NAN             equ     4     ; bit4 = not-a-number exception flag
  00000005     05799 DOM             equ     5     ; bit5 = domain error exception flag
  00000006     05800 RND             equ     6     ; bit6 = floating point rounding flag,
               05801                               ; 0 = truncation
               05802                               ; 1 = unbiased rounding to nearest LSB
  00000007     05803 SAT             equ     7     ; bit7 = floating point saturate flag,
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 266


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05804                               ; 0 = terminate on exception without saturation,
               05805                               ; 1 = terminate on exception with saturation
               05806                               ; to appropriate value
               05807 #endif
               05808 
               05809 ;-----------------------------------------;
               05810 ;                                         ;
               05811 ;   File FP32.A16 (modified) from AN575   ;
               05812 ;                                         ;
               05813 ;-----------------------------------------;
               05814         
               05815 ;       RCS Header $Id: fp32.a16 2.8 1996/10/07 13:50:59 F.J.Testa Exp $
               05816 
               05817 ;       $Revision: 2.8 $
               05818 
               05819 ;       PIC16 32 BIT FLOATING POINT LIBRARY
               05820 ;
               05821 ;       Unary operations: both input and output are in AEXP,AARG
               05822 ;
               05823 ;       Binary operations: input in AEXP,AARG and BEXP,BARG with output in AEXP,AARG
               05824 ;
               05825 ;       All routines return WREG = 0x00 for successful completion, and WREG = 0xFF
               05826 ;       for an error condition specified in FPFLAGS.
               05827 ;
               05828 ;       All timings are worst case cycle counts
               05829 ;
               05830 ;         Routine               Function
               05831 ;
               05832 ;       FLO2432         24 bit integer to 32 bit floating point conversion
               05833 ;       FLO32
               05834 ;
               05835 ;               Timing:            RND
               05836 ;                               0       1
               05837 ;
               05838 ;                       0       104     104
               05839 ;                  SAT
               05840 ;                       1       110     110
               05841 ;
               05842 ;       NRM3232   32 bit normalization of unnormalized 32 bit floating point numbers
               05843 ;       NRM32
               05844 ;
               05845 ;               Timing:            RND
               05846 ;                               0       1
               05847 ;
               05848 ;                       0       90      90
               05849 ;                  SAT
               05850 ;                       1       96      96
               05851 ;
               05852 ;
               05853 ;       INT3224         32 bit floating point to 24 bit integer conversion
               05854 ;       INT32
               05855 ;
               05856 ;
               05857 ;               Timing:            RND
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 267


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05858 ;                               0       1
               05859 ;
               05860 ;                       0       104      112
               05861 ;                  SAT
               05862 ;                       1       104      114
               05863 ;
               05864 ;       FLO3232 32 bit integer to 32 bit floating point conversion
               05865 ;
               05866 ;               Timing:            RND
               05867 ;                               0       1
               05868 ;
               05869 ;                       0       129     145
               05870 ;                  SAT
               05871 ;                       1       129     152
               05872 ;
               05873 ;       NRM4032 32 bit normalization of unnormalized 40 bit floating point numbers
               05874 ;
               05875 ;               Timing:            RND
               05876 ;                               0       1
               05877 ;
               05878 ;                       0       112     128
               05879 ;                  SAT
               05880 ;                       1       112     135
               05881 ;
               05882 ;
               05883 ;       INT3232         32 bit floating point to 32 bit integer conversion
               05884 ;
               05885 ;
               05886 ;               Timing:            RND
               05887 ;                               0       1
               05888 ;
               05889 ;                       0       130     137
               05890 ;                  SAT
               05891 ;                       1       130     137
               05892 ;
               05893 ;       FPA32           32 bit floating point add
               05894 ;
               05895 ;               Timing:            RND
               05896 ;                               0       1
               05897 ;
               05898 ;                       0       251     265
               05899 ;                  SAT
               05900 ;                       1       251     271
               05901 ;
               05902 ;       FPS32           32 bit floating point subtract
               05903 ;
               05904 ;               Timing:            RND
               05905 ;                               0       1
               05906 ;
               05907 ;                       0       253     267
               05908 ;                  SAT
               05909 ;                       1       253     273
               05910 ;
               05911 ;       FPM32           32 bit floating point multiply
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 268


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05912 ;
               05913 ;               Timing:            RND
               05914 ;                               0       1
               05915 ;
               05916 ;                       0       574     588
               05917 ;                  SAT
               05918 ;                       1       574     591
               05919 ;
               05920 ;       FPD32           32 bit floating point divide
               05921 ;
               05922 ;               Timing:            RND
               05923 ;                               0       1
               05924 ;
               05925 ;                       0       932     968
               05926 ;                  SAT
               05927 ;                       1       932     971
               05928 ;
               05929 ;
               05930 ;**********************************************************************************************
               05931 ;**********************************************************************************************
               05932 ;
               05933 ;       32 bit floating point representation
               05934 ;
               05935 ;       EXPONENT        8 bit biased exponent
               05936 ;
               05937 ;                       It is important to note that the use of biased exponents produces
               05938 ;                       a unique representation of a floating point 0, given by
               05939 ;                       EXP = HIGHBYTE = MIDBYTE = LOWBYTE = 0x00, with 0 being
               05940 ;                       the only number with EXP = 0.
               05941 ;
               05942 ;       HIGHBYTE        8 bit most significant byte of fraction in sign-magnitude representation,
               05943 ;                       with SIGN = MSB, implicit MSB = 1 and radix point to the right of MSB
               05944 ;
               05945 ;       MIDBYTE         8 bit middle significant byte of sign-magnitude fraction
               05946 ;
               05947 ;       LOWBYTE         8 bit least significant byte of sign-magnitude fraction
               05948 ;
               05949 ;       EXPONENT        HIGHBYTE        MIDBYTE         LOWBYTE
               05950 ;
               05951 ;       xxxxxxxx        S.xxxxxxx       xxxxxxxx        xxxxxxxx
               05952 ;
               05953 ;                        |
               05954 ;                      RADIX
               05955 ;                      POINT
               05956 ;
               05957 ;
               05958 ;**********************************************************************************************
               05959 ;**********************************************************************************************
               05960 
               05961 ;       Integer to float conversion
               05962 
               05963 ;       Input:  24 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2
               05964 
               05965 ;       Use:    CALL    FLO2432 or      CALL    FLO32
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 269


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05966 
               05967 ;       Output: 32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               05968 
               05969 ;       Result: AARG  <--  FLOAT( AARG )
               05970 
               05971 ;       Max Timing:     14+90 = 104 clks                SAT = 0
               05972 ;                       14+96 = 110 clks                SAT = 1
               05973 
               05974 ;       Min Timing:     6+28 = 34 clks                  AARG = 0
               05975 ;                       6+18 = 24 clks
               05976 
               05977 ;       PM: 14+38 = 52                                  DM: 7
               05978 
               05979 ;----------------------------------------------------------------------------------------------
               05980 
               05981 #ifdef caml_useprim_FLO2432
66E8 05982 FLO2432
66E8 0E96      05983 FLO32           MOVLW           D'23'+EXPBIAS           ; initialize exponent and add bias
66EA 6F6B      05984                 MOVWF           EXP
66EC 6AF3      05985                 CLRF            SIGN
66EE AF6A      05986                 BTFSS           AARGB0,MSB              ; test sign
66F0 D009      05987                 BRA             NRM3232
66F2 1F68      05988                 COMF            AARGB2,F                ; if < 0, negate and set MSB in SIGN
66F4 1F69      05989                 COMF            AARGB1,F
66F6 1F6A      05990                 COMF            AARGB0,F
66F8 2B68      05991                 INCF            AARGB2,F
66FA B4D8      05992                 BTFSC           _Z
66FC 2B69      05993                 INCF            AARGB1,F
66FE B4D8      05994                 BTFSC           _Z
6700 2B6A      05995                 INCF            AARGB0,F
6702 8EF3      05996                 BSF             SIGN,MSB
               05997 #endif
               05998 
               05999 ;**********************************************************************************************
               06000 
               06001 ;       Normalization routine
               06002 
               06003 ;       Input:  32 bit unnormalized floating point number in AEXP, AARGB0, AARGB1,
               06004 ;               AARGB2, with sign in SIGN,MSB
               06005 
               06006 ;       Use:    CALL    NRM3232 or      CALL    NRM32
               06007 
               06008 ;       Output: 32 bit normalized floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06009 
               06010 ;       Result: AARG  <--  NORMALIZE( AARG )
               06011 
               06012 ;       Max Timing:     21+6+7*8+7 = 90 clks            SAT = 0
               06013 ;                       21+6+7*8+1+12 = 96 clks SAT = 1
               06014 
               06015 ;       Min Timing:     22+6 = 28 clks                  AARG = 0
               06016 ;                       5+9+4 = 18 clks
               06017 
               06018 ;       PM: 38                                          DM: 7
               06019 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 270


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06020 ;----------------------------------------------------------------------------------------------
               06021 
               06022 #ifdef caml_useprim_NRM3232
6704 06023 NRM3232
               06024 
6704 6B74      06025 NRM32           CLRF            TEMP                    ; clear exponent decrement
6706 516A      06026                 MOVF            AARGB0,W                ; test if highbyte=0
6708 A4D8      06027                 BTFSS           _Z
670A D011      06028                 BRA             NORM3232
670C 5169      06029                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
670E 6F6A      06030                 MOVWF           AARGB0
6710 5168      06031                 MOVF            AARGB2,W
6712 6F69      06032                 MOVWF           AARGB1
6714 6B68      06033                 CLRF            AARGB2
6716 8774      06034                 BSF             TEMP,3                  ; increase decrement by 8
               06035 
6718 516A      06036                 MOVF            AARGB0,W                ; test if highbyte=0
671A A4D8      06037                 BTFSS           _Z
671C D008      06038                 BRA             NORM3232
671E 5169      06039                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
6720 6F6A      06040                 MOVWF           AARGB0
6722 6B69      06041                 CLRF            AARGB1
6724 9774      06042                 BCF             TEMP,3                  ; increase decrement by 8
6726 8974      06043                 BSF             TEMP,4
               06044         
6728 516A      06045                 MOVF            AARGB0,W                ; if highbyte=0, result=0
672A B4D8      06046                 BTFSC           _Z
672C D011      06047                 BRA             RES032
               06048 
672E 5174      06049 NORM3232        MOVF            TEMP,W
6730 5F6B      06050                 SUBWF           EXP,F
6732 A4D8      06051                 BTFSS           _Z
6734 A0D8      06052                 BTFSS           _C
6736 D197      06053                 BRA             SETFUN32
               06054 
6738 90D8      06055                 BCF             _C                      ; clear carry bit
               06056 
673A BF6A      06057 NORM3232A       BTFSC           AARGB0,MSB              ; if MSB=1, normalization done
673C D006      06058                 BRA             FIXSIGN32
673E 3768      06059                 RLCF            AARGB2,F                ; otherwise, shift left and 
6740 3769      06060                 RLCF            AARGB1,F                ; decrement EXP
6742 376A      06061                 RLCF            AARGB0,F
6744 2F6B      06062                 DECFSZ          EXP,F
6746 D7F9      06063                 BRA             NORM3232A
               06064 
6748 D18E      06065                 BRA             SETFUN32                ; underflow if EXP=0
               06066 
674A AEF3      06067 FIXSIGN32       BTFSS           SIGN,MSB
674C 9F6A      06068                 BCF             AARGB0,MSB              ; clear explicit MSB if positive
674E 0C00      06069                 RETLW           0
               06070 
6750 6B6A      06071 RES032          CLRF            AARGB0                  ; result equals zero
6752 6B69      06072                 CLRF            AARGB1
6754 6B68      06073                 CLRF            AARGB2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 271


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6756 6B67      06074                 CLRF            AARGB3
6758 6B6B      06075                 CLRF            EXP
675A 0C00      06076                 RETLW           0
               06077 #endif
               06078 
               06079 ;**********************************************************************************************
               06080 ;**********************************************************************************************
               06081 
               06082 ;       Integer to float conversion
               06083 
               06084 ;       Input:  32 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2,
               06085 ;               AARGB3
               06086 
               06087 ;       Use:    CALL    FLO3232
               06088 
               06089 ;       Output: 32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06090 
               06091 ;       Result: AARG  <--  FLOAT( AARG )
               06092 
               06093 ;       Max Timing:     17+112 = 129 clks               RND = 0
               06094 ;                       17+128 = 145 clks               RND = 1, SAT = 0
               06095 ;                       17+135 = 152 clks               RND = 1, SAT = 1
               06096 
               06097 ;       Min Timing:     6+39 = 45 clks                  AARG = 0
               06098 ;                       6+22 = 28 clks
               06099 
               06100 ;       PM: 17+66 = 83                                  DM: 8
               06101 
               06102 ;----------------------------------------------------------------------------------------------
               06103 
               06104 #ifdef caml_useprim_FLO3232
               06105 FLO3232         MOVLW           D'31'+EXPBIAS           ; initialize exponent and add bias
               06106                 MOVWF           EXP
               06107                 CLRF            SIGN
               06108                 BTFSS           AARGB0,MSB              ; test sign
               06109                 BRA             NRM4032
               06110                 COMF            AARGB3,F                ; if < 0, negate and set MSB in SIGN
               06111                 COMF            AARGB2,F
               06112                 COMF            AARGB1,F
               06113                 COMF            AARGB0,F
               06114                 INCF            AARGB3,F
               06115                 BTFSC           _Z
               06116                 INCF            AARGB2,F
               06117                 BTFSC           _Z
               06118                 INCF            AARGB1,F
               06119                 BTFSC           _Z
               06120                 INCF            AARGB0,F
               06121                 BSF             SIGN,MSB
               06122 #endif
               06123 
               06124 ;**********************************************************************************************
               06125 
               06126 ;       Normalization routine
               06127 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 272


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06128 ;       Input:  40 bit unnormalized floating point number in AEXP, AARGB0, AARGB1,
               06129 ;               AARGB2, AARGB3 with sign in SIGN,MSB
               06130 
               06131 ;       Use:    CALL    NRM4032
               06132 
               06133 ;       Output: 32 bit normalized floating point number in AEXP, AARGB0, AARGB1, AARGB2,
               06134 ;               AARGB3
               06135 
               06136 ;       Result: AARG  <--  NORMALIZE( AARG )
               06137 
               06138 ;       Max Timing:     38+6*9+12+8 = 112 clks  RND = 0
               06139 ;                       38+6*9+12+24 = 128 clks RND = 1, SAT = 0
               06140 ;                       38+6*9+12+31 = 135 clks RND = 1, SAT = 1
               06141 
               06142 ;       Min Timing:     33+6 = 39 clks                  AARG = 0
               06143 ;                       5+9+8 = 22 clks
               06144 
               06145 ;       PM: 66                                          DM: 8
               06146 
               06147 ;----------------------------------------------------------------------------------------------
               06148 
               06149 #ifdef caml_useprim_NRM4032
675C 6B74      06150 NRM4032         CLRF            TEMP                    ; clear exponent decrement
675E 516A      06151                 MOVF            AARGB0,W                ; test if highbyte=0
6760 A4D8      06152                 BTFSS           _Z
6762 D01C      06153                 BRA             NORM4032
6764 5169      06154                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
6766 6F6A      06155                 MOVWF           AARGB0
6768 5168      06156                 MOVF            AARGB2,W
676A 6F69      06157                 MOVWF           AARGB1
676C 5167      06158                 MOVF            AARGB3,W
676E 6F68      06159                 MOVWF           AARGB2
6770 6B67      06160                 CLRF            AARGB3
6772 8774      06161                 BSF             TEMP,3                  ; increase decrement by 8
               06162 
6774 516A      06163                 MOVF            AARGB0,W                ; test if highbyte=0
6776 A4D8      06164                 BTFSS           _Z
6778 D011      06165                 BRA             NORM4032
677A 5169      06166                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
677C 6F6A      06167                 MOVWF           AARGB0
677E 5168      06168                 MOVF            AARGB2,W
6780 6F69      06169                 MOVWF           AARGB1
6782 6B68      06170                 CLRF            AARGB2
6784 9774      06171                 BCF             TEMP,3                  ; increase decrement by 8
6786 8974      06172                 BSF             TEMP,4
               06173         
6788 516A      06174                 MOVF            AARGB0,W                ; test if highbyte=0
678A A4D8      06175                 BTFSS           _Z
678C D007      06176                 BRA             NORM4032
678E 5169      06177                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
6790 6F6A      06178                 MOVWF           AARGB0
6792 6B69      06179                 CLRF            AARGB1
6794 8774      06180                 BSF             TEMP,3                  ; increase decrement by 8
               06181         
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 273


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6796 516A      06182                 MOVF            AARGB0,W                ; if highbyte=0, result=0
6798 B4D8      06183                 BTFSC           _Z
679A D7DA      06184                 BRA             RES032
               06185 
679C 5174      06186 NORM4032        MOVF            TEMP,W
679E 5F6B      06187                 SUBWF           EXP,F
67A0 A4D8      06188                 BTFSS           _Z
67A2 A0D8      06189                 BTFSS           _C
67A4 D160      06190                 BRA             SETFUN32
               06191 
67A6 90D8      06192                 BCF             _C                      ; clear carry bit
               06193 
67A8 BF6A      06194 NORM4032A       BTFSC           AARGB0,MSB              ; if MSB=1, normalization done
67AA D007      06195                 BRA             NRMRND4032
67AC 3767      06196                 RLCF            AARGB3,F                ; otherwise, shift left and 
67AE 3768      06197                 RLCF            AARGB2,F                ; decrement EXP
67B0 3769      06198                 RLCF            AARGB1,F
67B2 376A      06199                 RLCF            AARGB0,F
67B4 2F6B      06200                 DECFSZ          EXP,F
67B6 D7F8      06201                 BRA             NORM4032A
               06202 
67B8 D156      06203                 BRA             SETFUN32                ; underflow if EXP=0
               06204 
67BA BCF4      06205 NRMRND4032      BTFSC           FPFLAGS,RND
67BC A168      06206                 BTFSS           AARGB2,LSB
67BE D7C5      06207                 BRA             FIXSIGN32
67C0 AF67      06208                 BTFSS           AARGB3,MSB              ; round if next bit is set
67C2 D7C3      06209                 BRA             FIXSIGN32
67C4 2B68      06210                 INCF            AARGB2,F
67C6 B4D8      06211                 BTFSC           _Z
67C8 2B69      06212                 INCF            AARGB1,F
67CA B4D8      06213                 BTFSC           _Z
67CC 2B6A      06214                 INCF            AARGB0,F
               06215 
67CE A4D8      06216                 BTFSS           _Z                      ; has rounding caused carryout?
67D0 D7BC      06217                 BRA             FIXSIGN32
67D2 336A      06218                 RRCF            AARGB0,F                ; if so, right shift
67D4 3369      06219                 RRCF            AARGB1,F
67D6 3368      06220                 RRCF            AARGB2,F
67D8 2B6B      06221                 INCF            EXP,F
67DA B4D8      06222                 BTFSC           _Z                      ; check for overflow
67DC D0AF      06223                 BRA             SETFOV32
67DE D7B5      06224                 BRA             FIXSIGN32
               06225 #endif
               06226 
               06227 ;**********************************************************************************************
               06228 ;**********************************************************************************************
               06229 
               06230 ;       Float to integer conversion
               06231 
               06232 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06233 
               06234 ;       Use:    CALL    INT3224         or      CALL    INT32
               06235 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 274


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06236 ;       Output: 24 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2
               06237 
               06238 ;       Result: AARG  <--  INT( AARG )
               06239 
               06240 ;       Max Timing:     40+6*7+6+16 = 104 clks          RND = 0
               06241 ;                       40+6*7+6+24 = 112 clks          RND = 1, SAT = 0
               06242 ;                       40+6*7+6+26 = 114 clks          RND = 1, SAT = 1
               06243 
               06244 ;       Min Timing:     4 clks
               06245 
               06246 ;       PM: 82                                          DM: 6
               06247 
               06248 ;----------------------------------------------------------------------------------------------
               06249 
               06250 #ifdef caml_useprim_INT3224
67E0 06251 INT3224
67E0 06252 INT32
67E0 516B      06253                 MOVF            EXP,W                   ; test for zero argument
67E2 B4D8      06254                 BTFSC           _Z
67E4 0C00      06255                 RETLW           0x00
               06256 
67E6 516A      06257                 MOVF            AARGB0,W                ; save sign in SIGN
67E8 6EF3      06258                 MOVWF           SIGN
67EA 8F6A      06259                 BSF             AARGB0,MSB              ; make MSB explicit
               06260 
67EC 0E96      06261                 MOVLW           EXPBIAS+D'23'           ; remove bias from EXP
67EE 5F6B      06262                 SUBWF           EXP,F
67F0 AF6B      06263                 BTFSS           EXP,MSB
67F2 D045      06264                 BRA             SETIOV3224
67F4 1F6B      06265                 COMF            EXP,F
67F6 2B6B      06266                 INCF            EXP,F
               06267 
67F8 0E08      06268                 MOVLW           8                       ; do byte shift if EXP >= 8
67FA 5D6B      06269                 SUBWF           EXP,W
67FC A0D8      06270                 BTFSS           _C
67FE D01B      06271                 BRA             TSHIFT3224
6800 6F6B      06272                 MOVWF           EXP
6802 3768      06273                 RLCF            AARGB2,F                ; rotate next bit for rounding
6804 5169      06274                 MOVF            AARGB1,W
6806 6F68      06275                 MOVWF           AARGB2
6808 516A      06276                 MOVF            AARGB0,W
680A 6F69      06277                 MOVWF           AARGB1
680C 6B6A      06278                 CLRF            AARGB0
               06279 
680E 0E08      06280                 MOVLW           8                       ; do another byte shift if EXP >= 8
6810 5D6B      06281                 SUBWF           EXP,W
6812 A0D8      06282                 BTFSS           _C
6814 D010      06283                 BRA             TSHIFT3224
6816 6F6B      06284                 MOVWF           EXP
6818 3768      06285                 RLCF            AARGB2,F                ; rotate next bit for rounding
681A 5169      06286                 MOVF            AARGB1,W
681C 6F68      06287                 MOVWF           AARGB2
681E 6B69      06288                 CLRF            AARGB1
               06289 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 275


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6820 0E08      06290                 MOVLW           8                       ; do another byte shift if EXP >= 8
6822 5D6B      06291                 SUBWF           EXP,W
6824 A0D8      06292                 BTFSS           _C
6826 D007      06293                 BRA             TSHIFT3224
6828 6F6B      06294                 MOVWF           EXP
682A 3768      06295                 RLCF            AARGB2,F                ; rotate next bit for rounding
682C 6B68      06296                 CLRF            AARGB2
682E 516B      06297                 MOVF            EXP,W
6830 A4D8      06298                 BTFSS           _Z
6832 90D8      06299                 BCF             _C
6834 D009      06300                 BRA             SHIFT3224OK
               06301 
6836 516B      06302 TSHIFT3224      MOVF            EXP,W                   ; shift completed if EXP = 0
6838 B4D8      06303                 BTFSC           _Z
683A D006      06304                 BRA             SHIFT3224OK
               06305 
683C 90D8      06306 SHIFT3224       BCF             _C
683E 336A      06307                 RRCF            AARGB0,F                ; right shift by EXP
6840 3369      06308                 RRCF            AARGB1,F
6842 3368      06309                 RRCF            AARGB2,F
6844 2F6B      06310                 DECFSZ          EXP,F
6846 D7FA      06311                 BRA             SHIFT3224
               06312 
6848 BCF4      06313 SHIFT3224OK     BTFSC           FPFLAGS,RND
684A A168      06314                 BTFSS           AARGB2,LSB
684C D009      06315                 BRA             INT3224OK
684E A0D8      06316                 BTFSS           _C
6850 D007      06317                 BRA             INT3224OK
6852 2B68      06318                 INCF            AARGB2,F
6854 B4D8      06319                 BTFSC           _Z
6856 2B69      06320                 INCF            AARGB1,F
6858 B4D8      06321                 BTFSC           _Z
685A 2B6A      06322                 INCF            AARGB0,F
685C BF6A      06323                 BTFSC           AARGB0,MSB              ; test for overflow
685E D00F      06324                 BRA             SETIOV3224
               06325 
6860 AEF3      06326 INT3224OK       BTFSS           SIGN,MSB                ; if sign bit set, negate               
6862 0C00      06327                 RETLW           0
6864 1F6A      06328                 COMF            AARGB0,F
6866 1F69      06329                 COMF            AARGB1,F
6868 1F68      06330                 COMF            AARGB2,F
686A 2B68      06331                 INCF            AARGB2,F
686C B4D8      06332                 BTFSC           _Z
686E 2B69      06333                 INCF            AARGB1,F
6870 B4D8      06334                 BTFSC           _Z
6872 2B6A      06335                 INCF            AARGB0,F
6874 0C00      06336                 RETLW           0
               06337 
6876 6B6A      06338 IRES03224       CLRF            AARGB0                  ; integer result equals zero
6878 6B69      06339                 CLRF            AARGB1
687A 6B68      06340                 CLRF            AARGB2
687C 0C00      06341                 RETLW           0
               06342 
687E 80F4      06343 SETIOV3224      BSF             FPFLAGS,IOV             ; set integer overflow flag
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 276


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6880 AEF4      06344                 BTFSS           FPFLAGS,SAT             ; test for saturation
6882 0CFF      06345                 RETLW           0xFF                    ; return error code in WREG
               06346 
6884 6B6A      06347                 CLRF            AARGB0                  ; saturate to largest two's
6886 AEF3      06348                 BTFSS           SIGN,MSB                ; complement 24 bit integer
6888 0EFF      06349                 MOVLW           0xFF
688A 6F6A      06350                 MOVWF           AARGB0                  ; SIGN = 0, 0x 7F FF FF
688C 6F69      06351                 MOVWF           AARGB1                  ; SIGN = 1, 0x 80 00 00
688E 6F68      06352                 MOVWF           AARGB2
6890 36F3      06353                 RLCF            SIGN,F
6892 336A      06354                 RRCF            AARGB0,F
6894 0CFF      06355                 RETLW           0xFF                    ; return error code in WREG
               06356 #endif
               06357 
               06358 ;**********************************************************************************************
               06359 ;**********************************************************************************************
               06360 
               06361 ;       Float to integer conversion
               06362 
               06363 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06364 
               06365 ;       Use:    CALL    INT3232
               06366 
               06367 ;       Output: 32 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2,
               06368 ;               AARGB3
               06369 
               06370 ;       Result: AARG  <--  INT( AARG )
               06371 
               06372 ;       Max Timing:     54+6*8+7+21 = 130 clks          RND = 0
               06373 ;                       54+6*8+7+29 = 137 clks          RND = 1, SAT = 0
               06374 ;                       54+6*8+7+29 = 137 clks          RND = 1, SAT = 1
               06375 
               06376 ;       Min Timing:     5 clks
               06377 
               06378 ;       PM: 102                                                 DM: 7
               06379 
               06380 ;----------------------------------------------------------------------------------------------
               06381 
               06382 #ifdef caml_useprim_INT3232
               06383 INT3232
               06384                 CLRF            AARGB3
               06385                 MOVF            EXP,W                   ; test for zero argument
               06386                 BTFSC           _Z
               06387                 RETLW           0x00
               06388 
               06389                 MOVF            AARGB0,W                ; save sign in SIGN
               06390                 MOVWF           SIGN
               06391                 BSF             AARGB0,MSB              ; make MSB explicit
               06392 
               06393                 MOVLW           EXPBIAS+D'31'           ; remove bias from EXP
               06394                 SUBWF           EXP,F
               06395                 BTFSS           EXP,MSB
               06396                 BRA             SETIOV32
               06397                 COMF            EXP,F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 277


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06398                 INCF            EXP,F        
               06399 
               06400                 MOVLW           8                       ; do byte shift if EXP >= 8
               06401                 SUBWF           EXP,W
               06402                 BTFSS           _C
               06403                 BRA             TSHIFT3232
               06404                 MOVWF           EXP
               06405                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06406                 MOVF            AARGB2,W
               06407                 MOVWF           AARGB3
               06408                 MOVF            AARGB1,W
               06409                 MOVWF           AARGB2
               06410                 MOVF            AARGB0,W
               06411                 MOVWF           AARGB1
               06412                 CLRF            AARGB0
               06413 
               06414                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06415                 SUBWF           EXP,W
               06416                 BTFSS           _C
               06417                 BRA             TSHIFT3232
               06418                 MOVWF           EXP
               06419                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06420                 MOVF            AARGB2,W
               06421                 MOVWF           AARGB3
               06422                 MOVF            AARGB1,W
               06423                 MOVWF           AARGB2
               06424                 CLRF            AARGB1
               06425 
               06426                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06427                 SUBWF           EXP,W
               06428                 BTFSS           _C
               06429                 BRA             TSHIFT3232
               06430                 MOVWF           EXP
               06431                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06432                 MOVF            AARGB2,W
               06433                 MOVWF           AARGB3
               06434                 CLRF            AARGB2
               06435 
               06436                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06437                 SUBWF           EXP,W
               06438                 BTFSS           _C
               06439                 BRA             TSHIFT3232
               06440                 MOVWF           EXP
               06441                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06442                 CLRF            AARGB3
               06443                 MOVF            EXP,W
               06444                 BTFSS           _Z
               06445                 BCF             _C
               06446                 BRA             SHIFT3232OK
               06447 
               06448 TSHIFT3232      MOVF            EXP,W                   ; shift completed if EXP = 0
               06449                 BTFSC           _Z
               06450                 BRA             SHIFT3232OK
               06451 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 278


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06452 SHIFT3232       BCF             _C
               06453                 RRCF            AARGB0,F                ; right shift by EXP
               06454                 RRCF            AARGB1,F
               06455                 RRCF            AARGB2,F
               06456                 RRCF            AARGB3,F
               06457                 DECFSZ          EXP,F
               06458                 BRA             SHIFT3232
               06459 
               06460 SHIFT3232OK     BTFSC           FPFLAGS,RND
               06461                 BTFSS           AARGB3,LSB
               06462                 BRA             INT3232OK
               06463                 BTFSS           _C
               06464                 BRA             INT3232OK
               06465                 INCF            AARGB3,F
               06466                 BTFSC           _Z
               06467                 INCF            AARGB2,F
               06468                 BTFSC           _Z
               06469                 INCF            AARGB1,F
               06470                 BTFSC           _Z
               06471                 INCF            AARGB0,F
               06472                 BTFSC           AARGB0,MSB              ; test for overflow
               06473                 BRA             SETIOV3224
               06474 
               06475 INT3232OK       BTFSS           SIGN,MSB                ; if sign bit set, negate               
               06476                 RETLW           0
               06477                 COMF            AARGB0,F
               06478                 COMF            AARGB1,F
               06479                 COMF            AARGB2,F
               06480                 COMF            AARGB3,F
               06481                 INCF            AARGB3,F
               06482                 BTFSC           _Z
               06483                 INCF            AARGB2,F
               06484                 BTFSC           _Z
               06485                 INCF            AARGB1,F
               06486                 BTFSC           _Z
               06487                 INCF            AARGB0,F
               06488                 RETLW           0
               06489 
               06490 IRES032         CLRF            AARGB0                  ; integer result equals zero
               06491                 CLRF            AARGB1
               06492                 CLRF            AARGB2
               06493                 CLRF            AARGB3
               06494                 RETLW           0
               06495 
               06496 SETIOV32        BSF             FPFLAGS,IOV             ; set integer overflow flag
               06497                 BTFSS           FPFLAGS,SAT             ; test for saturation
               06498                 RETLW           0xFF                    ; return error code in WREG
               06499 
               06500                 CLRF            AARGB0                  ; saturate to largest two's
               06501                 BTFSS           SIGN,MSB                ; complement 32 bit integer
               06502                 MOVLW           0xFF
               06503                 MOVWF           AARGB0                  ; SIGN = 0, 0x 7F FF FF FF
               06504                 MOVWF           AARGB1                  ; SIGN = 1, 0x 80 00 00 00
               06505                 MOVWF           AARGB2
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 279


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06506                 MOVWF           AARGB3
               06507                 RLCF            SIGN,F
               06508                 RRCF            AARGB0,F
               06509                 RETLW           0xFF                    ; return error code in WREG
               06510 #endif
               06511 
               06512 ;**********************************************************************************************
               06513 ;**********************************************************************************************
               06514 
               06515 ;       Floating Point Multiply
               06516 
               06517 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06518 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06519 
               06520 ;       Use:    CALL    FPM32
               06521 
               06522 ;       Output: 32 bit floating point product in AEXP, AARGB0, AARGB1, AARGB2
               06523 
               06524 ;       Result: AARG  <--  AARG * BARG
               06525 
               06526 ;       Max Timing:     26+23*22+21+21 = 574 clks       RND = 0
               06527 ;                       26+23*22+21+35 = 588 clks       RND = 1, SAT = 0
               06528 ;                       26+23*22+21+38 = 591 clks       RND = 1, SAT = 1
               06529 
               06530 ;       Min Timing:     6+6 = 12 clks                   AARG * BARG = 0
               06531 ;                       24+23*11+21+17 = 315 clks
               06532 
               06533 ;       PM: 94                                          DM: 14
               06534 
               06535 ;----------------------------------------------------------------------------------------------
               06536 
               06537 #ifdef caml_useprim_FPM32
6896 516B      06538 FPM32           MOVF            AEXP,W                  ; test for zero arguments
6898 A4D8      06539                 BTFSS           _Z
689A 5170      06540                 MOVF            BEXP,W
689C B4D8      06541                 BTFSC           _Z
689E D758      06542                 BRA             RES032
               06543 
68A0 516A      06544 M32BNE0         MOVF            AARGB0,W
68A2 196F      06545                 XORWF           BARGB0,W
68A4 6EF3      06546                 MOVWF           SIGN                    ; save sign in SIGN
               06547 
68A6 5170      06548                 MOVF            BEXP,W
68A8 276B      06549                 ADDWF           EXP,F
68AA 0E7E      06550                 MOVLW           EXPBIAS-1
68AC A0D8      06551                 BTFSS           _C
68AE D004      06552                 BRA             MTUN32
               06553 
68B0 5F6B      06554                 SUBWF           EXP,F
68B2 B0D8      06555                 BTFSC           _C
68B4 D043      06556                 BRA             SETFOV32                ; set multiply overflow flag
68B6 D003      06557                 BRA             MOK32
               06558 
68B8 5F6B      06559 MTUN32          SUBWF           EXP,F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 280


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
68BA A0D8      06560                 BTFSS           _C
68BC D0D4      06561                 BRA             SETFUN32
               06562 
68BE 516A      06563 MOK32           MOVF            AARGB0,W
68C0 6F67      06564                 MOVWF           AARGB3
68C2 5169      06565                 MOVF            AARGB1,W
68C4 6F66      06566                 MOVWF           AARGB4
68C6 5168      06567                 MOVF            AARGB2,W
68C8 6F65      06568                 MOVWF           AARGB5
68CA 8F67      06569                 BSF             AARGB3,MSB              ; make argument MSB's explicit
68CC 8F6F      06570                 BSF             BARGB0,MSB
68CE 90D8      06571                 BCF             _C
68D0 6B6A      06572                 CLRF            AARGB0                  ; clear initial partial product
68D2 6B69      06573                 CLRF            AARGB1
68D4 6B68      06574                 CLRF            AARGB2
68D6 0E18      06575                 MOVLW           D'24'
68D8 6F74      06576                 MOVWF           TEMP                    ; initialize counter
               06577 
68DA A165      06578 MLOOP32         BTFSS           AARGB5,LSB              ; test next bit
68DC D00A      06579                 BRA             MNOADD32
               06580 
68DE 516D      06581 MADD32          MOVF            BARGB2,W
68E0 2768      06582                 ADDWF           AARGB2,F
68E2 516E      06583                 MOVF            BARGB1,W
68E4 B0D8      06584                 BTFSC           _C
68E6 3D6E      06585                 INCFSZ          BARGB1,W
68E8 2769      06586                 ADDWF           AARGB1,F
               06587 
68EA 516F      06588                 MOVF            BARGB0,W
68EC B0D8      06589                 BTFSC           _C
68EE 3D6F      06590                 INCFSZ          BARGB0,W
68F0 276A      06591                 ADDWF           AARGB0,F
               06592 
68F2 336A      06593 MNOADD32        RRCF            AARGB0,F
68F4 3369      06594                 RRCF            AARGB1,F
68F6 3368      06595                 RRCF            AARGB2,F
68F8 3367      06596                 RRCF            AARGB3,F
68FA 3366      06597                 RRCF            AARGB4,F
68FC 3365      06598                 RRCF            AARGB5,F
68FE 90D8      06599                 BCF             _C
6900 2F74      06600                 DECFSZ          TEMP,F
6902 D7EB      06601                 BRA             MLOOP32
               06602 
6904 BF6A      06603                 BTFSC           AARGB0,MSB               ; check for postnormalization
6906 D005      06604                 BRA             MROUND32
6908 3767      06605                 RLCF            AARGB3,F
690A 3768      06606                 RLCF            AARGB2,F
690C 3769      06607                 RLCF            AARGB1,F
690E 376A      06608                 RLCF            AARGB0,F
6910 076B      06609                 DECF            EXP,F
               06610 
6912 BCF4      06611 MROUND32        BTFSC           FPFLAGS,RND
6914 A168      06612                 BTFSS           AARGB2,LSB
6916 D00F      06613                 BRA             MUL32OK
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 281


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6918 AF67      06614                 BTFSS           AARGB3,MSB
691A D00D      06615                 BRA             MUL32OK
691C 2B68      06616                 INCF            AARGB2,F
691E B4D8      06617                 BTFSC           _Z
6920 2B69      06618                 INCF            AARGB1,F
6922 B4D8      06619                 BTFSC           _Z
6924 2B6A      06620                 INCF            AARGB0,F
               06621 
6926 A4D8      06622                 BTFSS           _Z                      ; has rounding caused carryout?
6928 D006      06623                 BRA             MUL32OK
692A 336A      06624                 RRCF            AARGB0,F                ; if so, right shift
692C 3369      06625                 RRCF            AARGB1,F
692E 3368      06626                 RRCF            AARGB2,F
6930 2B6B      06627                 INCF            EXP,F
6932 B4D8      06628                 BTFSC           _Z                      ; check for overflow
6934 D003      06629                 BRA             SETFOV32
               06630 
6936 AEF3      06631 MUL32OK         BTFSS           SIGN,MSB
6938 9F6A      06632                 BCF             AARGB0,MSB              ; clear explicit MSB if positive
               06633 
693A 0C00      06634                 RETLW           0  
               06635 
693C 82F4      06636 SETFOV32        BSF             FPFLAGS,FOV             ; set floating point underflag
693E AEF4      06637                 BTFSS           FPFLAGS,SAT             ; test for saturation
6940 0CFF      06638                 RETLW           0xFF                    ; return error code in WREG
               06639 
6942 0EFF      06640                 MOVLW           0xFF
6944 6F6B      06641                 MOVWF           AEXP                    ; saturate to largest floating
6946 6F6A      06642                 MOVWF           AARGB0                  ; point number = 0x FF 7F FF FF
6948 6F69      06643                 MOVWF           AARGB1                  ; modulo the appropriate sign bit
694A 6F68      06644                 MOVWF           AARGB2
694C 36F3      06645                 RLCF            SIGN,F
694E 336A      06646                 RRCF            AARGB0,F
6950 0CFF      06647                 RETLW           0xFF                    ; return error code in WREG
               06648 #endif
               06649 
               06650 ;**********************************************************************************************
               06651 ;**********************************************************************************************
               06652 
               06653 ;       Floating Point Divide
               06654 
               06655 ;       Input:  32 bit floating point dividend in AEXP, AARGB0, AARGB1, AARGB2
               06656 ;               32 bit floating point divisor in BEXP, BARGB0, BARGB1, BARGB2
               06657 
               06658 ;       Use:    CALL    FPD32
               06659 
               06660 ;       Output: 32 bit floating point quotient in AEXP, AARGB0, AARGB1, AARGB2
               06661 
               06662 ;       Result: AARG  <--  AARG / BARG
               06663 
               06664 ;       Max Timing:     43+12+23*36+35+14 = 932 clks            RND = 0
               06665 ;                       43+12+23*36+35+50 = 968 clks            RND = 1, SAT = 0
               06666 ;                       43+12+23*36+35+53 = 971 clks            RND = 1, SAT = 1
               06667 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 282


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06668 ;       Min Timing:     7+6 = 13 clks
               06669 
               06670 ;       PM: 155                                                 DM: 14
               06671 
               06672 ;----------------------------------------------------------------------------------------------
               06673 
               06674 #ifdef caml_useprim_FPD32
6952 5170      06675 FPD32           MOVF            BEXP,W                  ; test for divide by zero
6954 B4D8      06676                 BTFSC           _Z
6956 D085      06677                 BRA             SETFDZ32
               06678 
6958 516B      06679                 MOVF            AEXP,W
695A B4D8      06680                 BTFSC           _Z
695C D6F9      06681                 BRA             RES032
               06682 
695E 516A      06683 D32BNE0         MOVF            AARGB0,W
6960 196F      06684                 XORWF           BARGB0,W
6962 6EF3      06685                 MOVWF           SIGN                    ; save sign in SIGN
6964 8F6A      06686                 BSF             AARGB0,MSB              ; make argument MSB's explicit
6966 8F6F      06687                 BSF             BARGB0,MSB
               06688 
6968 6B74      06689 TALIGN32        CLRF            TEMP                    ; clear align increment
696A 516A      06690                 MOVF            AARGB0,W
696C 6F67      06691                 MOVWF           AARGB3                  ; test for alignment
696E 5169      06692                 MOVF            AARGB1,W
6970 6F66      06693                 MOVWF           AARGB4
6972 5168      06694                 MOVF            AARGB2,W
6974 6F65      06695                 MOVWF           AARGB5
               06696 
6976 516D      06697                 MOVF            BARGB2,W
6978 5F65      06698                 SUBWF           AARGB5,F
697A 516E      06699                 MOVF            BARGB1,W
697C A0D8      06700                 BTFSS           _C
697E 3D6E      06701                 INCFSZ          BARGB1,W
               06702 
6980 5F66      06703 TS1ALIGN32      SUBWF           AARGB4,F
6982 516F      06704                 MOVF            BARGB0,W
6984 A0D8      06705                 BTFSS           _C
6986 3D6F      06706                 INCFSZ          BARGB0,W
               06707 
6988 5F67      06708 TS2ALIGN32      SUBWF           AARGB3,F
               06709 
698A 6B67      06710                 CLRF            AARGB3
698C 6B66      06711                 CLRF            AARGB4
698E 6B65      06712                 CLRF            AARGB5
               06713 
6990 A0D8      06714                 BTFSS           _C
6992 D007      06715                 BRA             DALIGN32OK
               06716 
6994 90D8      06717                 BCF             _C                      ; align if necessary
6996 336A      06718                 RRCF            AARGB0,F
6998 3369      06719                 RRCF            AARGB1,F
699A 3368      06720                 RRCF            AARGB2,F
699C 3367      06721                 RRCF            AARGB3,F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 283


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
699E 0E01      06722                 MOVLW           0x01
69A0 6F74      06723                 MOVWF           TEMP                    ; save align increment          
               06724 
69A2 5170      06725 DALIGN32OK      MOVF            BEXP,W                  ; compare AEXP and BEXP
69A4 5F6B      06726                 SUBWF           EXP,F
69A6 A0D8      06727                 BTFSS           _C
69A8 D006      06728                 BRA             ALTB32
               06729         
69AA 0E7E      06730 AGEB32          MOVLW           EXPBIAS-1
69AC 2574      06731                 ADDWF           TEMP,W
69AE 276B      06732                 ADDWF           EXP,F
69B0 B0D8      06733                 BTFSC           _C
69B2 D7C4      06734                 BRA             SETFOV32
69B4 D005      06735                 BRA             DARGOK32                ; set overflow flag
               06736 
69B6 0E7E      06737 ALTB32          MOVLW           EXPBIAS-1
69B8 2574      06738                 ADDWF           TEMP,W
69BA 276B      06739                 ADDWF           EXP,F
69BC A0D8      06740                 BTFSS           _C
69BE D053      06741                 BRA             SETFUN32                ; set underflow flag
               06742 
69C0 0E18      06743 DARGOK32        MOVLW           D'24'                   ; initialize counter
69C2 6F73      06744                 MOVWF           TEMPB1
               06745 
69C4 3765      06746 DLOOP32         RLCF            AARGB5,F                ; left shift
69C6 3766      06747                 RLCF            AARGB4,F
69C8 3767      06748                 RLCF            AARGB3,F
69CA 3768      06749                 RLCF            AARGB2,F
69CC 3769      06750                 RLCF            AARGB1,F
69CE 376A      06751                 RLCF            AARGB0,F
69D0 3774      06752                 RLCF            TEMP,F
               06753 
69D2 516D      06754                 MOVF            BARGB2,W                ; subtract
69D4 5F68      06755                 SUBWF           AARGB2,F
69D6 516E      06756                 MOVF            BARGB1,W
69D8 A0D8      06757                 BTFSS           _C
69DA 3D6E      06758                 INCFSZ          BARGB1,W
69DC 5F69      06759 DS132           SUBWF           AARGB1,F
               06760 
69DE 516F      06761                 MOVF            BARGB0,W
69E0 A0D8      06762                 BTFSS           _C
69E2 3D6F      06763                 INCFSZ          BARGB0,W
69E4 5F6A      06764 DS232           SUBWF           AARGB0,F
               06765 
69E6 356F      06766                 RLCF            BARGB0,W
69E8 1374      06767                 IORWF           TEMP,F
               06768                 
69EA A174      06769                 BTFSS           TEMP,LSB                ; test for restore
69EC D002      06770                 BRA             DREST32
               06771 
69EE 8165      06772                 BSF             AARGB5,LSB
69F0 D00B      06773                 BRA             DOK32
               06774 
69F2 516D      06775 DREST32         MOVF            BARGB2,W                ; restore if necessary
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 284


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
69F4 2768      06776                 ADDWF           AARGB2,F
69F6 516E      06777                 MOVF            BARGB1,W
69F8 B0D8      06778                 BTFSC           _C
69FA 3D6E      06779                 INCFSZ          BARGB1,W
69FC 2769      06780 DAREST32        ADDWF           AARGB1,F
               06781 
69FE 516F      06782                 MOVF            BARGB0,W
6A00 B0D8      06783                 BTFSC           _C
6A02 296F      06784                 INCF            BARGB0,W
6A04 276A      06785                 ADDWF           AARGB0,F
               06786 
6A06 9165      06787                 BCF             AARGB5,LSB
               06788 
6A08 2F73      06789 DOK32           DECFSZ          TEMPB1,F
6A0A D7DC      06790                 BRA             DLOOP32
               06791 
6A0C BCF4      06792 DROUND32        BTFSC           FPFLAGS,RND
6A0E A165      06793                 BTFSS           AARGB5,LSB
6A10 D01F      06794                 BRA             DIV32OK
6A12 90D8      06795                 BCF             _C
6A14 3768      06796                 RLCF            AARGB2,F               ; compute next significant bit
6A16 3769      06797                 RLCF            AARGB1,F               ; for rounding
6A18 376A      06798                 RLCF            AARGB0,F
6A1A 3774      06799                 RLCF            TEMP,F
               06800 
6A1C 516D      06801                 MOVF            BARGB2,W               ; subtract
6A1E 5F68      06802                 SUBWF           AARGB2,F
6A20 516E      06803                 MOVF            BARGB1,W
6A22 A0D8      06804                 BTFSS           _C
6A24 3D6E      06805                 INCFSZ          BARGB1,W
6A26 5F69      06806                 SUBWF           AARGB1,F
               06807 
6A28 516F      06808                 MOVF            BARGB0,W
6A2A A0D8      06809                 BTFSS           _C
6A2C 3D6F      06810                 INCFSZ          BARGB0,W
6A2E 5F6A      06811                 SUBWF           AARGB0,F
               06812 
6A30 356F      06813                 RLCF            BARGB0,W
6A32 1174      06814                 IORWF           TEMP,W
6A34 0B01      06815                 ANDLW           0x01            
               06816 
6A36 2765      06817                 ADDWF           AARGB5,F
6A38 B0D8      06818                 BTFSC           _C
6A3A 2B66      06819                 INCF            AARGB4,F
6A3C B4D8      06820                 BTFSC           _Z
6A3E 2B67      06821                 INCF            AARGB3,F
               06822 
6A40 A4D8      06823                 BTFSS           _Z                      ; test if rounding caused carryout
6A42 D006      06824                 BRA             DIV32OK
6A44 3367      06825                 RRCF            AARGB3,F
6A46 3366      06826                 RRCF            AARGB4,F
6A48 3365      06827                 RRCF            AARGB5,F
6A4A 2B6B      06828                 INCF            EXP,F
6A4C B4D8      06829                 BTFSC           _Z                      ; test for overflow
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 285


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6A4E D776      06830                 BRA             SETFOV32
               06831 
               06832 
6A50 AEF3      06833 DIV32OK         BTFSS           SIGN,MSB
6A52 9F67      06834                 BCF             AARGB3,MSB              ; clear explicit MSB if positive
               06835 
6A54 5167      06836                 MOVF            AARGB3,W
6A56 6F6A      06837                 MOVWF           AARGB0                  ; move result to AARG
6A58 5166      06838                 MOVF            AARGB4,W
6A5A 6F69      06839                 MOVWF           AARGB1
6A5C 5165      06840                 MOVF            AARGB5,W
6A5E 6F68      06841                 MOVWF           AARGB2
               06842 
6A60 0C00      06843                 RETLW           0
               06844 
6A62 86F4      06845 SETFDZ32        BSF             FPFLAGS,FDZ             ; set divide by zero flag
6A64 0CFF      06846                 RETLW           0xFF
               06847 #endif
               06848 
               06849 #ifdef caml_useprim_SETFUN32
6A66 84F4      06850 SETFUN32        BSF             FPFLAGS,FUN             ; set floating point underflag
6A68 AEF4      06851                 BTFSS           FPFLAGS,SAT             ; test for saturation
6A6A 0CFF      06852                 RETLW           0xFF                    ; return error code in WREG
               06853 
6A6C 0E01      06854                 MOVLW           0x01                    ; saturate to smallest floating
6A6E 6F6B      06855                 MOVWF           AEXP                    ; point number = 0x 01 00 00 00
6A70 6B6A      06856                 CLRF            AARGB0                  ; modulo the appropriate sign bit
6A72 6B69      06857                 CLRF            AARGB1
6A74 6B68      06858                 CLRF            AARGB2
6A76 36F3      06859                 RLCF            SIGN,F
6A78 336A      06860                 RRCF            AARGB0,F
6A7A 0CFF      06861                 RETLW           0xFF                    ; return error code in WREG
               06862 #endif
               06863 
               06864 ;**********************************************************************************************
               06865 ;**********************************************************************************************
               06866 
               06867 ;       Floating Point Subtract
               06868 
               06869 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06870 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06871 
               06872 ;       Use:    CALL FPS32
               06873 
               06874 ;       Output: 32 bit floating point sum in AEXP, AARGB0, AARGB1, AARGB2
               06875 
               06876 ;       Result: AARG  <--  AARG - BARG
               06877 
               06878 ;       Max Timing:     2+251 = 253 clks                RND = 0
               06879 ;                       2+265 = 267 clks                RND = 1, SAT = 0
               06880 ;                       2+271 = 273 clks                RND = 1, SAT = 1
               06881 
               06882 ;       Min Timing:     2+12 = 14 clks
               06883 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 286


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06884 ;       PM: 2+146 = 148                         DM: 14
               06885 
               06886 ;----------------------------------------------------------------------------------------------
               06887 
               06888 #ifdef caml_useprim_FPS32
6A7C 0E80      06889 FPS32           MOVLW           0x80
6A7E 1B6F      06890                 XORWF           BARGB0,F
               06891 #endif
               06892 
               06893 ;**********************************************************************************************
               06894 
               06895 ;       Floating Point Add
               06896 
               06897 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06898 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06899 
               06900 ;       Use:    CALL FPA32
               06901 
               06902 ;       Output: 32 bit floating point sum in AEXP, AARGB0, AARGB1, AARGB2
               06903 
               06904 ;       Result: AARG  <--  AARG - BARG
               06905 
               06906 ;       Max Timing:     31+41+6*7+6+41+90 = 251 clks            RND = 0
               06907 ;                       31+41+6*7+6+55+90 = 265 clks            RND = 1, SAT = 0
               06908 ;                       31+41+6*7+6+55+96 = 271 clks            RND = 1, SAT = 1
               06909 
               06910 ;       Min Timing:     8+4 = 12 clks
               06911 
               06912 ;       PM: 146                                                 DM: 14
               06913 
               06914 ;----------------------------------------------------------------------------------------------
               06915 
               06916 #ifdef caml_useprim_FPA32
6A80 516A      06917 FPA32           MOVF            AARGB0,W                ; exclusive or of signs in TEMP
6A82 196F      06918                 XORWF           BARGB0,W
6A84 6F74      06919                 MOVWF           TEMP
               06920 
6A86 6B67      06921                 CLRF            AARGB3                  ; clear extended byte
6A88 6B6C      06922                 CLRF            BARGB3
               06923 
6A8A 516B      06924                 MOVF            AEXP,W                  ; use AARG if AEXP >= BEXP
6A8C 5D70      06925                 SUBWF           BEXP,W
6A8E A0D8      06926                 BTFSS           _C
6A90 D018      06927                 BRA             USEA32
               06928 
6A92 5170      06929                 MOVF            BEXP,W                  ; use BARG if AEXP < BEXP
6A94 6F65      06930                 MOVWF           AARGB5                  ; therefore, swap AARG and BARG
6A96 516B      06931                 MOVF            AEXP,W
6A98 6F70      06932                 MOVWF           BEXP
6A9A 5165      06933                 MOVF            AARGB5,W
6A9C 6F6B      06934                 MOVWF           AEXP
               06935 
6A9E 516F      06936                 MOVF            BARGB0,W
6AA0 6F65      06937                 MOVWF           AARGB5
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 287


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6AA2 516A      06938                 MOVF            AARGB0,W
6AA4 6F6F      06939                 MOVWF           BARGB0
6AA6 5165      06940                 MOVF            AARGB5,W
6AA8 6F6A      06941                 MOVWF           AARGB0
               06942 
6AAA 516E      06943                 MOVF            BARGB1,W
6AAC 6F65      06944                 MOVWF           AARGB5
6AAE 5169      06945                 MOVF            AARGB1,W
6AB0 6F6E      06946                 MOVWF           BARGB1
6AB2 5165      06947                 MOVF            AARGB5,W
6AB4 6F69      06948                 MOVWF           AARGB1
               06949 
6AB6 516D      06950                 MOVF            BARGB2,W
6AB8 6F65      06951                 MOVWF           AARGB5
6ABA 5168      06952                 MOVF            AARGB2,W
6ABC 6F6D      06953                 MOVWF           BARGB2
6ABE 5165      06954                 MOVF            AARGB5,W
6AC0 6F68      06955                 MOVWF           AARGB2
               06956 
6AC2 5170      06957 USEA32          MOVF            BEXP,W                  ; return AARG if BARG = 0
6AC4 B4D8      06958                 BTFSC           _Z
6AC6 0C00      06959                 RETLW           0x00
               06960 
6AC8 516A      06961                 MOVF            AARGB0,W
6ACA 6EF3      06962                 MOVWF           SIGN                    ; save sign in SIGN
6ACC 8F6A      06963                 BSF             AARGB0,MSB              ; make MSB's explicit
6ACE 8F6F      06964                 BSF             BARGB0,MSB
               06965 
6AD0 5170      06966                 MOVF            BEXP,W                  ; compute shift count in BEXP
6AD2 5D6B      06967                 SUBWF           AEXP,W
6AD4 6F70      06968                 MOVWF           BEXP
6AD6 B4D8      06969                 BTFSC           _Z
6AD8 D027      06970                 BRA             ALIGNED32
               06971 
6ADA 0E08      06972                 MOVLW           8
6ADC 5D70      06973                 SUBWF           BEXP,W
6ADE A0D8      06974                 BTFSS           _C                      ; if BEXP >= 8, do byte shift
6AE0 D019      06975                 BRA             ALIGNB32
6AE2 6F70      06976                 MOVWF           BEXP
6AE4 516D      06977                 MOVF            BARGB2,W                ; keep for postnormalization
6AE6 6F6C      06978                 MOVWF           BARGB3
6AE8 516E      06979                 MOVF            BARGB1,W
6AEA 6F6D      06980                 MOVWF           BARGB2
6AEC 516F      06981                 MOVF            BARGB0,W
6AEE 6F6E      06982                 MOVWF           BARGB1
6AF0 6B6F      06983                 CLRF            BARGB0
               06984 
6AF2 0E08      06985                 MOVLW           8
6AF4 5D70      06986                 SUBWF           BEXP,W
6AF6 A0D8      06987                 BTFSS           _C                      ; if BEXP >= 8, do byte shift
6AF8 D00D      06988                 BRA             ALIGNB32
6AFA 6F70      06989                 MOVWF           BEXP
6AFC 516D      06990                 MOVF            BARGB2,W                ; keep for postnormalization
6AFE 6F6C      06991                 MOVWF           BARGB3
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 288


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6B00 516E      06992                 MOVF            BARGB1,W
6B02 6F6D      06993                 MOVWF           BARGB2
6B04 6B6E      06994                 CLRF            BARGB1
               06995 
6B06 0E08      06996                 MOVLW           8
6B08 5D70      06997                 SUBWF           BEXP,W
6B0A A0D8      06998                 BTFSS           _C                      ; if BEXP >= 8, BARG = 0 relative to AARG
6B0C D003      06999                 BRA             ALIGNB32
6B0E 50F3      07000                 MOVF            SIGN,W
6B10 6F6A      07001                 MOVWF           AARGB0
6B12 0C00      07002                 RETLW           0x00
               07003 
6B14 5170      07004 ALIGNB32        MOVF            BEXP,W                  ; already aligned if BEXP = 0
6B16 B4D8      07005                 BTFSC           _Z
6B18 D007      07006                 BRA             ALIGNED32
               07007 
6B1A 90D8      07008 ALOOPB32        BCF             _C                      ; right shift by BEXP
6B1C 336F      07009                 RRCF            BARGB0,F
6B1E 336E      07010                 RRCF            BARGB1,F
6B20 336D      07011                 RRCF            BARGB2,F
6B22 336C      07012                 RRCF            BARGB3,F
6B24 2F70      07013                 DECFSZ          BEXP,F
6B26 D7F9      07014                 BRA             ALOOPB32
               07015 
6B28 AF74      07016 ALIGNED32       BTFSS           TEMP,MSB                ; negate if signs opposite
6B2A D00B      07017                 BRA             AOK32
               07018 
6B2C 1F6C      07019                 COMF            BARGB3,F
6B2E 1F6D      07020                 COMF            BARGB2,F
6B30 1F6E      07021                 COMF            BARGB1,F
6B32 1F6F      07022                 COMF            BARGB0,F
6B34 2B6C      07023                 INCF            BARGB3,F
6B36 B4D8      07024                 BTFSC           _Z
6B38 2B6D      07025                 INCF            BARGB2,F
6B3A B4D8      07026                 BTFSC           _Z
6B3C 2B6E      07027                 INCF            BARGB1,F
6B3E B4D8      07028                 BTFSC           _Z
6B40 2B6F      07029                 INCF            BARGB0,F
               07030 
6B42 07031 AOK32
6B42 516C      07032                 MOVF            BARGB3,W
6B44 2767      07033                 ADDWF           AARGB3,F
6B46 516D      07034                 MOVF            BARGB2,W
6B48 B0D8      07035                 BTFSC           _C
6B4A 3D6D      07036                 INCFSZ          BARGB2,W
6B4C 2768      07037                 ADDWF           AARGB2,F
6B4E 516E      07038                 MOVF            BARGB1,W
6B50 B0D8      07039                 BTFSC           _C
6B52 3D6E      07040                 INCFSZ          BARGB1,W
6B54 2769      07041                 ADDWF           AARGB1,F
6B56 516F      07042                 MOVF            BARGB0,W
6B58 B0D8      07043                 BTFSC           _C
6B5A 3D6F      07044                 INCFSZ          BARGB0,W
6B5C 276A      07045                 ADDWF           AARGB0,F
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 289


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               07046 
6B5E BF74      07047                 BTFSC           TEMP,MSB
6B60 D009      07048                 BRA             ACOMP32
6B62 A0D8      07049                 BTFSS           _C
6B64 D62A      07050                 BRA             NRMRND4032
               07051 
6B66 336A      07052                 RRCF            AARGB0,F               ; shift right and increment EXP
6B68 3369      07053                 RRCF            AARGB1,F
6B6A 3368      07054                 RRCF            AARGB2,F
6B6C 3367      07055                 RRCF            AARGB3,F
6B6E 3F6B      07056                 INCFSZ          AEXP,F
6B70 D624      07057                 BRA             NRMRND4032
6B72 D6E4      07058                 BRA             SETFOV32
               07059 
6B74 B0D8      07060 ACOMP32         BTFSC           _C
6B76 D5F2      07061                 BRA             NRM4032                 ; normalize and fix sign
               07062 
6B78 1F67      07063                 COMF            AARGB3,F
6B7A 1F68      07064                 COMF            AARGB2,F                ; negate, toggle sign bit and
6B7C 1F69      07065                 COMF            AARGB1,F                ; then normalize
6B7E 1F6A      07066                 COMF            AARGB0,F
6B80 2B67      07067                 INCF            AARGB3,F
6B82 B4D8      07068                 BTFSC           _Z
6B84 2B68      07069                 INCF            AARGB2,F
6B86 B4D8      07070                 BTFSC           _Z
6B88 2B69      07071                 INCF            AARGB1,F
6B8A B4D8      07072                 BTFSC           _Z
6B8C 2B6A      07073                 INCF            AARGB0,F
               07074 
6B8E 0E80      07075                 MOVLW           0x80
6B90 1AF3      07076                 XORWF           SIGN,F
6B92 D5B8      07077                 BRA             NRM32
               07078 #endif
               01837 
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 290


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
AARG                              00000F6A
AARGB0                            00000F6A
AARGB1                            00000F69
AARGB2                            00000F68
AARGB3                            00000F67
AARGB4                            00000F66
AARGB5                            00000F65
AARGB6                            00000F64
AARGB7                            00000F63
ABDEN                             00000000
ABDOVF                            00000007
ABSTRACT_TAG                      000000FB
ACC                               00000F6A
ACCB0                             00000F6A
ACCB1                             00000F69
ACCB2                             00000F68
ACCB3                             00000F67
ACCB4                             00000F66
ACCB5                             00000F65
ACCB6                             00000F64
ACCB7                             00000F63
ACCESS                            00000000
ACCUH                             00000F57
ACCUL                             00000F56
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACOMP32                           00006B74
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AEXP                              00000F6B
AGEB32                            000069AA
ALIGNB32                          00006B14
ALIGNED32                         00006B28
ALOOPB32                          00006B1A
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 291


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
ALTB32                            000069B6
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000002
AN9                               00000003
AOK32                             00006B42
ATOM0_ADR                         00000F88
B0                                00000000
B1                                00000001
B2                                00000002
B3                                00000003
B4                                00000004
B5                                00000005
B6                                00000006
B7                                00000007
BANKED                            00000001
BARG                              00000F6F
BARGB0                            00000F6F
BARGB1                            00000F6E
BARGB2                            00000F6D
BARGB3                            00000F6C
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BEXP                              00000F70
BF                                00000000
BGST                              00000005
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CAML_STOP_AND_COPY_GC             00000000
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 292


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CFGS                              00000006
CHECK_UNFULL_HEAP_END_0           00001000
CHECK_UNFULL_HEAP_END_1           0000103C
CHECK_UNFULL_HEAP_END_10          000051F4
CHECK_UNFULL_HEAP_END_11          0000532E
CHECK_UNFULL_HEAP_END_12          000054A6
CHECK_UNFULL_HEAP_END_13          00005612
CHECK_UNFULL_HEAP_END_14          0000566E
CHECK_UNFULL_HEAP_END_15          000056B8
CHECK_UNFULL_HEAP_END_16          00005816
CHECK_UNFULL_HEAP_END_17          00005A84
CHECK_UNFULL_HEAP_END_18          00005D12
CHECK_UNFULL_HEAP_END_19          00005D7E
CHECK_UNFULL_HEAP_END_2           00001080
CHECK_UNFULL_HEAP_END_20          00005DC8
CHECK_UNFULL_HEAP_END_21          000063C2
CHECK_UNFULL_HEAP_END_22          000064F0
CHECK_UNFULL_HEAP_END_23          0000657A
CHECK_UNFULL_HEAP_END_24          000065C6
CHECK_UNFULL_HEAP_END_25          00006622
CHECK_UNFULL_HEAP_END_26          00006694
CHECK_UNFULL_HEAP_END_3           0000111C
CHECK_UNFULL_HEAP_END_4           00001384
CHECK_UNFULL_HEAP_END_5           000013BA
CHECK_UNFULL_HEAP_END_6           00004DB6
CHECK_UNFULL_HEAP_END_7           00004E58
CHECK_UNFULL_HEAP_END_8           00004F08
CHECK_UNFULL_HEAP_END_9           00004F9C
CHECK_UNFULL_STACK_END_0          00000A0E
CHECK_UNFULL_STACK_END_1          00000B66
CHECK_UNFULL_STACK_END_2          00000C22
CHECK_UNFULL_STACK_END_3          00000C68
CHECK_UNFULL_STACK_END_4          00000CB0
CHECK_UNFULL_STACK_END_5          00000D00
CHS0                              00000002
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 293


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLOSURE_TAG                       000000F7
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CPT_CUH                           0000001B
CPT_CUS                           00000006
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_HEAP_END                      00000F5E
CUSTOM_TAG                        000000FF
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
D                                 00000005
D32BNE0                           0000695E
DALIGN32OK                        000069A2
DAREST32                          000069FC
DARGOK32                          000069C0
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DEBUG                             00000FD4
DIV32OK                           00006A50
DIVISION_BY_0_IND                 00000005
DLOOP32                           000069C4
DOK32                             00006A08
DOM                               00000005
DONE                              00000001
DOUBLE_ARRAY_TAG                  000000FE
DOUBLE_TAG                        000000FD
DREST32                           000069F2
DROUND32                          00006A0C
DS132                             000069DC
DS232                             000069E4
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 294


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
D_A                               00000005
ECCP1AS                           00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
ENVH                              00000F55
ENVL                              00000F54
EXP                               00000F6B
EXPBIAS                           0000007F
EXTRA_ARGS                        00000F62
FAILURE_IND                       00000002
FAST                              00000001
FDZ                               00000003
FERR                              00000002
FIXSIGN32                         0000674A
FLO2432                           000066E8
FLO32                             000066E8
FORWARD_TAG                       000000FA
FOV                               00000001
FPA32                             00006A80
FPD32                             00006952
FPFLAGS                           00000FF4
FPM32                             00006896
FPS32                             00006A7C
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FUN                               00000002
GCEN                              00000007
GC_COUNTER_H                      00000F77
GC_COUNTER_L                      00000F76
GC_TMP_REG_1                      00000F63
GC_TMP_REG_2                      00000F64
GC_TMP_REG_3                      00000F65
GC_TMP_REG_4                      00000F66
GC_TMP_REG_5                      00000F67
GIE                               00000007
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 295


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
HEAP1_ANCHOR                      00000000
HEAP1_END                         00000005
HEAP2_ANCHOR                      00000006
HEAP2_END                         0000000B
HEAP_SIZE                         00000006
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
IBF                               00000007
IBOV                              00000005
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INFIX_TAG                         000000F9
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INT32                             000067E0
INT3224                           000067E0
INT3224OK                         00006860
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 296


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
INTSRC                            00000007
INT_FLAGS_1                       00000F7A
INT_FLAGS_2                       00000F7B
INT_FLAGS_3                       00000F7C
INT_FUN_H                         00000F59
INT_FUN_L                         00000F58
INT_RUNS_1                        00000F7D
INT_RUNS_2                        00000F7E
INT_RUNS_3                        00000F7F
INVALID_ARG_IND                   00000003
IOFS                              00000002
IOV                               00000000
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRES03224                         00006876
IRVST                             00000005
IVRST                             00000005
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 297


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LSB                               00000000
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
M32BNE0                           000068A0
MADD32                            000068DE
MAX_USER_RAM                      00000F80
MCLR                              00000003
MLOOP32                           000068DA
MNOADD32                          000068F2
MOK32                             000068BE
MROUND32                          00006912
MSB                               00000007
MTUN32                            000068B8
MUL32OK                           00006936
N                                 00000004
NAN                               00000004
NORM3232                          0000672E
NORM3232A                         0000673A
NORM4032                          0000679C
NORM4032A                         000067A8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_MCLR                          00000003
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 298


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NO_SCAN_TAG                       000000FB
NRM32                             00006704
NRM3232                           00006704
NRM4032                           0000675C
NRMRND4032                        000067BA
OBF                               00000006
OBJECT_TAG                        000000F8
OBJ_TAG_INT                       00000100
OBJ_TAG_OUT_OF_MEMORY             00000101
OERR                              00000001
OOM_FIELD0_H                      00000F5D
OOM_FIELD0_L                      00000F5C
OOM_SIZE                          00000F5B
OOM_TAG                           00000F5A
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OTH_HEAP_END                      00000F5F
OUT_OF_MEMORY_IND                 00000000
OV                                00000003
P                                 00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
P1M0                              00000006
P1M1                              00000007
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 299


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PWM1CON                           00000FB7
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 300


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RAND_CUR_H                        00000F79
RAND_CUR_L                        00000F78
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RES032                            00006750
RI                                00000004
RND                               00000006
RSEN                              00000001
RX                                00000007
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 301


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
R_W                               00000002
S                                 00000003
SAT                               00000007
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SEN                               00000000
SENDB                             00000003
SERIAL_ENDTAC_FLAG                00000056
SERIAL_ENDTIC_FLAG                000000A9
SERIAL_ERROR_FLAG                 00000065
SERIAL_ESC_FLAG                   000000FF
SERIAL_FLAG_BASE                  000000A6
SERIAL_GET_FLAG                   00000095
SERIAL_HASH_INITH                 00000039
SERIAL_HASH_INITL                 0000006B
SERIAL_NEWTAC_FLAG                00000059
SERIAL_NEWTIC_FLAG                000000A6
SERIAL_OOM_FLAG                   0000006A
SERIAL_RECEIVE_FLAG               0000009A
SERIAL_RES1_FLAG                  00000003
SERIAL_RES2_FLAG                  0000001A
SERIAL_RES3_FLAG                  0000001C
SETFDZ32                          00006A62
SETFOV32                          0000693C
SETFUN32                          00006A66
SETIOV3224                        0000687E
SHIFT3224                         0000683C
SHIFT3224OK                       00006848
SIGN                              00000FF3
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 302


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STACK_ANCHOR                      00000F53
STACK_END                         0000000C
STACK_OVERFLOW_IND                00000008
STACK_SIZE                        00000003
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
STRING_TAG                        000000FC
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000000
T1CKI                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 303


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TALIGN32                          00006968
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEMP                              00000F74
TEMPB0                            00000F74
TEMPB1                            00000F73
TEMPB2                            00000F72
TEMPB3                            00000F71
TMP_REG_1                         00000F68
TMP_REG_2                         00000F69
TMP_REG_3                         00000F6A
TMP_REG_4                         00000F6B
TMP_REG_5                         00000F6C
TMP_REG_6                         00000F6D
TMP_REG_7                         00000F6E
TMP_REG_8                         00000F6F
TMP_REG_9                         00000F70
TMP_REG_A                         00000F71
TMP_REG_B                         00000F72
TMP_REG_C                         00000F73
TMP_REG_D                         00000F74
TMP_REG_E                         00000F75
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 304


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRAP_SPH                          00000F61
TRAP_SPL                          00000F60
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TS1ALIGN32                        00006980
TS2ALIGN32                        00006988
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 305


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TSHIFT3224                        00006836
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
USEA32                            00006AC2
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VPP                               00000003
W                                 00000000
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
Z                                 00000002
_ACC0_OFFSETREF                   0000036C
_ACC1_ISINT                       00000F2E
_ACC2_GETMETHOD                   0000039E
_ACC3_BEQ                         00000180
_ACC4_BNEQ                        0000018C
_ACC5_BLTINT                      00000198
_ACC6_BLEINT                      000001A4
_ACC7_BGTINT                      000001B0
_ACC_BGEINT                       00000214
_ADDINT                           000011C6
_ANDINT                           00000756
_APPLY                            00000C3E
_APPLY1                           00000C5A
_APPLY2                           00000CA2
_APPLY3                           00000CF2
_APPTERM                          00000D4A
_APPTERM1                         00000D90
_APPTERM2                         00000DC2
_APPTERM3                         00000E00
_APPTERM_LOOP                     00000D6E
_ASRINT                           000007A0
_ASSIGN                           0000026E
_ATOM                             00000F84
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 306


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ATOM0                            00000F96
_BEQ                              000000A4
_BGEINT                           00000134
_BGEINT_L0                        0000014C
_BGTINT                           00000116
_BGTINT_L0                        00000130
_BLEINT                           000000F8
_BLEINT_L0                        00000112
_BLTINT                           000000DC
_BLTINT_L0                        000000F4
_BNEQ                             000000C2
_BOOLNOT                          000011A2
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_BRANCH                           00000830
_BRANCHIF                         0000083E
_BRANCHIFNOT                      0000084E
_BRANCH_LOCAL_COPY                000000B4
_BREAK                            00000F84
_BUGEINT                          00000168
_BULTINT                          00000150
_CCALL                            0000080E
_CCALL1                           000007B4
_CCALL2                           000007C6
_CCALL3                           000007D8
_CCALL4                           000007EA
_CCALL5                           000007FC
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CHECKSIGNALS                     00000F84
_CHECK_UNFULL_HEAP_GEN            00001406
_CHECK_UNFULL_HEAP_GEN_L0         0000141E
_CHECK_UNFULL_HEAP_GEN_L1         00001424
_CHECK_UNFULL_HEAP_GEN_L2         00001428
_CHECK_UNFULL_HEAP_GEN_L3         0000142E
_CHECK_UNFULL_HEAP_GEN_L4         00001448
_CHECK_UNFULL_HEAP_GEN_L5         0000144E
_CHECK_UNFULL_HEAP_GEN_L6         00001452
_CHECK_UNFULL_HEAP_GEN_L7         00001458
_CLOSURE                          00000A72
_CLOSUREREC                       00000ABC
_CLOSUREREC_LOOP_FUNCS            00000B44
_CLOSUREREC_LOOP_VARS             00000B22
_CLOSUREREC_NO_VARS               00000B2E
_CLOSURE_LOOP                     00000AAE
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 307


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CONST0                           000006F0
_CONST1                           00000706
_CONST2                           0000071C
_CONST3                           00000732
_CONSTINT                         00000748
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_DIVINT                           000011B6
_DIVINT_IFN_L2                    00001288
_DIVINT_IF_L1                     0000125C
_DIVINT_IF_L2                     00001278
_DIVINT_L0                        0000122E
_DIVINT_L1                        0000123C
_DIVINT_LOOP1                     00001248
_DIVINT_LOOP2                     00001264
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_END_ASRINT                       000007B2
_END_LSLINT                       0000078A
_END_LSRINT                       0000079E
_ENVACC                           0000050C
_ENVACC1                          00000484
_ENVACC2                          000004A6
_ENVACC3                          000004C8
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 308


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ENVACC4                          000004EA
_EQ                               000002C2
_EVENT                            00000F84
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_GEINT                            00000330
_GEINT_L0                         00000344
_GETDYNMET                        000003C4
_GETFIELD                         000005A2
_GETFIELD0                        0000052E
_GETFIELD1                        00000540
_GETFIELD2                        00000554
_GETFIELD3                        00000568
_GETFLOATFIELD                    000010FC
_GETGLOBAL                        000008D6
_GETGLOBALFIELD                   0000058A
_GETMETHOD                        00000378
_GETMET_ELSE                      00000414
_GETMET_END_LOOP                  00000422
_GETMET_LOOP                      000003E2
_GETMET_THEN                      0000041A
_GETPUBMET                        000003AA
_GETSTRINGCHAR                    000006A8
_GETVECTITEM                      00000676
_GRAB                             00000EBE
_GRAB_ELSE                        00000F1E
_GRAB_LOOP                        00000EFC
_GRAB_SKIP_LOOP                   00000F08
_GTINT                            0000031A
_GTINT_L0                         0000032C
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_INDIRECTED_DIVINT                00001208
_INDIRECTED_MODINT                000012A8
_INDIRECTED_MULINT                000011DA
_INDIRECT_CAML_RAISE_STACK_OVERFLOW  000008F0
_INDIRECT_RAISE_DIV_BY_0          000012A4
_ISINT                            00000F22
_LEINT                            00000304
_LEINT_L0                         00000316
_LOOP_ASRINT                      000007A6
_LOOP_INIT_HEAP                   00000070
_LOOP_INIT_HEAP_TEST              0000007C
_LOOP_INIT_REGISTERS              00000020
_LOOP_INIT_STACK                  00000056
_LOOP_INIT_STACK_TEST             00000062
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 309


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_LOOP_LSLINT                      0000077E
_LOOP_LSRINT                      00000792
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LSLINT                           00000776
_LSRINT                           0000078C
_LTINT                            000002EC
_LTINT_L0                         00000300
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAKEBLOCK                        00000FA0
_MAKEBLOCK1                       00000FE0
_MAKEBLOCK2                       0000101C
_MAKEBLOCK3                       00001060
_MAKEBLOCK_LOOP                   00000FD2
_MAKEFLOATBLOCK                   000010AC
_MAKEFLOATBLOCK_LOOP              000010DE
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MODINT                           000011B4
_MODINT_IFN_L2                    0000130A
_MODINT_IF_L2                     00001302
_MODINT_L0                        000012CA
_MODINT_L1                        000012D6
_MODINT_LOOP1                     000012D8
_MODINT_LOOP2                     000012EE
_MULINT                           000011B2
_NEGINT                           000011B8
_NEQ                              000002D8
_OFFSETCLOSURE                    00000BE6
_OFFSETCLOSURE0                   00000BB0
_OFFSETCLOSURE2                   00000BC8
_OFFSETCLOSUREM2                  00000B92
_OFFSETCLOSURE_NEG                00000C04
_OFFSETINT                        00000348
_OFFSETREF                        00000356
_ORINT                            00000760
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_POP                              00000260
_POPTRAP                          00000A3A
_POP_ACCUL_FALSE                  000002BC
_POP_ACCUL_TRUE                   000002B6
_POP_INTRAISE                     00000260
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 310


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PUSHACC                          00000234
_PUSHACC0_UGEINT                  00000202
_PUSHACC1_BULTINT                 000001BC
_PUSHACC2_BUGEINT                 000001D6
_PUSHACC3_GETPUBMET               00000442
_PUSHACC4_GETDYNMET               0000045C
_PUSHACC5_STOP                    00000F3A
_PUSHACC6_EVENT                   00000F54
_PUSHACC7_BREAK                   00000F6C
_PUSHACC_INTRETURN                00000234
_PUSHATOM                         00000F84
_PUSHATOM0                        00000F88
_PUSHCONST                        0000073A
_PUSHCONST0                       000006E2
_PUSHCONST1                       000006F8
_PUSHCONST2                       0000070E
_PUSHCONST3                       00000724
_PUSHENVACC                       000004FE
_PUSHENVACC1                      00000476
_PUSHENVACC2                      00000498
_PUSHENVACC3                      000004BA
_PUSHENVACC4                      000004DC
_PUSHGETGLOBAL                    000008C8
_PUSHGETGLOBALFIELD               0000057C
_PUSHOFFSETCLOSURE                00000BD8
_PUSHOFFSETCLOSURE0               00000BA2
_PUSHOFFSETCLOSURE2               00000BBA
_PUSHOFFSETCLOSUREM2              00000B84
_PUSHRETADDR                      00000C14
_PUSHTRAP                         00000A00
_PUSH_ULTINT                      000001F0
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_RAISE                            00000A44
_RESTART                          00000E84
_RESTART_LOOP                     00000EB0
_RETURN                           00000E46
_RETURN_ELSE                      00000E6E
_SETFIELD                         0000062A
_SETFIELD0                        000005C4
_SETFIELD1                        000005DC
_SETFIELD2                        000005F6
_SETFIELD3                        00000610
_SETFLOATFIELD                    00001154
_SETGLOBAL                        000008AE
_SETSTRINGCHAR                    000006C4
_SETVECTITEM                      0000068C
_SKIP_ARGUMENT                    000000D2
_STOP                             00000F84
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SUBINT                           000011D0
_SWITCH                           0000085E
_SWITCH_LONG                      00000898
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 311


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_THE_BIG_LOOP                     00001326
_THE_BIG_SWITCH                   00000900
_UGEINT                           000002A4
_ULTINT                           00000292
_VECTLENGTH                       00000652
_VECTLENGTH_DOUBLE_ARRAY          0000066E
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
_XORINT                           0000076A
__18F4620                         00000001
asm_interrupt_handler             000063F6
caml_abs_float                    000065A6
caml_add_float                    0000665C
caml_alloc_dummy                  0000146E
caml_alloc_dummy_atom             00001494
caml_alloc_dummy_float            0000145C
caml_alloc_dummy_l0               0000147C
caml_alloc_dummy_loop             0000148A
caml_array_get                    00004E9C
caml_array_get_addr               00004EC0
caml_array_get_float              00004EE8
caml_array_set                    00004EAE
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 312


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_array_set_addr               00004F4E
caml_array_set_float              00005000
caml_blit_string                  00004BE6
caml_blit_string_loop             00004C16
caml_blit_string_loop_test        00004C1E
caml_bytecode                     000016E0
caml_compare                      00005E36
caml_compare_A_1eq2               00005F3E
caml_compare_A_1gt2               00005F1C
caml_compare_A_1lt2               00005F06
caml_compare_A_addr_x             00005E4C
caml_compare_A_phydiff            00005E42
caml_compare_B_1gt2               00005F14
caml_compare_B_1lt2               00005EFE
caml_compare_B_custom_compare     00005ED8
caml_compare_B_float_array_compare  00005ECE
caml_compare_B_float_compare      00005EC4
caml_compare_B_raise_ia_compare   00005EEA
caml_compare_B_string_compare     00005EBA
caml_compare_CD_1eq2              00005F36
caml_compare_CD_1gt2              00005F0C
caml_compare_CD_1lt2              00005EF6
caml_compare_CD_1ne2              00005F24
caml_compare_CD_raise_ia_compare  00005EE2
caml_compare_C_1eq2               0000601C
caml_compare_C_addr_x             00005F72
caml_compare_C_compared           00005FF2
caml_compare_C_phydiff            00005F66
caml_compare_D_1eq2               0000600C
caml_compare_D_compared           00006008
caml_compare_D_custom_compare     00006004
caml_compare_D_float_array_compare  00006000
caml_compare_D_float_compare      00005FFC
caml_compare_D_string_compare     00005FF8
caml_compare_canpush3             00005FDA
caml_compare_forward              00005F46
caml_compare_goback               0000602C
caml_compare_loop                 00005F4A
caml_compare_push_forward         00005FCC
caml_compare_raise_stack_overflow  00005EA6
caml_compare_to_eq                00006360
caml_compare_to_ge                0000638A
caml_compare_to_gt                0000637E
caml_compare_to_lt                00006372
caml_compare_to_neq               0000636A
caml_create_string                00004C9A
caml_custom_compare               00006274
caml_custom_skip_addr             00005DFC
caml_div_float                    0000666E
caml_eeprom_get_size              00006450
caml_eeprom_read                  0000646A
caml_eeprom_write                 00006486
caml_eeprom_write_error           000064D0
caml_eeprom_write_loop            000064B0
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 313


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_eq_float                     00005E16
caml_equal                        00005E12
caml_extern_raise                 000013D0
caml_externals                    00001600
caml_fill_string                  00004C62
caml_fill_string_loop             00004C7E
caml_fill_string_miloop           00004C86
caml_float_array_compare          00006126
caml_float_array_compare_0_x      000061D0
caml_float_array_compare_NN       0000616A
caml_float_array_compare_PP       0000617A
caml_float_array_compare_XN       00006166
caml_float_array_compare_continue  000061CA
caml_float_array_compare_loop     0000615C
caml_float_compare                00006204
caml_float_compare_1eq2           000061D6
caml_float_compare_1gt2           000061F4
caml_float_compare_1lt2           000061E6
caml_float_compare_NN             0000622E
caml_float_compare_PP             0000623E
caml_float_compare_XN             0000622A
caml_float_of_int                 000065F2
caml_float_operation_finalize     000066D6
caml_float_operation_initialize   00006674
caml_gc_exec                      000014DA
caml_ge_float                     00005E32
caml_globals_init_end             00004BE6
caml_globals_init_heap            000049EA
caml_globals_init_stack           00004882
caml_greaterequal                 00005E2E
caml_gt_float                     00005E2A
caml_int32_1arg_init              00005646
caml_int32_2arg_init              00005690
caml_int32_add                    00005282
caml_int32_and                    0000558A
caml_int32_compare                00006288
caml_int32_compare_1lt2           000062DA
caml_int32_compare_1neq2          000062D0
caml_int32_custom                 000015E0
caml_int32_div                    000052CE
caml_int32_div_end                00005434
caml_int32_div_if_l1              000053B8
caml_int32_div_if_l2              000053EC
caml_int32_div_ifn_l2             0000540C
caml_int32_div_l0                 00005362
caml_int32_div_l1                 0000537E
caml_int32_div_loop1              00005390
caml_int32_div_loop2              000053C4
caml_int32_mod                    00005446
caml_int32_mod_end                00005578
caml_int32_mod_if_l2              0000554A
caml_int32_mod_ifn_l2             0000555A
caml_int32_mod_l0                 000054DA
caml_int32_mod_l1                 000054F6
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 314


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_int32_mod_loop1              000054F8
caml_int32_mod_loop2              00005522
caml_int32_neg                    0000525E
caml_int32_of_int                 000055EA
caml_int32_of_int_neg             0000563C
caml_int32_shift_right_unsigned   000055B0
caml_int32_shift_right_unsigned_end_loop  000055D8
caml_int32_shift_right_unsigned_loop  000055CA
caml_int32_sub                    000052A8
caml_int32_to_int                 00005DFC
caml_int64_1arg_init              00005D56
caml_int64_2arg_init              00005DA0
caml_int64_add                    00005730
caml_int64_and                    00005C4A
caml_int64_compare                000062E0
caml_int64_compare_1lt2           0000635A
caml_int64_compare_1neq2          00006350
caml_int64_custom                 000015F0
caml_int64_div                    000057AC
caml_int64_div_end1               00005A16
caml_int64_div_end2               00005A12
caml_int64_div_end3               00005A0E
caml_int64_div_end4               00005A0A
caml_int64_div_end5               00005A06
caml_int64_div_end6               00005A02
caml_int64_div_end7               000059FE
caml_int64_div_if_l1              00005928
caml_int64_div_if_l2              00005984
caml_int64_div_ifn_l2             000059B8
caml_int64_div_l0                 0000588C
caml_int64_div_l1                 000058C0
caml_int64_div_loop1              000058D8
caml_int64_div_loop2              00005934
caml_int64_mod                    00005A1A
caml_int64_mod_end                00005C28
caml_int64_mod_if_l2              00005BD2
caml_int64_mod_ifn_l2             00005BF2
caml_int64_mod_l0                 00005AFA
caml_int64_mod_l1                 00005B2E
caml_int64_mod_loop1              00005B30
caml_int64_mod_loop2              00005B82
caml_int64_neg                    000056EC
caml_int64_of_int                 00005CEA
caml_int64_of_int_neg             00005D44
caml_int64_shift_right_unsigned   00005C88
caml_int64_shift_right_unsigned_end_loop  00005CC8
caml_int64_shift_right_unsigned_loop  00005CB2
caml_int64_sub                    0000576E
caml_int64_to_int                 00005DFC
caml_int_compare                  000060FE
caml_int_compare_1eq2             0000611E
caml_int_compare_1lt2             00006118
caml_int_compare_L0               0000610E
caml_int_of_float                 00006636
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 315


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_int_of_string                000050CC
caml_int_of_string_bin            00005156
caml_int_of_string_bin_loop       0000515A
caml_int_of_string_dec            00005108
caml_int_of_string_hex            0000516E
caml_int_of_string_hex_09         0000518E
caml_int_of_string_hex_AF         0000518C
caml_int_of_string_hex_af         0000518A
caml_int_of_string_hex_loop       00005172
caml_int_of_string_hex_shift      00005190
caml_int_of_string_oct            0000512A
caml_int_of_string_oct_loop       0000512E
caml_int_of_string_return         000051B6
caml_int_of_string_return_zero    000051CA
caml_int_of_string_sign_tested    000050E6
caml_interrupt_handler            000063F8
caml_is_printable                 00004C92
caml_lessthan                     00005E22
caml_lt_float                     00005E26
caml_make_vect                    00004E02
caml_make_vect_atom               00004E2E
caml_make_vect_loop               00004E20
caml_ml_string_length             00004C32
caml_mul_float                    00006668
caml_neg_float                    0000655A
caml_neq_float                    00005E1E
caml_notequal                     00005E1A
caml_pic_clear_bit                00005090
caml_pic_read_reg                 0000506A
caml_pic_set_bit                  0000507A
caml_pic_test_bit                 000050A8
caml_pic_tris_of_port             000050C0
caml_pic_write_reg                00005054
caml_raise_division_by_0          00001364
caml_raise_ia                     0000642E
caml_raise_ia_array_make          00004E38
caml_raise_ia_compare             00006398
caml_raise_ia_index_out_of_bounds  00004F7C
caml_raise_ia_index_out_of_bounds_string  00004D8A
caml_raise_ia_string_create       00004D96
caml_raise_ios_failure            000051CE
caml_raise_out_of_memory          00001358
caml_raise_stack_overflow         0000139A
caml_sacgc_check_and_copy         00001552
caml_sacgc_copy_block             00001596
caml_sacgc_copy_block_loop        000015C8
caml_sacgc_copy_not_copied        000015A4
caml_sacgc_copy_skip_0            000015DA
caml_sacgc_copy_skip_1            000015D8
caml_sacgc_copy_skip_2            000015D6
caml_sacgc_heap_loop              00001518
caml_sacgc_heap_loop_test         00001538
caml_sacgc_loop_block             00001532
caml_sacgc_scan_block             0000152E
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 316


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_sacgc_stack_loop             000014FA
caml_sacgc_stack_loop_test        000014FC
caml_sleep_millis                 000063FC
caml_sleep_millis_end             0000642C
caml_sleep_millis_loop            00006414
caml_string_compare               00006044
caml_string_compare_1gt2          000060E0
caml_string_compare_1lt2          000060F0
caml_string_compare_L0            0000607A
caml_string_compare_bl1_gt_bl2    00006096
caml_string_compare_blen_eq       000060A4
caml_string_compare_cont1         000060DA
caml_string_compare_diff          000060DE
caml_string_compare_l2odd         000060BE
caml_string_compare_loop          0000607E
caml_string_compare_loop_end      0000608E
caml_string_compre_bl1_lt_bl2     0000609C
caml_string_get                   00004CDE
caml_string_get_last_char         00004D14
caml_string_set                   00004D32
caml_string_set_last_char         00004D6A
caml_sub_float                    00006662
caml_update_dummy                 0000149E
caml_update_dummy_end             000014D0
caml_update_dummy_loop            000014C4
caml_virtual_machine              0000001C
high_interrupt_handler            00000018
low_interrupt_handler             00000008
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
SERIAL_TICTAC                     IPR1,RCIP
_C                                STATUS,0
_Z                                STATUS,2
caml_use_float_library            (null)
caml_useprim_FLO2432              (null)
caml_useprim_FPA32                (null)
caml_useprim_FPD32                (null)
caml_useprim_FPM32                (null)
caml_useprim_FPS32                (null)
caml_useprim_INT3224              (null)
caml_useprim_NRM3232              (null)
caml_useprim_NRM4032              (null)
caml_useprim_SETFUN32             (null)
caml_useprim_caml_abs_float       (null)
caml_useprim_caml_add_float       (null)
caml_useprim_caml_array_get       (null)
caml_useprim_caml_array_get_addr  (null)
caml_useprim_caml_array_get_float  (null)
caml_useprim_caml_array_set       (null)
caml_useprim_caml_array_set_addr  (null)
caml_useprim_caml_array_set_float  (null)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 317


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_useprim_caml_blit_string     (null)
caml_useprim_caml_compare         (null)
caml_useprim_caml_compare_to_eq   (null)
caml_useprim_caml_compare_to_ge   (null)
caml_useprim_caml_compare_to_gt   (null)
caml_useprim_caml_compare_to_lt   (null)
caml_useprim_caml_compare_to_neq  (null)
caml_useprim_caml_create_string   (null)
caml_useprim_caml_custom_compare  (null)
caml_useprim_caml_div_float       (null)
caml_useprim_caml_eeprom_get_size  (null)
caml_useprim_caml_eeprom_read     (null)
caml_useprim_caml_eeprom_write    (null)
caml_useprim_caml_eq_float        (null)
caml_useprim_caml_equal           (null)
caml_useprim_caml_fill_string     (null)
caml_useprim_caml_float_array_compare  (null)
caml_useprim_caml_float_compare   (null)
caml_useprim_caml_float_compare_1xx2  (null)
caml_useprim_caml_float_of_int    (null)
caml_useprim_caml_float_operation_finalize  (null)
caml_useprim_caml_float_operation_initialize  (null)
caml_useprim_caml_ge_float        (null)
caml_useprim_caml_greaterequal    (null)
caml_useprim_caml_gt_float        (null)
caml_useprim_caml_int32_1arg      (null)
caml_useprim_caml_int32_2arg      (null)
caml_useprim_caml_int32_add       (null)
caml_useprim_caml_int32_and       (null)
caml_useprim_caml_int32_compare   (null)
caml_useprim_caml_int32_custom    (null)
caml_useprim_caml_int32_div       (null)
caml_useprim_caml_int32_mod       (null)
caml_useprim_caml_int32_neg       (null)
caml_useprim_caml_int32_of_int    (null)
caml_useprim_caml_int32_shift_right_unsigned  (null)
caml_useprim_caml_int32_sub       (null)
caml_useprim_caml_int32_to_int    (null)
caml_useprim_caml_int64_1arg      (null)
caml_useprim_caml_int64_2arg      (null)
caml_useprim_caml_int64_add       (null)
caml_useprim_caml_int64_and       (null)
caml_useprim_caml_int64_compare   (null)
caml_useprim_caml_int64_custom    (null)
caml_useprim_caml_int64_div       (null)
caml_useprim_caml_int64_mod       (null)
caml_useprim_caml_int64_neg       (null)
caml_useprim_caml_int64_of_int    (null)
caml_useprim_caml_int64_or_int32_to_int  (null)
caml_useprim_caml_int64_shift_right_unsigned  (null)
caml_useprim_caml_int64_sub       (null)
caml_useprim_caml_int64_to_int    (null)
caml_useprim_caml_int_compare     (null)
caml_useprim_caml_int_of_float    (null)
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 318


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_useprim_caml_int_of_string   (null)
caml_useprim_caml_is_printable    (null)
caml_useprim_caml_lessthan        (null)
caml_useprim_caml_lt_float        (null)
caml_useprim_caml_make_vect       (null)
caml_useprim_caml_ml_string_length  (null)
caml_useprim_caml_mul_float       (null)
caml_useprim_caml_neg_float       (null)
caml_useprim_caml_neq_float       (null)
caml_useprim_caml_notequal        (null)
caml_useprim_caml_pic_clear_bit   (null)
caml_useprim_caml_pic_read_reg    (null)
caml_useprim_caml_pic_set_bit     (null)
caml_useprim_caml_pic_test_bit    (null)
caml_useprim_caml_pic_tris_of_port  (null)
caml_useprim_caml_pic_write_reg   (null)
caml_useprim_caml_raise_ia        (null)
caml_useprim_caml_raise_ia_array_make  (null)
caml_useprim_caml_raise_ia_compare  (null)
caml_useprim_caml_raise_ia_index_out_of_bounds  (null)
caml_useprim_caml_raise_ia_index_out_of_bounds_string  (null)
caml_useprim_caml_raise_ia_string_create  (null)
caml_useprim_caml_raise_ios_failure  (null)
caml_useprim_caml_sleep_millis    (null)
caml_useprim_caml_string_compare  (null)
caml_useprim_caml_string_get      (null)
caml_useprim_caml_string_set      (null)
caml_useprim_caml_sub_float       (null)


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

00000000 : XXXX----XXXX---- --------XXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000000c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000001c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000002c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000003c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000004c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 319


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00000580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000005c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000006c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000007c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000008c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXX------------
00000900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000009c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000010c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000011c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000012c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 320


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00001300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000013c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000014c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000015c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXX---- XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000016c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000017c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000018c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000019c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 321


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00002080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000020c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000021c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000022c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000023c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000024c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000025c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000026c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000027c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000028c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000029c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 322


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00002e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00002fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000030c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000031c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000032c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000033c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000034c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000035c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000036c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000037c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000038c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000039c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 323


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00003b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000040c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000041c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000042c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000043c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000044c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000045c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000046c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000047c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000048c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 324


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00004900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000049c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000050c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000051c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000052c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000053c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000054c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000055c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 325


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00005680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000056c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000057c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000058c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000059c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000060c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000061c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000062c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000063c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               thermo_pure.asm10-29-2015  23:21:22         PAGE 326


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00006400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000064c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000065c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000066c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000067c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000068c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000069c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b80 : XXXXXXXXXXXXXXXX XXXX------------ ---------------- ----------------
00300000 : XXXXXXXXXXXXXX-- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used: 13761


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

