open Parsetree
open Asttypes
open Longident
open Ast
open Compiling
open Ast_helper

let rec tocaml_expression e   =

    match e with
    | IValue (Integer i) -> Exp.constant (Const_int i)  
    | ITuple t -> Exp.tuple (List.map tocaml_expression t)
    | IVariable (i,c) -> [%expr  [%e Exp.ident (ident_to_lid i) ] ]
    | IRef i -> [%expr Option.get ![%e Exp.ident (ident_to_lid i) ]  ]
    | IInfixOp (IDiff,e1,e2) ->
      [%expr [%e tocaml_expression e1 ] <> [%e tocaml_expression e2 ]]
    | IInfixOp (IEquals,e1,e2) ->
      [%expr [%e tocaml_expression e1 ] = [%e tocaml_expression e2 ]]
    | IInfixOp (IPlus,e1,e2) ->
      [%expr [%e tocaml_expression e1 ] + [%e tocaml_expression e2 ]]
    | IInfixOp (IMinus,e1,e2) ->
       [%expr [%e tocaml_expression e1 ] - [%e tocaml_expression e2 ]]
    | IInfixOp (ITimes,e1,e2) ->
       [%expr [%e tocaml_expression e1 ] * [%e tocaml_expression e2 ]]
    | IInfixOp (IDiv,e1,e2) ->
      [%expr [%e tocaml_expression e1 ] / [%e tocaml_expression e2 ]]
    | IAlternative (e1,e2,e3) -> 
      [%expr [%e Exp.ifthenelse
                [%expr [%e (tocaml_expression e1) ]]
                [%expr  [%e (tocaml_expression e2) ] ] 
                (Some ( [%expr  [%e tocaml_expression e3 ] ] ))  
                ] 
      ]
    | IUnit -> [%expr ()]
    | _ -> [%expr ()]
    )


let stringloc_of_ident i =
  {
    txt = i.content;
    loc = i.loc; 
  }

let tocaml_inits inits acc =
  let aux (p,e) acc =
    match e with
    | [%expr let [%p Ast_helper.Pat.var (stringloc_of_ident p)] =
               ref ([%e tocaml_expression e] in [%e acc] 
  in
  List.fold_left (fun acc i -> aux i acc) acc inits
  
let extract_node inode =
  let name = stringloc_of_ident inode.i_name in
  let inits = inode.i_inits in

  [%stri let [%p Pat.var name] =
           fun () ->
             [%e tocaml_inits inits (tocaml_step inode) ]
  ]
