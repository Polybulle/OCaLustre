gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001         processor 18f4620
               00002 
               00003         include "p18f4620.inc"
               00001         LIST
               00002 
               00003 ;==========================================================================
               00004 ;  MPASM PIC18F4620 processor include
               00005 ; 
               00006 ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
               00007 ;==========================================================================
               00008 
               01331         LIST
               00004 
300006 FFC5    00005         config  XINST = ON
               00006 
0000 00007 CAML_STOP_AND_COPY_GC
  00000001     00008 STACK_SIZE  EQU   0x1
  00000007     00009 HEAP_SIZE   EQU   0x7
               00010 
0000 00011 #define caml_useprim_caml_pic_set_bit
0000 00012 #define caml_useprim_caml_pic_clear_bit
0000 00013 #define caml_useprim_caml_pic_test_bit
               00014 
               00015         include "/usr/local/lib/ocapic/interp.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
               00012 ;;;;;;;|-------------------------------------|;;;;;;;
               00013 ;;;;;;;|                                     |;;;;;;;
               00014 ;;;;;;;|      CONVENTIONS, LIMITATIONS       |;;;;;;;
               00015 ;;;;;;;|                                     |;;;;;;;
               00016 ;;;;;;;|-------------------------------------|;;;;;;;
               00017 
               00018 ;;; * stack:    (@-) topL : topH : ... : bottomL : bottomH      (@+)
               00019 ;;; * heap:     (@-) block1 : block2 : ...                      (@+)
               00020 ;;; * block:    (@-) tag : size : b0L : b0H : b1L : b1H : ...   (@+)
               00021 ;;; * bytecode: (@-) op0 : arg0.0 : arg0.1 : op1 : arg1.0 : ... (@+)
               00022 ;;; * stack pointer:      FSR2
               00023 ;;; * heap pointer:       FSR1
               00024 ;;; * free usage pointer: FSR0
               00025 ;;; * the garbage collector overwrite FSR0
               00026 ;;; * external primitives: 128 maximum
               00027 ;;; * external argument number: 255 maximum
               00028 ;;; * pointer LSB = 0 ; integer LSB = 1
               00029 ;;; * collisions between heap address and program address forbidden
               00030 ;;; * 'stack size' mod 256 = 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00031 ;;; * 'heap size' mod 256 = 0
               00032 ;;; * CCALL semantics : environment not pushed
               00033 ;;; * different bytecode instruction argument sizes (1 or 2 bytes)
               00034 ;;; * absolute bytecode jump address
               00035 ;;; * atom tags <> 0
               00036 ;;; * atom in heap forbidden
               00037 ;;; * extraArgs < 128 => no more than 128 (function argument number + env size)
               00038 ;;; * no more than 127 values defined in a "let rec ... and ..."
               00039 ;;; * BSR = (@ACCU)H during VM execution
               00040 ;;; * custom comparaison primitives must not use TMP_REG_[6 -> E]
               00041 ;;; * custom hash primitives must not use TMP_REG_[5 -> E]
               00042         
               00043 ;;;;;;;|-------------------------------------|;;;;;;;
               00044 ;;;;;;;|                                     |;;;;;;;
               00045 ;;;;;;;|              CONSTANTS              |;;;;;;;
               00046 ;;;;;;;|                                     |;;;;;;;
               00047 ;;;;;;;|-------------------------------------|;;;;;;;
               00048 
  00000000     00049 HEAP1_ANCHOR            EQU     0x0
  00000007     00050 HEAP2_ANCHOR            EQU     HEAP_SIZE
               00051 
  000000F7     00052 CLOSURE_TAG             EQU     .247
  000000F8     00053 OBJECT_TAG              EQU     .248
  000000F9     00054 INFIX_TAG               EQU     .249
  000000FA     00055 FORWARD_TAG             EQU     .250
  000000FB     00056 NO_SCAN_TAG             EQU     .251
  000000FB     00057 ABSTRACT_TAG            EQU     .251
  000000FC     00058 STRING_TAG              EQU     .252
  000000FD     00059 DOUBLE_TAG              EQU     .253
  000000FE     00060 DOUBLE_ARRAY_TAG        EQU     .254
  000000FF     00061 CUSTOM_TAG              EQU     .255
               00062 
  00000000     00063 OUT_OF_MEMORY_IND       EQU     0x0
  00000002     00064 FAILURE_IND             EQU     0x2
  00000003     00065 INVALID_ARG_IND         EQU     0x3
  00000005     00066 DIVISION_BY_0_IND       EQU     0x5
  00000008     00067 STACK_OVERFLOW_IND      EQU     0x8
               00068 
  00000100     00069 OBJ_TAG_INT             EQU     .256
  00000101     00070 OBJ_TAG_OUT_OF_MEMORY   EQU     .257
               00071 
  00000F88     00072 ATOM0_ADR               EQU     0xF88
               00073 
  00000F80     00074 MAX_USER_RAM            EQU     0xF80 ; user ram = [0x000 ; 0xF80[
               00075 
               00076 
               00077 ;;;;;;;|-------------------------------------|;;;;;;;
               00078 ;;;;;;;|                                     |;;;;;;;
               00079 ;;;;;;;|              VARIABLES              |;;;;;;;
               00080 ;;;;;;;|                                     |;;;;;;;
               00081 ;;;;;;;|-------------------------------------|;;;;;;;
               00082 
  00000F54     00083 ENVL            EQU     (MAX_USER_RAM-0x2C) ; environment
  00000F55     00084 ENVH            EQU     (MAX_USER_RAM-0x2B)
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000F56     00085 ACCUL           EQU     (MAX_USER_RAM-0x2A) ; accumulator
  00000F57     00086 ACCUH           EQU     (MAX_USER_RAM-0x29)
  00000F58     00087 INT_FUN_L       EQU     (MAX_USER_RAM-0x28)
  00000F59     00088 INT_FUN_H       EQU     (MAX_USER_RAM-0x27)
  00000F5A     00089 OOM_TAG         EQU     (MAX_USER_RAM-0x26)
  00000F5B     00090 OOM_SIZE        EQU     (MAX_USER_RAM-0x25)
  00000F5C     00091 OOM_FIELD0_L    EQU     (MAX_USER_RAM-0x24)
  00000F5D     00092 OOM_FIELD0_H    EQU     (MAX_USER_RAM-0x23)
  00000F5E     00093 CUR_HEAP_END    EQU     (MAX_USER_RAM-0x22)
  00000F5F     00094 OTH_HEAP_END    EQU     (MAX_USER_RAM-0x21)
  00000F60     00095 TRAP_SPL        EQU     (MAX_USER_RAM-0x20) ; trapSp
  00000F61     00096 TRAP_SPH        EQU     (MAX_USER_RAM-0x1F)
  00000F62     00097 EXTRA_ARGS      EQU     (MAX_USER_RAM-0x1E) ; extraArgs (*2 + 1)
  00000F63     00098 GC_TMP_REG_1    EQU     (MAX_USER_RAM-0x1D) ; gc tmp registers
  00000F64     00099 GC_TMP_REG_2    EQU     (MAX_USER_RAM-0x1C)
  00000F65     00100 GC_TMP_REG_3    EQU     (MAX_USER_RAM-0x1B)
  00000F66     00101 GC_TMP_REG_4    EQU     (MAX_USER_RAM-0x1A)
  00000F67     00102 GC_TMP_REG_5    EQU     (MAX_USER_RAM-0x19)
  00000F68     00103 TMP_REG_1       EQU     (MAX_USER_RAM-0x18) ; interp/runtime tmp registers
  00000F69     00104 TMP_REG_2       EQU     (MAX_USER_RAM-0x17)
  00000F6A     00105 TMP_REG_3       EQU     (MAX_USER_RAM-0x16)
  00000F6B     00106 TMP_REG_4       EQU     (MAX_USER_RAM-0x15)
  00000F6C     00107 TMP_REG_5       EQU     (MAX_USER_RAM-0x14)
  00000F6D     00108 TMP_REG_6       EQU     (MAX_USER_RAM-0x13)
  00000F6E     00109 TMP_REG_7       EQU     (MAX_USER_RAM-0x12)
  00000F6F     00110 TMP_REG_8       EQU     (MAX_USER_RAM-0x11)
  00000F70     00111 TMP_REG_9       EQU     (MAX_USER_RAM-0x10)
  00000F71     00112 TMP_REG_A       EQU     (MAX_USER_RAM-0x0F)
  00000F72     00113 TMP_REG_B       EQU     (MAX_USER_RAM-0x0E)
  00000F73     00114 TMP_REG_C       EQU     (MAX_USER_RAM-0x0D)
  00000F74     00115 TMP_REG_D       EQU     (MAX_USER_RAM-0x0C)
  00000F75     00116 TMP_REG_E       EQU     (MAX_USER_RAM-0x0B)
  00000F76     00117 GC_COUNTER_L    EQU     (MAX_USER_RAM-0x0A) ; gc running counter
  00000F77     00118 GC_COUNTER_H    EQU     (MAX_USER_RAM-0x09)
  00000F78     00119 RAND_CUR_L      EQU     (MAX_USER_RAM-0x08)
  00000F79     00120 RAND_CUR_H      EQU     (MAX_USER_RAM-0x07)
  00000F7A     00121 INT_FLAGS_1     EQU     (MAX_USER_RAM-0x06)
  00000F7B     00122 INT_FLAGS_2     EQU     (MAX_USER_RAM-0x05)
  00000F7C     00123 INT_FLAGS_3     EQU     (MAX_USER_RAM-0x04)
  00000F7D     00124 INT_RUNS_1      EQU     (MAX_USER_RAM-0x03)
  00000F7E     00125 INT_RUNS_2      EQU     (MAX_USER_RAM-0x02)
  00000F7F     00126 INT_RUNS_3      EQU     (MAX_USER_RAM-0x01)
               00127 
               00128 
               00129 ;;;;;;;|-------------------------------------|;;;;;;;
               00130 ;;;;;;;|                                     |;;;;;;;
               00131 ;;;;;;;|        COMPUTED CONSTANTS           |;;;;;;;
               00132 ;;;;;;;|                                     |;;;;;;;
               00133 ;;;;;;;|-------------------------------------|;;;;;;;
               00134         
  00000F53     00135 STACK_ANCHOR            EQU     (ENVL-0x1)      ; stack from 0xF57 to 0xE00
               00136 
  00000006     00137 HEAP1_END               EQU     (HEAP1_ANCHOR + HEAP_SIZE - 0x1)        ; 0x6
  0000000D     00138 HEAP2_END               EQU     (HEAP2_ANCHOR + HEAP_SIZE - 0x1)        ; 0xD
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  0000000E     00139 STACK_END               EQU     ((high STACK_ANCHOR) - STACK_SIZE)      ; 0xE
               00140 
               00141 
               00142 ;;;;;;;|-------------------------------------|;;;;;;;
               00143 ;;;;;;;|                                     |;;;;;;;
               00144 ;;;;;;;|                MACROS               |;;;;;;;
               00145 ;;;;;;;|                                     |;;;;;;;
               00146 ;;;;;;;|-------------------------------------|;;;;;;;
               00147         
               00148         variable CPT_CUH = 0
               00149 M_CHECK_UNFULL_HEAP macro N
               00150                 movf    CUR_HEAP_END, W
               00151                 cpfseq  FSR1H
               00152                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00153                 movlw   (N * 0x2 + 0x2)
               00154                 addwf   FSR1L, W
               00155                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00156 
               00157                 call    caml_gc_exec
               00158 
               00159                 movf    CUR_HEAP_END, W
               00160                 cpfseq  FSR1H
               00161                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00162                 movlw   (N * 0x2 + 0x2)
               00163                 addwf   FSR1L, W
               00164                 btfsc   STATUS, C
               00165                 goto    caml_raise_out_of_memory
               00166 CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
               00167 CPT_CUH = CPT_CUH + 1
               00168         endm
               00169 
               00170 ;;;
               00171 
               00172         variable CPT_CUS
               00173 M_CHECK_UNFULL_STACK macro N
               00174                 movlw   STACK_END
               00175                 cpfseq  FSR2H
               00176                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
               00177                 movlw   -(0x2 * N)
               00178                 addwf   FSR2L, W
               00179                 btfss   STATUS, C
               00180                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00181 CHECK_UNFULL_STACK_END_#v(CPT_CUS)
               00182 CPT_CUS = CPT_CUS + 1
               00183         endm
               00184 
               00185 M_PUSH  macro
               00186                 movff   ACCUH, POSTDEC2
               00187                 movff   ACCUL, POSTDEC2
               00188                 movlw   (STACK_END - 0x1)
               00189                 cpfsgt  FSR2H
               00190                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00191         endm
               00192         
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00193 ;;;
               00194         
               00195 M_CONST macro N
               00196                 movlw   2 * N + 1
               00197                 movwf   ACCUL
               00198                 clrf    ACCUH
               00199         endm
               00200 
               00201 ;;;
               00202         
               00203 M_ACC   macro N
               00204                 movsf   [2 * N + 1], ACCUL
               00205                 movsf   [2 * N + 2], ACCUH
               00206         endm
               00207 
               00208 ;;;
               00209 
               00210 M_GETGLOBAL macro
               00211                 lfsr    FSR0, STACK_ANCHOR
               00212                 M_READ_ARG
               00213                 subwf   FSR0L, F
               00214                 movf    TABLAT, W
               00215                 subwfb  FSR0H, F
               00216                 movff   POSTDEC0, ACCUH
               00217                 movff   INDF0, ACCUL
               00218         endm
               00219         
               00220 ;;;
               00221         
               00222 M_READ_ARG macro
               00223                 tblrd*+
               00224                 movf    TABLAT, W
               00225                 tblrd*+
               00226         endm
               00227 
               00228 ;;;
               00229 
               00230 #if ((high caml_externals) & 0x1) != 0
               00231         error   "invalid constant caml_externals (high byte is odd)"
               00232 #endif
               00233         
               00234 M_CCALL macro
               00235                 movlw   ((high caml_externals) / 2)
               00236                 movwf   PCLATH
               00237                 tblrd*+
               00238                 rlcf    TABLAT, W
               00239                 rlcf    PCLATH, F
               00240                 callw
               00241                 movlw   high _THE_BIG_SWITCH
               00242                 movwf   PCLATH
               00243         endm
               00244         
               00245 ;;;
               00246 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00247 M_ATOM0 macro
               00248                 movlw   low ATOM0_ADR
               00249                 movwf   ACCUL
               00250                 movlw   high ATOM0_ADR
               00251                 movwf   ACCUH
               00252         endm
               00253         
               00254 
               00255 ;;;;;;;|-------------------------------------|;;;;;;;
               00256 ;;;;;;;|                                     |;;;;;;;
               00257 ;;;;;;;|                CODE                 |;;;;;;;
               00258 ;;;;;;;|                                     |;;;;;;;
               00259 ;;;;;;;|-------------------------------------|;;;;;;;
               00260 
0000           00261         org     0x00
0000 010F      00262         banksel ACCUL                           ; init BSR
0002 D00C      00263         bra     caml_virtual_machine
               00264 
0008           00265         org     0x08
0008 00266 low_interrupt_handler:
0008 EF52 F00B 00267         goto    asm_interrupt_handler
               00268 
0018           00269         org     0x18
0018 00270 high_interrupt_handler:
0018 EF52 F00B 00271         goto    asm_interrupt_handler
               00272 
001C 00273 caml_virtual_machine:
001C EE00 F000 00274         lfsr    FSR0, 0x0                       ; clear all user registers
0020 00275 _LOOP_INIT_REGISTERS:
0020 6AEE      00276         clrf    POSTINC0
0022 6AEE      00277         clrf    POSTINC0
0024 6AEE      00278         clrf    POSTINC0
0026 6AEE      00279         clrf    POSTINC0
0028 0E80      00280         movlw   low MAX_USER_RAM
002A 62E9      00281         cpfseq  FSR0L
002C D7F9      00282         bra     _LOOP_INIT_REGISTERS
002E 0E0F      00283         movlw   high MAX_USER_RAM
0030 62EA      00284         cpfseq  FSR0H
0032 D7F6      00285         bra     _LOOP_INIT_REGISTERS
               00286         
0034 0E06      00287         movlw   HEAP1_END                       ; init heap ends
0036 6F5E      00288         movwf   CUR_HEAP_END
0038 0E0D      00289         movlw   HEAP2_END
003A 6F5F      00290         movwf   OTH_HEAP_END
               00291 
003C 6AFB      00292         clrf    PCLATU                          ; init PCLAT{H,U}
003E 0E09      00293         movlw   high _THE_BIG_SWITCH
0040 6EFA      00294         movwf   PCLATH
               00295 
0042 6AF8      00296         clrf    TBLPTRU                         ; init TBLPTRU
               00297 
0044 EE10 F000 00298         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)    ; init heap pointer
0048 EE2F F053 00299         lfsr    FSR2, STACK_ANCHOR              ; init stack pointer
               00300 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004C 0E5C      00301         movlw   low caml_globals_init_stack     ; init globals
004E 6EF6      00302         movwf   TBLPTRL
0050 0E16      00303         movlw   high caml_globals_init_stack
0052 6EF7      00304         movwf   TBLPTRH
0054 D006      00305         bra     _LOOP_INIT_STACK_TEST           ; init stack bottom
0056 00306 _LOOP_INIT_STACK:
0056 0009      00307         tblrd*+
0058 50F5      00308         movf    TABLAT, W
005A 0009      00309         tblrd*+
005C CFF5 FFDD 00310         movff   TABLAT, POSTDEC2
0060 6EDD      00311         movwf   POSTDEC2
0062 00312 _LOOP_INIT_STACK_TEST:
0062 0E5E      00313         movlw   low caml_globals_init_heap
0064 62F6      00314         cpfseq  TBLPTRL
0066 D7F7      00315         bra     _LOOP_INIT_STACK
0068 0E16      00316         movlw   high caml_globals_init_heap
006A 62F7      00317         cpfseq  TBLPTRH
006C D7F4      00318         bra     _LOOP_INIT_STACK
               00319         
006E D006      00320         bra     _LOOP_INIT_HEAP_TEST            ; init heap bottom
0070 00321 _LOOP_INIT_HEAP:
0070 0009      00322         tblrd*+
0072 CFF5 FFE6 00323         movff   TABLAT, POSTINC1
0076 0009      00324         tblrd*+
0078 CFF5 FFE6 00325         movff   TABLAT, POSTINC1
007C 00326 _LOOP_INIT_HEAP_TEST:
007C 0E5E      00327         movlw   low caml_globals_init_end
007E 62F6      00328         cpfseq  TBLPTRL
0080 D7F7      00329         bra     _LOOP_INIT_HEAP
0082 0E16      00330         movlw   high caml_globals_init_end
0084 62F7      00331         cpfseq  TBLPTRH
0086 D7F4      00332         bra     _LOOP_INIT_HEAP
               00333 
0088 0E01      00334         movlw   0x1
008A 6F60      00335         movwf   TRAP_SPL                        ; init trapSp
008C 6F58      00336         movwf   INT_FUN_L                       ; init interruption catcher
008E 6F56      00337         movwf   ACCUL                           ; init ACCU
0090 6F54      00338         movwf   ENVL                            ; init ENV
0092 6F62      00339         movwf   EXTRA_ARGS                      ; init EXTRA_ARGS
0094 6F5B      00340         movwf   OOM_SIZE                        ; init Out_of_memory block
0096 6F5C      00341         movwf   OOM_FIELD0_L
               00342 
0098 0E0C      00343         movlw   low caml_bytecode               ; init bytecode pointer
009A 6EF6      00344         movwf   TBLPTRL
009C 0E16      00345         movlw   high caml_bytecode
009E 6EF7      00346         movwf   TBLPTRH
               00347 
00A0 EF93 F009 00348         goto    _THE_BIG_LOOP
               00349 
               00350 
               00351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00352 ;;;;;;;;                                   ;;;;;;;;
               00353 ;;;;;;;;       COMPARATIVES JUMPS          ;;;;;;;;
               00354 ;;;;;;;;                                   ;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00356 
00A4 00357 _BEQ:
               00358         M_READ_ARG
00A4 0009          M                 tblrd*+
00A6 50F5          M                 movf    TABLAT, W
00A8 0009          M                 tblrd*+
00AA 6356      00359         cpfseq  ACCUL
00AC D012      00360         bra     _SKIP_ARGUMENT
00AE 50F5      00361         movf    TABLAT, W
00B0 6357      00362         cpfseq  ACCUH
00B2 D00F      00363         bra     _SKIP_ARGUMENT
               00364         ;; fallthrough
               00365         
00B4 00366 _BRANCH_LOCAL_COPY:
               00367         M_READ_ARG
00B4 0009          M                 tblrd*+
00B6 50F5          M                 movf    TABLAT, W
00B8 0009          M                 tblrd*+
00BA 6EF6      00368         movwf   TBLPTRL
00BC 50F5      00369         movf    TABLAT, W
00BE 6EF7      00370         movwf   TBLPTRH
00C0 0012      00371         return
               00372 
00C2 00373 _BNEQ:
               00374         M_READ_ARG
00C2 0009          M                 tblrd*+
00C4 50F5          M                 movf    TABLAT, W
00C6 0009          M                 tblrd*+
00C8 6356      00375         cpfseq  ACCUL
00CA D7F4      00376         bra     _BRANCH_LOCAL_COPY
00CC 50F5      00377         movf    TABLAT, W
00CE 6357      00378         cpfseq  ACCUH
00D0 D7F1      00379         bra     _BRANCH_LOCAL_COPY
               00380         ;; fallthrough
               00381         
00D2 00382 _SKIP_ARGUMENT:
00D2 0E02      00383         movlw   0x2
00D4 26F6      00384         addwf   TBLPTRL, F
00D6 B0D8      00385         btfsc   STATUS, C
00D8 2AF7      00386         incf    TBLPTRH, F
00DA 0012      00387         return
               00388 
00DC 00389 _BLTINT:
00DC 0009      00390         tblrd*+                   ; TMP_REG_1 <- valL
00DE CFF5 FF68 00391         movff   TABLAT, TMP_REG_1
00E2 0009      00392         tblrd*+                   ; TABLAT <- valH + 0x80
00E4 0E80      00393         movlw   0x80
00E6 26F5      00394         addwf   TABLAT, F
00E8 5157      00395         movf    ACCUH, W          ; W <- ACCUH + 0x80
00EA 0F80      00396         addlw   0x80
00EC 5CF5      00397         subwf   TABLAT, W         ; TABLAT - W
00EE E102      00398         bnz     _BLTINT_L0        ; if TABLAT <> W then goto L0
00F0 5156      00399         movf    ACCUL, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00F2 5D68      00400         subwf   TMP_REG_1, W      ; valL - ACCUL
00F4 00401 _BLTINT_L0:
00F4 E2EE      00402         bc      _SKIP_ARGUMENT    ; if C = 1 then continue
00F6 D7DE      00403         bra     _BRANCH_LOCAL_COPY; else jump
               00404         
00F8 00405 _BLEINT:
00F8 5157      00406         movf    ACCUH, W          ; TMP_REG_1 <- ACCUH + 0x80
00FA 0F80      00407         addlw   0x80
00FC 6F68      00408         movwf   TMP_REG_1
00FE 0009      00409         tblrd*+                   ; TMP_REG_2 <- valL
0100 CFF5 FF69 00410         movff   TABLAT, TMP_REG_2
0104 0009      00411         tblrd*+                   ; W <- valH + 0x80
0106 50F5      00412         movf    TABLAT, W
0108 0F80      00413         addlw   0x80
010A 5D68      00414         subwf   TMP_REG_1, W      ; TMP_REG_1 - W
010C E102      00415         bnz     _BLEINT_L0        ; if TMP_REG_1 <> W then goto L0
010E 5169      00416         movf    TMP_REG_2, W
0110 5D56      00417         subwf   ACCUL, W          ; ACCUL - valL
0112 00418 _BLEINT_L0:
0112 E2D0      00419         bc      _BRANCH_LOCAL_COPY; if C = 1 then jump
0114 D7DE      00420         bra     _SKIP_ARGUMENT    ; else continue
               00421         
0116 00422 _BGTINT:
0116 5157      00423         movf    ACCUH, W          ; TMP_REG_1 <- ACCUH + 0x80
0118 0F80      00424         addlw   0x80
011A 6F68      00425         movwf   TMP_REG_1
011C 0009      00426         tblrd*+                   ; TMP_REG_2 <- valL
011E CFF5 FF69 00427         movff   TABLAT, TMP_REG_2
0122 0009      00428         tblrd*+                   ; W <- valH + 0x80
0124 50F5      00429         movf    TABLAT, W
0126 0F80      00430         addlw   0x80
0128 5D68      00431         subwf   TMP_REG_1, W      ; TMP_REG_1 - W
012A E102      00432         bnz     _BGTINT_L0        ; if TMP_REG_1 <> W then goto L0
012C 5169      00433         movf    TMP_REG_2, W
012E 5D56      00434         subwf   ACCUL, W          ; ACCUL - valL
0130 00435 _BGTINT_L0:
0130 E2D0      00436         bc      _SKIP_ARGUMENT    ; if C = 1 then continue
0132 D7C0      00437         bra     _BRANCH_LOCAL_COPY; else jump
               00438         
0134 00439 _BGEINT:
0134 0009      00440         tblrd*+                   ; TMP_REG_1 <- valL
0136 CFF5 FF68 00441         movff   TABLAT, TMP_REG_1
013A 0009      00442         tblrd*+                   ; TABLAT <- valH + 0x80
013C 0E80      00443         movlw   0x80
013E 26F5      00444         addwf   TABLAT, F
0140 5157      00445         movf    ACCUH, W          ; W <- ACCUH + 0x80
0142 0F80      00446         addlw   0x80
0144 5CF5      00447         subwf   TABLAT, W         ; TABLAT - W
0146 E102      00448         bnz     _BGEINT_L0        ; if TABLAT <> W then goto L0
0148 5156      00449         movf    ACCUL, W
014A 5D68      00450         subwf   TMP_REG_1, W      ; valL - ACCUL
014C 00451 _BGEINT_L0:
014C E2B3      00452         bc      _BRANCH_LOCAL_COPY; if C = 1 then jump
014E D7C1      00453         bra     _SKIP_ARGUMENT    ; else continue
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00454         
0150 00455 _BULTINT:
               00456         M_READ_ARG
0150 0009          M                 tblrd*+
0152 50F5          M                 movf    TABLAT, W
0154 0009          M                 tblrd*+
0156 6F68      00457         movwf   TMP_REG_1         ; TMP_REG_1 <- valL
0158 50F5      00458         movf    TABLAT, W         ; W <- valH
015A 5D57      00459         subwf   ACCUH, W          ; W <- ACCUH - valH
015C E3BA      00460         bnc     _SKIP_ARGUMENT    ; if ACCUH < valH then continue
015E E1AA      00461         bnz     _BRANCH_LOCAL_COPY; else if ACCUH <> valH then jump
0160 5168      00462         movf    TMP_REG_1, W      ; else (ACCUH = valH)  W <- valL
0162 6556      00463         cpfsgt  ACCUL             ; if ACCUL <= valL
0164 D7B6      00464         bra     _SKIP_ARGUMENT    ; then continue
0166 D7A6      00465         bra     _BRANCH_LOCAL_COPY; else jump
               00466         
0168 00467 _BUGEINT:
               00468         M_READ_ARG
0168 0009          M                 tblrd*+
016A 50F5          M                 movf    TABLAT, W
016C 0009          M                 tblrd*+
016E 6F68      00469         movwf   TMP_REG_1         ; TMP_REG_1 <- valL
0170 50F5      00470         movf    TABLAT, W         ; W <- valH
0172 5D57      00471         subwf   ACCUH, W          ; W <- ACCUH - valH
0174 E39F      00472         bnc     _BRANCH_LOCAL_COPY; if ACCUH < valH then jump
0176 E1AD      00473         bnz     _SKIP_ARGUMENT    ; else if ACCUH <> valH then continue
0178 5168      00474         movf    TMP_REG_1, W      ; else (ACCUH = valH)  W <- valL
017A 6556      00475         cpfsgt  ACCUL             ; if ACCUL <= valL
017C D79B      00476         bra     _BRANCH_LOCAL_COPY; then jump
017E D7A9      00477         bra     _SKIP_ARGUMENT    ; else continue
               00478 
               00479 
               00480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00481 ;;;;;;;;                                   ;;;;;;;;
               00482 ;;;;;;;;              STACK                ;;;;;;;;
               00483 ;;;;;;;;                                   ;;;;;;;;
               00484 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00485         
0180 00486 _ACC3_BEQ:
0180 E291      00487         bc      _BEQ
               00488         M_ACC   3
0182 EB07 FF56     M                 movsf   [2 * N + 1], ACCUL
0186 EB08 FF57     M                 movsf   [2 * N + 2], ACCUH
018A 0012      00489         return
               00490 
018C 00491 _ACC4_BNEQ:
018C E29A      00492         bc      _BNEQ
               00493         M_ACC   4
018E EB09 FF56     M                 movsf   [2 * N + 1], ACCUL
0192 EB0A FF57     M                 movsf   [2 * N + 2], ACCUH
0196 0012      00494         return
               00495 
0198 00496 _ACC5_BLTINT:
0198 E2A1      00497         bc      _BLTINT
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00498         M_ACC   5
019A EB0B FF56     M                 movsf   [2 * N + 1], ACCUL
019E EB0C FF57     M                 movsf   [2 * N + 2], ACCUH
01A2 0012      00499         return
               00500 
01A4 00501 _ACC6_BLEINT:
01A4 E2A9      00502         bc      _BLEINT
               00503         M_ACC   6
01A6 EB0D FF56     M                 movsf   [2 * N + 1], ACCUL
01AA EB0E FF57     M                 movsf   [2 * N + 2], ACCUH
01AE 0012      00504         return
               00505 
01B0 00506 _ACC7_BGTINT:
01B0 E2B2      00507         bc      _BGTINT
               00508         M_ACC   7
01B2 EB0F FF56     M                 movsf   [2 * N + 1], ACCUL
01B6 EB10 FF57     M                 movsf   [2 * N + 2], ACCUH
01BA 0012      00509         return
               00510 
01BC 00511 _PUSHACC1_BULTINT:
01BC E2C9      00512         bc      _BULTINT
               00513         M_PUSH
01BE CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01C2 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01C6 0E0D          M                 movlw   (STACK_END - 0x1)
01C8 64DA          M                 cpfsgt  FSR2H
01CA D392          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00514         M_ACC   1
01CC EB03 FF56     M                 movsf   [2 * N + 1], ACCUL
01D0 EB04 FF57     M                 movsf   [2 * N + 2], ACCUH
01D4 0012      00515         return
               00516         
01D6 00517 _PUSHACC2_BUGEINT:
01D6 E2C8      00518         bc      _BUGEINT
               00519         M_PUSH
01D8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01DC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01E0 0E0D          M                 movlw   (STACK_END - 0x1)
01E2 64DA          M                 cpfsgt  FSR2H
01E4 D385          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00520         M_ACC   2
01E6 EB05 FF56     M                 movsf   [2 * N + 1], ACCUL
01EA EB06 FF57     M                 movsf   [2 * N + 2], ACCUH
01EE 0012      00521         return
               00522         
01F0 00523 _PUSH_ULTINT:
01F0 E250      00524         bc      _ULTINT
               00525         M_PUSH
01F2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
01F6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
01FA 0E0D          M                 movlw   (STACK_END - 0x1)
01FC 64DA          M                 cpfsgt  FSR2H
01FE D378          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0200 0012      00526         return
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00527 
0202 00528 _PUSHACC0_UGEINT:
0202 E250      00529         bc      _UGEINT
               00530         M_PUSH
0204 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0208 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
020C 0E0D          M                 movlw   (STACK_END - 0x1)
020E 64DA          M                 cpfsgt  FSR2H
0210 D36F          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0212 0012      00531         return
               00532 
0214 00533 _ACC_BGEINT:
0214 E28F      00534         bc      _BGEINT
0216 CFDA FFEA 00535         movff   FSR2H, FSR0H
021A CFD9 FFE9 00536         movff   FSR2L, FSR0L
               00537         M_READ_ARG
021E 0009          M                 tblrd*+
0220 50F5          M                 movf    TABLAT, W
0222 0009          M                 tblrd*+
0224 26E9      00538         addwf   FSR0L, F
0226 50F5      00539         movf    TABLAT, W
0228 22EA      00540         addwfc  FSR0H, F
022A CFEC FF56 00541         movff   PREINC0, ACCUL
022E CFEC FF57 00542         movff   PREINC0, ACCUH
0232 0012      00543         return
               00544 
               00545 #ifdef caml_useprim_caml_set_interruption_handler
               00546 _INTRETURN:
               00547         goto    caml_interrupt_handler_return
               00548 _PUSHACC_INTRETURN:
               00549         bc      _INTRETURN
               00550 #else
0234 00551 _PUSHACC_INTRETURN:
               00552 #endif
0234 00553 _PUSHACC:
               00554         M_PUSH                  ; fallthrough
0234 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0238 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
023C 0E0D          M                 movlw   (STACK_END - 0x1)
023E 64DA          M                 cpfsgt  FSR2H
0240 D357          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0242 CFDA FFEA 00555         movff   FSR2H, FSR0H
0246 CFD9 FFE9 00556         movff   FSR2L, FSR0L
               00557         M_READ_ARG
024A 0009          M                 tblrd*+
024C 50F5          M                 movf    TABLAT, W
024E 0009          M                 tblrd*+
0250 26E9      00558         addwf   FSR0L, F
0252 50F5      00559         movf    TABLAT, W
0254 22EA      00560         addwfc  FSR0H, F
0256 CFEC FF56 00561         movff   PREINC0, ACCUL
025A CFEC FF57 00562         movff   PREINC0, ACCUH
025E 0012      00563         return
               00564 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00565 #ifdef caml_useprim_caml_set_interruption_handler
               00566 _INTRAISE:
               00567         goto    caml_interrupt_handler_raise
               00568 _POP_INTRAISE:
               00569         bc      _INTRAISE
               00570 #else
0260 00571 _POP_INTRAISE:
               00572 #endif
0260 00573 _POP:
               00574         M_READ_ARG
0260 0009          M                 tblrd*+
0262 50F5          M                 movf    TABLAT, W
0264 0009          M                 tblrd*+
0266 26D9      00575         addwf   FSR2L, F
0268 50F5      00576         movf    TABLAT, W
026A 22DA      00577         addwfc  FSR2H, F
026C 0012      00578         return
               00579         
026E 00580 _ASSIGN:
026E CFDA FFEA 00581         movff   FSR2H, FSR0H
0272 CFD9 FFE9 00582         movff   FSR2L, FSR0L
               00583         M_READ_ARG
0276 0009          M                 tblrd*+
0278 50F5          M                 movf    TABLAT, W
027A 0009          M                 tblrd*+
027C 26E9      00584         addwf   FSR0L, F
027E 50F5      00585         movf    TABLAT, W
0280 22EA      00586         addwfc  FSR0H, F
0282 CF56 FFEC 00587         movff   ACCUL, PREINC0
0286 CF57 FFEC 00588         movff   ACCUH, PREINC0
               00589         M_CONST 0
028A 0E01          M                 movlw   2 * N + 1
028C 6F56          M                 movwf   ACCUL
028E 6B57          M                 clrf    ACCUH
0290 0012      00590         return
               00591 
               00592 
               00593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00594 ;;;;;;;;                                   ;;;;;;;;
               00595 ;;;;;;;;      UNSIGNED COMPARAISON         ;;;;;;;;
               00596 ;;;;;;;;                                   ;;;;;;;;
               00597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00598 
0292 00599 _ULTINT:
0292 5157      00600         movf    ACCUH, W         ; W <- ACCUH
0294 6B57      00601         clrf    ACCUH            ; ACCUH <- 0
0296 5C02      00602         subwf   [0x2], W         ; STKH - W
0298 E311      00603         bnc     _POP_ACCUL_FALSE ; if C = 0 (<=> STK<ACCU) then ACCU <- FALSE
029A E10D      00604         bnz     _POP_ACCUL_TRUE  ; if Z = 0 (<=> STK>ACCU) then ACCU <- TRUE
029C 5156      00605         movf    ACCUL, W         ; W <- ACCUL
029E 6401      00606         cpfsgt  [0x1]            ; if STKL <= W
02A0 D00D      00607         bra     _POP_ACCUL_FALSE ; then ACCU <- FALSE
02A2 D009      00608         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
               00609 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02A4 00610 _UGEINT:
02A4 5157      00611         movf    ACCUH, W         ; W <- ACCUH
02A6 6B57      00612         clrf    ACCUH            ; ACCUH <- 0
02A8 5C02      00613         subwf   [0x2], W         ; STKH - W
02AA E305      00614         bnc     _POP_ACCUL_TRUE  ; if C = 0 (<=> STK<ACCU) then ACCU <- TRUE
02AC E107      00615         bnz     _POP_ACCUL_FALSE ; if Z = 0 (<=> STK>ACCU) then ACCU <- FALSE
02AE 5156      00616         movf    ACCUL, W         ; W <- ACCUL
02B0 6401      00617         cpfsgt  [0x1]            ; if STKL <= W
02B2 D001      00618         bra     _POP_ACCUL_TRUE  ; then ACCU <- TRUE
02B4 D003      00619         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00620 
02B6 00621 _POP_ACCUL_TRUE:
02B6 0E03      00622         movlw   0x3
02B8 6F56      00623         movwf   ACCUL
02BA E8C2      00624         addulnk 0x2
               00625 
02BC 00626 _POP_ACCUL_FALSE:
02BC 0E01      00627         movlw   0x1
02BE 6F56      00628         movwf   ACCUL
02C0 E8C2      00629         addulnk 0x2
               00630 
               00631 
               00632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00633 ;;;;;;;;                                   ;;;;;;;;
               00634 ;;;;;;;;            COMPARAISONS           ;;;;;;;;
               00635 ;;;;;;;;                                   ;;;;;;;;
               00636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00637 
02C2 00638 _EQ:
02C2 5156      00639         movf    ACCUL, W
02C4 6B56      00640         clrf    ACCUL
02C6 8156      00641         bsf     ACCUL, 0
02C8 8356      00642         bsf     ACCUL, 1
02CA 62DC      00643         cpfseq  PREINC2
02CC 9356      00644         bcf     ACCUL, 1
02CE 5157      00645         movf    ACCUH, W
02D0 62DC      00646         cpfseq  PREINC2
02D2 9356      00647         bcf     ACCUL, 1
02D4 6B57      00648         clrf    ACCUH
02D6 0012      00649         return
               00650         
02D8 00651 _NEQ:
02D8 5156      00652         movf    ACCUL, W
02DA 6B56      00653         clrf    ACCUL
02DC 8156      00654         bsf     ACCUL, 0
02DE 62DC      00655         cpfseq  PREINC2
02E0 8356      00656         bsf     ACCUL, 1
02E2 5157      00657         movf    ACCUH, W
02E4 62DC      00658         cpfseq  PREINC2
02E6 8356      00659         bsf     ACCUL, 1
02E8 6B57      00660         clrf    ACCUH
02EA 0012      00661         return
               00662         
02EC 00663 _LTINT:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02EC 5157      00664         movf    ACCUH, W         ; TMP_REG_1 <- ACCUH + 0x80
02EE 0F80      00665         addlw   0x80
02F0 6F68      00666         movwf   TMP_REG_1
02F2 6B57      00667         clrf    ACCUH            ; ACCUH <- 0
02F4 5002      00668         movf    [0x2], W         ; W <- STKH + 0x80
02F6 0F80      00669         addlw   0x80
02F8 5D68      00670         subwf   TMP_REG_1, W     ; TMP_REG_1 - W
02FA E102      00671         bnz     _LTINT_L0        ; if TMP_REG_1 <> W then goto L0
02FC 5001      00672         movf    [0x1], W
02FE 5D56      00673         subwf   ACCUL, W         ; ACCUL - STKL
0300 00674 _LTINT_L0:
0300 E2DD      00675         bc      _POP_ACCUL_FALSE ; if C = 1 then ACCU <- FALSE
0302 D7D9      00676         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
               00677         
0304 00678 _LEINT:
0304 0E80      00679         movlw   0x80             ; STKH <- STKH + 0x80
0306 2602      00680         addwf   [0x2], F
0308 5157      00681         movf    ACCUH, W         ; W <- ACCUH + 0x80
030A 0F80      00682         addlw   0x80
030C 6B57      00683         clrf    ACCUH            ; ACCUH <- 0
030E 5C02      00684         subwf   [0x2], W         ; STKH - W
0310 E102      00685         bnz     _LEINT_L0        ; if STKH <> W then goto L0
0312 5156      00686         movf    ACCUL, W
0314 5C01      00687         subwf   [0x1], W         ; STKL - ACCUL
0316 00688 _LEINT_L0:
0316 E2CF      00689         bc      _POP_ACCUL_TRUE  ; if C = 1 then ACCU <- TRUE
0318 D7D1      00690         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00691         
031A 00692 _GTINT:
031A 0E80      00693         movlw   0x80             ; STKH <- STKH + 0x80
031C 2602      00694         addwf   [0x2], F
031E 5157      00695         movf    ACCUH, W         ; W <- ACCUH + 0x80
0320 0F80      00696         addlw   0x80
0322 6B57      00697         clrf    ACCUH            ; ACCUH <- 0
0324 5C02      00698         subwf   [0x2], W         ; STKH - W
0326 E102      00699         bnz     _GTINT_L0        ; if STKH <> W then goto L0
0328 5156      00700         movf    ACCUL, W
032A 5C01      00701         subwf   [0x1], W         ; STKL - ACCUL
032C 00702 _GTINT_L0:
032C E2C7      00703         bc      _POP_ACCUL_FALSE ; if C = 1 then ACCU <- FALSE
032E D7C3      00704         bra     _POP_ACCUL_TRUE  ; else ACCU <- TRUE
               00705         
0330 00706 _GEINT:
0330 5157      00707         movf    ACCUH, W         ; TMP_REG_1 <- ACCUH + 0x80
0332 0F80      00708         addlw   0x80
0334 6F68      00709         movwf   TMP_REG_1
0336 6B57      00710         clrf    ACCUH            ; ACCUH <- 0
0338 5002      00711         movf    [0x2], W         ; W <- STKH + 0x80
033A 0F80      00712         addlw   0x80
033C 5D68      00713         subwf   TMP_REG_1, W     ; TMP_REG_1 - W
033E E102      00714         bnz     _GEINT_L0        ; if TMP_REG_1 <> W then goto L0
0340 5001      00715         movf    [0x1], W
0342 5D56      00716         subwf   ACCUL, W         ; ACCUL - STKL
0344 00717 _GEINT_L0:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0344 E2B8      00718         bc      _POP_ACCUL_TRUE  ; if C = 1 then ACCU <- TRUE
0346 D7BA      00719         bra     _POP_ACCUL_FALSE ; else ACCU <- FALSE
               00720 
               00721 
               00722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00723 ;;;;;;;;                                   ;;;;;;;;
               00724 ;;;;;;;;         OFFSETS / STACK           ;;;;;;;;
               00725 ;;;;;;;;                                   ;;;;;;;;
               00726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00727 
0348 00728 _OFFSETINT:
               00729         M_READ_ARG
0348 0009          M                 tblrd*+
034A 50F5          M                 movf    TABLAT, W
034C 0009          M                 tblrd*+
034E 2756      00730         addwf   ACCUL, F
0350 50F5      00731         movf    TABLAT, W
0352 2357      00732         addwfc  ACCUH, F
0354 0012      00733         return
               00734 
0356 00735 _OFFSETREF:
0356 CF56 FFE9 00736         movff   ACCUL, FSR0L
035A CF57 FFEA 00737         movff   ACCUH, FSR0H
               00738         M_READ_ARG
035E 0009          M                 tblrd*+
0360 50F5          M                 movf    TABLAT, W
0362 0009          M                 tblrd*+
0364 26EE      00739         addwf   POSTINC0, F
0366 50F5      00740         movf    TABLAT, W
0368 22EF      00741         addwfc  INDF0, F
036A 0012      00742         return
               00743 
036C 00744 _ACC0_OFFSETREF:
036C E2F4      00745         bc      _OFFSETREF
               00746         M_ACC   0
036E EB01 FF56     M                 movsf   [2 * N + 1], ACCUL
0372 EB02 FF57     M                 movsf   [2 * N + 2], ACCUH
0376 0012      00747         return
               00748         
               00749 
               00750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00751 ;;;;;;;;                                   ;;;;;;;;
               00752 ;;;;;;;;          OBJECTS / STACK          ;;;;;;;;
               00753 ;;;;;;;;                                   ;;;;;;;;
               00754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00755 
0378 00756 _GETMETHOD:
0378 5001      00757         movf    [0x1], W                ; FSR0 <- stack_top
037A 6EE9      00758         movwf   FSR0L
037C 5002      00759         movf    [0x2], W
037E 6EEA      00760         movwf   FSR0H
0380 CFEE FF68 00761         movff   POSTINC0, TMP_REG_1     ; TMP_REG_1 <- stack_top[0]L
0384 50EF      00762         movf    INDF0, W                ; W <- stack_top[0]H
0386 6EEA      00763         movwf   FSR0H                   ; FSR0 <- stack_top[0]
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0388 CF68 FFE9 00764         movff   TMP_REG_1, FSR0L
038C 0556      00765         decf    ACCUL, W                ; FSR0 <- FSR0 + 2*val_int(ACCU)
038E 26E9      00766         addwf   FSR0L, F
0390 5157      00767         movf    ACCUH, W
0392 22EA      00768         addwfc  FSR0H, F
0394 CFEE FF56 00769         movff   POSTINC0, ACCUL         ; ACCU <- *FSR0
0398 CFEE FF57 00770         movff   POSTINC0, ACCUH
039C 0012      00771         return
               00772 
039E 00773 _ACC2_GETMETHOD:
039E E2EC      00774         bc      _GETMETHOD
               00775         M_ACC   2
03A0 EB05 FF56     M                 movsf   [2 * N + 1], ACCUL
03A4 EB06 FF57     M                 movsf   [2 * N + 2], ACCUH
03A8 0012      00776         return
               00777 
03AA 00778 _GETPUBMET:
               00779         M_PUSH
03AA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
03AE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
03B2 0E0D          M                 movlw   (STACK_END - 0x1)
03B4 64DA          M                 cpfsgt  FSR2H
03B6 D29C          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
03B8 0009      00780         tblrd*+
03BA CFF5 FF56 00781         movff   TABLAT, ACCUL
03BE 0009      00782         tblrd*+
03C0 CFF5 FF57 00783         movff   TABLAT, ACCUH           ; fallthrough
03C4 00784 _GETDYNMET:
03C4 EB01 FFE9 00785         movsf   [0x1], FSR0L            ; FSR0 <- stack top
03C8 EB02 FFEA 00786         movsf   [0x2], FSR0H
03CC CFEE FF6B 00787         movff   POSTINC0, TMP_REG_4     ; methL = TMP_REG_4 <- low *FSR0
03D0 50EF      00788         movf    INDF0, W                ; methH = TMP_REG_5 <- high *FSR0
03D2 6F6C      00789         movwf   TMP_REG_5
03D4 6EEA      00790         movwf   FSR0H                   ; FSR0 <- meth
03D6 CF6B FFE9 00791         movff   TMP_REG_4, FSR0L
03DA 0E03      00792         movlw   0x3                     ; li = TMP_REG_1 <- 3
03DC 6F68      00793         movwf   TMP_REG_1
03DE CFEF FF69 00794         movff   INDF0, TMP_REG_2        ; hi = TMP_REG_2 <- FSR0[0]
03E2 00795 _GETMET_LOOP:
03E2 5168      00796         movf    TMP_REG_1, W            ; if li >= hi
03E4 6569      00797         cpfsgt  TMP_REG_2
03E6 D01D      00798         bra     _GETMET_END_LOOP        ; then goto _GETMET_END_LOOP else
03E8 2569      00799         addwf   TMP_REG_2, W            ; mi = TMP_REG_3 <- ((li + hi) >> 1) | 1
03EA 6F6A      00800         movwf   TMP_REG_3
03EC 336A      00801         rrcf    TMP_REG_3, F            ; (STATUS.C computed by addwf)
03EE 816A      00802         bsf     TMP_REG_3, 0
03F0 CF6C FFEA 00803         movff   TMP_REG_5, FSR0H        ; FSR0 <- TMP_REG_4:5 + TMP_REG_3 * 2
03F4 90D8      00804         bcf     STATUS, C
03F6 356A      00805         rlcf    TMP_REG_3, W
03F8 B0D8      00806         btfsc   STATUS, C
03FA 2AEA      00807         incf    FSR0H, F
03FC 256B      00808         addwf   TMP_REG_4, W
03FE 6EE9      00809         movwf   FSR0L
0400 B0D8      00810         btfsc   STATUS, C
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0402 2AEA      00811         incf    FSR0H, F
0404 E801      00812         addfsr  FSR0, 0x1
0406 50ED      00813         movf    POSTDEC0, W             ; if ACCU < *FSR0
0408 5D57      00814         subwf   ACCUH, W
040A E307      00815         bnc     _GETMET_THEN            ; then goto _GETMET_THEN
040C E103      00816         bnz     _GETMET_ELSE
040E 50EF      00817         movf    INDF0, W
0410 5D56      00818         subwf   ACCUL, W
0412 E303      00819         bnc     _GETMET_THEN            ; then goto _GETMET_THEN
0414 00820 _GETMET_ELSE:
0414 CF6A FF68 00821         movff   TMP_REG_3, TMP_REG_1    ; else li <- mi
0418 D7E4      00822         bra     _GETMET_LOOP            ; continue loop
041A 00823 _GETMET_THEN:
041A 0E02      00824         movlw   0x2                     ; hi <- mi - 2
041C 5D6A      00825         subwf   TMP_REG_3, W
041E 6F69      00826         movwf   TMP_REG_2
0420 D7E0      00827         bra     _GETMET_LOOP            ; continue loop
0422 00828 _GETMET_END_LOOP:
0422 CF6C FFEA 00829         movff   TMP_REG_5, FSR0H        ; FSR0 <- TMP_REG_4:5 + 2*(li & 0xFE)
0426 9168      00830         bcf     TMP_REG_1, 0
0428 90D8      00831         bcf     STATUS, C
042A 3568      00832         rlcf    TMP_REG_1, W
042C B0D8      00833         btfsc   STATUS, C
042E 2AEA      00834         incf    FSR0H, F
0430 256B      00835         addwf   TMP_REG_4, W
0432 6EE9      00836         movwf   FSR0L
0434 B0D8      00837         btfsc   STATUS, C
0436 2AEA      00838         incf    FSR0H, F
0438 CFEE FF56 00839         movff   POSTINC0, ACCUL         ; ACCU <- *FSR0
043C CFEF FF57 00840         movff   INDF0, ACCUH
0440 0012      00841         return
               00842 
0442 00843 _PUSHACC3_GETPUBMET:
0442 E2B3      00844         bc      _GETPUBMET
               00845         M_PUSH
0444 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0448 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
044C 0E0D          M                 movlw   (STACK_END - 0x1)
044E 64DA          M                 cpfsgt  FSR2H
0450 D24F          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00846         M_ACC   3
0452 EB07 FF56     M                 movsf   [2 * N + 1], ACCUL
0456 EB08 FF57     M                 movsf   [2 * N + 2], ACCUH
045A 0012      00847         return
               00848         
045C 00849 _PUSHACC4_GETDYNMET:
045C E2B3      00850         bc      _GETDYNMET
               00851         M_PUSH
045E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0462 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0466 0E0D          M                 movlw   (STACK_END - 0x1)
0468 64DA          M                 cpfsgt  FSR2H
046A D242          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               00852         M_ACC   4
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
046C EB09 FF56     M                 movsf   [2 * N + 1], ACCUL
0470 EB0A FF57     M                 movsf   [2 * N + 2], ACCUH
0474 0012      00853         return
               00854 
               00855         
               00856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00857 ;;;;;;;;                                   ;;;;;;;;
               00858 ;;;;;;;;           ENVIRONMENT             ;;;;;;;;
               00859 ;;;;;;;;                                   ;;;;;;;;
               00860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00861 
0476 00862 _PUSHENVACC1:
               00863         M_PUSH                  ; fallthrough
0476 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
047A CF56 FFDD     M                 movff   ACCUL, POSTDEC2
047E 0E0D          M                 movlw   (STACK_END - 0x1)
0480 64DA          M                 cpfsgt  FSR2H
0482 D236          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0484 00864 _ENVACC1:
0484 CF54 FFE9 00865         movff   ENVL, FSR0L
0488 CF55 FFEA 00866         movff   ENVH, FSR0H
048C E802      00867         addfsr  FSR0, 0x2
048E CFEE FF56 00868         movff   POSTINC0, ACCUL
0492 CFEF FF57 00869         movff   INDF0, ACCUH
0496 0012      00870         return
               00871 
0498 00872 _PUSHENVACC2:
               00873         M_PUSH                  ; fallthrough
0498 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
049C CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04A0 0E0D          M                 movlw   (STACK_END - 0x1)
04A2 64DA          M                 cpfsgt  FSR2H
04A4 D225          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04A6 00874 _ENVACC2:
04A6 CF54 FFE9 00875         movff   ENVL, FSR0L
04AA CF55 FFEA 00876         movff   ENVH, FSR0H
04AE E804      00877         addfsr  FSR0, 0x4
04B0 CFEE FF56 00878         movff   POSTINC0, ACCUL
04B4 CFEF FF57 00879         movff   INDF0, ACCUH
04B8 0012      00880         return
               00881 
04BA 00882 _PUSHENVACC3:
               00883         M_PUSH                  ; fallthrough
04BA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
04BE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04C2 0E0D          M                 movlw   (STACK_END - 0x1)
04C4 64DA          M                 cpfsgt  FSR2H
04C6 D214          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04C8 00884 _ENVACC3:
04C8 CF54 FFE9 00885         movff   ENVL, FSR0L
04CC CF55 FFEA 00886         movff   ENVH, FSR0H
04D0 E806      00887         addfsr  FSR0, 0x6
04D2 CFEE FF56 00888         movff   POSTINC0, ACCUL
04D6 CFEF FF57 00889         movff   INDF0, ACCUH
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
04DA 0012      00890         return
               00891 
04DC 00892 _PUSHENVACC4:
               00893         M_PUSH                  ; fallthrough
04DC CF57 FFDD     M                 movff   ACCUH, POSTDEC2
04E0 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
04E4 0E0D          M                 movlw   (STACK_END - 0x1)
04E6 64DA          M                 cpfsgt  FSR2H
04E8 D203          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
04EA 00894 _ENVACC4:
04EA CF54 FFE9 00895         movff   ENVL, FSR0L
04EE CF55 FFEA 00896         movff   ENVH, FSR0H
04F2 E808      00897         addfsr  FSR0, 0x8
04F4 CFEE FF56 00898         movff   POSTINC0, ACCUL
04F8 CFEF FF57 00899         movff   INDF0, ACCUH
04FC 0012      00900         return
               00901 
04FE 00902 _PUSHENVACC:
               00903         M_PUSH                  ; fallthrough
04FE CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0502 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0506 0E0D          M                 movlw   (STACK_END - 0x1)
0508 64DA          M                 cpfsgt  FSR2H
050A D1F2          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
050C 00904 _ENVACC:
050C CF54 FFE9 00905         movff   ENVL, FSR0L
0510 CF55 FFEA 00906         movff   ENVH, FSR0H
0514 0009      00907         tblrd*+
0516 50F5      00908         movf    TABLAT, W
0518 26E9      00909         addwf   FSR0L, F
051A B0D8      00910         btfsc   STATUS, C
051C 2AEA      00911         incf    FSR0H, F
051E 26E9      00912         addwf   FSR0L, F
0520 B0D8      00913         btfsc   STATUS, C
0522 2AEA      00914         incf    FSR0H, F
0524 CFEE FF56 00915         movff   POSTINC0, ACCUL
0528 CFEF FF57 00916         movff   INDF0, ACCUH
052C 0012      00917         return
               00918 
               00919 
               00920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00921 ;;;;;;;;                                   ;;;;;;;;
               00922 ;;;;;;;;               FIELDS              ;;;;;;;;
               00923 ;;;;;;;;                                   ;;;;;;;;
               00924 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00925 
052E 00926 _GETFIELD0:
052E CF56 FFE9 00927         movff   ACCUL, FSR0L
0532 CF57 FFEA 00928         movff   ACCUH, FSR0H
0536 CFEE FF56 00929         movff   POSTINC0, ACCUL
053A CFEF FF57 00930         movff   INDF0, ACCUH
053E 0012      00931         return
               00932 
0540 00933 _GETFIELD1:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0540 CF56 FFE9 00934         movff   ACCUL, FSR0L
0544 CF57 FFEA 00935         movff   ACCUH, FSR0H
0548 E802      00936         addfsr  FSR0, 0x2
054A CFEE FF56 00937         movff   POSTINC0, ACCUL
054E CFEF FF57 00938         movff   INDF0, ACCUH
0552 0012      00939         return
               00940 
0554 00941 _GETFIELD2:
0554 CF56 FFE9 00942         movff   ACCUL, FSR0L
0558 CF57 FFEA 00943         movff   ACCUH, FSR0H
055C E804      00944         addfsr  FSR0, 0x4
055E CFEE FF56 00945         movff   POSTINC0, ACCUL
0562 CFEF FF57 00946         movff   INDF0, ACCUH
0566 0012      00947         return
               00948 
0568 00949 _GETFIELD3:
0568 CF56 FFE9 00950         movff   ACCUL, FSR0L
056C CF57 FFEA 00951         movff   ACCUH, FSR0H
0570 E806      00952         addfsr  FSR0, 0x6
0572 CFEE FF56 00953         movff   POSTINC0, ACCUL
0576 CFEF FF57 00954         movff   INDF0, ACCUH
057A 0012      00955         return
               00956 
057C 00957 _PUSHGETGLOBALFIELD:
               00958         M_PUSH                  ; fallthrough
057C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0580 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0584 0E0D          M                 movlw   (STACK_END - 0x1)
0586 64DA          M                 cpfsgt  FSR2H
0588 D1B3          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
058A 00959 _GETGLOBALFIELD:
               00960         M_GETGLOBAL             ; fallthrough
058A EE0F F053     M                 lfsr    FSR0, STACK_ANCHOR
                   M                 M_READ_ARG
058E 0009          M                 tblrd*+
0590 50F5          M                 movf    TABLAT, W
0592 0009          M                 tblrd*+
0594 5EE9          M                 subwf   FSR0L, F
0596 50F5          M                 movf    TABLAT, W
0598 5AEA          M                 subwfb  FSR0H, F
059A CFED FF57     M                 movff   POSTDEC0, ACCUH
059E CFEF FF56     M                 movff   INDF0, ACCUL
05A2 00961 _GETFIELD:
05A2 CF56 FFE9 00962         movff   ACCUL, FSR0L
05A6 CF57 FFEA 00963         movff   ACCUH, FSR0H
05AA 0009      00964         tblrd*+
05AC 50F5      00965         movf    TABLAT, W
05AE 26E9      00966         addwf   FSR0L, F
05B0 B0D8      00967         btfsc   STATUS, C
05B2 2AEA      00968         incf    FSR0H, F
05B4 26E9      00969         addwf   FSR0L, F
05B6 B0D8      00970         btfsc   STATUS, C
05B8 2AEA      00971         incf    FSR0H, F
05BA CFEE FF56 00972         movff   POSTINC0, ACCUL
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
05BE CFEF FF57 00973         movff   INDF0, ACCUH
05C2 0012      00974         return
               00975 
05C4 00976 _SETFIELD0:
05C4 CF56 FFE9 00977         movff   ACCUL, FSR0L
05C8 CF57 FFEA 00978         movff   ACCUH, FSR0H
05CC CFDC FFEE 00979         movff   PREINC2, POSTINC0
05D0 CFDC FFEF 00980         movff   PREINC2, INDF0
               00981         M_CONST 0
05D4 0E01          M                 movlw   2 * N + 1
05D6 6F56          M                 movwf   ACCUL
05D8 6B57          M                 clrf    ACCUH
05DA 0012      00982         return
               00983 
05DC 00984 _SETFIELD1:
05DC CF56 FFE9 00985         movff   ACCUL, FSR0L
05E0 CF57 FFEA 00986         movff   ACCUH, FSR0H
05E4 E802      00987         addfsr  FSR0, 0x2
05E6 CFDC FFEE 00988         movff   PREINC2, POSTINC0
05EA CFDC FFEF 00989         movff   PREINC2, INDF0
               00990         M_CONST 0
05EE 0E01          M                 movlw   2 * N + 1
05F0 6F56          M                 movwf   ACCUL
05F2 6B57          M                 clrf    ACCUH
05F4 0012      00991         return
               00992 
05F6 00993 _SETFIELD2:
05F6 CF56 FFE9 00994         movff   ACCUL, FSR0L
05FA CF57 FFEA 00995         movff   ACCUH, FSR0H
05FE E804      00996         addfsr  FSR0, 0x4
0600 CFDC FFEE 00997         movff   PREINC2, POSTINC0
0604 CFDC FFEF 00998         movff   PREINC2, INDF0
               00999         M_CONST 0
0608 0E01          M                 movlw   2 * N + 1
060A 6F56          M                 movwf   ACCUL
060C 6B57          M                 clrf    ACCUH
060E 0012      01000         return
               01001 
0610 01002 _SETFIELD3:
0610 CF56 FFE9 01003         movff   ACCUL, FSR0L
0614 CF57 FFEA 01004         movff   ACCUH, FSR0H
0618 E806      01005         addfsr  FSR0, 0x6
061A CFDC FFEE 01006         movff   PREINC2, POSTINC0
061E CFDC FFEF 01007         movff   PREINC2, INDF0
               01008         M_CONST 0
0622 0E01          M                 movlw   2 * N + 1
0624 6F56          M                 movwf   ACCUL
0626 6B57          M                 clrf    ACCUH
0628 0012      01009         return
               01010 
062A 01011 _SETFIELD:
062A CF56 FFE9 01012         movff   ACCUL, FSR0L
062E CF57 FFEA 01013         movff   ACCUH, FSR0H
0632 0009      01014         tblrd*+
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0634 50F5      01015         movf    TABLAT, W
0636 26E9      01016         addwf   FSR0L, F
0638 B0D8      01017         btfsc   STATUS, C
063A 2AEA      01018         incf    FSR0H, F
063C 26E9      01019         addwf   FSR0L, F
063E B0D8      01020         btfsc   STATUS, C
0640 2AEA      01021         incf    FSR0H, F
0642 CFDC FFEE 01022         movff   PREINC2, POSTINC0
0646 CFDC FFEF 01023         movff   PREINC2, INDF0
               01024         M_CONST 0
064A 0E01          M                 movlw   2 * N + 1
064C 6F56          M                 movwf   ACCUL
064E 6B57          M                 clrf    ACCUH
0650 0012      01025         return
               01026 
0652 01027 _VECTLENGTH:
0652 CF56 FFE9 01028         movff   ACCUL, FSR0L
0656 CF57 FFEA 01029         movff   ACCUH, FSR0H
065A 6B57      01030         clrf    ACCUH
065C E902      01031         subfsr  FSR0, 0x2
065E 50EE      01032         movf    POSTINC0, W
0660 0AFE      01033         xorlw   DOUBLE_ARRAY_TAG
0662 E005      01034         bz      _VECTLENGTH_DOUBLE_ARRAY
0664 80D8      01035         bsf     STATUS, C
0666 34EF      01036         rlcf    INDF0, W
0668 6F56      01037         movwf   ACCUL
066A 3757      01038         rlcf    ACCUH, F
066C 0012      01039         return
066E 01040 _VECTLENGTH_DOUBLE_ARRAY:
066E CFEF FF56 01041         movff   INDF0, ACCUL
0672 8156      01042         bsf     ACCUL, 0
0674 0012      01043         return
               01044 
0676 01045 _GETVECTITEM:
0676 04DC      01046         decf    PREINC2, W
0678 2556      01047         addwf   ACCUL, W
067A 6EE9      01048         movwf   FSR0L
067C 5157      01049         movf    ACCUH, W
067E 20DC      01050         addwfc  PREINC2, W
0680 6EEA      01051         movwf   FSR0H
0682 CFEE FF56 01052         movff   POSTINC0, ACCUL
0686 CFEF FF57 01053         movff   INDF0, ACCUH
068A 0012      01054         return
               01055 
068C 01056 _SETVECTITEM:
068C 04DC      01057         decf    PREINC2, W
068E 2556      01058         addwf   ACCUL, W
0690 6EE9      01059         movwf   FSR0L
0692 5157      01060         movf    ACCUH, W
0694 20DC      01061         addwfc  PREINC2, W
0696 6EEA      01062         movwf   FSR0H
0698 CFDC FFEE 01063         movff   PREINC2, POSTINC0
069C CFDC FFEF 01064         movff   PREINC2, INDF0
               01065         M_CONST 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
06A0 0E01          M                 movlw   2 * N + 1
06A2 6F56          M                 movwf   ACCUL
06A4 6B57          M                 clrf    ACCUH
06A6 0012      01066         return
               01067         
06A8 01068 _GETSTRINGCHAR:
06A8 90D8      01069         bcf     STATUS, C
06AA 3202      01070         rrcf    [0x2], F
06AC 30DC      01071         rrcf    PREINC2, W
06AE 2556      01072         addwf   ACCUL, W
06B0 6EE9      01073         movwf   FSR0L
06B2 5157      01074         movf    ACCUH, W
06B4 20DC      01075         addwfc  PREINC2, W
06B6 6EEA      01076         movwf   FSR0H
06B8 6B57      01077         clrf    ACCUH
06BA 80D8      01078         bsf     STATUS, C
06BC 34EF      01079         rlcf    INDF0, W
06BE 3757      01080         rlcf    ACCUH, F
06C0 6F56      01081         movwf   ACCUL
06C2 0012      01082         return
               01083 
06C4 01084 _SETSTRINGCHAR:
06C4 90D8      01085         bcf     STATUS, C
06C6 3202      01086         rrcf    [0x2], F
06C8 3001      01087         rrcf    [0x1], W
06CA 2556      01088         addwf   ACCUL, W
06CC 6EE9      01089         movwf   FSR0L
06CE 5157      01090         movf    ACCUH, W
06D0 2002      01091         addwfc  [0x2], W
06D2 6EEA      01092         movwf   FSR0H
06D4 3004      01093         rrcf    [0x4], W ; STATUS.C ignored
06D6 3003      01094         rrcf    [0x3], W
06D8 6EEF      01095         movwf   INDF0
               01096         M_CONST 0
06DA 0E01          M                 movlw   2 * N + 1
06DC 6F56          M                 movwf   ACCUL
06DE 6B57          M                 clrf    ACCUH
06E0 E8C4      01097         addulnk 0x4
               01098 
               01099 
               01100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01101 ;;;;;;;;                                   ;;;;;;;;
               01102 ;;;;;;;;              CONSTANTS            ;;;;;;;;
               01103 ;;;;;;;;                                   ;;;;;;;;
               01104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01105 
06E2 01106 _PUSHCONST0:
               01107         M_PUSH
06E2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
06E6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
06EA 0E0D          M                 movlw   (STACK_END - 0x1)
06EC 64DA          M                 cpfsgt  FSR2H
06EE D100          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
06F0 01108 _CONST0:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01109         M_CONST 0
06F0 0E01          M                 movlw   2 * N + 1
06F2 6F56          M                 movwf   ACCUL
06F4 6B57          M                 clrf    ACCUH
06F6 0012      01110         return
               01111 
06F8 01112 _PUSHCONST1:
               01113         M_PUSH                  ; fallthrough
06F8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
06FC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0700 0E0D          M                 movlw   (STACK_END - 0x1)
0702 64DA          M                 cpfsgt  FSR2H
0704 D0F5          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0706 01114 _CONST1:
               01115         M_CONST 1
0706 0E03          M                 movlw   2 * N + 1
0708 6F56          M                 movwf   ACCUL
070A 6B57          M                 clrf    ACCUH
070C 0012      01116         return
               01117 
070E 01118 _PUSHCONST2:
               01119         M_PUSH                  ; fallthrough
070E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0712 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0716 0E0D          M                 movlw   (STACK_END - 0x1)
0718 64DA          M                 cpfsgt  FSR2H
071A D0EA          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
071C 01120 _CONST2:
               01121         M_CONST 2
071C 0E05          M                 movlw   2 * N + 1
071E 6F56          M                 movwf   ACCUL
0720 6B57          M                 clrf    ACCUH
0722 0012      01122         return
               01123 
0724 01124 _PUSHCONST3:
               01125         M_PUSH                  ; fallthrough
0724 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0728 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
072C 0E0D          M                 movlw   (STACK_END - 0x1)
072E 64DA          M                 cpfsgt  FSR2H
0730 D0DF          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0732 01126 _CONST3:
               01127         M_CONST 3
0732 0E07          M                 movlw   2 * N + 1
0734 6F56          M                 movwf   ACCUL
0736 6B57          M                 clrf    ACCUH
0738 0012      01128         return
               01129 
073A 01130 _PUSHCONST:
               01131         M_PUSH                  ; fallthrough
073A CF57 FFDD     M                 movff   ACCUH, POSTDEC2
073E CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0742 0E0D          M                 movlw   (STACK_END - 0x1)
0744 64DA          M                 cpfsgt  FSR2H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0746 D0D4          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0748 01132 _CONSTINT:
0748 0009      01133         tblrd*+
074A CFF5 FF56 01134         movff   TABLAT, ACCUL
074E 0009      01135         tblrd*+
0750 CFF5 FF57 01136         movff   TABLAT, ACCUH
0754 0012      01137         return
               01138         
               01139 
               01140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01141 ;;;;;;;;                                   ;;;;;;;;
               01142 ;;;;;;;;              LOGICAL              ;;;;;;;;
               01143 ;;;;;;;;                                   ;;;;;;;;
               01144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01145 
0756 01146 _ANDINT:
0756 50DC      01147         movf    PREINC2, W
0758 1756      01148         andwf   ACCUL, F
075A 50DC      01149         movf    PREINC2, W
075C 1757      01150         andwf   ACCUH, F
075E 0012      01151         return
               01152 
0760 01153 _ORINT:
0760 50DC      01154         movf    PREINC2, W
0762 1356      01155         iorwf   ACCUL, F
0764 50DC      01156         movf    PREINC2, W
0766 1357      01157         iorwf   ACCUH, F
0768 0012      01158         return
               01159 
076A 01160 _XORINT:
076A 50DC      01161         movf    PREINC2, W
076C 1B56      01162         xorwf   ACCUL, F
076E 50DC      01163         movf    PREINC2, W
0770 1B57      01164         xorwf   ACCUH, F
0772 8156      01165         bsf     ACCUL, 0
0774 0012      01166         return
               01167 
               01168 
               01169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01170 ;;;;;;;;                                   ;;;;;;;;
               01171 ;;;;;;;;              SHIFTS               ;;;;;;;;
               01172 ;;;;;;;;                                   ;;;;;;;;
               01173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01174 
0776 01175 _LSLINT:
0776 90D8      01176         bcf     STATUS, C
0778 3201      01177         rrcf    [0x1], F
077A E007      01178         bz      _END_LSLINT
077C 9156      01179         bcf     ACCUL, 0
077E 01180 _LOOP_LSLINT:
077E 90D8      01181         bcf     STATUS, C
0780 3756      01182         rlcf    ACCUL, F
0782 3757      01183         rlcf    ACCUH, F
0784 2E01      01184         decfsz  [0x1], F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0786 D7FB      01185         bra     _LOOP_LSLINT
0788 8156      01186         bsf     ACCUL, 0
078A 01187 _END_LSLINT:
078A E8C2      01188         addulnk 0x2
               01189         
078C 01190 _LSRINT:
078C 90D8      01191         bcf     STATUS, C
078E 3201      01192         rrcf    [0x1], F
0790 E006      01193         bz      _END_LSRINT
0792 01194 _LOOP_LSRINT:
0792 90D8      01195         bcf     STATUS, C
0794 3357      01196         rrcf    ACCUH, F
0796 3356      01197         rrcf    ACCUL, F
0798 2E01      01198         decfsz  [0x1], F
079A D7FB      01199         bra     _LOOP_LSRINT
079C 8156      01200         bsf     ACCUL, 0
079E 01201 _END_LSRINT:
079E E8C2      01202         addulnk 0x2
               01203         
07A0 01204 _ASRINT:
07A0 90D8      01205         bcf     STATUS, C
07A2 3201      01206         rrcf    [0x1], F
07A4 E006      01207         bz      _END_ASRINT
07A6 01208 _LOOP_ASRINT:
07A6 3557      01209         rlcf    ACCUH, W ; STATUS.C ignored
07A8 3357      01210         rrcf    ACCUH, F
07AA 3356      01211         rrcf    ACCUL, F
07AC 2E01      01212         decfsz  [0x1], F
07AE D7FB      01213         bra     _LOOP_ASRINT
07B0 8156      01214         bsf     ACCUL, 0
07B2 01215 _END_ASRINT:
07B2 E8C2      01216         addulnk 0x2
               01217         
               01218 
               01219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01220 ;;;;;;;;                                   ;;;;;;;;
               01221 ;;;;;;;;               CCALLS              ;;;;;;;;
               01222 ;;;;;;;;                                   ;;;;;;;;
               01223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01224 
07B4 01225 _CCALL1:
               01226         M_CCALL
07B4 0E0B          M                 movlw   ((high caml_externals) / 2)
07B6 6EFA          M                 movwf   PCLATH
07B8 0009          M                 tblrd*+
07BA 34F5          M                 rlcf    TABLAT, W
07BC 36FA          M                 rlcf    PCLATH, F
07BE 0014          M                 callw
07C0 0E09          M                 movlw   high _THE_BIG_SWITCH
07C2 6EFA          M                 movwf   PCLATH
07C4 0012      01227         return
               01228 
07C6 01229 _CCALL2:
               01230         M_CCALL
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
07C6 0E0B          M                 movlw   ((high caml_externals) / 2)
07C8 6EFA          M                 movwf   PCLATH
07CA 0009          M                 tblrd*+
07CC 34F5          M                 rlcf    TABLAT, W
07CE 36FA          M                 rlcf    PCLATH, F
07D0 0014          M                 callw
07D2 0E09          M                 movlw   high _THE_BIG_SWITCH
07D4 6EFA          M                 movwf   PCLATH
07D6 E8C2      01231         addulnk 0x2
               01232 
07D8 01233 _CCALL3:
               01234         M_CCALL
07D8 0E0B          M                 movlw   ((high caml_externals) / 2)
07DA 6EFA          M                 movwf   PCLATH
07DC 0009          M                 tblrd*+
07DE 34F5          M                 rlcf    TABLAT, W
07E0 36FA          M                 rlcf    PCLATH, F
07E2 0014          M                 callw
07E4 0E09          M                 movlw   high _THE_BIG_SWITCH
07E6 6EFA          M                 movwf   PCLATH
07E8 E8C4      01235         addulnk 0x4
               01236 
07EA 01237 _CCALL4:
               01238         M_CCALL
07EA 0E0B          M                 movlw   ((high caml_externals) / 2)
07EC 6EFA          M                 movwf   PCLATH
07EE 0009          M                 tblrd*+
07F0 34F5          M                 rlcf    TABLAT, W
07F2 36FA          M                 rlcf    PCLATH, F
07F4 0014          M                 callw
07F6 0E09          M                 movlw   high _THE_BIG_SWITCH
07F8 6EFA          M                 movwf   PCLATH
07FA E8C6      01239         addulnk 0x6
               01240 
07FC 01241 _CCALL5:
               01242         M_CCALL
07FC 0E0B          M                 movlw   ((high caml_externals) / 2)
07FE 6EFA          M                 movwf   PCLATH
0800 0009          M                 tblrd*+
0802 34F5          M                 rlcf    TABLAT, W
0804 36FA          M                 rlcf    PCLATH, F
0806 0014          M                 callw
0808 0E09          M                 movlw   high _THE_BIG_SWITCH
080A 6EFA          M                 movwf   PCLATH
080C E8C8      01243         addulnk 0x8
               01244 
080E 01245 _CCALL:
               01246         M_CCALL
080E 0E0B          M                 movlw   ((high caml_externals) / 2)
0810 6EFA          M                 movwf   PCLATH
0812 0009          M                 tblrd*+
0814 34F5          M                 rlcf    TABLAT, W
0816 36FA          M                 rlcf    PCLATH, F
0818 0014          M                 callw
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
081A 0E09          M                 movlw   high _THE_BIG_SWITCH
081C 6EFA          M                 movwf   PCLATH
081E 0009      01247         tblrd*+
0820 50F5      01248         movf    TABLAT, W
0822 26D9      01249         addwf   FSR2L, F
0824 B0D8      01250         btfsc   STATUS, C
0826 2ADA      01251         incf    FSR2H, F
0828 26D9      01252         addwf   FSR2L, F
082A B0D8      01253         btfsc   STATUS, C
082C 2ADA      01254         incf    FSR2H, F
082E 0012      01255         return
               01256 
               01257 
               01258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01259 ;;;;;;;;                                   ;;;;;;;;
               01260 ;;;;;;;;              JUMPS                ;;;;;;;;
               01261 ;;;;;;;;                                   ;;;;;;;;
               01262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01263 
0830 01264 _BRANCH:
               01265         M_READ_ARG
0830 0009          M                 tblrd*+
0832 50F5          M                 movf    TABLAT, W
0834 0009          M                 tblrd*+
0836 6EF6      01266         movwf   TBLPTRL
0838 50F5      01267         movf    TABLAT, W
083A 6EF7      01268         movwf   TBLPTRH
083C 0012      01269         return
               01270 
083E 01271 _BRANCHIF:
083E 0556      01272         decf    ACCUL, W
0840 1157      01273         iorwf   ACCUH, W
0842 E1F6      01274         bnz     _BRANCH
0844 0E02      01275         movlw   0x2
0846 26F6      01276         addwf   TBLPTRL, F
0848 B0D8      01277         btfsc   STATUS, C
084A 2AF7      01278         incf    TBLPTRH, F
084C 0012      01279         return
               01280 
084E 01281 _BRANCHIFNOT:
084E 0556      01282         decf    ACCUL, W
0850 1157      01283         iorwf   ACCUH, W
0852 E0EE      01284         bz      _BRANCH
0854 0E02      01285         movlw   0x2
0856 26F6      01286         addwf   TBLPTRL, F
0858 B0D8      01287         btfsc   STATUS, C
085A 2AF7      01288         incf    TBLPTRH, F
085C 0012      01289         return
               01290 
085E 01291 _SWITCH:
085E B156      01292         btfsc   ACCUL, 0          ; if isint(ACCU)
0860 D01B      01293         bra     _SWITCH_LONG      ; then goto _SWITCH_LONG else
0862 0009      01294         tblrd*+                   ; TABLAT <- sizeLong
0864 50F5      01295         movf    TABLAT, W         ; TBLPTR <- TBLPTR + 2*sizeLong
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0866 26F6      01296         addwf   TBLPTRL, F
0868 B0D8      01297         btfsc   STATUS, C
086A 2AF7      01298         incf    TBLPTRH, F
086C 26F6      01299         addwf   TBLPTRL, F
086E B0D8      01300         btfsc   STATUS, C
0870 2AF7      01301         incf    TBLPTRH, F
0872 CF56 FFE9 01302         movff   ACCUL, FSR0L      ; TBLPTR <- TBLPTR + 2*tag(ACCU)
0876 CF57 FFEA 01303         movff   ACCUH, FSR0H
087A E902      01304         subfsr  FSR0, 0x2
087C 50EF      01305         movf    INDF0, W
087E 26F6      01306         addwf   TBLPTRL, F
0880 B0D8      01307         btfsc   STATUS, C
0882 2AF7      01308         incf    TBLPTRH, F
0884 26F6      01309         addwf   TBLPTRL, F
0886 B0D8      01310         btfsc   STATUS, C
0888 2AF7      01311         incf    TBLPTRH, F
               01312         M_READ_ARG                ; TBLPTR <- *TBLPTR
088A 0009          M                 tblrd*+
088C 50F5          M                 movf    TABLAT, W
088E 0009          M                 tblrd*+
0890 CFF5 FFF7 01313         movff   TABLAT, TBLPTRH
0894 6EF6      01314         movwf   TBLPTRL
0896 0012      01315         return
0898 01316 _SWITCH_LONG:
0898 5156      01317         movf    ACCUL, W          ; TBLPTR <- TBLPTR + 2*int_val(ACCU) + 1
089A 26F6      01318         addwf   TBLPTRL, F
089C 5157      01319         movf    ACCUH, W
089E 22F7      01320         addwfc  TBLPTRH, F
               01321         M_READ_ARG                ; TBLPTR <- *TBLPTR
08A0 0009          M                 tblrd*+
08A2 50F5          M                 movf    TABLAT, W
08A4 0009          M                 tblrd*+
08A6 6EF6      01322         movwf   TBLPTRL
08A8 CFF5 FFF7 01323         movff   TABLAT, TBLPTRH
08AC 0012      01324         return
               01325 
               01326 
               01327 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01328 ;;;;;;;;                                   ;;;;;;;;
               01329 ;;;;;;;;             GLOBALS               ;;;;;;;;
               01330 ;;;;;;;;                                   ;;;;;;;;
               01331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01332 
08AE 01333 _SETGLOBAL:
08AE EE0F F053 01334         lfsr    FSR0, STACK_ANCHOR
               01335         M_READ_ARG
08B2 0009          M                 tblrd*+
08B4 50F5          M                 movf    TABLAT, W
08B6 0009          M                 tblrd*+
08B8 5EE9      01336         subwf   FSR0L, F
08BA 50F5      01337         movf    TABLAT, W
08BC 5AEA      01338         subwfb  FSR0H, F
08BE CF57 FFED 01339         movff   ACCUH, POSTDEC0
08C2 CF56 FFED 01340         movff   ACCUL, POSTDEC0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
08C6 0012      01341         return
               01342 
08C8 01343 _PUSHGETGLOBAL:
               01344         M_PUSH                  ; fallthrough
08C8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
08CC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
08D0 0E0D          M                 movlw   (STACK_END - 0x1)
08D2 64DA          M                 cpfsgt  FSR2H
08D4 D00D          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
08D6 01345 _GETGLOBAL:
               01346         M_GETGLOBAL
08D6 EE0F F053     M                 lfsr    FSR0, STACK_ANCHOR
                   M                 M_READ_ARG
08DA 0009          M                 tblrd*+
08DC 50F5          M                 movf    TABLAT, W
08DE 0009          M                 tblrd*+
08E0 5EE9          M                 subwf   FSR0L, F
08E2 50F5          M                 movf    TABLAT, W
08E4 5AEA          M                 subwfb  FSR0H, F
08E6 CFED FF57     M                 movff   POSTDEC0, ACCUH
08EA CFEF FF56     M                 movff   INDF0, ACCUL
08EE 0012      01347         return
               01348 
               01349 
               01350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01351 ;;;;;;;;                                   ;;;;;;;;
               01352 ;;;;;;;;               TOOLS               ;;;;;;;;
               01353 ;;;;;;;;                                   ;;;;;;;;
               01354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01355 
08F0 01356 _INDIRECT_CAML_RAISE_STACK_OVERFLOW:
08F0 EFCD F009 01357         goto    caml_raise_stack_overflow
               01358         
               01359 
               01360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01361 ;;;;;;;;                                   ;;;;;;;;
               01362 ;;;;;;;;          THE BIG SWITCH           ;;;;;;;;
               01363 ;;;;;;;;                                   ;;;;;;;;
               01364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01365 
0900           01366         org     0x900
0900 01367 _THE_BIG_SWITCH:
0900 D535      01368         bra     _ACC0_OFFSETREF      ; opcode = 0  or 128
0902 D315      01369         bra     _ACC1_ISINT          ; opcode = 1  or 129
0904 D54C      01370         bra     _ACC2_GETMETHOD      ; opcode = 2  or 130
0906 D43C      01371         bra     _ACC3_BEQ            ; opcode = 3  or 131
0908 D441      01372         bra     _ACC4_BNEQ           ; opcode = 4  or 132
090A D446      01373         bra     _ACC5_BLTINT         ; opcode = 5  or 133
090C D44B      01374         bra     _ACC6_BLEINT         ; opcode = 6  or 134
090E D450      01375         bra     _ACC7_BGTINT         ; opcode = 7  or 135
0910 D481      01376         bra     _ACC_BGEINT          ; opcode = 8  or 136
0912 D46E      01377         bra     _PUSH_ULTINT         ; opcode = 9  or 137
0914 D476      01378         bra     _PUSHACC0_UGEINT     ; opcode = 10 or 138
0916 D452      01379         bra     _PUSHACC1_BULTINT    ; opcode = 11 or 139
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0918 D45E      01380         bra     _PUSHACC2_BUGEINT    ; opcode = 12 or 140
091A D593      01381         bra     _PUSHACC3_GETPUBMET  ; opcode = 13 or 141
091C D59F      01382         bra     _PUSHACC4_GETDYNMET  ; opcode = 14 or 142
091E D30D      01383         bra     _PUSHACC5_STOP       ; opcode = 15 or 143
0920 D319      01384         bra     _PUSHACC6_EVENT      ; opcode = 16 or 144
0922 D324      01385         bra     _PUSHACC7_BREAK      ; opcode = 17 or 145
0924 D487      01386         bra     _PUSHACC_INTRETURN   ; opcode = 18 or 146
0926 D49C      01387         bra     _POP_INTRAISE        ; opcode = 19 or 147
0928 D4A2      01388         bra     _ASSIGN              ; opcode = 20
092A D5AC      01389         bra     _ENVACC1             ; opcode = 21
092C D5BC      01390         bra     _ENVACC2             ; opcode = 22
092E D5CC      01391         bra     _ENVACC3             ; opcode = 23
0930 D5DC      01392         bra     _ENVACC4             ; opcode = 24
0932 D5EC      01393         bra     _ENVACC              ; opcode = 25
0934 D5A0      01394         bra     _PUSHENVACC1         ; opcode = 26
0936 D5B0      01395         bra     _PUSHENVACC2         ; opcode = 27
0938 D5C0      01396         bra     _PUSHENVACC3         ; opcode = 28
093A D5D0      01397         bra     _PUSHENVACC4         ; opcode = 29
093C D5E0      01398         bra     _PUSHENVACC          ; opcode = 30
093E D16A      01399         bra     _PUSHRETADDR         ; opcode = 31
0940 D17E      01400         bra     _APPLY               ; opcode = 32
0942 D18B      01401         bra     _APPLY1              ; opcode = 33
0944 D1AE      01402         bra     _APPLY2              ; opcode = 34
0946 D1D5      01403         bra     _APPLY3              ; opcode = 35
0948 D200      01404         bra     _APPTERM             ; opcode = 36
094A D222      01405         bra     _APPTERM1            ; opcode = 37
094C D23A      01406         bra     _APPTERM2            ; opcode = 38
094E D258      01407         bra     _APPTERM3            ; opcode = 39
0950 D27A      01408         bra     _RETURN              ; opcode = 40
0952 D298      01409         bra     _RESTART             ; opcode = 41
0954 D2B4      01410         bra     _GRAB                ; opcode = 42
0956 D08D      01411         bra     _CLOSURE             ; opcode = 43
0958 D0B1      01412         bra     _CLOSUREREC          ; opcode = 44
095A D11B      01413         bra     _OFFSETCLOSUREM2     ; opcode = 45
095C D129      01414         bra     _OFFSETCLOSURE0      ; opcode = 46
095E D134      01415         bra     _OFFSETCLOSURE2      ; opcode = 47
0960 D142      01416         bra     _OFFSETCLOSURE       ; opcode = 48
0962 D110      01417         bra     _PUSHOFFSETCLOSUREM2 ; opcode = 49
0964 D11E      01418         bra     _PUSHOFFSETCLOSURE0  ; opcode = 50
0966 D129      01419         bra     _PUSHOFFSETCLOSURE2  ; opcode = 51
0968 D137      01420         bra     _PUSHOFFSETCLOSURE   ; opcode = 52
096A D7B5      01421         bra     _GETGLOBAL           ; opcode = 53
096C D7AD      01422         bra     _PUSHGETGLOBAL       ; opcode = 54
096E D60D      01423         bra     _GETGLOBALFIELD      ; opcode = 55
0970 D605      01424         bra     _PUSHGETGLOBALFIELD  ; opcode = 56
0972 D79D      01425         bra     _SETGLOBAL           ; opcode = 57
0974 D310      01426         bra     _ATOM0               ; opcode = 58
0976 D306      01427         bra     _ATOM                ; opcode = 59
0978 D307      01428         bra     _PUSHATOM0           ; opcode = 60
097A D304      01429         bra     _PUSHATOM            ; opcode = 61
097C D311      01430         bra     _MAKEBLOCK           ; opcode = 62
097E D330      01431         bra     _MAKEBLOCK1          ; opcode = 63
0980 D34D      01432         bra     _MAKEBLOCK2          ; opcode = 64
0982 D36E      01433         bra     _MAKEBLOCK3          ; opcode = 65
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0984 D393      01434         bra     _MAKEFLOATBLOCK      ; opcode = 66
0986 D5D3      01435         bra     _GETFIELD0           ; opcode = 67
0988 D5DB      01436         bra     _GETFIELD1           ; opcode = 68
098A D5E4      01437         bra     _GETFIELD2           ; opcode = 69
098C D5ED      01438         bra     _GETFIELD3           ; opcode = 70
098E D609      01439         bra     _GETFIELD            ; opcode = 71
0990 D3B5      01440         bra     _GETFLOATFIELD       ; opcode = 72
0992 D618      01441         bra     _SETFIELD0           ; opcode = 73
0994 D623      01442         bra     _SETFIELD1           ; opcode = 74
0996 D62F      01443         bra     _SETFIELD2           ; opcode = 75
0998 D63B      01444         bra     _SETFIELD3           ; opcode = 76
099A D647      01445         bra     _SETFIELD            ; opcode = 77
099C D3DB      01446         bra     _SETFLOATFIELD       ; opcode = 78
099E D659      01447         bra     _VECTLENGTH          ; opcode = 79
09A0 D66A      01448         bra     _GETVECTITEM         ; opcode = 80
09A2 D674      01449         bra     _SETVECTITEM         ; opcode = 81
09A4 D681      01450         bra     _GETSTRINGCHAR       ; opcode = 82
09A6 D68E      01451         bra     _SETSTRINGCHAR       ; opcode = 83
09A8 D743      01452         bra     _BRANCH              ; opcode = 84
09AA D749      01453         bra     _BRANCHIF            ; opcode = 85
09AC D750      01454         bra     _BRANCHIFNOT         ; opcode = 86
09AE D757      01455         bra     _SWITCH              ; opcode = 87
09B0 D3F8      01456         bra     _BOOLNOT             ; opcode = 88
09B2 D026      01457         bra     _PUSHTRAP            ; opcode = 89
09B4 D042      01458         bra     _POPTRAP             ; opcode = 90
09B6 D046      01459         bra     _RAISE               ; opcode = 91
09B8 D2E5      01460         bra     _CHECKSIGNALS        ; opcode = 92
09BA D6FC      01461         bra     _CCALL1              ; opcode = 93
09BC D704      01462         bra     _CCALL2              ; opcode = 94
09BE D70C      01463         bra     _CCALL3              ; opcode = 95
09C0 D714      01464         bra     _CCALL4              ; opcode = 96
09C2 D71C      01465         bra     _CCALL5              ; opcode = 97
09C4 D724      01466         bra     _CCALL               ; opcode = 98
09C6 D694      01467         bra     _CONST0              ; opcode = 99
09C8 D69E      01468         bra     _CONST1              ; opcode = 100
09CA D6A8      01469         bra     _CONST2              ; opcode = 101
09CC D6B2      01470         bra     _CONST3              ; opcode = 102
09CE D6BC      01471         bra     _CONSTINT            ; opcode = 103
09D0 D688      01472         bra     _PUSHCONST0          ; opcode = 104
09D2 D692      01473         bra     _PUSHCONST1          ; opcode = 105
09D4 D69C      01474         bra     _PUSHCONST2          ; opcode = 106
09D6 D6A6      01475         bra     _PUSHCONST3          ; opcode = 107
09D8 D6B0      01476         bra     _PUSHCONST           ; opcode = 108
09DA D3EE      01477         bra     _NEGINT              ; opcode = 109
09DC D3F4      01478         bra     _ADDINT              ; opcode = 110
09DE D3F8      01479         bra     _SUBINT              ; opcode = 111
09E0 D3E8      01480         bra     _MULINT              ; opcode = 112
09E2 D3E9      01481         bra     _DIVINT              ; opcode = 113
09E4 D3E7      01482         bra     _MODINT              ; opcode = 114
09E6 D6B7      01483         bra     _ANDINT              ; opcode = 115
09E8 D6BB      01484         bra     _ORINT               ; opcode = 116
09EA D6BF      01485         bra     _XORINT              ; opcode = 117
09EC D6C4      01486         bra     _LSLINT              ; opcode = 118
09EE D6CE      01487         bra     _LSRINT              ; opcode = 119
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
09F0 D6D7      01488         bra     _ASRINT              ; opcode = 120
09F2 D467      01489         bra     _EQ                  ; opcode = 121
09F4 D471      01490         bra     _NEQ                 ; opcode = 122
09F6 D47A      01491         bra     _LTINT               ; opcode = 123
09F8 D485      01492         bra     _LEINT               ; opcode = 124
09FA D48F      01493         bra     _GTINT               ; opcode = 125
09FC D499      01494         bra     _GEINT               ; opcode = 126
09FE D4A4      01495         bra     _OFFSETINT           ; opcode = 127
               01496 
               01497         
               01498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01499 ;;;;;;;;                                   ;;;;;;;;
               01500 ;;;;;;;;              EXCEPTIONS           ;;;;;;;;
               01501 ;;;;;;;;                                   ;;;;;;;;
               01502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01503 
0A00 01504 _PUSHTRAP:
               01505         M_CHECK_UNFULL_STACK 0x4
0A00 0E0E          M                 movlw   STACK_END
0A02 62DA          M                 cpfseq  FSR2H
0A04 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0A06 0EF8          M                 movlw   -(0x2 * N)
0A08 24D9          M                 addwf   FSR2L, W
0A0A A0D8          M                 btfss   STATUS, C
0A0C D771          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0A0E     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000001         M CPT_CUS = CPT_CUS + 1
0A0E 6ADD      01506         clrf    POSTDEC2                ; push extraArgs
0A10 CF62 FFDD 01507         movff   EXTRA_ARGS, POSTDEC2
0A14 CF55 FFDD 01508         movff   ENVH, POSTDEC2          ; push environment
0A18 CF54 FFDD 01509         movff   ENVL, POSTDEC2
0A1C CF61 FFDD 01510         movff   TRAP_SPH, POSTDEC2      ; push trapSp
0A20 CF60 FFDD 01511         movff   TRAP_SPL, POSTDEC2
               01512         M_READ_ARG                      ; push catchPc
0A24 0009          M                 tblrd*+
0A26 50F5          M                 movf    TABLAT, W
0A28 0009          M                 tblrd*+
0A2A CFF5 FFDD 01513         movff   TABLAT, POSTDEC2
0A2E 6EDD      01514         movwf   POSTDEC2
0A30 CFD9 FF60 01515         movff   FSR2L, TRAP_SPL         ; trapSp <- top of stack
0A34 CFDA FF61 01516         movff   FSR2H, TRAP_SPH
0A38 0012      01517         return
               01518 
0A3A 01519 _POPTRAP:
0A3A 5003      01520         movf    [0x3], W                ; restore trapSp
0A3C 6F60      01521         movwf   TRAP_SPL
0A3E 5004      01522         movf    [0x4], W
0A40 6F61      01523         movwf   TRAP_SPH
0A42 E8C8      01524         addulnk 0x8                     ; pop 4 elements and return
               01525 
0A44 01526 _RAISE:
0A44 0560      01527         decf    TRAP_SPL, W             ; trapSp = 0 ?
0A46 1161      01528         iorwf   TRAP_SPH, W
0A48 B4D8      01529         btfsc   STATUS, Z
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0A4A D29C      01530         bra     _STOP                   ; yes -> stop
0A4C CF60 FFD9 01531         movff   TRAP_SPL, FSR2L         ; no -> restore stack top
0A50 CF61 FFDA 01532         movff   TRAP_SPH, FSR2H
0A54 CFDC FFF6 01533         movff   PREINC2, TBLPTRL        ; set code pointer
0A58 CFDC FFF7 01534         movff   PREINC2, TBLPTRH
0A5C CFDC FF60 01535         movff   PREINC2, TRAP_SPL       ; restore trapSp
0A60 CFDC FF61 01536         movff   PREINC2, TRAP_SPH
0A64 CFDC FF54 01537         movff   PREINC2, ENVL           ; restore environment
0A68 CFDC FF55 01538         movff   PREINC2, ENVH
0A6C CFDC FF62 01539         movff   PREINC2, EXTRA_ARGS     ; restore extraArgs
0A70 E8C1      01540         addulnk 0x1
               01541 
               01542 
               01543 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01544 ;;;;;;;;                                   ;;;;;;;;
               01545 ;;;;;;;;              CLOSURES             ;;;;;;;;
               01546 ;;;;;;;;                                   ;;;;;;;;
               01547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01548 
0A72 01549 _CLOSURE:
0A72 0009      01550         tblrd*+                         ; read closure size (= nbArg + 1)
0A74 EC03 F00A 01551         call    _CHECK_UNFULL_HEAP_GEN
0A78 0EF7      01552         movlw   CLOSURE_TAG             ; write tag
0A7A 6EE6      01553         movwf   POSTINC1
0A7C 50F5      01554         movf    TABLAT, W               ; write size
0A7E 6EE6      01555         movwf   POSTINC1
0A80 6F68      01556         movwf   TMP_REG_1               ; TMP_REG_1 <- size
0A82 CF56 FF69 01557         movff   ACCUL, TMP_REG_2        ; TMP_REG_3:2 <- ACCU
0A86 CF57 FF6A 01558         movff   ACCUH, TMP_REG_3
0A8A CFE1 FF56 01559         movff   FSR1L, ACCUL            ; ACCU <- closure
0A8E CFE2 FF57 01560         movff   FSR1H, ACCUH
0A92 0009      01561         tblrd*+                         ; read/write closure code pointer
0A94 CFF5 FFE6 01562         movff   TABLAT, POSTINC1
0A98 0009      01563         tblrd*+
0A9A CFF5 FFE6 01564         movff   TABLAT, POSTINC1
0A9E 4F68      01565         dcfsnz  TMP_REG_1, F            ; decr TMP_REG_1
0AA0 0012      01566         return                          ; if nbArg = 0 then closure done
0AA2 CF69 FFE6 01567         movff   TMP_REG_2, POSTINC1     ; closure[1] <- TMP_REG_3:2
0AA6 CF6A FFE6 01568         movff   TMP_REG_3, POSTINC1
0AAA 4F68      01569         dcfsnz  TMP_REG_1, F            ; decf TMP_REG_1
0AAC 0012      01570         return                          ; if nbArg = 1 then closure done
0AAE 01571 _CLOSURE_LOOP:
0AAE CFDC FFE6 01572         movff   PREINC2, POSTINC1       ; closure[i] <- pop ()
0AB2 CFDC FFE6 01573         movff   PREINC2, POSTINC1
0AB6 2F68      01574         decfsz  TMP_REG_1, F            ; loop nbArg - 1 times
0AB8 D7FA      01575         bra     _CLOSURE_LOOP
0ABA 0012      01576         return                          ; closure done
               01577 
0ABC 01578 _CLOSUREREC:
0ABC 0009      01579         tblrd*+                         ; read nbFuncs
0ABE 04F5      01580         decf    TABLAT, W
0AC0 6F68      01581         movwf   TMP_REG_1               ; TMP_REG_1 <- nbFuncs - 1
0AC2 0009      01582         tblrd*+                         ; read nbVars
0AC4 CFF5 FF69 01583         movff   TABLAT, TMP_REG_2       ; TMP_REG_2 <- nbVars
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0AC8 2968      01584         incf    TMP_REG_1, W            ; compute size: 2 * nbFuncs - 1 + nbVars
0ACA 2568      01585         addwf   TMP_REG_1, W
0ACC 2569      01586         addwf   TMP_REG_2, W
0ACE 6F6A      01587         movwf   TMP_REG_3               ; TMP_REG_3 <- closure size
0AD0 6EF5      01588         movwf   TABLAT                  ; TABLAT <- closure size
0AD2 EC03 F00A 01589         call    _CHECK_UNFULL_HEAP_GEN  ; check allocation
0AD6 0EF7      01590         movlw   CLOSURE_TAG             ; write tag
0AD8 6EE6      01591         movwf   POSTINC1
0ADA 516A      01592         movf    TMP_REG_3, W            ; write size
0ADC 6EE6      01593         movwf   POSTINC1
0ADE CF56 FF6A 01594         movff   ACCUL, TMP_REG_3        ; TMP_REG_4:3 <- ACCU
0AE2 CF57 FF6B 01595         movff   ACCUH, TMP_REG_4
0AE6 CFE1 FF56 01596         movff   FSR1L, ACCUL            ; ACCU <- @closure
0AEA CFE2 FF57 01597         movff   FSR1H, ACCUH
0AEE 0009      01598         tblrd*+                         ; closure[0] <- closure pc
0AF0 CFF5 FFE6 01599         movff   TABLAT, POSTINC1
0AF4 0009      01600         tblrd*+
0AF6 CFF5 FFE6 01601         movff   TABLAT, POSTINC1
0AFA CFE1 FFE9 01602         movff   FSR1L, FSR0L            ; FSR0 <- FSR1
0AFE CFE2 FFEA 01603         movff   FSR1H, FSR0H
0B02 5168      01604         movf    TMP_REG_1, W            ; FSR1 += 4 * (nbFuncs - 1)
0B04 2568      01605         addwf   TMP_REG_1, W
0B06 26E1      01606         addwf   FSR1L, F
0B08 B0D8      01607         btfsc   STATUS, C
0B0A 2AE2      01608         incf    FSR1H, F
0B0C 26E1      01609         addwf   FSR1L, F
0B0E B0D8      01610         btfsc   STATUS, C
0B10 2AE2      01611         incf    FSR1H, F
0B12 5369      01612         movf    TMP_REG_2, F            ; nbVars = 0 ?
0B14 E00C      01613         bz      _CLOSUREREC_NO_VARS     ; yes => no var to copy
0B16 CF6A FFE6 01614         movff   TMP_REG_3, POSTINC1     ; closure[i] <- TMP_REG_4:3 (old ACCU)
0B1A CF6B FFE6 01615         movff   TMP_REG_4, POSTINC1
0B1E 0769      01616         decf    TMP_REG_2, F            ; decr TMP_REG_2
0B20 E006      01617         bz      _CLOSUREREC_NO_VARS     ; if no var to copy => skip loop
0B22 01618 _CLOSUREREC_LOOP_VARS:
0B22 CFDC FFE6 01619         movff   PREINC2, POSTINC1       ; closure[i] = pop ()
0B26 CFDC FFE6 01620         movff   PREINC2, POSTINC1
0B2A 2F69      01621         decfsz  TMP_REG_2, F            ; loop nbVars - 1 times
0B2C D7FA      01622         bra     _CLOSUREREC_LOOP_VARS
0B2E 01623 _CLOSUREREC_NO_VARS:
               01624         M_PUSH                          ; push the accumulator
0B2E CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0B32 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0B36 0E0D          M                 movlw   (STACK_END - 0x1)
0B38 64DA          M                 cpfsgt  FSR2H
0B3A D6DA          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B3C 5368      01625         movf    TMP_REG_1, F
0B3E B4D8      01626         btfsc   STATUS, Z               ; if nbFuncs = 1
0B40 0012      01627         return                          ; then closurerec done
0B42 6B6C      01628         clrf    TMP_REG_5               ; TMP_REG_5 <- 0
0B44 01629 _CLOSUREREC_LOOP_FUNCS:
0B44 2B6C      01630         incf    TMP_REG_5, F            ; TMP_REG_5 ++
0B46 0EF9      01631         movlw   INFIX_TAG               ; write infix tag in infix header
0B48 6EEE      01632         movwf   POSTINC0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0B4A 516C      01633         movf    TMP_REG_5, W            ; write 2 * TMP_REG_5 as infix size in
0B4C 256C      01634         addwf   TMP_REG_5, W            ; infix header
0B4E 6EEE      01635         movwf   POSTINC0
0B50 CFE9 FF6D 01636         movff   FSR0L, TMP_REG_6        ; save FSR0
0B54 CFEA FF6E 01637         movff   FSR0H, TMP_REG_7
               01638         M_CHECK_UNFULL_STACK 0x1
0B58 0E0E          M                 movlw   STACK_END
0B5A 62DA          M                 cpfseq  FSR2H
0B5C D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0B5E 0EFE          M                 movlw   -(0x2 * N)
0B60 24D9          M                 addwf   FSR2L, W
0B62 A0D8          M                 btfss   STATUS, C
0B64 D6C5          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B66     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000002         M CPT_CUS = CPT_CUS + 1
0B66 516E      01639         movf    TMP_REG_7, W            ; restore FSR0
0B68 6EEA      01640         movwf   FSR0H
0B6A 6EDD      01641         movwf   POSTDEC2
0B6C 516D      01642         movf    TMP_REG_6, W
0B6E 6EE9      01643         movwf   FSR0L
0B70 6EDD      01644         movwf   POSTDEC2
0B72 0009      01645         tblrd*+                         ; infix_block[0] <- infix_pc read in bc
0B74 CFF5 FFEE 01646         movff   TABLAT, POSTINC0
0B78 0009      01647         tblrd*+
0B7A CFF5 FFEE 01648         movff   TABLAT, POSTINC0
0B7E 2F68      01649         decfsz  TMP_REG_1, F            ; loop nbFuncs - 1 times
0B80 D7E1      01650         bra     _CLOSUREREC_LOOP_FUNCS
0B82 0012      01651         return
               01652 
0B84 01653 _PUSHOFFSETCLOSUREM2:
               01654         M_PUSH                  ; fallthrough
0B84 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0B88 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0B8C 0E0D          M                 movlw   (STACK_END - 0x1)
0B8E 64DA          M                 cpfsgt  FSR2H
0B90 D6AF          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0B92 01655 _OFFSETCLOSUREM2:
0B92 0EFC      01656         movlw   -0x4            ; ACCU <- ENV - 4
0B94 2554      01657         addwf   ENVL, W
0B96 6F56      01658         movwf   ACCUL
0B98 5155      01659         movf    ENVH, W
0B9A A0D8      01660         btfss   STATUS, C
0B9C 0FFF      01661         addlw   -0x1
0B9E 6F57      01662         movwf   ACCUH
0BA0 0012      01663         return
               01664 
0BA2 01665 _PUSHOFFSETCLOSURE0:
               01666         M_PUSH                  ; fallthrough
0BA2 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BA6 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BAA 0E0D          M                 movlw   (STACK_END - 0x1)
0BAC 64DA          M                 cpfsgt  FSR2H
0BAE D6A0          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0BB0 01667 _OFFSETCLOSURE0:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0BB0 CF54 FF56 01668         movff   ENVL, ACCUL
0BB4 CF55 FF57 01669         movff   ENVH, ACCUH
0BB8 0012      01670         return
               01671 
0BBA 01672 _PUSHOFFSETCLOSURE2:
               01673         M_PUSH                  ; fallthrough
0BBA CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BBE CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BC2 0E0D          M                 movlw   (STACK_END - 0x1)
0BC4 64DA          M                 cpfsgt  FSR2H
0BC6 D694          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0BC8 01674 _OFFSETCLOSURE2:
0BC8 0E04      01675         movlw   0x4             ; ACCU <- ENV + 4
0BCA 2554      01676         addwf   ENVL, W
0BCC 6F56      01677         movwf   ACCUL
0BCE 5155      01678         movf    ENVH, W
0BD0 B0D8      01679         btfsc   STATUS, C
0BD2 0F01      01680         addlw   0x1
0BD4 6F57      01681         movwf   ACCUH
0BD6 0012      01682         return
               01683 
0BD8 01684 _PUSHOFFSETCLOSURE:
               01685         M_PUSH                  ; fallthrough
0BD8 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0BDC CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0BE0 0E0D          M                 movlw   (STACK_END - 0x1)
0BE2 64DA          M                 cpfsgt  FSR2H
0BE4 D685          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0BE6 01686 _OFFSETCLOSURE:
0BE6 CF55 FF57 01687         movff   ENVH, ACCUH     ; ACCU <- ENV + 4 * offset
0BEA CF54 FF56 01688         movff   ENVL, ACCUL
0BEE 0009      01689         tblrd*+                 ; read offset
0BF0 90D8      01690         bcf     STATUS, C
0BF2 34F5      01691         rlcf    TABLAT, W
0BF4 E207      01692         bc      _OFFSETCLOSURE_NEG
0BF6 2756      01693         addwf   ACCUL, F
0BF8 B0D8      01694         btfsc   STATUS, C
0BFA 2B57      01695         incf    ACCUH, F
0BFC 2756      01696         addwf   ACCUL, F
0BFE B0D8      01697         btfsc   STATUS, C
0C00 2B57      01698         incf    ACCUH, F
0C02 0012      01699         return
0C04 01700 _OFFSETCLOSURE_NEG:
0C04 0800      01701         sublw   0x0
0C06 5F56      01702         subwf   ACCUL, F
0C08 A0D8      01703         btfss   STATUS, C
0C0A 0757      01704         decf    ACCUH, F
0C0C 5F56      01705         subwf   ACCUL, F
0C0E A0D8      01706         btfss   STATUS, C
0C10 0757      01707         decf    ACCUH, F
0C12 0012      01708         return
               01709         
               01710 
               01711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01712 ;;;;;;;;                                   ;;;;;;;;
               01713 ;;;;;;;;           CALL/RETURN             ;;;;;;;;
               01714 ;;;;;;;;                                   ;;;;;;;;
               01715 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01716 
0C14 01717 _PUSHRETADDR:
               01718         M_CHECK_UNFULL_STACK 0x3
0C14 0E0E          M                 movlw   STACK_END
0C16 62DA          M                 cpfseq  FSR2H
0C18 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0C1A 0EFA          M                 movlw   -(0x2 * N)
0C1C 24D9          M                 addwf   FSR2L, W
0C1E A0D8          M                 btfss   STATUS, C
0C20 D667          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0C22     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000003         M CPT_CUS = CPT_CUS + 1
0C22 6ADD      01719         clrf    POSTDEC2                ; push extraArgs
0C24 CF62 FFDD 01720         movff   EXTRA_ARGS, POSTDEC2
0C28 CF55 FFDD 01721         movff   ENVH, POSTDEC2          ; push the environment
0C2C CF54 FFDD 01722         movff   ENVL, POSTDEC2
               01723         M_READ_ARG                      ; push the return address
0C30 0009          M                 tblrd*+
0C32 50F5          M                 movf    TABLAT, W
0C34 0009          M                 tblrd*+
0C36 CFF5 FFDD 01724         movff   TABLAT, POSTDEC2
0C3A 6EDD      01725         movwf   POSTDEC2
0C3C 0012      01726         return
               01727 
0C3E 01728 _APPLY:
0C3E 0009      01729         tblrd*+                         ; read extraArgs
0C40 CFF5 FF62 01730         movff   TABLAT, EXTRA_ARGS
0C44 5156      01731         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0C46 6EE9      01732         movwf   FSR0L
0C48 6F54      01733         movwf   ENVL
0C4A 5157      01734         movf    ACCUH, W
0C4C 6EEA      01735         movwf   FSR0H
0C4E 6F55      01736         movwf   ENVH
0C50 CFEE FFF6 01737         movff   POSTINC0, TBLPTRL
0C54 CFEF FFF7 01738         movff   INDF0, TBLPTRH
0C58 0012      01739         return
               01740 
0C5A 01741 _APPLY1:
               01742         M_CHECK_UNFULL_STACK 0x3
0C5A 0E0E          M                 movlw   STACK_END
0C5C 62DA          M                 cpfseq  FSR2H
0C5E D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0C60 0EFA          M                 movlw   -(0x2 * N)
0C62 24D9          M                 addwf   FSR2L, W
0C64 A0D8          M                 btfss   STATUS, C
0C66 D644          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0C68     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000004         M CPT_CUS = CPT_CUS + 1
0C68 E986      01743         subfsr  FSR2, 0x6
0C6A EB87 F001 01744         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0C6E EB88 F002 01745         movss   [0x8], [0x2]
0C72 6A08      01746         clrf    [0x8]                   ; stack[3] <- extraArgs
0C74 5162      01747         movf    EXTRA_ARGS, W
0C76 6E07      01748         movwf   [0x7]
0C78 5154      01749         movf    ENVL, W                 ; stack[2] <- environment
0C7A 6E05      01750         movwf   [0x5]
0C7C 5155      01751         movf    ENVH, W
0C7E 6E06      01752         movwf   [0x6]
0C80 50F6      01753         movf    TBLPTRL, W              ; stack[1] <- PC
0C82 6E03      01754         movwf   [0x3]
0C84 50F7      01755         movf    TBLPTRH, W
0C86 6E04      01756         movwf   [0x4]
0C88 5156      01757         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0C8A 6EE9      01758         movwf   FSR0L
0C8C 6F54      01759         movwf   ENVL
0C8E 5157      01760         movf    ACCUH, W
0C90 6EEA      01761         movwf   FSR0H
0C92 6F55      01762         movwf   ENVH
0C94 CFEE FFF6 01763         movff   POSTINC0, TBLPTRL
0C98 CFEF FFF7 01764         movff   INDF0, TBLPTRH
0C9C 0E01      01765         movlw   0x1                     ; extraArgs <- int_val(0)
0C9E 6F62      01766         movwf   EXTRA_ARGS
0CA0 0012      01767         return
               01768 
0CA2 01769 _APPLY2:
               01770         M_CHECK_UNFULL_STACK 0x3
0CA2 0E0E          M                 movlw   STACK_END
0CA4 62DA          M                 cpfseq  FSR2H
0CA6 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0CA8 0EFA          M                 movlw   -(0x2 * N)
0CAA 24D9          M                 addwf   FSR2L, W
0CAC A0D8          M                 btfss   STATUS, C
0CAE D620          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0CB0     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000005         M CPT_CUS = CPT_CUS + 1
0CB0 E986      01771         subfsr  FSR2, 0x6
0CB2 EB87 F001 01772         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
0CB6 EB88 F002 01773         movss   [0x8], [0x2]
0CBA EB89 F003 01774         movss   [0x9], [0x3]            ; move arg (stack[1] <- stack[4])
0CBE EB8A F004 01775         movss   [0xA], [0x4]
0CC2 6A0A      01776         clrf    [0xA]                   ; stack[4] <- int_val(extraArgs)
0CC4 5162      01777         movf    EXTRA_ARGS, W
0CC6 6E09      01778         movwf   [0x9]
0CC8 5154      01779         movf    ENVL, W                 ; stack[3] <- environment
0CCA 6E07      01780         movwf   [0x7]
0CCC 5155      01781         movf    ENVH, W
0CCE 6E08      01782         movwf   [0x8]
0CD0 50F6      01783         movf    TBLPTRL, W              ; stack[2] <- PC
0CD2 6E05      01784         movwf   [0x5]
0CD4 50F7      01785         movf    TBLPTRH, W
0CD6 6E06      01786         movwf   [0x6]
0CD8 5156      01787         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0CDA 6EE9      01788         movwf   FSR0L
0CDC 6F54      01789         movwf   ENVL
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0CDE 5157      01790         movf    ACCUH, W
0CE0 6EEA      01791         movwf   FSR0H
0CE2 6F55      01792         movwf   ENVH
0CE4 CFEE FFF6 01793         movff   POSTINC0, TBLPTRL
0CE8 CFEF FFF7 01794         movff   INDF0, TBLPTRH
0CEC 0E03      01795         movlw   0x3                     ; extraArgs <- int_val(1)
0CEE 6F62      01796         movwf   EXTRA_ARGS
0CF0 0012      01797         return
               01798 
0CF2 01799 _APPLY3:
               01800         M_CHECK_UNFULL_STACK 0x3
0CF2 0E0E          M                 movlw   STACK_END
0CF4 62DA          M                 cpfseq  FSR2H
0CF6 D004          M                 bra     CHECK_UNFULL_STACK_END_#v(CPT_CUS)
0CF8 0EFA          M                 movlw   -(0x2 * N)
0CFA 24D9          M                 addwf   FSR2L, W
0CFC A0D8          M                 btfss   STATUS, C
0CFE D5F8          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0D00     M CHECK_UNFULL_STACK_END_#v(CPT_CUS)
  00000006         M CPT_CUS = CPT_CUS + 1
0D00 E986      01801         subfsr  FSR2, 0x6
0D02 EB87 F001 01802         movss   [0x7], [0x1]            ; move arg (stack[0] <- stack[3])
0D06 EB88 F002 01803         movss   [0x8], [0x2]
0D0A EB89 F003 01804         movss   [0x9], [0x3]            ; move arg (stack[1] <- stack[4])
0D0E EB8A F004 01805         movss   [0xA], [0x4]
0D12 EB8B F005 01806         movss   [0xB], [0x5]            ; move arg (stack[2] <- stack[5])
0D16 EB8C F006 01807         movss   [0xC], [0x6]
0D1A 6A0C      01808         clrf    [0xC]                   ; stack[5] <- int_val(extraArgs)
0D1C 5162      01809         movf    EXTRA_ARGS, W
0D1E 6E0B      01810         movwf   [0xB]
0D20 5154      01811         movf    ENVL, W                 ; stack[4] <- environment
0D22 6E09      01812         movwf   [0x9]
0D24 5155      01813         movf    ENVH, W
0D26 6E0A      01814         movwf   [0xA]
0D28 50F6      01815         movf    TBLPTRL, W              ; stack[3] <- PC
0D2A 6E07      01816         movwf   [0x7]
0D2C 50F7      01817         movf    TBLPTRH, W
0D2E 6E08      01818         movwf   [0x8]
0D30 5156      01819         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0D32 6EE9      01820         movwf   FSR0L
0D34 6F54      01821         movwf   ENVL
0D36 5157      01822         movf    ACCUH, W
0D38 6EEA      01823         movwf   FSR0H
0D3A 6F55      01824         movwf   ENVH
0D3C CFEE FFF6 01825         movff   POSTINC0, TBLPTRL
0D40 CFEF FFF7 01826         movff   INDF0, TBLPTRH
0D44 0E05      01827         movlw   0x5                     ; extraArgs <- int_val(2)
0D46 6F62      01828         movwf   EXTRA_ARGS
0D48 0012      01829         return
               01830 
0D4A 01831 _APPTERM:
0D4A CFD9 FFE9 01832         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0D4E CFDA FFEA 01833         movff   FSR2H, FSR0H
0D52 0009      01834         tblrd*+                         ; read (2 * s)
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0D54 50F5      01835         movf    TABLAT, W               ; pop s elements
0D56 26D9      01836         addwf   FSR2L, F
0D58 B0D8      01837         btfsc   STATUS, C
0D5A 2ADA      01838         incf    FSR2H, F
0D5C 0009      01839         tblrd*+                         ; read n
0D5E 90D8      01840         bcf     STATUS, C
0D60 34F5      01841         rlcf    TABLAT, W               ; FSR0 += 2 * n
0D62 26E9      01842         addwf   FSR0L, F
0D64 B0D8      01843         btfsc   STATUS, C
0D66 2AEA      01844         incf    FSR0H, F
0D68 04F5      01845         decf    TABLAT, W               ; extraArgs <- extraArgs + n - 1
0D6A 2762      01846         addwf   EXTRA_ARGS, F
0D6C 2762      01847         addwf   EXTRA_ARGS, F
0D6E 01848 _APPTERM_LOOP:
0D6E CFED FFDD 01849         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0D72 CFED FFDD 01850         movff   POSTDEC0, POSTDEC2
0D76 2EF5      01851         decfsz  TABLAT, F               ; loop n times
0D78 D7FA      01852         bra     _APPTERM_LOOP
0D7A 5156      01853         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0D7C 6EE9      01854         movwf   FSR0L
0D7E 6F54      01855         movwf   ENVL
0D80 5157      01856         movf    ACCUH, W
0D82 6EEA      01857         movwf   FSR0H
0D84 6F55      01858         movwf   ENVH
0D86 CFEE FFF6 01859         movff   POSTINC0, TBLPTRL
0D8A CFEF FFF7 01860         movff   INDF0, TBLPTRH
0D8E 0012      01861         return
               01862         
0D90 01863 _APPTERM1:
0D90 CFD9 FFE9 01864         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0D94 CFDA FFEA 01865         movff   FSR2H, FSR0H
0D98 0009      01866         tblrd*+                         ; read (2 * extraArgs)
0D9A 50F5      01867         movf    TABLAT, W               ; extraArgs elements
0D9C 26D9      01868         addwf   FSR2L, F
0D9E B0D8      01869         btfsc   STATUS, C
0DA0 2ADA      01870         incf    FSR2H, F
0DA2 E802      01871         addfsr  FSR0, 0x2               ; FSR0 -= 2
0DA4 CFED FFDD 01872         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DA8 CFED FFDD 01873         movff   POSTDEC0, POSTDEC2
0DAC 5156      01874         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0DAE 6EE9      01875         movwf   FSR0L
0DB0 6F54      01876         movwf   ENVL
0DB2 5157      01877         movf    ACCUH, W
0DB4 6EEA      01878         movwf   FSR0H
0DB6 6F55      01879         movwf   ENVH
0DB8 CFEE FFF6 01880         movff   POSTINC0, TBLPTRL
0DBC CFEF FFF7 01881         movff   INDF0, TBLPTRH
0DC0 0012      01882         return
               01883         
0DC2 01884 _APPTERM2:
0DC2 CFD9 FFE9 01885         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0DC6 CFDA FFEA 01886         movff   FSR2H, FSR0H
0DCA 0009      01887         tblrd*+                         ; read (2 * extraArgs)
0DCC 50F5      01888         movf    TABLAT, W               ; pop extraArgs elements
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0DCE 26D9      01889         addwf   FSR2L, F
0DD0 B0D8      01890         btfsc   STATUS, C
0DD2 2ADA      01891         incf    FSR2H, F
0DD4 E804      01892         addfsr  FSR0, 0x4               ; FSR0 -= 4
0DD6 CFED FFDD 01893         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DDA CFED FFDD 01894         movff   POSTDEC0, POSTDEC2
0DDE CFED FFDD 01895         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0DE2 CFED FFDD 01896         movff   POSTDEC0, POSTDEC2
0DE6 5156      01897         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0DE8 6EE9      01898         movwf   FSR0L
0DEA 6F54      01899         movwf   ENVL
0DEC 5157      01900         movf    ACCUH, W
0DEE 6EEA      01901         movwf   FSR0H
0DF0 6F55      01902         movwf   ENVH
0DF2 CFEE FFF6 01903         movff   POSTINC0, TBLPTRL
0DF6 CFEF FFF7 01904         movff   INDF0, TBLPTRH
0DFA 0E02      01905         movlw   0x2                     ; incr extraArgs
0DFC 2762      01906         addwf   EXTRA_ARGS, F
0DFE 0012      01907         return
               01908         
0E00 01909 _APPTERM3:
0E00 CFD9 FFE9 01910         movff   FSR2L, FSR0L            ; FSR0 <- FSR2
0E04 CFDA FFEA 01911         movff   FSR2H, FSR0H
0E08 0009      01912         tblrd*+                         ; read (2 * (extraArgs - 3))
0E0A 50F5      01913         movf    TABLAT, W               ; pop (extraArgs - 3) elements
0E0C 26D9      01914         addwf   FSR2L, F
0E0E B0D8      01915         btfsc   STATUS, C
0E10 2ADA      01916         incf    FSR2H, F
0E12 E806      01917         addfsr  FSR0, 0x6               ; FSR0 -= 6
0E14 CFED FFDD 01918         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E18 CFED FFDD 01919         movff   POSTDEC0, POSTDEC2
0E1C CFED FFDD 01920         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E20 CFED FFDD 01921         movff   POSTDEC0, POSTDEC2
0E24 CFED FFDD 01922         movff   POSTDEC0, POSTDEC2      ; push (*FSR0--)
0E28 CFED FFDD 01923         movff   POSTDEC0, POSTDEC2
0E2C 5156      01924         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0E2E 6EE9      01925         movwf   FSR0L
0E30 6F54      01926         movwf   ENVL
0E32 5157      01927         movf    ACCUH, W
0E34 6EEA      01928         movwf   FSR0H
0E36 6F55      01929         movwf   ENVH
0E38 CFEE FFF6 01930         movff   POSTINC0, TBLPTRL
0E3C CFEF FFF7 01931         movff   INDF0, TBLPTRH
0E40 0E04      01932         movlw   0x4                     ; extraArgs <- extraArgs + 2
0E42 2762      01933         addwf   EXTRA_ARGS, F
0E44 0012      01934         return
               01935 
0E46 01936 _RETURN:
0E46 0009      01937         tblrd*+                         ; read (2 * n)
0E48 50F5      01938         movf    TABLAT, W               ; pop n elements
0E4A 26D9      01939         addwf   FSR2L, F
0E4C B0D8      01940         btfsc   STATUS, C
0E4E 2ADA      01941         incf    FSR2H, F
0E50 4D62      01942         dcfsnz  EXTRA_ARGS, W           ; if extraArgs = 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0E52 D00D      01943         bra     _RETURN_ELSE            ; then goto _RETURN_ELSE
0E54 0E02      01944         movlw   0x2                     ; decr extraArgs
0E56 5F62      01945         subwf   EXTRA_ARGS, F
0E58 5156      01946         movf    ACCUL, W                ; TBLPTR <- ACCU[0] ; ENV <- ACCU
0E5A 6EE9      01947         movwf   FSR0L
0E5C 6F54      01948         movwf   ENVL
0E5E 5157      01949         movf    ACCUH, W
0E60 6EEA      01950         movwf   FSR0H
0E62 6F55      01951         movwf   ENVH
0E64 CFEE FFF6 01952         movff   POSTINC0, TBLPTRL
0E68 CFEF FFF7 01953         movff   INDF0, TBLPTRH
0E6C 0012      01954         return
0E6E 01955 _RETURN_ELSE:
0E6E CFDC FFF6 01956         movff   PREINC2, TBLPTRL        ; TBLPTR <- pop ()
0E72 CFDC FFF7 01957         movff   PREINC2, TBLPTRH
0E76 CFDC FF54 01958         movff   PREINC2, ENVL           ; ENV <- pop ()
0E7A CFDC FF55 01959         movff   PREINC2, ENVH
0E7E CFDC FF62 01960         movff   PREINC2, EXTRA_ARGS     ; extraArgs <- pop ()
0E82 E8C1      01961         addulnk 0x1
               01962 
0E84 01963 _RESTART:
0E84 CF54 FFE9 01964         movff   ENVL, FSR0L             ; FSR0 <- ENV
0E88 CF55 FFEA 01965         movff   ENVH, FSR0H
0E8C E802      01966         addfsr  FSR0, 0x2               ; ENV <- FSR0[1]
0E8E CFEE FF54 01967         movff   POSTINC0, ENVL
0E92 CFEF FF55 01968         movff   INDF0, ENVH
0E96 E904      01969         subfsr  FSR0, 0x4               ; compute (size(FSR0) - 2)
0E98 50EE      01970         movf    POSTINC0, W
0E9A 0FFE      01971         addlw   -0x2
0E9C B4D8      01972         btfsc   STATUS, Z               ; if no arg to push then done
0E9E 0012      01973         return
0EA0 6F68      01974         movwf   TMP_REG_1               ; TMP_REG_1 <- size(FSR0) - 2
0EA2 90D8      01975         bcf     STATUS, C               ; extraArgs <- extraArgs + size(FSR0)-2
0EA4 3568      01976         rlcf    TMP_REG_1, W
0EA6 2762      01977         addwf   EXTRA_ARGS, F
0EA8 26E9      01978         addwf   FSR0L, F                ; FSR0 <- FSR0 + 2 * size(ENV) - 1
0EAA B0D8      01979         btfsc   STATUS, C
0EAC 2AEA      01980         incf    FSR0H, F
0EAE E803      01981         addfsr  FSR0, 0x3
0EB0 01982 _RESTART_LOOP:
0EB0 CFED FFDD 01983         movff   POSTDEC0, POSTDEC2      ; push *FSR0--
0EB4 CFED FFDD 01984         movff   POSTDEC0, POSTDEC2
0EB8 2F68      01985         decfsz  TMP_REG_1, F            ; loop size(FSR0) - 2 times
0EBA D7FA      01986         bra     _RESTART_LOOP
0EBC 0012      01987         return
               01988 
0EBE 01989 _GRAB:
0EBE 0009      01990         tblrd*+                         ; read required
0EC0 90D8      01991         bcf     STATUS, C
0EC2 34F5      01992         rlcf    TABLAT, W
0EC4 6162      01993         cpfslt  EXTRA_ARGS              ; if extraArgs >= required
0EC6 D02B      01994         bra     _GRAB_ELSE              ; then goto _GRAB_ELSE
0EC8 3162      01995         rrcf    EXTRA_ARGS, W           ; TABLAT = 3 + extraArgs ; STATUS.C = 0
0ECA 0F03      01996         addlw   0x3
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0ECC 6EF5      01997         movwf   TABLAT
0ECE DA9B      01998         rcall   _CHECK_UNFULL_HEAP_GEN  ; check heap allocation
0ED0 0EF7      01999         movlw   CLOSURE_TAG             ; write tag
0ED2 6EE6      02000         movwf   POSTINC1
0ED4 50F5      02001         movf    TABLAT, W               ; write size
0ED6 6EE6      02002         movwf   POSTINC1
0ED8 CFE1 FF56 02003         movff   FSR1L, ACCUL            ; ACCU <- closure
0EDC CFE2 FF57 02004         movff   FSR1H, ACCUH
0EE0 50F6      02005         movf    TBLPTRL, W              ; closure[0] <- PC - 3
0EE2 0FFD      02006         addlw   -0x3
0EE4 6EE6      02007         movwf   POSTINC1
0EE6 50F7      02008         movf    TBLPTRH, W
0EE8 A0D8      02009         btfss   STATUS, C
0EEA 0FFF      02010         addlw   -0x1
0EEC 6EE6      02011         movwf   POSTINC1
0EEE CF54 FFE6 02012         movff   ENVL, POSTINC1          ; closure[1] <- ENV
0EF2 CF55 FFE6 02013         movff   ENVH, POSTINC1
0EF6 0E02      02014         movlw   0x2                     ; TABLAT -= 2
0EF8 5EF5      02015         subwf   TABLAT, F
0EFA E006      02016         bz      _GRAB_SKIP_LOOP         ; skip loop if TABLAT = 0
0EFC 02017 _GRAB_LOOP:
0EFC CFDC FFE6 02018         movff   PREINC2, POSTINC1       ; closure[i] <- pop ()
0F00 CFDC FFE6 02019         movff   PREINC2, POSTINC1
0F04 2EF5      02020         decfsz  TABLAT, F               ; loop TABLAT = required - 1 times
0F06 D7FA      02021         bra     _GRAB_LOOP
0F08 02022 _GRAB_SKIP_LOOP:
0F08 CFDC FFF6 02023         movff   PREINC2, TBLPTRL        ; TBLPTR <- pop ()
0F0C CFDC FFF7 02024         movff   PREINC2, TBLPTRH
0F10 CFDC FF54 02025         movff   PREINC2, ENVL           ; ENV <- pop ()
0F14 CFDC FF55 02026         movff   PREINC2, ENVH
0F18 CFDC FF62 02027         movff   PREINC2, EXTRA_ARGS     ; extraArgs <- pop ()
0F1C E8C1      02028         addulnk 0x1                     ; grab done
0F1E 02029 _GRAB_ELSE:
0F1E 5F62      02030         subwf   EXTRA_ARGS, F           ; extraArgs -= required
0F20 0012      02031         return                          ; grab done
               02032 
               02033 
               02034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02035 ;;;;;;;;                                   ;;;;;;;;
               02036 ;;;;;;;;          OTHERS / STACK           ;;;;;;;;
               02037 ;;;;;;;;                                   ;;;;;;;;
               02038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02039 
0F22 02040 _ISINT:
0F22 0E01      02041         movlw   0x1
0F24 B156      02042         btfsc   ACCUL, 0
0F26 0E03      02043         movlw   0x3
0F28 6F56      02044         movwf   ACCUL
0F2A 6B57      02045         clrf    ACCUH
0F2C 0012      02046         return
               02047 
0F2E 02048 _ACC1_ISINT:
0F2E E2F9      02049         bc      _ISINT
               02050         M_ACC   1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0F30 EB03 FF56     M                 movsf   [2 * N + 1], ACCUL
0F34 EB04 FF57     M                 movsf   [2 * N + 2], ACCUH
0F38 0012      02051         return
               02052         
0F3A 02053 _PUSHACC5_STOP:
0F3A E224      02054         bc      _STOP
               02055         M_PUSH
0F3C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F40 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F44 0E0D          M                 movlw   (STACK_END - 0x1)
0F46 64DA          M                 cpfsgt  FSR2H
0F48 D4D3          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02056         M_ACC   5
0F4A EB0B FF56     M                 movsf   [2 * N + 1], ACCUL
0F4E EB0C FF57     M                 movsf   [2 * N + 2], ACCUH
0F52 0012      02057         return
               02058 
0F54 02059 _PUSHACC6_EVENT:
               02060 ;       bc      _EVENT ; removed by bc2asm
               02061         M_PUSH
0F54 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F58 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F5C 0E0D          M                 movlw   (STACK_END - 0x1)
0F5E 64DA          M                 cpfsgt  FSR2H
0F60 D4C7          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02062         M_ACC   6
0F62 EB0D FF56     M                 movsf   [2 * N + 1], ACCUL
0F66 EB0E FF57     M                 movsf   [2 * N + 2], ACCUH
0F6A 0012      02063         return
               02064 
0F6C 02065 _PUSHACC7_BREAK:
               02066 ;       bc      _BREAK  ; removed by bc2asm
               02067         M_PUSH
0F6C CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F70 CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F74 0E0D          M                 movlw   (STACK_END - 0x1)
0F76 64DA          M                 cpfsgt  FSR2H
0F78 D4BB          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
               02068         M_ACC   7
0F7A EB0F FF56     M                 movsf   [2 * N + 1], ACCUL
0F7E EB10 FF57     M                 movsf   [2 * N + 2], ACCUH
0F82 0012      02069         return
               02070 
0F84 02071 _BREAK:
0F84 02072 _EVENT:
0F84 02073 _PUSHATOM:
0F84 02074 _ATOM:
0F84 02075 _CHECKSIGNALS:
0F84 02076 _STOP:
0F84 0003      02077         sleep
0F86 D7FE      02078         bra     _STOP
               02079 
               02080 
               02081 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02082 ;;;;;;;;                                   ;;;;;;;;
               02083 ;;;;;;;;               BLOCKS              ;;;;;;;;
               02084 ;;;;;;;;                                   ;;;;;;;;
               02085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02086 
0F88 02087 _PUSHATOM0:
               02088         M_PUSH                  ; fallthrough
0F88 CF57 FFDD     M                 movff   ACCUH, POSTDEC2
0F8C CF56 FFDD     M                 movff   ACCUL, POSTDEC2
0F90 0E0D          M                 movlw   (STACK_END - 0x1)
0F92 64DA          M                 cpfsgt  FSR2H
0F94 D4AD          M                 bra     _INDIRECT_CAML_RAISE_STACK_OVERFLOW
0F96 02089 _ATOM0:
               02090         M_ATOM0
0F96 0E88          M                 movlw   low ATOM0_ADR
0F98 6F56          M                 movwf   ACCUL
0F9A 0E0F          M                 movlw   high ATOM0_ADR
0F9C 6F57          M                 movwf   ACCUH
0F9E 0012      02091         return
               02092 
0FA0 02093 _MAKEBLOCK:
0FA0 0009      02094         tblrd*+                  ; read size
0FA2 DA31      02095         rcall   _CHECK_UNFULL_HEAP_GEN
0FA4 50F5      02096         movf    TABLAT, W
0FA6 0009      02097         tblrd*+                  ; read tag
0FA8 CFF5 FFE6 02098         movff   TABLAT, POSTINC1 ; write tag
0FAC 6EE6      02099         movwf   POSTINC1         ; write size
0FAE 0FFD      02100         addlw   -0x3
0FB0 6F68      02101         movwf   TMP_REG_1        ; TMP_REG_1 <- size - 3
0FB2 50E1      02102         movf    FSR1L, W         ; ACCU <- FSR1 ; *FSR1 <- ACCU ; FSR1 += 2
0FB4 CF56 FFE6 02103         movff   ACCUL, POSTINC1
0FB8 6F56      02104         movwf   ACCUL
0FBA 50E2      02105         movf    FSR1H, W         ; ok because block address are even
0FBC CF57 FFE6 02106         movff   ACCUH, POSTINC1
0FC0 6F57      02107         movwf   ACCUH
0FC2 CFDC FFE6 02108         movff   PREINC2, POSTINC1
0FC6 CFDC FFE6 02109         movff   PREINC2, POSTINC1
0FCA CFDC FFE6 02110         movff   PREINC2, POSTINC1
0FCE CFDC FFE6 02111         movff   PREINC2, POSTINC1
0FD2 02112 _MAKEBLOCK_LOOP:
0FD2 CFDC FFE6 02113         movff   PREINC2, POSTINC1
0FD6 CFDC FFE6 02114         movff   PREINC2, POSTINC1
0FDA 2F68      02115         decfsz  TMP_REG_1, F
0FDC D7FA      02116         bra     _MAKEBLOCK_LOOP
0FDE 0012      02117         return
               02118 
0FE0 02119 _MAKEBLOCK1:
               02120         M_CHECK_UNFULL_HEAP 0x1
0FE0 515E          M                 movf    CUR_HEAP_END, W
0FE2 62E2          M                 cpfseq  FSR1H
0FE4 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
0FE6 0E04          M                 movlw   (N * 0x2 + 0x2)
0FE8 24E1          M                 addwf   FSR1L, W
0FEA E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M 
0FEC EC6D F00A     M                 call    caml_gc_exec
                   M 
0FF0 515E          M                 movf    CUR_HEAP_END, W
0FF2 62E2          M                 cpfseq  FSR1H
0FF4 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
0FF6 0E04          M                 movlw   (N * 0x2 + 0x2)
0FF8 24E1          M                 addwf   FSR1L, W
0FFA B0D8          M                 btfsc   STATUS, C
0FFC EFAC F009     M                 goto    caml_raise_out_of_memory
1000     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000001         M CPT_CUH = CPT_CUH + 1
1000 0009      02121         tblrd*+
1002 CFF5 FFE6 02122         movff   TABLAT, POSTINC1
1006 0E01      02123         movlw   0x1
1008 6EE6      02124         movwf   POSTINC1
100A 50E1      02125         movf    FSR1L, W
100C CF56 FFE6 02126         movff   ACCUL, POSTINC1
1010 6F56      02127         movwf   ACCUL
1012 50E2      02128         movf    FSR1H, W
1014 CF57 FFE6 02129         movff   ACCUH, POSTINC1
1018 6F57      02130         movwf   ACCUH
101A 0012      02131         return
               02132 
101C 02133 _MAKEBLOCK2:
               02134         M_CHECK_UNFULL_HEAP 0x2
101C 515E          M                 movf    CUR_HEAP_END, W
101E 62E2          M                 cpfseq  FSR1H
1020 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1022 0E06          M                 movlw   (N * 0x2 + 0x2)
1024 24E1          M                 addwf   FSR1L, W
1026 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1028 EC6D F00A     M                 call    caml_gc_exec
                   M 
102C 515E          M                 movf    CUR_HEAP_END, W
102E 62E2          M                 cpfseq  FSR1H
1030 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1032 0E06          M                 movlw   (N * 0x2 + 0x2)
1034 24E1          M                 addwf   FSR1L, W
1036 B0D8          M                 btfsc   STATUS, C
1038 EFAC F009     M                 goto    caml_raise_out_of_memory
103C     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000002         M CPT_CUH = CPT_CUH + 1
103C 0009      02135         tblrd*+
103E CFF5 FFE6 02136         movff   TABLAT, POSTINC1
1042 0E02      02137         movlw   0x2
1044 6EE6      02138         movwf   POSTINC1
1046 50E1      02139         movf    FSR1L, W
1048 CF56 FFE6 02140         movff   ACCUL, POSTINC1
104C 6F56      02141         movwf   ACCUL
104E 50E2      02142         movf    FSR1H, W
1050 CF57 FFE6 02143         movff   ACCUH, POSTINC1
1054 6F57      02144         movwf   ACCUH
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1056 CFDC FFE6 02145         movff   PREINC2, POSTINC1
105A CFDC FFE6 02146         movff   PREINC2, POSTINC1
105E 0012      02147         return
               02148 
1060 02149 _MAKEBLOCK3:
               02150         M_CHECK_UNFULL_HEAP 0x3
1060 515E          M                 movf    CUR_HEAP_END, W
1062 62E2          M                 cpfseq  FSR1H
1064 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1066 0E08          M                 movlw   (N * 0x2 + 0x2)
1068 24E1          M                 addwf   FSR1L, W
106A E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
106C EC6D F00A     M                 call    caml_gc_exec
                   M 
1070 515E          M                 movf    CUR_HEAP_END, W
1072 62E2          M                 cpfseq  FSR1H
1074 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1076 0E08          M                 movlw   (N * 0x2 + 0x2)
1078 24E1          M                 addwf   FSR1L, W
107A B0D8          M                 btfsc   STATUS, C
107C EFAC F009     M                 goto    caml_raise_out_of_memory
1080     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000003         M CPT_CUH = CPT_CUH + 1
1080 0009      02151         tblrd*+
1082 CFF5 FFE6 02152         movff   TABLAT, POSTINC1
1086 0E03      02153         movlw   0x3
1088 6EE6      02154         movwf   POSTINC1
108A 50E1      02155         movf    FSR1L, W
108C CF56 FFE6 02156         movff   ACCUL, POSTINC1
1090 6F56      02157         movwf   ACCUL
1092 50E2      02158         movf    FSR1H, W
1094 CF57 FFE6 02159         movff   ACCUH, POSTINC1
1098 6F57      02160         movwf   ACCUH
109A CFDC FFE6 02161         movff   PREINC2, POSTINC1
109E CFDC FFE6 02162         movff   PREINC2, POSTINC1
10A2 CFDC FFE6 02163         movff   PREINC2, POSTINC1
10A6 CFDC FFE6 02164         movff   PREINC2, POSTINC1
10AA 0012      02165         return
               02166         
               02167 
               02168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02169 ;;;;;;;;                                   ;;;;;;;;
               02170 ;;;;;;;;              FLOAT                ;;;;;;;;
               02171 ;;;;;;;;                                   ;;;;;;;;
               02172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02173 
10AC 02174 _MAKEFLOATBLOCK:
10AC 0009      02175         tblrd*+                         ; read size
10AE D9AB      02176         rcall   _CHECK_UNFULL_HEAP_GEN
10B0 0EFE      02177         movlw   DOUBLE_ARRAY_TAG        ; write tag
10B2 6EE6      02178         movwf   POSTINC1
10B4 CFF5 FFE6 02179         movff   TABLAT, POSTINC1        ; write size
10B8 CF56 FFE9 02180         movff   ACCUL, FSR0L            ; FSR0 <- ACCU
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
10BC CF57 FFEA 02181         movff   ACCUH, FSR0H
10C0 CFE1 FF56 02182         movff   FSR1L, ACCUL            ; ACCU <- @block
10C4 CFE2 FF57 02183         movff   FSR1H, ACCUH
10C8 CFEE FFE6 02184         movff   POSTINC0, POSTINC1      ; block[0] <- *FSR0 ; FSR1 ++
10CC CFEE FFE6 02185         movff   POSTINC0, POSTINC1
10D0 CFEE FFE6 02186         movff   POSTINC0, POSTINC1
10D4 CFEF FFE6 02187         movff   INDF0, POSTINC1
10D8 42F5      02188         rrncf   TABLAT, F
10DA 4EF5      02189         dcfsnz  TABLAT, F               ; if size = 1 then return
10DC 0012      02190         return
10DE 02191 _MAKEFLOATBLOCK_LOOP:
10DE CFDC FFE9 02192         movff   PREINC2, FSR0L          ; FSR0 <- pop()
10E2 CFDC FFEA 02193         movff   PREINC2, FSR0H
10E6 CFEE FFE6 02194         movff   POSTINC0, POSTINC1      ; *FSR1++ <- *FSR0
10EA CFEE FFE6 02195         movff   POSTINC0, POSTINC1
10EE CFEE FFE6 02196         movff   POSTINC0, POSTINC1
10F2 CFEF FFE6 02197         movff   INDF0, POSTINC1
10F6 2EF5      02198         decfsz  TABLAT, F               ; loop (size-1) times
10F8 D7F2      02199         bra     _MAKEFLOATBLOCK_LOOP
10FA 0012      02200         return
               02201 
10FC 02202 _GETFLOATFIELD:
               02203         M_CHECK_UNFULL_HEAP 0x2
10FC 515E          M                 movf    CUR_HEAP_END, W
10FE 62E2          M                 cpfseq  FSR1H
1100 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1102 0E06          M                 movlw   (N * 0x2 + 0x2)
1104 24E1          M                 addwf   FSR1L, W
1106 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1108 EC6D F00A     M                 call    caml_gc_exec
                   M 
110C 515E          M                 movf    CUR_HEAP_END, W
110E 62E2          M                 cpfseq  FSR1H
1110 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
1112 0E06          M                 movlw   (N * 0x2 + 0x2)
1114 24E1          M                 addwf   FSR1L, W
1116 B0D8          M                 btfsc   STATUS, C
1118 EFAC F009     M                 goto    caml_raise_out_of_memory
111C     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000004         M CPT_CUH = CPT_CUH + 1
111C 0009      02204         tblrd*+
111E 50F5      02205         movf    TABLAT, W       ; FSR0 <- ACCU + 2 * n
1120 2556      02206         addwf   ACCUL, W
1122 6EE9      02207         movwf   FSR0L
1124 0E00      02208         movlw   0x0
1126 2157      02209         addwfc  ACCUH, W
1128 6EEA      02210         movwf   FSR0H
112A 50F5      02211         movf    TABLAT, W
112C 26E9      02212         addwf   FSR0L, F
112E B0D8      02213         btfsc   STATUS, C
1130 2AEA      02214         incf    FSR0H, F
1132 0EFD      02215         movlw   DOUBLE_TAG      ; write tag
1134 6EE6      02216         movwf   POSTINC1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1136 0E02      02217         movlw   0x2             ; write size
1138 6EE6      02218         movwf   POSTINC1
113A CFE1 FF56 02219         movff   FSR1L, ACCUL    ; ACCU <- @float
113E CFE2 FF57 02220         movff   FSR1H, ACCUH
1142 CFEE FFE6 02221         movff   POSTINC0, POSTINC1 ; copy float
1146 CFEE FFE6 02222         movff   POSTINC0, POSTINC1
114A CFEE FFE6 02223         movff   POSTINC0, POSTINC1
114E CFEF FFE6 02224         movff   INDF0, POSTINC1
1152 0012      02225         return
               02226         
1154 02227 _SETFLOATFIELD:
1154 CFDE FFE9 02228         movff   POSTINC2, FSR0L         ; TMP_REG_4:3:2:1 <- *pop()
1158 CFDE FFEA 02229         movff   POSTINC2, FSR0H
115C CFEE FF68 02230         movff   POSTINC0, TMP_REG_1
1160 CFEE FF69 02231         movff   POSTINC0, TMP_REG_2
1164 CFEE FF6A 02232         movff   POSTINC0, TMP_REG_3
1168 CFEF FF6B 02233         movff   INDF0, TMP_REG_4
116C CF56 FFE9 02234         movff   ACCUL, FSR0L            ; FSR0 <- ACCU + n
1170 CF57 FFEA 02235         movff   ACCUH, FSR0H
1174 0009      02236         tblrd*+                         ; read n
1176 50F5      02237         movf    TABLAT, W
1178 2556      02238         addwf   ACCUL, W
117A 6EE9      02239         movwf   FSR0L
117C 0E00      02240         movlw   0x0
117E 2157      02241         addwfc  ACCUH, W
1180 6EEA      02242         movwf   FSR0H
1182 50F5      02243         movf    TABLAT, W
1184 26E9      02244         addwf   FSR0L, F
1186 B0D8      02245         btfsc   STATUS, C
1188 2AEA      02246         incf    FSR0H, F
118A CF68 FFEE 02247         movff   TMP_REG_1, POSTINC0     ; write the float
118E CF69 FFEE 02248         movff   TMP_REG_2, POSTINC0
1192 CF6A FFEE 02249         movff   TMP_REG_3, POSTINC0
1196 CF6B FFEF 02250         movff   TMP_REG_4, INDF0
               02251         M_CONST 0                       ; return ()
119A 0E01          M                 movlw   2 * N + 1
119C 6F56          M                 movwf   ACCUL
119E 6B57          M                 clrf    ACCUH
11A0 0012      02252         return
               02253 
               02254 
               02255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02256 ;;;;;;;;                                   ;;;;;;;;
               02257 ;;;;;;;;             ARITHMETIC            ;;;;;;;;
               02258 ;;;;;;;;                                   ;;;;;;;;
               02259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02260 
11A2 02261 _BOOLNOT:
11A2 0556      02262         decf    ACCUL, W
11A4 1157      02263         iorwf   ACCUH, W
11A6 0E01      02264         movlw   0x1
11A8 B4D8      02265         btfsc   STATUS, Z
11AA 0E03      02266         movlw   0x3
11AC 6F56      02267         movwf   ACCUL
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
11AE 6B57      02268         clrf    ACCUH
11B0 0012      02269         return
               02270 
11B2 02271 _MULINT:
11B2 D013      02272         bra     _INDIRECTED_MULINT
               02273 
11B4 02274 _MODINT:
11B4 D079      02275         bra     _INDIRECTED_MODINT
               02276 
11B6 02277 _DIVINT:
11B6 D028      02278         bra     _INDIRECTED_DIVINT
               02279         
11B8 02280 _NEGINT:
11B8 1F56      02281         comf    ACCUL, F
11BA 1F57      02282         comf    ACCUH, F
11BC 0E03      02283         movlw   0x3
11BE 2756      02284         addwf   ACCUL, F
11C0 B0D8      02285         btfsc   STATUS, C
11C2 2B57      02286         incf    ACCUH, F
11C4 0012      02287         return
               02288 
11C6 02289 _ADDINT:
11C6 04DC      02290         decf    PREINC2, W
11C8 2756      02291         addwf   ACCUL, F
11CA 50DC      02292         movf    PREINC2, W
11CC 2357      02293         addwfc  ACCUH, F
11CE 0012      02294         return
               02295 
11D0 02296 _SUBINT:
11D0 04DC      02297         decf    PREINC2, W
11D2 5F56      02298         subwf   ACCUL, F
11D4 50DC      02299         movf    PREINC2, W
11D6 5B57      02300         subwfb  ACCUH, F
11D8 0012      02301         return
               02302 
11DA 02303 _INDIRECTED_MULINT:
11DA 90D8      02304         bcf     STATUS, C
11DC 3202      02305         rrcf    [0x2], F     ; yH = [0x2]
11DE 3201      02306         rrcf    [0x1], F     ; yL = [0x1]
11E0 90D8      02307         bcf     STATUS, C
11E2 3157      02308         rrcf    ACCUH, W
11E4 6F69      02309         movwf   TMP_REG_2    ; xH = TMP_REG_2
11E6 3156      02310         rrcf    ACCUL, W     ; xL = W
11E8 0201      02311         mulwf   [0x1]        ; [ACCUH:ACCUL] <- xL * yL
11EA CFF3 FF56 02312         movff   PRODL, ACCUL
11EE CFF4 FF57 02313         movff   PRODH, ACCUH
11F2 0202      02314         mulwf   [0x2]        ; ACCUH <- ACCUH + xL * yH
11F4 50F3      02315         movf    PRODL, W
11F6 2757      02316         addwf   ACCUH, F
11F8 5169      02317         movf    TMP_REG_2, W ; ACCUH <- ACCUH + xH * yL
11FA 0201      02318         mulwf   [0x1]
11FC 50F3      02319         movf    PRODL, W
11FE 2757      02320         addwf   ACCUH, F
1200 80D8      02321         bsf     STATUS, C    ; [ACCUH:ACCUL] <- ([ACCUH:ACCUL] << 1) | 1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1202 3756      02322         rlcf    ACCUL, F
1204 3757      02323         rlcf    ACCUH, F
1206 E8C2      02324         addulnk 0x2          ; pop y
               02325 
1208 02326 _INDIRECTED_DIVINT:
1208 3402      02327         rlcf    [0x2], W        ; capture sign bit
120A 3202      02328         rrcf    [0x2], F        ; yH = [0x2]
120C 3201      02329         rrcf    [0x1], F        ; yL = [0x1]
               02330 
120E 5001      02331         movf    [0x1], W        ; y = 0 ?
1210 1002      02332         iorwf   [0x2], W
1212 E048      02333         bz      _INDIRECT_RAISE_DIV_BY_0
               02334 
1214 3557      02335         rlcf    ACCUH, W        ; capture sign bit
1216 3157      02336         rrcf    ACCUH, W        ; xH = TMP_REG_2
1218 6F69      02337         movwf   TMP_REG_2
121A 3156      02338         rrcf    ACCUL, W        ; xL = TMP_REG_1
121C 6F68      02339         movwf   TMP_REG_1
               02340         
121E 916C      02341         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = result sign
               02342 
1220 AF69      02343         btfss   TMP_REG_2, 7    ; x < 0 ?
1222 D005      02344         bra     _DIVINT_L0      ; no => skip
1224 1F68      02345         comf    TMP_REG_1, F    ; yes => negate x
1226 1F69      02346         comf    TMP_REG_2, F
1228 4B68      02347         infsnz  TMP_REG_1, F
122A 2B69      02348         incf    TMP_REG_2, F
122C 716C      02349         btg     TMP_REG_5, 0    ; update result sign
               02350         
122E 02351 _DIVINT_L0:
122E AE02      02352         btfss   [0x2], 7        ; y < 0 ?
1230 D005      02353         bra     _DIVINT_L1      ; no => skip
1232 1E01      02354         comf    [0x1], F        ; yes => negate y
1234 1E02      02355         comf    [0x2], F
1236 4A01      02356         infsnz  [0x1], F
1238 2A02      02357         incf    [0x2], F
123A 716C      02358         btg     TMP_REG_5, 0    ; update result sign
               02359         
123C 02360 _DIVINT_L1:
123C 6B56      02361         clrf    ACCUL           ; init result to 00...001
123E 6B57      02362         clrf    ACCUH
1240 8156      02363         bsf     ACCUL, 0
               02364 
1242 6B6A      02365         clrf    TMP_REG_3       ; init bit raw to 00...010
1244 6B6B      02366         clrf    TMP_REG_4
1246 836A      02367         bsf     TMP_REG_3, 1
               02368         
1248 02369 _DIVINT_LOOP1:
1248 90D8      02370         bcf     STATUS, C       ; y <- y << 1
124A 3601      02371         rlcf    [0x1], F
124C 3602      02372         rlcf    [0x2], F
               02373 
124E 5002      02374         movf    [0x2], W        ; xH - yH
1250 5D69      02375         subwf   TMP_REG_2, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1252 E308      02376         bnc     _DIVINT_LOOP2   ; if C = 0 (xH < yH) then break
1254 E103      02377         bnz     _DIVINT_IF_L1   ; if Z = 0 (xH > yH) then continue
1256 5001      02378         movf    [0x1], W        ; xL - yL
1258 5D68      02379         subwf   TMP_REG_1, W
125A E304      02380         bnc     _DIVINT_LOOP2   ; if C = 0 (xL < yL) then break
               02381 
125C 02382 _DIVINT_IF_L1:
125C 90D8      02383         bcf     STATUS, C       ; raw <- raw << 1
125E 376A      02384         rlcf    TMP_REG_3, F
1260 376B      02385         rlcf    TMP_REG_4, F
               02386 
1262 D7F2      02387         bra     _DIVINT_LOOP1   ; loop
               02388 
1264 02389 _DIVINT_LOOP2:
1264 90D8      02390         bcf     STATUS, C       ; y <- y >> 1
1266 3202      02391         rrcf    [0x2], F
1268 3201      02392         rrcf    [0x1], F
               02393 
126A 5002      02394         movf    [0x2], W        ; xH - yH
126C 5D69      02395         subwf   TMP_REG_2, W
126E E30C      02396         bnc     _DIVINT_IFN_L2  ; if C = 0 (xH < yH) then skip
1270 E103      02397         bnz     _DIVINT_IF_L2   ; if Z = 0 (xH > yH) then continue
1272 5001      02398         movf    [0x1], W        ; xL - yL
1274 5D68      02399         subwf   TMP_REG_1, W
1276 E308      02400         bnc     _DIVINT_IFN_L2  ; if C = 0 (xL < yL) then skip
               02401 
1278 02402 _DIVINT_IF_L2:
1278 5001      02403         movf    [0x1], W        ; x <- x - y
127A 5F68      02404         subwf   TMP_REG_1, F
127C 5002      02405         movf    [0x2], W
127E 5B69      02406         subwfb  TMP_REG_2, F
               02407         
1280 516A      02408         movf    TMP_REG_3, W    ; ACCU <- ACCU | raw
1282 1356      02409         iorwf   ACCUL, F
1284 516B      02410         movf    TMP_REG_4, W
1286 1357      02411         iorwf   ACCUH, F
               02412         
1288 02413 _DIVINT_IFN_L2:
1288 90D8      02414         bcf     STATUS, C       ; raw <- raw >> 1
128A 336B      02415         rrcf    TMP_REG_4, F
128C 336A      02416         rrcf    TMP_REG_3, F
               02417 
128E A16A      02418         btfss   TMP_REG_3, 0    ; if raw.0 = 0
1290 D7E9      02419         bra     _DIVINT_LOOP2   ; then loop
               02420 
1292 A16C      02421         btfss   TMP_REG_5, 0    ; negative result ?
1294 E8C2      02422         addulnk 0x2             ; no => division done
1296 1F56      02423         comf    ACCUL, F        ; yes => negate result
1298 1F57      02424         comf    ACCUH, F
129A 0E03      02425         movlw   0x3
129C 2756      02426         addwf   ACCUL, F
129E B0D8      02427         btfsc   STATUS, C
12A0 2B57      02428         incf    ACCUH, F
12A2 E8C2      02429         addulnk 0x2             ; division done
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02430         
12A4 02431 _INDIRECT_RAISE_DIV_BY_0:
12A4 EFB2 F009 02432         goto    caml_raise_division_by_0
               02433 
12A8 02434 _INDIRECTED_MODINT:
12A8 3402      02435         rlcf    [0x2], W        ; capture sign bit
12AA 3202      02436         rrcf    [0x2], F        ; yH = [0x2]
12AC 3201      02437         rrcf    [0x1], F        ; yL = [0x1]
               02438 
12AE 5001      02439         movf    [0x1], W        ; y = 0 ?
12B0 1002      02440         iorwf   [0x2], W
12B2 E0F8      02441         bz      _INDIRECT_RAISE_DIV_BY_0
               02442 
12B4 3557      02443         rlcf    ACCUH, W        ; capture sign bit
12B6 3357      02444         rrcf    ACCUH, F        ; xH = ACCUH
12B8 3356      02445         rrcf    ACCUL, F        ; xL = ACCUL
               02446         
12BA 916C      02447         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = result sign
               02448 
12BC AF57      02449         btfss   ACCUH, 7        ; x < 0 ?
12BE D005      02450         bra     _MODINT_L0      ; no => skip
12C0 1F56      02451         comf    ACCUL, F        ; yes => negate x
12C2 1F57      02452         comf    ACCUH, F
12C4 4B56      02453         infsnz  ACCUL, F
12C6 2B57      02454         incf    ACCUH, F
12C8 816C      02455         bsf     TMP_REG_5, 0    ; negative result
               02456         
12CA 02457 _MODINT_L0:
12CA AE02      02458         btfss   [0x2], 7        ; y < 0 ?
12CC D004      02459         bra     _MODINT_L1      ; no => skip
12CE 1E01      02460         comf    [0x1], F        ; yes => negate y
12D0 1E02      02461         comf    [0x2], F
12D2 4A01      02462         infsnz  [0x1], F
12D4 2A02      02463         incf    [0x2], F
               02464         
12D6 02465 _MODINT_L1:
12D6 6B6A      02466         clrf    TMP_REG_3       ; counter = TMP_REG_3 <- 0
               02467 
12D8 02468 _MODINT_LOOP1:
12D8 90D8      02469         bcf     STATUS, C       ; y <- y << 1
12DA 3601      02470         rlcf    [0x1], F
12DC 3602      02471         rlcf    [0x2], F
               02472 
12DE 2B6A      02473         incf    TMP_REG_3, F    ; incr counter
               02474         
12E0 5002      02475         movf    [0x2], W        ; xH - yH
12E2 5D57      02476         subwf   ACCUH, W
12E4 E304      02477         bnc     _MODINT_LOOP2   ; if C = 0 (xH < yH) then break
12E6 E1F8      02478         bnz     _MODINT_LOOP1   ; if Z = 0 (xH > yH) then loop
12E8 5001      02479         movf    [0x1], W        ; xL - yL
12EA 5D56      02480         subwf   ACCUL, W
12EC E2F5      02481         bc      _MODINT_LOOP1   ; if C = 1 (xL >= yL) then loop
               02482         
12EE 02483 _MODINT_LOOP2:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
12EE 90D8      02484         bcf     STATUS, C       ; y <- y >> 1
12F0 3202      02485         rrcf    [0x2], F
12F2 3201      02486         rrcf    [0x1], F
               02487 
12F4 5002      02488         movf    [0x2], W        ; xH - yH
12F6 5D57      02489         subwf   ACCUH, W
12F8 E308      02490         bnc     _MODINT_IFN_L2  ; if C = 0 (xH < yH) then skip
12FA E103      02491         bnz     _MODINT_IF_L2   ; if Z = 0 (xH > yH) then do not skip
12FC 5001      02492         movf    [0x1], W        ; xL - yL
12FE 5D56      02493         subwf   ACCUL, W
1300 E304      02494         bnc     _MODINT_IFN_L2  ; if C = 0 (xL < yL) then skip
               02495 
1302 02496 _MODINT_IF_L2:
1302 5001      02497         movf    [0x1], W        ; x <- x - y
1304 5F56      02498         subwf   ACCUL, F
1306 5002      02499         movf    [0x2], W
1308 5B57      02500         subwfb  ACCUH, F
               02501         
130A 02502 _MODINT_IFN_L2:
130A 2F6A      02503         decfsz  TMP_REG_3, F    ; decr counter
130C D7F0      02504         bra     _MODINT_LOOP2   ; if counter <> 0 then loop
               02505 
130E 80D8      02506         bsf     STATUS, C       ; ACCU <- (ACCU << 1) | 1
1310 3756      02507         rlcf    ACCUL, F
1312 3757      02508         rlcf    ACCUH, F
               02509         
1314 A16C      02510         btfss   TMP_REG_5, 0    ; negative result ?
1316 E8C2      02511         addulnk 0x2             ; no => modulo done
1318 1F56      02512         comf    ACCUL, F        ; yes => negate result
131A 1F57      02513         comf    ACCUH, F
131C 0E03      02514         movlw   0x3
131E 2756      02515         addwf   ACCUL, F
1320 B0D8      02516         btfsc   STATUS, C
1322 2B57      02517         incf    ACCUH, F
1324 E8C2      02518         addulnk 0x2             ; modulo done
               02519 
               02520 
               02521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02522 ;;;;;;;;                                   ;;;;;;;;
               02523 ;;;;;;;;           THE BIG LOOP            ;;;;;;;;
               02524 ;;;;;;;;                                   ;;;;;;;;
               02525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02526 
               02527 #ifndef caml_useprim_caml_set_interruption_handler
1326 02528 _THE_BIG_LOOP:
1326 0009      02529         tblrd*+                 ; load opcode
1328 34F5      02530         rlcf    TABLAT, W       ; shift opcode
132A 0014      02531         callw                   ; indirect to "the big switch"
132C 0009      02532         tblrd*+                 ; unroll 1
132E 34F5      02533         rlcf    TABLAT, W
1330 0014      02534         callw
1332 0009      02535         tblrd*+                 ; unroll 2
1334 34F5      02536         rlcf    TABLAT, W
1336 0014      02537         callw
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1338 0009      02538         tblrd*+                 ; unroll 3
133A 34F5      02539         rlcf    TABLAT, W
133C 0014      02540         callw
133E 0009      02541         tblrd*+                 ; unroll 4
1340 34F5      02542         rlcf    TABLAT, W
1342 0014      02543         callw
1344 0009      02544         tblrd*+                 ; unroll 5
1346 34F5      02545         rlcf    TABLAT, W
1348 0014      02546         callw
134A 0009      02547         tblrd*+                 ; unroll 6
134C 34F5      02548         rlcf    TABLAT, W
134E 0014      02549         callw
1350 0009      02550         tblrd*+                 ; unroll 7
1352 34F5      02551         rlcf    TABLAT, W
1354 0014      02552         callw
1356 D7E7      02553         bra     _THE_BIG_LOOP
               02554 #else
               02555 _THE_BIG_LOOP:
               02556         tblrd*+                 ; load opcode
               02557         rlcf    TABLAT, W       ; shift opcode
               02558         callw                   ; indirect to "the big switch"
               02559         btfsc   INT_FLAGS_3, 7  ; check interrupt_flag
               02560         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02561         tblrd*+                 ; unroll 1
               02562         rlcf    TABLAT, W
               02563         callw
               02564         btfsc   INT_FLAGS_3, 7
               02565         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02566         tblrd*+                 ; unroll 2
               02567         rlcf    TABLAT, W
               02568         callw
               02569         btfsc   INT_FLAGS_3, 7
               02570         bra     _INDIRECTED_CAML_INTERRUPT_HANDLER
               02571         tblrd*+                 ; unroll 3
               02572         rlcf    TABLAT, W
               02573         callw
               02574         btfss   INT_FLAGS_3, 7
               02575         bra     _THE_BIG_LOOP
               02576 _INDIRECTED_CAML_INTERRUPT_HANDLER
               02577         goto    caml_interrupt_handler
               02578 #endif
               00016         include "/usr/local/lib/ocapic/runtime.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
               00012 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00013 ;;;;;;;;                                   ;;;;;;;;
               00014 ;;;;;;;;             FAILURES              ;;;;;;;;
               00015 ;;;;;;;;                                   ;;;;;;;;
               00016 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00017 
               00018 M_RAISE_FROM_GLOBAL macro EXN_IND
               00019                 M_CHECK_UNFULL_HEAP 0x1
               00020                 clrf    POSTINC1        ; write tag
               00021                 movlw   0x1
               00022                 movwf   POSTINC1        ; write size
               00023                 movff   FSR1L, ACCUL    ; ACCU <- exn
               00024                 movff   FSR1H, ACCUH
               00025                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
               00026                 movwf   POSTINC1
               00027                 clrf    POSTINC1
               00028                 bra     caml_extern_raise
               00029         endm
               00030 
               00031 M_WRITE_BYTE macro C
               00032                 movlw   C
               00033                 movwf   POSTINC1
               00034         endm
               00035 
1358 00036 caml_raise_out_of_memory:
1358 0E5C      00037         movlw   low OOM_FIELD0_L
135A 6F56      00038         movwf   ACCUL
135C 0E0F      00039         movlw   high OOM_FIELD0_L
135E 6F57      00040         movwf   ACCUH
1360 EFE8 F009 00041         goto    caml_extern_raise
               00042 
1364 00043 caml_raise_division_by_0:
               00044         M_RAISE_FROM_GLOBAL DIVISION_BY_0_IND
                   M                 M_CHECK_UNFULL_HEAP 0x1
1364 515E          M                 movf    CUR_HEAP_END, W
1366 62E2          M                 cpfseq  FSR1H
1368 D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
136A 0E04          M                 movlw   (N * 0x2 + 0x2)
136C 24E1          M                 addwf   FSR1L, W
136E E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
1370 EC6D F00A     M                 call    caml_gc_exec
                   M 
1374 515E          M                 movf    CUR_HEAP_END, W
1376 62E2          M                 cpfseq  FSR1H
1378 D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
137A 0E04          M                 movlw   (N * 0x2 + 0x2)
137C 24E1          M                 addwf   FSR1L, W
137E B0D8          M                 btfsc   STATUS, C
1380 EFAC F009     M                 goto    caml_raise_out_of_memory
1384     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000005         M CPT_CUH = CPT_CUH + 1
1384 6AE6          M                 clrf    POSTINC1        ; write tag
1386 0E01          M                 movlw   0x1
1388 6EE6          M                 movwf   POSTINC1        ; write size
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
138A CFE1 FF56     M                 movff   FSR1L, ACCUL    ; ACCU <- exn
138E CFE2 FF57     M                 movff   FSR1H, ACCUH
1392 0E0B          M                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
1394 6EE6          M                 movwf   POSTINC1
1396 6AE6          M                 clrf    POSTINC1
1398 D01B          M                 bra     caml_extern_raise
               00045         
139A 00046 caml_raise_stack_overflow:
               00047         M_RAISE_FROM_GLOBAL STACK_OVERFLOW_IND
                   M                 M_CHECK_UNFULL_HEAP 0x1
139A 515E          M                 movf    CUR_HEAP_END, W
139C 62E2          M                 cpfseq  FSR1H
139E D00D          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
13A0 0E04          M                 movlw   (N * 0x2 + 0x2)
13A2 24E1          M                 addwf   FSR1L, W
13A4 E30A          M                 bnc     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
                   M 
13A6 EC6D F00A     M                 call    caml_gc_exec
                   M 
13AA 515E          M                 movf    CUR_HEAP_END, W
13AC 62E2          M                 cpfseq  FSR1H
13AE D005          M                 bra     CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
13B0 0E04          M                 movlw   (N * 0x2 + 0x2)
13B2 24E1          M                 addwf   FSR1L, W
13B4 B0D8          M                 btfsc   STATUS, C
13B6 EFAC F009     M                 goto    caml_raise_out_of_memory
13BA     M CHECK_UNFULL_HEAP_END_#v(CPT_CUH)
  00000006         M CPT_CUH = CPT_CUH + 1
13BA 6AE6          M                 clrf    POSTINC1        ; write tag
13BC 0E01          M                 movlw   0x1
13BE 6EE6          M                 movwf   POSTINC1        ; write size
13C0 CFE1 FF56     M                 movff   FSR1L, ACCUL    ; ACCU <- exn
13C4 CFE2 FF57     M                 movff   FSR1H, ACCUH
13C8 0E11          M                 movlw   (0x2 * EXN_IND + 0x1) ; write EXN_IND
13CA 6EE6          M                 movwf   POSTINC1
13CC 6AE6          M                 clrf    POSTINC1
13CE D000          M                 bra     caml_extern_raise
               00048 
13D0 00049 caml_extern_raise:
13D0 0560      00050         decf    TRAP_SPL, W             ; trapSp = 0 ?
13D2 1161      00051         iorwf   TRAP_SPH, W
13D4 B4D8      00052         btfsc   STATUS, Z
13D6 D5D6      00053         bra     _STOP                   ; yes -> stop
13D8 CF60 FFD9 00054         movff   TRAP_SPL, FSR2L         ; no -> restore stack top
13DC CF61 FFDA 00055         movff   TRAP_SPH, FSR2H
13E0 CFDC FFF6 00056         movff   PREINC2, TBLPTRL        ; set code pointer
13E4 CFDC FFF7 00057         movff   PREINC2, TBLPTRH
13E8 CFDC FF60 00058         movff   PREINC2, TRAP_SPL       ; restore trapSp
13EC CFDC FF61 00059         movff   PREINC2, TRAP_SPH
13F0 CFDC FF54 00060         movff   PREINC2, ENVL           ; restore environment
13F4 CFDC FF55 00061         movff   PREINC2, ENVH
13F8 CFDC FF62 00062         movff   PREINC2, EXTRA_ARGS     ; restore extraArgs
13FC E881      00063         addfsr  FSR2, 0x1
13FE 0E09      00064         movlw   high _THE_BIG_SWITCH    ; restore PCLATH
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1400 6EFA      00065         movwf   PCLATH
1402 6AFC      00066         clrf    STKPTR                  ; clear return stack
1404 D790      00067         bra     _THE_BIG_LOOP           ; goto THE_BIG_LOOP
               00068 
               00069 
               00070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00071 ;;;;;;;;                                   ;;;;;;;;
               00072 ;;;;;;;;               HEAP                ;;;;;;;;
               00073 ;;;;;;;;                                   ;;;;;;;;
               00074 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00075 
               00076         ;; check allocation in heap
               00077         ;; start gc if necessary
               00078         ;; raise exception if memory overflow
               00079         ;; give its argument (the size of block) in TABLAT
1406 00080 _CHECK_UNFULL_HEAP_GEN:
1406 515E      00081         movf    CUR_HEAP_END, W
1408 60E2      00082         cpfslt  FSR1H
140A D009      00083         bra     _CHECK_UNFULL_HEAP_GEN_L0
140C 0FFF      00084         addlw   -0x1
140E 62E2      00085         cpfseq  FSR1H
1410 0012      00086         return
               00087 
               00088         ;; if FSR1H = CUR_HEAP_END - 1
1412 50E1      00089         movf    FSR1L, W
1414 24F5      00090         addwf   TABLAT, W
1416 E206      00091         bc      _CHECK_UNFULL_HEAP_GEN_L1
1418 24F5      00092         addwf   TABLAT, W
141A E206      00093         bc      _CHECK_UNFULL_HEAP_GEN_L2
141C 0012      00094         return
               00095 
               00096         ;; if FSR1H = CUR_HEAP_END
141E 00097 _CHECK_UNFULL_HEAP_GEN_L0:
141E 50E1      00098         movf    FSR1L, W
1420 24F5      00099         addwf   TABLAT, W
1422 E205      00100         bc      _CHECK_UNFULL_HEAP_GEN_L3
1424 00101 _CHECK_UNFULL_HEAP_GEN_L1:
1424 24F5      00102         addwf   TABLAT, W
1426 E203      00103         bc      _CHECK_UNFULL_HEAP_GEN_L3
1428 00104 _CHECK_UNFULL_HEAP_GEN_L2:
1428 0F02      00105         addlw   0x2
142A E201      00106         bc      _CHECK_UNFULL_HEAP_GEN_L3
142C 0012      00107         return
               00108 
142E 00109 _CHECK_UNFULL_HEAP_GEN_L3:
               00110         ;; execute GC
142E D855      00111         rcall   caml_gc_exec
               00112 
               00113         ;; check a new time
1430 515E      00114         movf    CUR_HEAP_END, W
1432 60E2      00115         cpfslt  FSR1H
1434 D009      00116         bra     _CHECK_UNFULL_HEAP_GEN_L4
1436 0FFF      00117         addlw   -0x1
1438 62E2      00118         cpfseq  FSR1H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
143A 0012      00119         return
               00120 
               00121         ;; if FSR1H = CUR_HEAP_END - 1
143C 50E1      00122         movf    FSR1L, W
143E 24F5      00123         addwf   TABLAT, W
1440 E206      00124         bc      _CHECK_UNFULL_HEAP_GEN_L5
1442 24F5      00125         addwf   TABLAT, W
1444 E206      00126         bc      _CHECK_UNFULL_HEAP_GEN_L6
1446 0012      00127         return
               00128 
               00129         ;; if FSR1H = CUR_HEAP_END
1448 00130 _CHECK_UNFULL_HEAP_GEN_L4:
1448 50E1      00131         movf    FSR1L, W
144A 24F5      00132         addwf   TABLAT, W
144C E205      00133         bc      _CHECK_UNFULL_HEAP_GEN_L7
144E 00134 _CHECK_UNFULL_HEAP_GEN_L5:
144E 24F5      00135         addwf   TABLAT, W
1450 E203      00136         bc      _CHECK_UNFULL_HEAP_GEN_L7
1452 00137 _CHECK_UNFULL_HEAP_GEN_L6:
1452 0F02      00138         addlw   0x2
1454 A0D8      00139         btfss   STATUS, C
1456 0012      00140         return
1458 00141 _CHECK_UNFULL_HEAP_GEN_L7:
1458 EFAC F009 00142         goto    caml_raise_out_of_memory
               00143 
               00144 
               00145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00146 ;;;;;;;;                                   ;;;;;;;;
               00147 ;;;;;;;;          ALLOC DUMMY              ;;;;;;;;
               00148 ;;;;;;;;                                   ;;;;;;;;
               00149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00150 
145C 00151 caml_alloc_dummy_float:
145C 5156      00152         movf    ACCUL, W
145E 0BFE      00153         andlw   B'11111110'
1460 E019      00154         bz      caml_alloc_dummy_atom   ; size = 0 ?
1462 6EF5      00155         movwf   TABLAT
1464 EC03 F00A 00156         call    _CHECK_UNFULL_HEAP_GEN
1468 0EFE      00157         movlw   DOUBLE_ARRAY_TAG
146A 6EE6      00158         movwf   POSTINC1                ; write tag
146C D007      00159         bra     caml_alloc_dummy_l0
               00160         
146E 00161 caml_alloc_dummy:
146E 3157      00162         rrcf    ACCUH, W                ; STATUS.C ignored
1470 3156      00163         rrcf    ACCUL, W                ; TABLAT <- size
1472 E010      00164         bz      caml_alloc_dummy_atom   ; size = 0 ?
1474 6EF5      00165         movwf   TABLAT
1476 EC03 F00A 00166         call    _CHECK_UNFULL_HEAP_GEN
147A 6AE6      00167         clrf    POSTINC1                ; write tag
147C 00168 caml_alloc_dummy_l0:
147C 50F5      00169         movf    TABLAT, W               ; write size
147E 6EE6      00170         movwf   POSTINC1
1480 CFE1 FF56 00171         movff   FSR1L, ACCUL
1484 CFE2 FF57 00172         movff   FSR1H, ACCUH
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1488 0E01      00173         movlw   0x1
148A 00174 caml_alloc_dummy_loop:                  ; fill ()
148A 6EE6      00175         movwf   POSTINC1
148C 6AE6      00176         clrf    POSTINC1
148E 2EF5      00177         decfsz  TABLAT, F
1490 D7FC      00178         bra     caml_alloc_dummy_loop
1492 0012      00179         return
1494 00180 caml_alloc_dummy_atom:
               00181         M_ATOM0
1494 0E88          M                 movlw   low ATOM0_ADR
1496 6F56          M                 movwf   ACCUL
1498 0E0F          M                 movlw   high ATOM0_ADR
149A 6F57          M                 movwf   ACCUH
149C 0012      00182         return
               00183         
149E 00184 caml_update_dummy:               ; fail if size = 0
149E CFE1 FF68 00185         movff   FSR1L, TMP_REG_1        ; save FSR1
14A2 CFE2 FF69 00186         movff   FSR1H, TMP_REG_2
14A6 CF56 FFE1 00187         movff   ACCUL, FSR1L            ; FSR1 <- dummy
14AA CF57 FFE2 00188         movff   ACCUH, FSR1H
14AE EB01 FFE9 00189         movsf   [0x1], FSR0L            ; FSR0 <- newval
14B2 EB02 FFEA 00190         movsf   [0x2], FSR0H
14B6 E902      00191         subfsr  FSR0, 0x2
14B8 E942      00192         subfsr  FSR1, 0x2
14BA CFEE FFE6 00193         movff   POSTINC0, POSTINC1      ; copy tag
14BE 50EE      00194         movf    POSTINC0, W             ; read size
14C0 E007      00195         bz      caml_update_dummy_end
14C2 E841      00196         addfsr  FSR1, 0x1
14C4 00197 caml_update_dummy_loop:
14C4 CFEE FFE6 00198         movff   POSTINC0, POSTINC1      ; loop size times
14C8 CFEE FFE6 00199         movff   POSTINC0, POSTINC1
14CC 2EE8      00200         decfsz  WREG, F
14CE D7FA      00201         bra     caml_update_dummy_loop
14D0 00202 caml_update_dummy_end:
14D0 CF68 FFE1 00203         movff   TMP_REG_1, FSR1L        ; restore FSR1
14D4 CF69 FFE2 00204         movff   TMP_REG_2, FSR1H
14D8 0012      00205         return
               00206 
               00207         
               00208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00209 ;;;;;;;;                                   ;;;;;;;;
               00210 ;;;;;;;;          STOP & COPY              ;;;;;;;;
               00211 ;;;;;;;;                                   ;;;;;;;;
               00212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00213 
               00214 #ifdef CAML_STOP_AND_COPY_GC
14DA 00215 caml_gc_exec:
               00216 ;;; PHASE 1: copy all roots if necessary
               00217 
               00218         ;; exchange heap anchors and ends
               00219         ;; FSR1 <- new current heap anchor
14DA 6AE1      00220         clrf    FSR1L
14DC 515F      00221         movf    OTH_HEAP_END, W
14DE 0FFA      00222         addlw   (-HEAP_SIZE + 0x1)
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
14E0 6EE2      00223         movwf   FSR1H
14E2 515F      00224         movf    OTH_HEAP_END, W
14E4 CF5E FF5F 00225         movff   CUR_HEAP_END, OTH_HEAP_END
14E8 6F5E      00226         movwf   CUR_HEAP_END
               00227 
               00228         ;; save stack top in GC_TMP_REG_2:1
               00229         ;; FSR0 <- stack top
14EA 50D9      00230         movf    FSR2L, W
14EC 6F63      00231         movwf   GC_TMP_REG_1
14EE 6EE9      00232         movwf   FSR0L
14F0 50DA      00233         movf    FSR2H, W
14F2 6F64      00234         movwf   GC_TMP_REG_2
14F4 6EEA      00235         movwf   FSR0H
               00236 
               00237         ;; check and copy stack elements
14F6 E801      00238         addfsr  FSR0, 0x1
14F8 D001      00239         bra     caml_sacgc_stack_loop_test
14FA 00240 caml_sacgc_stack_loop:
14FA D82B      00241         rcall   caml_sacgc_check_and_copy
14FC 00242 caml_sacgc_stack_loop_test:
14FC 0E54      00243         movlw   (low (STACK_ANCHOR + 0x1))
14FE 62E9      00244         cpfseq  FSR0L
1500 D7FC      00245         bra     caml_sacgc_stack_loop
1502 0E0F      00246         movlw   (high (STACK_ANCHOR + 0x1))
1504 62EA      00247         cpfseq  FSR0H
1506 D7F9      00248         bra     caml_sacgc_stack_loop
               00249         
               00250         ;; check and copy environment, accu and interrupt_handler
1508 D824      00251         rcall   caml_sacgc_check_and_copy
150A D823      00252         rcall   caml_sacgc_check_and_copy
150C D822      00253         rcall   caml_sacgc_check_and_copy
               00254 
               00255 ;;; PHASE 2: sweep new heap and upgrade it
               00256 
               00257         ;; FSR0 <- new heap anchor
150E 6AE9      00258         clrf    FSR0L
1510 515E      00259         movf    CUR_HEAP_END, W
1512 0FFA      00260         addlw   (-HEAP_SIZE + 0x1)
1514 6EEA      00261         movwf   FSR0H
               00262 
               00263         ;; loop on new heap
1516 D010      00264         bra     caml_sacgc_heap_loop_test
1518 00265 caml_sacgc_heap_loop:
1518 0EFB      00266         movlw   NO_SCAN_TAG
151A 64EE      00267         cpfsgt  POSTINC0        ; read tag
151C D008      00268         bra     caml_sacgc_scan_block
151E 50EE      00269         movf    POSTINC0, W     ; skip block ; read size
1520 26E9      00270         addwf   FSR0L, F        ; FSR0 += 2 * size
1522 B0D8      00271         btfsc   STATUS, C
1524 2AEA      00272         incf    FSR0H, F
1526 26E9      00273         addwf   FSR0L, F
1528 B0D8      00274         btfsc   STATUS, C
152A 2AEA      00275         incf    FSR0H, F
152C D005      00276         bra     caml_sacgc_heap_loop_test
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
152E 00277 caml_sacgc_scan_block:
152E CFEE FF65 00278         movff   POSTINC0, GC_TMP_REG_3  ; GC_TMP_REG_3 <- size
1532 00279 caml_sacgc_loop_block:
1532 D80F      00280         rcall   caml_sacgc_check_and_copy
1534 2F65      00281         decfsz  GC_TMP_REG_3, F         ; loop size times
1536 D7FD      00282         bra     caml_sacgc_loop_block
1538 00283 caml_sacgc_heap_loop_test:              ; if FSR0 = FSR1 then break else loop
1538 50E9      00284         movf    FSR0L, W
153A 62E1      00285         cpfseq  FSR1L
153C D7ED      00286         bra     caml_sacgc_heap_loop
153E 50EA      00287         movf    FSR0H, W
1540 62E2      00288         cpfseq  FSR1H
1542 D7EA      00289         bra     caml_sacgc_heap_loop
               00290         
               00291         ;; restore stack top
1544 CF63 FFD9 00292         movff   GC_TMP_REG_1, FSR2L
1548 CF64 FFDA 00293         movff   GC_TMP_REG_2, FSR2H
               00294         ;; increment counter
154C 4B76      00295         infsnz  GC_COUNTER_L, F
154E 2B77      00296         incf    GC_COUNTER_H, F
1550 0012      00297         return
               00298 
               00299 
1552 00300 caml_sacgc_check_and_copy:
               00301 ;;; check *FSR0
               00302 ;;; if it is a pointer in the old heap then
               00303 ;;;        if it has not been copied then copy;
               00304 ;;;        update *FSR0;
               00305 ;;; increment FSR0 by 2
1552 50EE      00306         movf    POSTINC0, W             ; W <- (*FSR0++)L
1554 B0E8      00307         btfsc   WREG, 0                 ; isint ?
1556 D040      00308         bra     caml_sacgc_copy_skip_1  ; yes -> skip
1558 6ED9      00309         movwf   FSR2L                   ; FSR2L <- low pointer
155A 50ED      00310         movf    POSTDEC0, W             ; W <- (*FSR0--)H
155C 6EDA      00311         movwf   FSR2H                   ; FSR2H <- high pointer
155E 5D5F      00312         subwf   OTH_HEAP_END, W         ; in old heap ?
1560 E33A      00313         bnc     caml_sacgc_copy_skip_2  ; no -> skip
1562 0FF9      00314         addlw   -HEAP_SIZE
1564 E238      00315         bc      caml_sacgc_copy_skip_2  ; no -> skip
1566 E982      00316         subfsr  FSR2, 0x2               ; FSR2 -= 2
1568 0EF9      00317         movlw   INFIX_TAG               ; is infix block ?
156A 6200      00318         cpfseq  [0x0]
156C D014      00319         bra     caml_sacgc_copy_block   ; no -> just copy
156E 5001      00320         movf    [0x1], W                ; yes -> shift FSR2
1570 6F67      00321         movwf   GC_TMP_REG_5            ; save offset in GC_TMP_REG_5
1572 5ED9      00322         subwf   FSR2L, F                ; FSR2 -= 2 * offset
1574 A0D8      00323         btfss   STATUS, C
1576 06DA      00324         decf    FSR2H, F
1578 5ED9      00325         subwf   FSR2L, F
157A A0D8      00326         btfss   STATUS, C
157C 06DA      00327         decf    FSR2H, F
157E D80B      00328         rcall   caml_sacgc_copy_block   ; copy the encapsulating block
1580 5167      00329         movf    GC_TMP_REG_5, W         ; shift result by 2 * offset
1582 E902      00330         subfsr  FSR0, 0x2
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
1584 26EE      00331         addwf   POSTINC0, F
1586 B0D8      00332         btfsc   STATUS, C
1588 2AEF      00333         incf    INDF0, F
158A E901      00334         subfsr  FSR0, 0x1
158C 26EE      00335         addwf   POSTINC0, F
158E B0D8      00336         btfsc   STATUS, C
1590 2AEF      00337         incf    INDF0, F
1592 E801      00338         addfsr  FSR0, 0x1
1594 0012      00339         return
1596 00340 caml_sacgc_copy_block:
1596 5001      00341         movf    [0x1], W                   ; is already copied ? read block size
1598 E105      00342         bnz     caml_sacgc_copy_not_copied ; no -> copy
159A 5002      00343         movf    [0x2], W                   ; yes -> just update *FSR0
159C 6EEE      00344         movwf   POSTINC0
159E 5003      00345         movf    [0x3], W
15A0 6EEE      00346         movwf   POSTINC0
15A2 0012      00347         return
15A4 00348 caml_sacgc_copy_not_copied:             ; copy block
15A4 CFDE FFE6 00349         movff   POSTINC2, POSTINC1      ; copy tag ; FSR2 ++ ; FSR1 ++
15A8 50DF      00350         movf    INDF2, W                ; read size
15AA 6ADE      00351         clrf    POSTINC2                ; clear size ; FSR2 ++
15AC 6EE6      00352         movwf   POSTINC1                ; copy size
15AE 6F66      00353         movwf   GC_TMP_REG_4            ; GC_TMP_REG_4 <- size
15B0 50E1      00354         movf    FSR1L, W                ; *FSR0 <- FSR1 ; *FSR2 <- FSR1
15B2 CFDF FFE6 00355         movff   INDF2, POSTINC1         ; *FSR1 <- *FSR2
15B6 6EEE      00356         movwf   POSTINC0                ; FSR0 += 2 ; FSR1 += 2 ; FSR2 += 2
15B8 6EDE      00357         movwf   POSTINC2
15BA 50E2      00358         movf    FSR1H, W                ; ok because address are even
15BC CFDF FFE6 00359         movff   INDF2, POSTINC1
15C0 6EEE      00360         movwf   POSTINC0
15C2 6EDE      00361         movwf   POSTINC2
15C4 0766      00362         decf    GC_TMP_REG_4, F         ; GC_TMP_REG_4 --
15C6 E009      00363         bz      caml_sacgc_copy_skip_0  ; if size = 1 then skip loop
15C8 00364 caml_sacgc_copy_block_loop:
15C8 CFDE FFE6 00365         movff   POSTINC2, POSTINC1
15CC CFDE FFE6 00366         movff   POSTINC2, POSTINC1
15D0 2F66      00367         decfsz  GC_TMP_REG_4, F         ; loop size - 1 times
15D2 D7FA      00368         bra     caml_sacgc_copy_block_loop
15D4 0012      00369         return
15D6 00370 caml_sacgc_copy_skip_2:
15D6 52EE      00371         movf    POSTINC0, F             ; FSR0 ++
15D8 00372 caml_sacgc_copy_skip_1:
15D8 52EE      00373         movf    POSTINC0, F             ; FSR0 ++
15DA 00374 caml_sacgc_copy_skip_0:
15DA 0012      00375         return
               00376 #endif
               00377 
               00378 
               00379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00380 ;;;;;;;;                                   ;;;;;;;;
               00381 ;;;;;;;;          MARK & COMPACT           ;;;;;;;;
               00382 ;;;;;;;;                                   ;;;;;;;;
               00383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00384 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00385 ; |HXXXHXX:..:...HX:.HX:..HXHXHX:.HXX:...HX:..:..        |
               00386 ;   1   1  11     1 111 11 1 1 1 111  11  1 11    1111
               00387 ;
               00388 ; |HXXXHXX:..:...HX:.HX:..HXHXHX:.HXX:...HX:..:..HX      |
               00389 ;   1   1  11     1 111 11 1 1 1 111  11  1 11    1 1111
               00390 ;         --       --  --       --   --    --       
               00391 
               00392 #ifdef CAML_MARK_AND_COMPACT_GC
               00393 caml_gc_exec:
               00394         ;; FSR2
               00395         movff   FSR2L, GC_TMP_REG_3
               00396         movff   FSR2H, GC_TMP_REG_4
               00397 
               00398         ;; clear the bitmap
               00399         movlw   HEAP2_ANCHOR
               00400         movwf   FSR0H
               00401         clrf    FSR0L
               00402 caml_macgc_clear_bitmap_loop:
               00403         clrf    INDF0
               00404         incfsz  FSR0L, F
               00405         bra     caml_macgc_clear_bitmap_loop
               00406 
               00407         ;; mark 0011 at the end of used heap
               00408         addfsr  FSR1, 0x4
               00409         movff   FSR1L, FSR0L
               00410         movff   FSR1H, FSR0H
               00411         rcall   caml_macgc_set_bit
               00412         addfsr  FSR1, 0x2
               00413         movff   FSR1L, FSR0L
               00414         movff   FSR1H, FSR0H
               00415         rcall   caml_macgc_set_bit
               00416         
               00417         ;; FSR2 <- roots high addr
               00418         addfsr  FSR2, 0x2
               00419         movff   FSR2L, FSR0L
               00420         movff   FSR2H, FSR0H
               00421         rcall   caml_macgc_set_bit
               00422         lfsr    FSR2, INT_FUN_L
               00423         ;; FSR1 <- 0xFFE
               00424         lfsr    FSR1, 0xFFE
               00425 
               00426 ;;; MARKING ALGORITHM
               00427 caml_macgc_mark_start:
               00428         btfsc   [0x0], 0                   ; is *FSR2 a pointer?
               00429         bra     caml_macgc_mark_next       ; no
               00430         movlw   (HEAP1_END + 0x1)          ; is *FSR2 in heap?
               00431         cpfslt  [0x1]
               00432         bra     caml_macgc_mark_next       ; no
               00433         movlw   HEAP1_ANCHOR
               00434         cpfslt  [0x1]
               00435         bra     caml_macgc_mark_test_mark  ; yes
               00436 caml_macgc_mark_next:
               00437         movff   FSR2L, FSR0L               ; FSR0 <- FSR2
               00438         movff   FSR2H, FSR0H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00439         rcall   caml_macgc_test_bit        ; already marked?
               00440         bnz     caml_macgc_mark_end_block  ; yes
               00441         subfsr  FSR2, 0x2                  ; FSR2 --
               00442         bra     caml_macgc_mark_start
               00443 caml_macgc_mark_test_mark:
               00444         movf    [0x0], W                   ; FSR0 <- *FSR2
               00445         movwf   FSR0L
               00446         movf    [0x1], W
               00447         movwf   FSR0H
               00448         subfsr  FSR0, 0x2
               00449         movlw   INFIX_TAG                  ; is infix block?
               00450         cpfseq  INDF0
               00451         bra     caml_macgc_mark_no_infix   ; no
               00452         movf    POSTINC0, F                ; FSR0 ++
               00453         movf    POSTINC0, W                ; W <- offset
               00454         movwf   GC_TMP_REG_1               ; TMP_1 <- offset
               00455         subwf   FSR0L, F                   ; FSR0 -= 2 * offset
               00456         btfss   STATUS, C
               00457         decf    FSR0H, F
               00458         subwf   FSR0L, F
               00459         btfss   STATUS, C
               00460         decf    FSR0H, F
               00461         rcall   caml_macgc_test_and_set_bit ; already marked?
               00462         bnz     caml_macgc_mark_next        ; yes
               00463         movf    [0x0], W
               00464         movwf   FSR0L
               00465         movf    [0x1], W
               00466         movwf   FSR0H
               00467         rcall   caml_macgc_set_bit          ; mark the infix block
               00468         bra     caml_macgc_mark_gen_block
               00469 caml_macgc_mark_no_infix:
               00470         movlw   NO_SCAN_TAG                 ; scan block ?
               00471         cpfsgt  POSTINC0
               00472         bra     caml_macgc_mark_scan_block  ; yes
               00473         movf    POSTINC0, F                 ; FSR0 ++
               00474         rcall   caml_macgc_set_bit          ; mark block
               00475         bra     caml_macgc_mark_next
               00476 caml_macgc_mark_scan_block:
               00477         movf    POSTINC0, F                 ; FSR0 ++
               00478         rcall   caml_macgc_test_and_set_bit ; already marked?
               00479         bnz     caml_macgc_mark_next        ; yes
               00480         clrf    GC_TMP_REG_1                ; TMP_1 <- 0
               00481 caml_macgc_mark_gen_block:
               00482         movff   FSR1L, FSR0L    ; FSR0 <- FSR1
               00483         movff   FSR1H, FSR0H
               00484         movff   FSR2L, FSR1L    ; FSR1 <- FSR2
               00485         movff   FSR2H, FSR1H
               00486         movf    [0x0], W        ; W:GC_TMP_REG_5 <- *FSR2
               00487         movwf   GC_TMP_REG_5
               00488         movf    [0x1], W
               00489         movff   FSR0L, POSTINC2 ; *FSR2 <- FSR0
               00490         movff   FSR0H, INDF2
               00491         movwf   FSR2H           ; FSR2 <- W:GC_TMP_REG_5
               00492         movff   GC_TMP_REG_5, FSR2L
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00493         movf    GC_TMP_REG_1, W
               00494         bz      caml_macgc_mark_gen_block_no_infix
               00495         subwf   FSR2L, F                   ; FSR2 -= 2 * offset
               00496         btfss   STATUS, C
               00497         decf    FSR2H, F
               00498         subwf   FSR2L, F
               00499         btfss   STATUS, C
               00500         decf    FSR2H, F
               00501 caml_macgc_mark_gen_block_no_infix:
               00502         movf    POSTDEC2, W     ; W <- size ; FSR2 -= 2
               00503         movf    POSTDEC2, W
               00504         addwf   FSR2L, F        ; FSR2 += 2 * size
               00505         btfsc   STATUS, C
               00506         incf    FSR2H, F
               00507         addwf   FSR2L, F
               00508         btfsc   STATUS, C
               00509         incf    FSR2H, F
               00510         bra     caml_macgc_mark_start
               00511 caml_macgc_mark_test_infix:
               00512         subfsr  FSR2, 0x2                 ; is infix block?
               00513         movlw   INFIX_TAG
               00514         cpfseq  [0x0]
               00515         bra     caml_macgc_mark_goback_p2 ; no
               00516         subfsr  FSR2, 0x2                 ; skip infix header
               00517         bsf     FSR1L, 0x0                ; tag FSR1
               00518         bra     caml_macgc_mark_start     ; continue scan
               00519 caml_macgc_mark_goback_p2:
               00520         addfsr  FSR2, 0x2       ; restore FSR2
               00521 caml_macgc_mark_goback:
               00522         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00523         movff   FSR2H, FSR0H
               00524         btfss   FSR1L, 0x0      ; is FSR1 tagged?
               00525         bra     caml_macgc_mark_goback_no_infix ; no
               00526         bcf     FSR1L, 0X0      ; untag FSR1
               00527 caml_macgc_mark_goback_infix_loop:
               00528         addfsr  FSR2, 2         ; start at first infix block
               00529         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00530         movff   FSR2H, FSR0H
               00531         rcall   caml_macgc_test_bit ; is marked?
               00532         bz      caml_macgc_mark_goback_infix_loop ; no
               00533         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00534         movff   FSR2H, FSR0H
               00535         rcall   caml_macgc_clear_bit ; unmark infix block
               00536         movff   FSR2L, FSR0L    ; FSR0 <- FSR2
               00537         movff   FSR2H, FSR0H
               00538 caml_macgc_mark_goback_no_infix:
               00539         movff   FSR1L, FSR2L    ; FSR2 <- FSR1
               00540         movff   FSR1H, FSR2H
               00541         movf    [0x0], W        ; FSR1 <- *FSR2
               00542         movwf   FSR1L
               00543         movf    [0x1], W
               00544         movwf   FSR1H
               00545         movf    FSR0L, W        ; *FSR2 <- FSR0
               00546         movwf   [0x0]
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00547         movf    FSR0H, W
               00548         movwf   [0x1]
               00549         bra     caml_macgc_mark_next
               00550 caml_macgc_mark_end_block:
               00551         movlw   0xFE
               00552         cpfseq  FSR1L
               00553         bra     caml_macgc_mark_test_infix
               00554         movlw   0x0F
               00555         cpfseq  FSR1H
               00556         bra     caml_macgc_mark_test_infix
               00557 
               00558 ;;; COMPUTE OFFSETS
               00559         setf    GC_TMP_REG_1                          ; TMP_1 <- B'11111111'
               00560         lfsr    FSR2, 0xF87                           ; FSR2 <- unimplemented @
               00561         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00562         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x01) ; FSR0 <- bitmap @1st fld
               00563         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00564         movwf   GC_TMP_REG_5
               00565         andwf   INDF0, W                              ; first block alive?
               00566         bz      caml_macgc_offset_enter_dead_section  ; no
               00567 caml_macgc_offset_section_loop:
               00568         ;; FSR1 = @ tag of block
               00569         ;; TMP_5|FSR0 = bitmap @ of 1st field
               00570         ;; current [TMP_5|FSR0] bit = 1
               00571         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00572         rlncf   GC_TMP_REG_5, F
               00573 caml_macgc_offset_section_loop_entry:
               00574         movf    PREINC1, W             ; W <- size
               00575         movff   GC_TMP_REG_1, POSTINC1 ; write TMP_1 in the size field
               00576         addwf   FSR1L, F               ; FSR1 += 2 * size
               00577         btfsc   STATUS, C
               00578         incf    FSR1H, F
               00579         addwf   FSR1L, F
               00580         btfsc   STATUS, C
               00581         incf    FSR1H, F
               00582         addwf   FSR0L, F               ; TMP_5|FSR0 += size
               00583         btfsc   STATUS, C
               00584         rlncf   GC_TMP_REG_5, F
               00585         movf    GC_TMP_REG_5, W        ; living block?
               00586         andwf   INDF0, W
               00587         bnz     caml_macgc_offset_section_loop ; yes
               00588 caml_macgc_offset_enter_dead_section:
               00589         ;; FSR1 = @ of 1st free byte of dead section
               00590         ;; TMP_5|FSR0 = bitmap @ of 2nd free word of dead section
               00591         ;; current [TMP_5|FSR0] bit = 0
               00592         movf    GC_TMP_REG_5, W        ; set 2nd bit of dead section
               00593         iorwf   INDF0, F
               00594         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00595         rlncf   GC_TMP_REG_5, F
               00596         movf    GC_TMP_REG_5, W        ; 3rd bit set?
               00597         andwf   INDF0, W
               00598         bnz     caml_macgc_offset_end  ; yes => end of heap
               00599         movf    GC_TMP_REG_5, W        ; set 3rd bit of dead section
               00600         iorwf   INDF0, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00601         swapf   FSR1L, W               ; GC_TMP_REG_1 <- (FSR1 >> 4)
               00602         andlw   B'00001111'
               00603         movwf   GC_TMP_REG_1
               00604         swapf   FSR1H, W
               00605         andlw   B'11110000'
               00606         iorwf   GC_TMP_REG_1, F
               00607         movf    [0x0], W               ; TMP_2 <- low offset
               00608         movwf   GC_TMP_REG_2
               00609         movf    [0x1], W               ; W <- high offset
               00610         movff   FSR1L, FSR2L           ; FSR2 <- FSR1
               00611         movff   FSR1H, FSR2H
               00612         addfsr  FSR1, 0x2              ; FSR1 += 2
               00613         movwf   [0x1]                  ; write offset @ *FSR2
               00614         movf    GC_TMP_REG_2, W
               00615         movwf   [0x0]
               00616         infsnz  [0x0], F               ; (*FSR2) ++
               00617         incf    [0x1], F
               00618 caml_macgc_offset_dead_section_loop:
               00619         infsnz  [0x0], F               ; (*FSR2) ++
               00620         incf    [0x1], F
               00621         addfsr  FSR1, 0x2              ; FSR1 += 2
               00622         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00623         rlncf   GC_TMP_REG_5, F
               00624         movf    GC_TMP_REG_5, W        ; start living block?
               00625         andwf   INDF0, W
               00626         bz      caml_macgc_offset_dead_section_loop ; no => continue
               00627         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00628         rlncf   GC_TMP_REG_5, F
               00629         movf    GC_TMP_REG_5, W        ; end of heap?
               00630         andwf   INDF0, W
               00631         bz      caml_macgc_offset_section_loop_entry ; no
               00632 caml_macgc_offset_end:
               00633         ;; FSR1 = @ end of 1st byte after the end of heap
               00634         ;; TMP_5|FSR0L = bitmap @ of the 3rd bit after the end of heap
               00635         infsnz  FSR0L, F               ; set the 5th bit
               00636         rlncf   GC_TMP_REG_5, F
               00637         infsnz  FSR0L, F
               00638         rlncf   GC_TMP_REG_5, F
               00639         movf    GC_TMP_REG_5, W
               00640         iorwf   INDF0, F
               00641 
               00642 ;;; SHIFT ADDRESSES
               00643         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00644         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x02) ; FSR0 <- bitmap @2nd fld
               00645         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00646         movwf   GC_TMP_REG_5
               00647         andwf   INDF0, W                              ; first block alive?
               00648         bnz      caml_macgc_shift_dead_section        ; no
               00649 caml_macgc_shift_enter_block:
               00650         ;; FSR1 = @ tag of block
               00651         ;; TMP_5|FSR0 = bitmap @ 2nd field
               00652         movlw   NO_SCAN_TAG                 ; scan block ?
               00653         cpfsgt  POSTINC1
               00654         bra     caml_macgc_shift_scan_block ; yes
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00655         movf    POSTINC1, F            ; skip (unsound) size field
               00656 caml_macgc_shift_skip_block_loop:
               00657         addfsr  FSR1, 0x2              ; skip field
               00658         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00659         rlncf   GC_TMP_REG_5, F
               00660         movf    GC_TMP_REG_5, W        ; end of block?
               00661         andwf   INDF0, W
               00662         bz      caml_macgc_shift_skip_block_loop ; no
               00663         bra     caml_macgc_shift_block_end
               00664 caml_macgc_shift_scan_block:
               00665         ;; FSR1 = @ of size field
               00666         ;; TMP_5|FSR0 = bitmap @ of 2nd field
               00667         movf    POSTINC1, F                ; skip (unsound) size field
               00668 caml_macgc_shift_scan_block_loop:
               00669         ;; FSR1 = @ low field
               00670         ;; TMP_5|FSR0 = bitmap @ of next field
               00671         rcall   caml_macgc_shift_address
               00672         movf    POSTINC1, F            ; skip high byte of field
               00673         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00674         rlncf   GC_TMP_REG_5, F
               00675         movf    GC_TMP_REG_5, W        ; end of block?
               00676         andwf   INDF0, W
               00677         bz      caml_macgc_shift_scan_block_loop ; no
               00678 caml_macgc_shift_block_end:
               00679         ;; FSR1 = @ tag of next block | @ first dead byte
               00680         ;; TMP_5|FSR0 = bitmap @ of 1st field
               00681         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00682         rlncf   GC_TMP_REG_5, F
               00683         movf    GC_TMP_REG_5, W        ; start of dead section?
               00684         andwf   INDF0, W
               00685         bz      caml_macgc_shift_enter_block ; no
               00686 caml_macgc_shift_dead_section:
               00687         ;; FSR1 = @ of 3rd word of dead section
               00688         ;; TMP_5|FSR0 = bitmap @ of 2nd free word
               00689         addfsr  FSR1, 0x2              ; FSR1 += 2
               00690 caml_macgc_shift_dead_section_loop:
               00691         ;; FSR1 = @ of 2nd free word of dead section
               00692         ;; TMP_5|FSR0 = bitmap @ of 3rd free word
               00693         addfsr  FSR1, 0x2
               00694         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00695         rlncf   GC_TMP_REG_5, F
               00696         movf    GC_TMP_REG_5, W        ; start living section?
               00697         andwf   INDF0, W
               00698         bz      caml_macgc_shift_dead_section_loop ; no
               00699         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00700         rlncf   GC_TMP_REG_5, F
               00701         movf    GC_TMP_REG_5, W        ; end of heap?
               00702         andwf   INDF0, W
               00703         bz      caml_macgc_shift_enter_block ; no
               00704 
               00705 ;;; SHIFT ROOTS
               00706         movff   GC_TMP_REG_3, FSR1L
               00707         movff   GC_TMP_REG_4, FSR1H
               00708 caml_macgc_shift_roots_loop:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00709         movf    POSTINC1, F
               00710         rcall   caml_macgc_shift_address
               00711         movlw   (low (INT_FUN_H))
               00712         cpfseq  FSR1L
               00713         bra     caml_macgc_shift_roots_loop
               00714         movlw   (high (INT_FUN_H))
               00715         cpfseq  FSR1H
               00716         bra     caml_macgc_shift_roots_loop
               00717 
               00718 ;;; COMPACT BLOCKS & RESTORE SIZES
               00719         lfsr    FSR2, (HEAP1_ANCHOR * 0x100)          ; FSR2 <- @ of 1st block
               00720         lfsr    FSR1, (HEAP1_ANCHOR * 0x100)          ; FSR1 <- @ of 1st block
               00721         lfsr    FSR0, ((HEAP2_ANCHOR * 0x100) | 0x02) ; FSR0 <- bitmap @2nd fld
               00722         movlw   B'00000001'                           ; TMP_5 <- B'00000001'
               00723         movwf   GC_TMP_REG_5
               00724         andwf   INDF0, W                              ; first block alive?
               00725         bnz     caml_macgc_compact_dead_section       ; no
               00726 caml_macgc_compact_section_loop:
               00727         ;; FSR2 = @ tag of from block
               00728         ;; FSR2 = @ tag of to block
               00729         ;; TMP_5|FSR0 = bitmap @ 2nd field
               00730         movff   POSTINC2, POSTINC1     ; copy tag
               00731         clrf    INDF1                  ; to size <- 0
               00732 caml_macgc_compact_block_loop:
               00733         incf    INDF1, F               ; to size ++
               00734         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00735         rlncf   GC_TMP_REG_5, F
               00736         movf    GC_TMP_REG_5, W        ; end of block?
               00737         andwf   INDF0, W
               00738         bz      caml_macgc_compact_block_loop ; no
               00739         movf    POSTINC2, F            ; skip (unsound) from size
               00740         movf    POSTINC1, W            ; W <- to size
               00741 caml_macgc_compact_copy_field_loop:    ; copy fields
               00742         movff   POSTINC2, POSTINC1
               00743         movff   POSTINC2, POSTINC1
               00744         decfsz  WREG, F
               00745         bra     caml_macgc_compact_copy_field_loop
               00746         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00747         rlncf   GC_TMP_REG_5, F
               00748         movf    GC_TMP_REG_5, W        ; start of dead section?
               00749         andwf   INDF0, W
               00750         bz      caml_macgc_compact_section_loop ; no
               00751 caml_macgc_compact_dead_section:
               00752         ;; FSR2 = @ of 1st free byte of dead section
               00753         ;; TMP_5|FSR0 = bitmap @ of 3rd free word
               00754         addfsr  FSR2, 0x2              ; FSR2 += 2
               00755         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00756         rlncf   GC_TMP_REG_5, F
               00757         movf    GC_TMP_REG_5, W        ; start living section?
               00758         andwf   INDF0, W
               00759         bz      caml_macgc_compact_dead_section ; no
               00760         addfsr  FSR2, 0x2              ; FSR2 += 2
               00761         infsnz  FSR0L, F               ; TMP_5|FSR0 ++
               00762         rlncf   GC_TMP_REG_5, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00763         movf    GC_TMP_REG_5, W        ; end of heap?
               00764         andwf   INDF0, W
               00765         bz      caml_macgc_compact_section_loop ; no
               00766         
               00767         ;; restore stack top
               00768         movff   GC_TMP_REG_3, FSR2L
               00769         movff   GC_TMP_REG_4, FSR2H
               00770         ;; increment counter
               00771         infsnz  GC_COUNTER_L, F
               00772         incf    GC_COUNTER_H, F
               00773         return
               00774 
               00775 ;;; Update value pointed by FSR1 (i.e, shift address if needed)
               00776 ;;; Before call: FSR1 = @ of low byte
               00777 ;;; After call: FSR1 = @ of high byte
               00778 caml_macgc_shift_address:
               00779         btfsc   POSTINC1, 0                ; is int?
               00780         return                             ; yes
               00781         movlw   (HEAP1_END + 0x1)          ; is *FSR1 in heap?
               00782         cpfslt  INDF1
               00783         return                             ; no
               00784         movlw   HEAP1_ANCHOR
               00785         cpfslt  INDF1
               00786         bra     caml_macgc_shift_scan_block_update_pointer ; yes
               00787         return
               00788 caml_macgc_shift_scan_block_update_pointer:
               00789         ;; FSR1 = @ of high byte of field
               00790         movff   POSTDEC1, FSR2H        ; FSR2 <- @ of block
               00791         movff   POSTINC1, FSR2L
               00792         subfsr  FSR2, 0x2              ; FSR2 <- @ of tag
               00793         movlw   INFIX_TAG
               00794         cpfseq  POSTINC2, W
               00795         bra     caml_macgc_shift_scan_block_update_pointer_no_infix
               00796         movf    INDF2, W
               00797         subwf   FSR2L, F                   ; FSR2 -= 2 * offset
               00798         btfss   STATUS, C
               00799         decf    FSR2H, F
               00800         subwf   FSR2L, F
               00801         btfss   STATUS, C
               00802         decf    FSR2H, F
               00803 caml_macgc_shift_scan_block_update_pointer_no_infix:
               00804         ;; FSR1 = @ of high byte of field
               00805         ;; FSR2 = @ of size
               00806         infsnz  INDF2, W               ; is FSR2 = 0xFF?
               00807         return                         ; yes => nothing to do
               00808         subfsr  FSR2, 0x5
               00809         swapf   FSR2L, W               ; W <- (FSR2 >> 4)
               00810         andlw   B'00001111'
               00811         movwf   GC_TMP_REG_2
               00812         swapf   FSR2H, W
               00813         andlw   B'11110000'
               00814         iorwf   GC_TMP_REG_2, W
               00815         addfsr  FSR2, 0x5
               00816         cpfseq  POSTINC2               ; local?
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00817         bra     caml_macgc_shift_scan_block_update_distant_pointer ; no
               00818 caml_macgc_shift_scan_block_update_local_pointer:
               00819         ;; FSR2 = @ of 1st field
               00820         movlw   B'00000001'
               00821         rrcf    FSR2H, F
               00822         rrcf    FSR2L, F
               00823         btfsc   FSR2H, 0
               00824         rlncf   WREG, F
               00825         btfss   FSR2H, 1
               00826         bra     caml_macgc_shift_compute_bit_addr_0
               00827         rlncf   WREG, F
               00828         rlncf   WREG, F
               00829 caml_macgc_shift_compute_bit_addr_0:
               00830         btfss   FSR2H, 2
               00831         bra     caml_macgc_shift_compute_bit_addr_1
               00832         rlncf   WREG, F
               00833         rlncf   WREG, F
               00834         rlncf   WREG, F
               00835         rlncf   WREG, F
               00836 caml_macgc_shift_compute_bit_addr_1:
               00837         movwf   GC_TMP_REG_2
               00838         movlw   HEAP2_ANCHOR
               00839         movwf   FSR2H
               00840 caml_macgc_shift_scan_block_update_local_pointer_loop:
               00841         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00842         infsnz  FSR2L, W
               00843         rrncf   GC_TMP_REG_2, F
               00844         movf    GC_TMP_REG_2, W            ; a first 1?
               00845         andwf   INDF2, W
               00846         bz      caml_macgc_shift_scan_block_update_local_pointer_loop ; no
               00847         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00848         infsnz  FSR2L, W
               00849         rrncf   GC_TMP_REG_2, F
               00850         movf    GC_TMP_REG_2, W            ; a second 1?
               00851         andwf   INDF2, W
               00852         bz      caml_macgc_shift_scan_block_update_local_pointer_loop ; no
               00853         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00854         infsnz  FSR2L, W
               00855         rrncf   GC_TMP_REG_2, F
               00856         movf    GC_TMP_REG_2, W            ; a third 1?
               00857         andwf   INDF2, W
               00858         bz      caml_macgc_shift_scan_block_update_local_pointer_end  ; no
               00859         decf    FSR2L, F                   ; TMP_2|FSR2 --
               00860         infsnz  FSR2L, W
               00861         rrncf   GC_TMP_REG_2, F
               00862 caml_macgc_shift_scan_block_update_local_pointer_end:
               00863         clrf    WREG
               00864         bcf     STATUS, C                  ; FSR2 <- bitmap decode FSR2
               00865         rlcf    FSR2L, F
               00866         rlcf    WREG, F
               00867 caml_macgc_shift_scan_block_update_local_pointer_end_decode_loop:
               00868         btfsc   GC_TMP_REG_2, 0
               00869         bra     caml_macgc_shift_scan_block_update_local_pointer_end_decode_end
               00870         addlw   0x2
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00871         rrncf   GC_TMP_REG_2, F
               00872         bra     caml_macgc_shift_scan_block_update_local_pointer_end_decode_loop
               00873 caml_macgc_shift_scan_block_update_local_pointer_end_decode_end:
               00874         movwf   FSR2H
               00875         movf    POSTDEC1, F     ; *FSR1 -= 2 * offset
               00876         movf    [0x0], W
               00877         subwf   POSTINC1, F
               00878         movf    [0x1], W
               00879         subwfb  POSTDEC1, F
               00880         movf    [0x0], W
               00881         subwf   POSTINC1, F
               00882         movf    [0x1], W
               00883         subwfb  INDF1, F
               00884         return
               00885 caml_macgc_shift_scan_block_update_distant_pointer:
               00886         movf    POSTDEC2, F
               00887         swapf   INDF2, W
               00888         movwf   FSR2H
               00889         andlw   B'11111110'
               00890         iorlw   B'00001110'
               00891         movwf   FSR2L
               00892         addfsr  FSR2, 0x6
               00893         bra     caml_macgc_shift_scan_block_update_local_pointer
               00894 
               00895 caml_macgc_set_bit:
               00896 ;;; set the bitmap bit @FSR0
               00897 ;;; use W and GC_TMP_REG_5
               00898         movlw   B'00000001'
               00899         rcall   caml_macgc_compute_bit_addr
               00900         movf    GC_TMP_REG_5, W
               00901         iorwf   INDF0, F
               00902         return
               00903 
               00904 caml_macgc_clear_bit:
               00905 ;;; clear the bitmap bit @FSR0
               00906 ;;; use W and GC_TMP_REG_5
               00907         movlw   B'11111110'
               00908         rcall   caml_macgc_compute_bit_addr
               00909         movf    GC_TMP_REG_5, W
               00910         andwf   INDF0, F
               00911         return
               00912 
               00913 caml_macgc_test_bit:
               00914 ;;; test the bitmap bit @FSR0, result in STATUS.Z
               00915 ;;; use W and GC_TMP_REG_5
               00916         movlw   B'00000001'
               00917         rcall   caml_macgc_compute_bit_addr
               00918         movf    GC_TMP_REG_5, W
               00919         andwf   INDF0, W
               00920         return
               00921 
               00922 caml_macgc_test_and_set_bit:
               00923 ;;; test the bitmap bit @FSR0, set it if not, result in STATUS.Z
               00924 ;;; use W and GC_TMP_REG_5
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00925         movlw   B'00000001'
               00926         rcall   caml_macgc_compute_bit_addr
               00927         movf    GC_TMP_REG_5, W ; test bit
               00928         andwf   INDF0, W
               00929         btfss   STATUS, Z
               00930         return
               00931         movf    GC_TMP_REG_5, W ; set bit
               00932         iorwf   INDF0, F
               00933         bsf     STATUS, Z       ; set STATUS.Z
               00934         return
               00935         
               00936 caml_macgc_compute_bit_addr:
               00937 ;;; FSR0 <- bitmap addr of FSR0
               00938 ;;; rotate W ((FSR0 >> 9) & 0b111) times, result in GC_TMP_REG_5
               00939         rrcf    FSR0H, F
               00940         rrcf    FSR0L, F
               00941         btfsc   FSR0H, 0
               00942         rlncf   WREG, F
               00943         btfss   FSR0H, 1
               00944         bra     caml_macgc_compute_bit_addr_0
               00945         rlncf   WREG, F
               00946         rlncf   WREG, F
               00947 caml_macgc_compute_bit_addr_0:
               00948         btfss   FSR0H, 2
               00949         bra     caml_macgc_compute_bit_addr_1
               00950         rlncf   WREG, F
               00951         rlncf   WREG, F
               00952         rlncf   WREG, F
               00953         rlncf   WREG, F
               00954 caml_macgc_compute_bit_addr_1:
               00955         movwf   GC_TMP_REG_5
               00956         movlw   HEAP2_ANCHOR
               00957         movwf   FSR0H
               00958         return
               00959 #endif
               00017 
1600           00018         org     0x1600
1600 00019 caml_externals:
1600 EF2F F00B 00020         goto    caml_pic_set_bit
1604 EF3A F00B 00021         goto    caml_pic_clear_bit
1608 EF46 F00B 00022         goto    caml_pic_test_bit
               00023 
160C 00024 caml_bytecode:
160C 2B54 2916 00025         db      0x54, 0x2b, 0x16, 0x29, 0x2a, 0x01, 0x01, 0x56
     012A 5601 
1614 1626 8301 00026         db      0x26, 0x16, 0x01, 0x83, 0x03, 0x00, 0x21, 0x16
     0003 1621 
161C 5D00 2800 00027         db      0x00, 0x5d, 0x00, 0x28, 0x04, 0x00, 0x5d, 0x00
     0004 005D 
1624 0428 5D00 00028         db      0x28, 0x04, 0x00, 0x5d, 0x02, 0x28, 0x04, 0x2b
     2802 2B04 
162C 1001 3916 00029         db      0x01, 0x10, 0x16, 0x39, 0x00, 0x00, 0x67, 0x03
     0000 0367 
1634 5D02 5604 00030         db      0x02, 0x5d, 0x04, 0x56, 0x3e, 0x16, 0x63, 0x54
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
     163E 5463 
163C 163F 6C64 00031         db      0x3f, 0x16, 0x64, 0x6c, 0x03, 0x10, 0x36, 0x00
     1003 0036 
1644 2200 0767 00032         db      0x00, 0x22, 0x67, 0x07, 0x02, 0x5d, 0x04, 0x56
     5D02 5604 
164C 1652 5464 00033         db      0x52, 0x16, 0x64, 0x54, 0x53, 0x16, 0x63, 0x6c
     1653 6C63 
1654 0407 0036 00034         db      0x07, 0x04, 0x36, 0x00, 0x00, 0x22, 0x8f
     2200 008F 
165C 00035 caml_globals_init_stack:
165C 0001      00036         db      0x01, 0x00
165E 00037 caml_globals_init_heap:
165E 00038 caml_globals_init_end:
               00039 
               00040         include "/usr/local/lib/ocapic/default-config.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
300000 08FF    00012         config OSC     = INTIO67
300000 08FF    00013         config FCMEN   = OFF
               00014         config PWRT    = ON
               00015         config BOREN   = OFF
300002 1E18    00016         config WDT     = OFF
300004 03FF    00017         config MCLRE   = OFF
300004 03FF    00018         config LPT1OSC = OFF
300004 01FF    00019         config PBADEN  = OFF
300006 FFC4    00020         config STVREN  = OFF
300006 FFC0    00021         config LVP     = OFF
300006 FFC0    00022         config DEBUG   = OFF
               00023         config CP0     = ON
               00024         config CP1     = ON
               00025         config CP2     = ON
               00026         config CP3     = ON
300008 C000    00027         config CPB     = OFF
300008 C000    00028         config CPD     = OFF
               00029         config WRT0    = ON
               00030         config WRT1    = ON
               00031         config WRT2    = ON
               00032         config WRT3    = ON
30000A E000    00033         config WRTB    = OFF
30000A E000    00034         config WRTC    = OFF
30000A E000    00035         config WRTD    = OFF
               00036         config EBTR0   = OFF
               00037         config EBTR1   = OFF
               00038         config EBTR2   = OFF
               00039         config EBTR3   = OFF
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
30000C 400F    00040         config EBTRB   = OFF
               00041         include "/usr/local/lib/ocapic/stdlib.asm"
               00001 ; |=======================================================================|
               00002 ; |                                                                       |
               00003 ; |                                OCaPIC                                 |
               00004 ; |                                                                       |
               00005 ; |                             Benoit Vaugon                             |
               00006 ; |                                                                       |
               00007 ; |    This file is distributed under the terms of the CeCILL license.    |
               00008 ; |    See file ../../LICENSE-en.                                         |
               00009 ; |                                                                       |
               00010 ; |=======================================================================|
               00011 
               00012 
               00013 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00014 ;;;;;;;;                                   ;;;;;;;;
               00015 ;;;;;;;;             STRINGS               ;;;;;;;;
               00016 ;;;;;;;;                                   ;;;;;;;;
               00017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00018 
               00019 #ifdef caml_useprim_caml_blit_string
               00020 caml_blit_string:
               00021         ;; ACCU = src
               00022         ;; [0x2]:[0x1] = srcoff
               00023         ;; [0x4]:[0x3] = dst
               00024         ;; [0x6]:[0x5] = dstoff
               00025         ;; [0x8]:[0x7] = len
               00026         movff   FSR1L, TMP_REG_1 ; save FSR1 in TMP_REG_2:1
               00027         movff   FSR1H, TMP_REG_2
               00028         bcf     STATUS, C       ; FSR0 <- src + srcoff
               00029         rrcf    [0x2], F
               00030         rrcf    [0x1], W
               00031         addwf   ACCUL, W
               00032         movwf   FSR0L
               00033         movf    [0x2], W
               00034         addwfc  ACCUH, W
               00035         movwf   FSR0H
               00036         bcf     STATUS, C       ; FSR1 <- dst + dstoff
               00037         rrcf    [0x6], F
               00038         rrcf    [0x5], W
               00039         addwf   [0x3], W
               00040         movwf   FSR1L
               00041         movf    [0x6], W
               00042         addwfc  [0x4], W
               00043         movwf   FSR1H
               00044         bcf     STATUS, C       ; [0x8]:[0x7] <- len
               00045         rrcf    [0x8], F
               00046         rrcf    [0x7], F
               00047         bz      caml_blit_string_loop_test
               00048 caml_blit_string_loop:
               00049         movff   POSTINC0, POSTINC1
               00050         decfsz  [0x7], F
               00051         bra     caml_blit_string_loop
               00052 caml_blit_string_loop_test:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00053         decf    [0x8], F
               00054         bz      caml_blit_string_loop
               00055         movff   TMP_REG_1, FSR1L ; restore FSR1
               00056         movff   TMP_REG_2, FSR1H
               00057         M_CONST 0               ; return unit
               00058         return
               00059 #endif
               00060 
               00061 #ifdef caml_useprim_caml_ml_string_length
               00062 caml_ml_string_length:
               00063         ;; ACCU = str
               00064         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
               00065         movff   ACCUH, FSR0H
               00066         subfsr  FSR0, 0x1       ; W <- block_size
               00067         movf    POSTINC0, W
               00068         addwf   FSR0L, F        ; FSR0 += 2 * block_size - 1 ; W --
               00069         btfsc   STATUS, C
               00070         incf    FSR0H, F
               00071         addlw   -0x1
               00072         addwf   FSR0L, F
               00073         btfsc   STATUS, C
               00074         incf    FSR0H, F
               00075         movwf   ACCUL           ; ACCU <- int_val(2 * W)
               00076         clrf    ACCUH
               00077         bcf     STATUS, C
               00078         rlcf    ACCUL, F
               00079         rlcf    ACCUH, F
               00080         bsf     STATUS, C
               00081         rlcf    ACCUL, F
               00082         rlcf    ACCUH, F
               00083         btfss   INDF0, 0        ; if INDF0.0 = 0 then ACCU ++
               00084         bsf     ACCUL, 1
               00085         return
               00086 #endif
               00087 
               00088 #ifdef caml_useprim_caml_fill_string
               00089 caml_fill_string:
               00090         ;; ACCU = str
               00091         ;; [0x2]:[0x1] = start
               00092         ;; [0x4]:[0x3] = len
               00093         ;; [0x6]:[0x5] = c
               00094         bcf     STATUS, C       ; FSR0 <- str + start
               00095         rrcf    [0x2], F
               00096         rrcf    [0x1], W
               00097         addwf   ACCUL, W
               00098         movwf   FSR0L
               00099         movf    [0x2], W
               00100         addwfc  ACCUH, W
               00101         movwf   FSR0H
               00102         rrcf    [0x6], W        ; [0x5] <- c
               00103         rrcf    [0x5], F
               00104         bcf     STATUS, C       ; [0x4]:[0x3] <- len
               00105         rrcf    [0x4], F
               00106         rrcf    [0x3], F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00107         bz      caml_fill_string_miloop
               00108 caml_fill_string_loop:
               00109         movf    [0x5], W
               00110         movwf   POSTINC0
               00111         decfsz  [0x3], F
               00112         bra     caml_fill_string_loop
               00113 caml_fill_string_miloop:
               00114         decf    [0x4], F
               00115         bz      caml_fill_string_loop
               00116         M_CONST 0               ; return unit
               00117         return
               00118 #endif
               00119 
               00120 #ifdef caml_useprim_caml_is_printable
               00121 caml_is_printable:
               00122         M_CONST 1
               00123         return
               00124 #endif
               00125 
               00126 #ifdef caml_useprim_caml_create_string
               00127 #ifndef caml_useprim_caml_raise_ia_string_create
               00128 #define caml_useprim_caml_raise_ia_string_create
               00129 #endif
               00130 caml_create_string:
               00131         ;; ACCU = len
               00132         rrcf    ACCUH, W        ; STATUS.C ignored
               00133         movwf   TMP_REG_1
               00134         rrcf    ACCUL, W
               00135         movwf   TABLAT
               00136         movwf   TMP_REG_2
               00137         rrcf    TMP_REG_1, W    ; STATUS.C ignored
               00138         andlw   0x3F
               00139         bnz     caml_raise_ia_string_create
               00140         rrcf    TABLAT, F
               00141         incf    TABLAT, F
               00142         bz      caml_raise_ia_string_create
               00143         call    _CHECK_UNFULL_HEAP_GEN
               00144         movlw   STRING_TAG      ; write tag
               00145         movwf   POSTINC1
               00146         movf    TABLAT, W       ; write size
               00147         movwf   POSTINC1
               00148         movff   FSR1L, ACCUL    ; ACCU <- string
               00149         movff   FSR1H, ACCUH
               00150         addlw   -0x1            ; FSR1 += 2 * size - 2
               00151         addwf   FSR1L, F
               00152         btfsc   STATUS, C
               00153         incf    FSR1H, F
               00154         addwf   FSR1L, F
               00155         btfsc   STATUS, C
               00156         incf    FSR1H, F
               00157         clrf    POSTINC1        ; write 0
               00158         movlw   0x0             ; if odd size then write 0 else write 1
               00159         btfss   TMP_REG_2, 0
               00160         movlw   0x1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00161         movwf   POSTINC1
               00162         return
               00163 #endif
               00164 
               00165 #ifdef caml_useprim_caml_string_get
               00166 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00167 #define caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00168 #endif
               00169 caml_string_get:
               00170         ;; ACCU = str
               00171         ;; [0x2]:[0x1] = ind
               00172         movff   ACCUL, FSR0L    ; FSR0 <- @size
               00173         movff   ACCUH, FSR0H
               00174         subfsr  FSR0, 0x1
               00175         bcf     STATUS, C       ; [0x2]:[0x1] <- valint(ind)
               00176         rrcf    [0x2], F
               00177         rrcf    [0x1], F
               00178         bcf     STATUS, C       ; check indH
               00179         rrcf    [0x2], W        ; C <- LSB(indH)
               00180         bnz     caml_raise_ia_index_out_of_bounds_string
               00181         rrcf    [0x1], W        ; W <- ind / 2
               00182         cpfsgt  INDF0           ; size > ind / 2 ?
               00183         bra     caml_raise_ia_index_out_of_bounds_string ; no -> error
               00184         addlw   0x1             ; W <- ind / 2 + 1
               00185         cpfsgt  POSTINC0        ; size = ind / 2 + 1 ?
               00186         bra     caml_string_get_last_char ; yes -> goto last_char
               00187         movf    [0x1], W        ; no -> ok ; FSR0 += size
               00188         addwf   FSR0L, F
               00189         movf    [0x2], W
               00190         addwfc  FSR0H, F
               00191         clrf    ACCUH           ; read char
               00192         bsf     STATUS, C
               00193         rlcf    INDF0, W
               00194         rlcf    ACCUH, F
               00195         movwf   ACCUL
               00196         return
               00197 caml_string_get_last_char:
               00198         btfsc   [0x1], 0        ; parity of ind ?
               00199         bra     caml_raise_ia_index_out_of_bounds_string ; odd -> error
               00200         movf    [0x1], W        ; FSR0 <- @last byte (0 or 1)
               00201         addwf   FSR0L, F
               00202         movf    [0x2], W
               00203         addwfc  FSR0H, F
               00204         addfsr  FSR0, 0x1
               00205         movf    POSTDEC0, W     ; test last byte
               00206         bnz     caml_raise_ia_index_out_of_bounds_string ; if 1 -> raise
               00207         clrf    ACCUH           ; if 0 -> ok, read char
               00208         bsf     STATUS, C
               00209         rlcf    INDF0, W
               00210         rlcf    ACCUH, F
               00211         movwf   ACCUL
               00212         return
               00213 #endif
               00214 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00215 #ifdef caml_useprim_caml_string_set
               00216 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00217 #define caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00218 #endif
               00219 caml_string_set:
               00220         ;; ACCU = str
               00221         ;; [0x2]:[0x1] = ind
               00222         ;; [0x4]:[0x3] = c
               00223         movff   ACCUL, FSR0L    ; FSR0 <- @size
               00224         movff   ACCUH, FSR0H
               00225         subfsr  FSR0, 0x1
               00226         bcf     STATUS, C       ; [0x2]:[0x1] <- valint(ind)
               00227         rrcf    [0x2], F
               00228         rrcf    [0x1], F
               00229         bcf     STATUS, C       ; check indH
               00230         rrcf    [0x2], W        ; C <- LSB(indH)
               00231         bnz     caml_raise_ia_index_out_of_bounds_string
               00232         rrcf    [0x1], W        ; W <- ind / 2
               00233         cpfsgt  INDF0           ; size > ind / 2 ?
               00234         bra     caml_raise_ia_index_out_of_bounds_string ; no -> error
               00235         addlw   0x1             ; W <- ind / 2 + 1
               00236         cpfsgt  POSTINC0        ; size = ind / 2 + 1 ?
               00237         bra     caml_string_set_last_char ; yes -> goto last_char
               00238         movf    [0x1], W        ; no -> ok ; FSR0 += size
               00239         addwf   FSR0L, F
               00240         movf    [0x2], W
               00241         addwfc  FSR0H, F
               00242         rrcf    [0x4], W        ; W <- c ; STATUS.C ignored
               00243         rrcf    [0x3], W
               00244         movwf   INDF0           ; write char
               00245         M_CONST 0               ; return ()
               00246         return
               00247 caml_string_set_last_char:
               00248         btfsc   [0x1], 0        ; parity of ind ?
               00249         bra     caml_raise_ia_index_out_of_bounds_string ; odd -> error
               00250         movf    [0x1], W        ; FSR0 <- @last byte (0 or 1)
               00251         addwf   FSR0L, F
               00252         movf    [0x2], W
               00253         addwfc  FSR0H, F
               00254         addfsr  FSR0, 0x1
               00255         movf    POSTDEC0, W     ; test last byte
               00256         bnz     caml_raise_ia_index_out_of_bounds_string ; if 1 -> raise
               00257         rrcf    [0x4], W        ; W <- c ; STATUS.C ignored
               00258         rrcf    [0x3], W
               00259         movwf   INDF0           ; write char
               00260         M_CONST 0               ; return ()
               00261         return
               00262 #endif
               00263 
               00264 #ifdef caml_useprim_caml_raise_ia_index_out_of_bounds_string
               00265 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00266 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00267 #endif
               00268 caml_raise_ia_index_out_of_bounds_string:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00269         movlw   0x1                     ; erase ACCU and stack[0]
               00270         movwf   ACCUL
               00271         movwf   [0x1]
               00272         clrf    ACCUH
               00273         clrf    [0x2]
               00274         bra     caml_raise_ia_index_out_of_bounds
               00275 #endif
               00276 
               00277 #ifdef caml_useprim_caml_raise_ia_string_create
               00278 #ifndef caml_useprim_caml_raise_ia
               00279 #define caml_useprim_caml_raise_ia
               00280 #endif
               00281 caml_raise_ia_string_create:
               00282         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
               00283         M_WRITE_BYTE STRING_TAG         ; write string tag
               00284         M_WRITE_BYTE 0x7                ; write string size
               00285         movff   FSR1L, TMP_REG_1        ; mem string addr
               00286         movff   FSR1H, TMP_REG_2
               00287         M_WRITE_BYTE 'S'                ; write string content
               00288         M_WRITE_BYTE 't'
               00289         M_WRITE_BYTE 'r'
               00290         M_WRITE_BYTE 'i'
               00291         M_WRITE_BYTE 'n'
               00292         M_WRITE_BYTE 'g'
               00293         M_WRITE_BYTE '.'
               00294         M_WRITE_BYTE 'c'
               00295         M_WRITE_BYTE 'r'
               00296         M_WRITE_BYTE 'e'
               00297         M_WRITE_BYTE 'a'
               00298         M_WRITE_BYTE 't'
               00299         M_WRITE_BYTE 'e'
               00300         M_WRITE_BYTE 0x0                ; write string \0
               00301         goto    caml_raise_ia
               00302 #endif
               00303 
               00304 
               00305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00306 ;;;;;;;;                                   ;;;;;;;;
               00307 ;;;;;;;;              ARRAYS               ;;;;;;;;
               00308 ;;;;;;;;                                   ;;;;;;;;
               00309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00310 
               00311 #ifdef caml_useprim_caml_make_array
               00312 caml_make_array:
               00313         ;; ACCU = tbl
               00314         movff   ACCUL, FSR0L
               00315         movff   ACCUH, FSR0H
               00316         subfsr  FSR0, 0x1
               00317         movf    POSTINC0, F     ; atom ?
               00318         btfsc   STATUS, Z
               00319         return
               00320         btfsc   INDF0, 0        ; is_int(tbl[0]) ?
               00321         return
               00322         movf    POSTINC0, W     ; tag(tbl[0]) = DOUBLE_TAG ?
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00323         movff   INDF0, FSR0H
               00324         movwf   FSR0L
               00325         subfsr  FSR0, 0x2
               00326         movf    INDF0, W
               00327         xorlw   DOUBLE_TAG
               00328         btfss   STATUS, Z
               00329         return
               00330         movff   ACCUL, FSR0L    ; TABLAT <- size(tbl) * 2
               00331         movff   ACCUH, FSR0H
               00332         subfsr  FSR0, 0x1
               00333         movff   INDF0, TABLAT
               00334         bcf     STATUS, C
               00335         rlcf    TABLAT, F       ; size(tbl) > 127 ?
               00336         bc      caml_raise_ia_array_make
               00337         call    _CHECK_UNFULL_HEAP_GEN ; check allocation
               00338         movlw   DOUBLE_ARRAY_TAG ; write tag
               00339         movwf   POSTINC1
               00340         movf    TABLAT, W        ; write size
               00341         movwf   POSTINC1
               00342         rrncf   TABLAT, F        ; TABLAT <- size / 2
               00343         movff   FSR2L, TMP_REG_1 ; save FSR2
               00344         movff   FSR2H, TMP_REG_2
               00345         movff   ACCUL, FSR0L     ; FSR0 <- tbl
               00346         movff   ACCUH, FSR0H
               00347 caml_make_array_loop:
               00348         movff   POSTINC0, FSR2L  ; FSR2 <- tbl[i]
               00349         movff   POSTINC0, FSR2H
               00350         movff   POSTINC2, POSTINC1 ; copy float
               00351         movff   POSTINC2, POSTINC1
               00352         movff   POSTINC2, POSTINC1
               00353         movff   POSTINC2, POSTINC1
               00354         decfsz  TABLAT, F
               00355         bra     caml_make_array_loop ; loop
               00356         movff   TMP_REG_1, FSR2L     ; restore FSR2
               00357         movff   TMP_REG_2, FSR2H
               00358         return
               00359 #endif
               00360 
               00361 #ifdef caml_useprim_caml_make_vect
               00362 #ifndef caml_useprim_caml_raise_ia_array_make
               00363 #define caml_useprim_caml_raise_ia_array_make
               00364 #endif
               00365 caml_make_vect:
               00366         ;; ACCU = size
               00367         ;; [0x2]:[0x1] = val
               00368         bcf     STATUS, C
               00369         rrcf    ACCUH, W
               00370         bnz     caml_raise_ia_array_make
               00371         rrcf    ACCUL, W
               00372         bz      caml_make_vect_atom
               00373         movwf   TABLAT
               00374         call    _CHECK_UNFULL_HEAP_GEN
               00375         clrf    POSTINC1                ; write tag (0)
               00376         movff   TABLAT, POSTINC1        ; write size
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00377         movff   FSR1L, ACCUL
               00378         movff   FSR1H, ACCUH
               00379 caml_make_vect_loop:
               00380         movf    [0x1], W
               00381         movwf   POSTINC1
               00382         movf    [0x2], W
               00383         movwf   POSTINC1
               00384         decfsz  TABLAT, F
               00385         bra     caml_make_vect_loop
               00386         return
               00387 caml_make_vect_atom:
               00388         M_ATOM0
               00389         return
               00390 #endif
               00391 
               00392 #ifdef caml_useprim_caml_raise_ia_array_make
               00393 #ifndef caml_useprim_caml_raise_ia
               00394 #define caml_useprim_caml_raise_ia
               00395 #endif
               00396 caml_raise_ia_array_make:
               00397         M_CHECK_UNFULL_HEAP 0x9         ; check allocation of string and exn
               00398         M_WRITE_BYTE STRING_TAG         ; write string tag
               00399         M_WRITE_BYTE 0x6                ; write string size
               00400         movff   FSR1L, TMP_REG_1        ; mem string addr
               00401         movff   FSR1H, TMP_REG_2
               00402         M_WRITE_BYTE 'A'                ; write string content
               00403         M_WRITE_BYTE 'r'
               00404         M_WRITE_BYTE 'r'
               00405         M_WRITE_BYTE 'a'
               00406         M_WRITE_BYTE 'y'
               00407         M_WRITE_BYTE '.'
               00408         M_WRITE_BYTE 'm'
               00409         M_WRITE_BYTE 'a'
               00410         M_WRITE_BYTE 'k'
               00411         M_WRITE_BYTE 'e'
               00412         M_WRITE_BYTE 0x0                ; write string \0\1
               00413         M_WRITE_BYTE 0x1
               00414         goto    caml_raise_ia
               00415 #endif
               00416 
               00417 #ifdef caml_useprim_caml_array_unsafe_get
               00418 #ifndef caml_useprim_caml_array_unsafe_get_addr
               00419 #define caml_useprim_caml_array_unsafe_get_addr
               00420 #endif
               00421 #ifndef caml_useprim_caml_array_unsafe_get_float
               00422 #define caml_useprim_caml_array_unsafe_get_float
               00423 #endif
               00424 caml_array_unsafe_get:
               00425         ;; ACCU = tbl
               00426         ;; [0x2]:[0x1] = ind
               00427         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00428         movff   ACCUH, FSR0H
               00429         subfsr  FSR0, 0x2
               00430         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00431         cpfseq  POSTINC0
               00432         bra     caml_array_unsafe_get_addr ; no
               00433         bra     caml_array_unsafe_get_float ; yes
               00434 #endif
               00435 
               00436 #ifdef caml_useprim_caml_array_get
               00437 #ifndef caml_useprim_caml_array_get_addr
               00438 #define caml_useprim_caml_array_get_addr
               00439 #endif
               00440 #ifndef caml_useprim_caml_array_get_float
               00441 #define caml_useprim_caml_array_get_float
               00442 #endif
               00443 caml_array_get:
               00444         ;; ACCU = tbl
               00445         ;; [0x2]:[0x1] = ind
               00446         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00447         movff   ACCUH, FSR0H
               00448         subfsr  FSR0, 0x2
               00449         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
               00450         cpfseq  POSTINC0
               00451         bra     caml_array_get_addr     ; no
               00452         bra     caml_array_get_float    ; yes
               00453 #endif
               00454 
               00455 #ifdef caml_useprim_caml_array_unsafe_set
               00456 #ifndef caml_useprim_caml_array_unsafe_set_addr
               00457 #define caml_useprim_caml_array_unsafe_set_addr
               00458 #endif
               00459 #ifndef caml_useprim_caml_array_unsafe_set_float
               00460 #define caml_useprim_caml_array_unsafe_set_float
               00461 #endif
               00462 caml_array_unsafe_set:
               00463         ;; ACCU = tbl
               00464         ;; [0x2]:[0x1] = ind
               00465         ;; [0x4]:[0x3] = val
               00466         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00467         movff   ACCUH, FSR0H
               00468         subfsr  FSR0, 0x2
               00469         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
               00470         cpfseq  POSTINC0
               00471         bra     caml_array_unsafe_set_addr ; no
               00472         bra     caml_array_unsafe_set_float ; yes
               00473 #endif
               00474 
               00475 #ifdef caml_useprim_caml_array_set
               00476 #ifndef caml_useprim_caml_array_set_addr
               00477 #define caml_useprim_caml_array_set_addr
               00478 #endif
               00479 #ifndef caml_useprim_caml_array_set_float
               00480 #define caml_useprim_caml_array_set_float
               00481 #endif
               00482 caml_array_set:
               00483         ;; ACCU = tbl
               00484         ;; [0x2]:[0x1] = ind
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00485         ;; [0x4]:[0x3] = val
               00486         movff   ACCUL, FSR0L            ; FSR0 <- ACCU - 2
               00487         movff   ACCUH, FSR0H
               00488         subfsr  FSR0, 0x2
               00489         movlw   DOUBLE_ARRAY_TAG        ; tag = double[] tag ?
               00490         cpfseq  POSTINC0
               00491         bra     caml_array_set_addr     ; no
               00492         bra     caml_array_set_float    ; yes
               00493 #endif
               00494 
               00495 #ifdef caml_useprim_caml_array_unsafe_get_addr
               00496 caml_array_unsafe_get_addr:
               00497         ;; ACCU = tbl
               00498         ;; [0x2]:[0x1] = ind
               00499         decf    [0x1], W        ; FSR0 <- tbl + ind
               00500         addwf   ACCUL, W
               00501         movwf   FSR0L
               00502         movf    ACCUH, W
               00503         addwfc  [0x2], W
               00504         movwf   FSR0H
               00505         movff   POSTINC0, ACCUL ; ACCU <- *FSR0
               00506         movff   INDF0, ACCUH
               00507         return
               00508 #endif
               00509 
               00510 #ifdef caml_useprim_caml_array_unsafe_set_addr
               00511 caml_array_unsafe_set_addr:
               00512         ;; ACCU = tbl
               00513         ;; [0x2]:[0x1] = ind
               00514         ;; [0x4]:[0x3] = val
               00515         decf    [0x1], W        ; FSR0 <- tbl + ind
               00516         addwf   ACCUL, W
               00517         movwf   FSR0L
               00518         movf    ACCUH, W
               00519         addwfc  [0x2], W
               00520         movwf   FSR0H
               00521         movf    [0x3], W        ; *FSR0 <- val
               00522         movwf   POSTINC0
               00523         movf    [0x4], W
               00524         movwf   INDF0
               00525         M_CONST 0               ; return ()
               00526         return
               00527 #endif
               00528 
               00529 #ifdef caml_useprim_caml_array_unsafe_get_float
               00530 caml_array_unsafe_get_float:
               00531         ;; ACCU = tbl
               00532         ;; [0x2]:[0x1] = ind
               00533         M_CHECK_UNFULL_HEAP 0x2
               00534         decf    [0x1], W        ; FSR0 <- ACCU + 2 * ind
               00535         addwf   ACCUL, W
               00536         movwf   FSR0L
               00537         movf    [0x2], W
               00538         addwfc  ACCUH, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00539         movwf   FSR0H
               00540         decf    [0x1], W
               00541         addwf   FSR0L, F
               00542         movf    [0x2], W
               00543         addwfc  FSR0H, F
               00544         movlw   DOUBLE_TAG      ; write tag
               00545         movwf   POSTINC1
               00546         movlw   0x2             ; write size
               00547         movwf   POSTINC1
               00548         movff   FSR1L, ACCUL    ; ACCU <- @float
               00549         movff   FSR1H, ACCUH
               00550         movff   POSTINC0, POSTINC1 ; copy float
               00551         movff   POSTINC0, POSTINC1
               00552         movff   POSTINC0, POSTINC1
               00553         movff   INDF0, POSTINC1
               00554         return
               00555 #endif
               00556 
               00557 #ifdef caml_useprim_caml_array_unsafe_set_float
               00558 caml_array_unsafe_set_float:
               00559         ;; ACCU = tbl
               00560         ;; [0x2]:[0x1] = ind
               00561         ;; [0x4]:[0x3] = val
               00562         movsf   [0x3], FSR0L            ; TMP_REG_2:1 <- *val
               00563         movsf   [0x4], FSR0H
               00564         movff   POSTINC0, TMP_REG_1
               00565         movff   POSTINC0, TMP_REG_2
               00566         movff   POSTINC0, TMP_REG_3
               00567         movff   INDF0, TMP_REG_4
               00568         decf    [0x1], W        ; FSR0 <- ACCU + 2 * ind
               00569         addwf   ACCUL, W
               00570         movwf   FSR0L
               00571         movf    [0x2], W
               00572         addwfc  ACCUH, W
               00573         movwf   FSR0H
               00574         decf    [0x1], W
               00575         addwf   FSR0L, F
               00576         movf    [0x2], W
               00577         addwfc  FSR0H, F
               00578         movff   TMP_REG_1, POSTINC0     ; write the float
               00579         movff   TMP_REG_2, POSTINC0
               00580         movff   TMP_REG_3, POSTINC0
               00581         movff   TMP_REG_4, INDF0
               00582         M_CONST 0                       ; return ()
               00583         return
               00584 #endif
               00585 
               00586 #ifdef caml_useprim_caml_array_get_addr
               00587 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00588 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00589 #endif
               00590 caml_array_get_addr:
               00591         ;; ACCU = tbl
               00592         ;; [0x2]:[0x1] = ind
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00593         movff   ACCUL, FSR0L    ; FSR0 <- @size
               00594         movff   ACCUH, FSR0H
               00595         subfsr  FSR0, 0x1
               00596         bcf     STATUS, C       ; check indH
               00597         rrcf    [0x2], W        ; C <- LSB(indH)
               00598         bnz     caml_raise_ia_index_out_of_bounds
               00599         rrcf    [0x1], W        ; W <- ind
               00600         cpfsgt  POSTINC0        ; size > ind ? FSR0++
               00601         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
               00602         decf    [0x1], W        ; FSR0 += ind
               00603         addwf   FSR0L, F
               00604         movf    [0x2], W
               00605         addwfc  FSR0H, F
               00606         movff   POSTINC0, ACCUL ; ACCU <- *FSR0
               00607         movff   INDF0, ACCUH
               00608         return
               00609 #endif
               00610 
               00611 #ifdef caml_useprim_caml_array_get_float
               00612 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00613 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00614 #endif
               00615 caml_array_get_float:
               00616         ;; ACCU = tbl
               00617         ;; [0x2]:[0x1] = ind
               00618         M_CHECK_UNFULL_HEAP 0x2
               00619         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
               00620         movff   ACCUH, FSR0H
               00621         subfsr  FSR0, 0x1
               00622         movf    [0x2], W        ; C <- LSB(indH)
               00623         bnz     caml_raise_ia_index_out_of_bounds
               00624         decf    [0x1], W        ; W <- 2 * ind
               00625         cpfsgt  POSTINC0        ; size > ind ? FSR0++
               00626         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
               00627         decf    [0x1], W        ; FSR0 += 2 * ind
               00628         addwf   FSR0L, F
               00629         movf    [0x2], W
               00630         addwfc  FSR0H, F
               00631         decf    [0x1], W
               00632         addwf   FSR0L, F
               00633         movf    [0x2], W
               00634         addwfc  FSR0H, F
               00635         movlw   DOUBLE_TAG      ; write tag
               00636         movwf   POSTINC1
               00637         movlw   0x2             ; write size
               00638         movwf   POSTINC1
               00639         movff   FSR1L, ACCUL    ; ACCU <- @float
               00640         movff   FSR1H, ACCUH
               00641         movff   POSTINC0, POSTINC1 ; copy float
               00642         movff   POSTINC0, POSTINC1
               00643         movff   POSTINC0, POSTINC1
               00644         movff   INDF0, POSTINC1
               00645         return
               00646 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00647 
               00648 #ifdef caml_useprim_caml_array_set_addr
               00649 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00650 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00651 #endif
               00652 caml_array_set_addr:
               00653         ;; ACCU = tbl
               00654         ;; [0x2]:[0x1] = ind
               00655         ;; [0x4]:[0x3] = val
               00656         movff   ACCUL, FSR0L    ; FSR0 <- @size
               00657         movff   ACCUH, FSR0H
               00658         subfsr  FSR0, 0x1
               00659         bcf     STATUS, C       ; check indH
               00660         rrcf    [0x2], W        ; C <- LSB(indH)
               00661         bnz     caml_raise_ia_index_out_of_bounds
               00662         rrcf    [0x1], W        ; W <- ind
               00663         cpfsgt  POSTINC0        ; size > ind ? FSR0++
               00664         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
               00665         decf    [0x1], W        ; FSR0 += ind
               00666         addwf   FSR0L, F
               00667         movf    [0x2], W
               00668         addwfc  FSR0H, F
               00669         movf    [0x3], W        ; *FSR0 <- val
               00670         movwf   POSTINC0
               00671         movf    [0x4], W
               00672         movwf   INDF0
               00673         M_CONST 0               ; return ()
               00674         return
               00675 #endif
               00676 
               00677 #ifdef caml_useprim_caml_array_set_float
               00678 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00679 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00680 #endif
               00681 #endif
               00682 
               00683 #ifdef caml_useprim_caml_raise_ia_index_out_of_bounds
               00684 #ifndef caml_useprim_caml_raise_ia
               00685 #define caml_useprim_caml_raise_ia
               00686 #endif
               00687 caml_raise_ia_index_out_of_bounds:
               00688         M_CHECK_UNFULL_HEAP 0xD         ; check allocation of string and exn
               00689         M_WRITE_BYTE STRING_TAG         ; write string tag
               00690         M_WRITE_BYTE 0xA                ; write string size
               00691         movff   FSR1L, TMP_REG_1        ; mem string addr
               00692         movff   FSR1H, TMP_REG_2
               00693         M_WRITE_BYTE 'i'                ; write string content
               00694         M_WRITE_BYTE 'n'
               00695         M_WRITE_BYTE 'd'
               00696         M_WRITE_BYTE 'e'
               00697         M_WRITE_BYTE 'x'
               00698         M_WRITE_BYTE ' '
               00699         M_WRITE_BYTE 'o'
               00700         M_WRITE_BYTE 'u'
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00701         M_WRITE_BYTE 't'
               00702         M_WRITE_BYTE ' '
               00703         M_WRITE_BYTE 'o'
               00704         M_WRITE_BYTE 'f'
               00705         M_WRITE_BYTE ' '
               00706         M_WRITE_BYTE 'b'
               00707         M_WRITE_BYTE 'o'
               00708         M_WRITE_BYTE 'u'
               00709         M_WRITE_BYTE 'n'
               00710         M_WRITE_BYTE 'd'
               00711         M_WRITE_BYTE 's'
               00712         M_WRITE_BYTE 0x0                ; write string \0
               00713         goto    caml_raise_ia
               00714 #endif
               00715 
               00716 #ifdef caml_useprim_caml_array_set_float
               00717 #ifndef caml_useprim_caml_raise_ia_index_out_of_bounds
               00718 #define caml_useprim_caml_raise_ia_index_out_of_bounds
               00719 #endif
               00720 caml_array_set_float:
               00721         ;; ACCU = tbl
               00722         ;; [0x2]:[0x1] = ind
               00723         ;; [0x4]:[0x3] = val
               00724         movsf   [0x3], FSR0L            ; TMP_REG_2:1 <- *val
               00725         movsf   [0x4], FSR0H
               00726         movff   POSTINC0, TMP_REG_1
               00727         movff   POSTINC0, TMP_REG_2
               00728         movff   POSTINC0, TMP_REG_3
               00729         movff   INDF0, TMP_REG_4
               00730         movff   ACCUL, FSR0L            ; FSR0 <- ACCU
               00731         movff   ACCUH, FSR0H
               00732         subfsr  FSR0, 0x1
               00733         movf    [0x2], W        ; C <- LSB(indH)
               00734         bnz     caml_raise_ia_index_out_of_bounds
               00735         decf    [0x1], W        ; W <- 2 * ind
               00736         cpfsgt  POSTINC0        ; size > ind ? FSR0++
               00737         bra     caml_raise_ia_index_out_of_bounds ; no -> raise
               00738         decf    [0x1], W        ; FSR0 += 2 * ind
               00739         addwf   FSR0L, F
               00740         movf    [0x2], W
               00741         addwfc  FSR0H, F
               00742         decf    [0x1], W
               00743         addwf   FSR0L, F
               00744         movf    [0x2], W
               00745         addwfc  FSR0H, F
               00746         movff   TMP_REG_1, POSTINC0     ; write the float
               00747         movff   TMP_REG_2, POSTINC0
               00748         movff   TMP_REG_3, POSTINC0
               00749         movff   TMP_REG_4, INDF0
               00750         M_CONST 0                       ; return ()
               00751         return
               00752 #endif
               00753 
               00754 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00755 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00756 ;;;;;;;;                                   ;;;;;;;;
               00757 ;;;;;;;;              HASH                 ;;;;;;;;
               00758 ;;;;;;;;                                   ;;;;;;;;
               00759 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00760 
               00761 #ifdef caml_useprim_caml_hash_univ_param
               00762 caml_hash_univ_param:
               00763         ;; ACCU = count
               00764         ;; [0x2]:[0x1] = limit
               00765         ;; [0x4]:[0x3] = obj
               00766         movff   ACCUL, TMP_REG_7 ; TMP_REG_8:7 <- count * 2 + 1
               00767         movff   ACCUH, TMP_REG_8
               00768         bcf     STATUS, C        ; TMP_REG_A:9 <- limit + 1
               00769         rrcf    [0x2], W
               00770         movwf   TMP_REG_A
               00771         rrcf    [0x1], W
               00772         movwf   TMP_REG_9
               00773         infsnz  TMP_REG_9, F
               00774         incf    TMP_REG_A, F
               00775         movsf   [0x4], FSR0H     ; FSR0 <- obj
               00776         movsf   [0x3], FSR0L
               00777         movff   FSR2H, TMP_REG_6 ; TMP_REG_6:5 <- FSR2
               00778         movff   FSR2L, TMP_REG_5
               00779         clrf    ACCUH            ; ACCU <- 0
               00780         clrf    ACCUL
               00781 caml_hash_univ_param_beg:
               00782         btfss   FSR0L, 0         ; isint(ACCU) ?
               00783         bra     caml_hash_univ_param_block ; no -> goto block
               00784         movf    FSR0L, W         ; yes -> hash(int)
               00785         rcall   caml_hash_univ_param_routine
               00786         movf    FSR0H, W
               00787         rcall   caml_hash_univ_param_routine
               00788 caml_hash_univ_param_back:
               00789         movf    FSR2L, W         ; check stack top
               00790         cpfseq  TMP_REG_5
               00791         bra     caml_hash_univ_param_pop
               00792         movf    FSR2H, W
               00793         cpfslt  TMP_REG_6
               00794         bra     caml_hash_univ_param_return
               00795 caml_hash_univ_param_pop:        ; go backward
               00796         movff   PREINC2, TMP_REG_B
               00797         movff   PREINC2, FSR0L
               00798         movff   PREINC2, FSR0H
               00799         bra     caml_hash_univ_param_loop
               00800 caml_hash_univ_param_block:
               00801         subfsr  FSR0, 0x2        ; FSR0 <- @tag
               00802         movf    POSTINC0, W      ; W <- tag ; FSR0 ++
               00803         xorlw   STRING_TAG       ; string ?
               00804         bz      caml_hash_univ_param_data
               00805         xorlw   (DOUBLE_TAG ^ STRING_TAG)         ; float ?
               00806         bz      caml_hash_univ_param_data
               00807         xorlw   (DOUBLE_ARRAY_TAG ^ DOUBLE_TAG)   ; float[] ?
               00808         bz      caml_hash_univ_param_data
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00809         xorlw   (ABSTRACT_TAG ^ DOUBLE_ARRAY_TAG) ; abstract ?
               00810         bz      caml_hash_univ_param_back
               00811         xorlw   (INFIX_TAG ^ ABSTRACT_TAG)        ; infix ?
               00812         bz      caml_hash_univ_param_infix
               00813         xorlw   (FORWARD_TAG ^ INFIX_TAG)         ; forward ?
               00814         bz      caml_hash_univ_param_forward
               00815         xorlw   (OBJECT_TAG ^ FORWARD_TAG)        ; object ?
               00816         bz      caml_hash_univ_param_object
               00817         xorlw   (CUSTOM_TAG ^ OBJECT_TAG)         ; custom ?
               00818         bz      caml_hash_univ_param_custom
               00819 caml_hash_univ_param_beg_loop:
               00820         rcall   caml_hash_univ_param_routine    ; hash(tag)
               00821         movff   POSTINC0, TMP_REG_B             ; TMP_REG_B <- size
               00822 caml_hash_univ_param_loop:
               00823         decf    TMP_REG_9, F                    ; check limit
               00824         bnz     caml_hash_univ_param_loop_continue
               00825         decf    TMP_REG_A, F
               00826         bz      caml_hash_univ_param_popstop
               00827 caml_hash_univ_param_loop_continue:
               00828         movf    TMP_REG_B, W                    ; last field ?
               00829         bz      caml_hash_univ_param_back       ; yes -> go back
               00830         movf    POSTINC0, W                     ; isint(field) ?
               00831         btfss   WREG, 0
               00832         bra     caml_hash_univ_param_loop_block ; no -> goto loop_block
               00833         rcall   caml_hash_univ_param_routine    ; yes -> hash(int)
               00834         movf    POSTINC0, W
               00835         rcall   caml_hash_univ_param_routine
               00836         decf    TMP_REG_B, F                    ; size --;
               00837         bra     caml_hash_univ_param_loop       ; loop
               00838 caml_hash_univ_param_loop_block:
               00839         movwf   TMP_REG_C                       ; TMP_REG_C <- fieldL
               00840         dcfsnz  TMP_REG_B, F                    ; size --; if size = 0
               00841         bra     caml_hash_univ_param_loop_block_last ; then goto loop_block_last
               00842         subfsr  FSR2, 3                         ; push3
               00843         movlw   (STACK_END - 0x1)               ; check STACK OVERFLOW
               00844         cpfsgt  FSR2H
               00845         goto    caml_raise_stack_overflow
               00846         movf    TMP_REG_B, W                    ; push (size, FSR0)
               00847         movwf   [0x1]
               00848         movf    FSR0L, W
               00849         movwf   [0x2]
               00850         movf    FSR0H, W
               00851         movwf   [0x3]
               00852 caml_hash_univ_param_loop_block_last:
               00853         movf    INDF0, W                        ; forward
               00854         movwf   FSR0H
               00855         movff   TMP_REG_C, FSR0L
               00856         bra     caml_hash_univ_param_beg
               00857 caml_hash_univ_param_data:                      ; hash all data block
               00858         incf    POSTINC0, W                     ; TMP_REG_C <- size + 1
               00859         movwf   TMP_REG_C
               00860         rcall   caml_hash_univ_param_routine    ; hash(size)
               00861 caml_hash_univ_param_data_loop:
               00862         dcfsnz  TMP_REG_C, F                    ; if TMP_REG_C -- = 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00863         bra     caml_hash_univ_param_back       ; then go back
               00864         movf    POSTINC0, W                     ; hash fieldL
               00865         rcall   caml_hash_univ_param_routine
               00866         movf    POSTINC0, W                     ; hash fieldH
               00867         rcall   caml_hash_univ_param_routine
               00868         bra     caml_hash_univ_param_data_loop  ; loop
               00869 caml_hash_univ_param_infix:
               00870         movf    INDF0, W        ; FSR0 -= 2 * (*FSR0)
               00871         subwf   FSR0L, F
               00872         btfss   STATUS, C
               00873         decf    FSR0H, F
               00874         subwf   FSR0L, F
               00875         btfss   STATUS, C
               00876         decf    FSR0H, F
               00877         bra     caml_hash_univ_param_beg_loop
               00878 caml_hash_univ_param_forward:
               00879         addfsr  FSR0, 1             ; FSR0++
               00880         movff   POSTINC0, TMP_REG_C ; FSR0 <- *FSR0
               00881         movf    INDF0, W
               00882         movwf   FSR0H
               00883         movff   TMP_REG_C, FSR0L
               00884         bra     caml_hash_univ_param_beg ; hash forwarded
               00885 caml_hash_univ_param_object:
               00886         addfsr  FSR0, 3         ; FSR0 += 3
               00887         movf    POSTINC0, W     ; hash(object_id)
               00888         rcall   caml_hash_univ_param_routine
               00889         movf    INDF0, W
               00890         rcall   caml_hash_univ_param_routine
               00891         bra     caml_hash_univ_param_back ; go back
               00892 caml_hash_univ_param_custom:
               00893         movff   ACCUL, TMP_REG_D ; save counter
               00894         movff   ACCUH, TMP_REG_E
               00895         addfsr  FSR0, 0x1        ; FSR0 <- @
               00896         movff   FSR0L, ACCUL     ; ACCU <- @
               00897         movff   FSR0H, ACCUH
               00898         movlw   0x2              ; PRODL <- hash custom index (2)
               00899         movwf   PRODL
               00900         movf    POSTINC0, W      ; call custom indirection table
               00901         movff   INDF0, PCLATH
               00902         callw
               00903         movf    ACCUL, W         ; restore ACCU and hash result
               00904         movff   TMP_REG_D, ACCUL
               00905         movwf   TMP_REG_D
               00906         movf    ACCUH, W
               00907         movff   TMP_REG_E, ACCUH
               00908         rcall   caml_hash_univ_param_routine
               00909         movf    TMP_REG_D, W
               00910         rcall   caml_hash_univ_param_routine
               00911         bra     caml_hash_univ_param_back ; go back
               00912 caml_hash_univ_param_popstop:
               00913         pop
               00914 caml_hash_univ_param_stop:
               00915         movff   TMP_REG_5, FSR2L
               00916         movff   TMP_REG_6, FSR2H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00917 caml_hash_univ_param_return:
               00918         bcf     ACCUH, 7
               00919         bsf     ACCUL, 0
               00920         return
               00921 caml_hash_univ_param_routine:
               00922         decf    TMP_REG_7, F
               00923         bnz     caml_hash_univ_param_routine_continue
               00924         decf    TMP_REG_8, F
               00925         bz      caml_hash_univ_param_popstop
               00926 caml_hash_univ_param_routine_continue:
               00927         addwf   ACCUL, F
               00928         btfsc   STATUS, C
               00929         incf    ACCUH, F
               00930         movlw   0xDF
               00931         mulwf   ACCUL
               00932         movff   PRODL, ACCUL
               00933         movf    PRODH, W
               00934         addwf   ACCUH, F
               00935         return
               00936 #endif
               00937 
               00938         
               00939 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00940 ;;;;;;;;                                   ;;;;;;;;
               00941 ;;;;;;;;               OBJ                 ;;;;;;;;
               00942 ;;;;;;;;                                   ;;;;;;;;
               00943 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00944 
               00945 #ifdef caml_useprim_caml_obj_dup
               00946 caml_obj_dup:
               00947         ;; ACCU = obj
               00948         movff   ACCUL, FSR0L
               00949         movff   ACCUH, FSR0H
               00950         subfsr  FSR0, 0x1
               00951         movf    POSTDEC0, W
               00952         bz      caml_obj_dup_end
               00953         movwf   TABLAT
               00954         call    _CHECK_UNFULL_HEAP_GEN
               00955         movff   ACCUL, FSR0L
               00956         movff   ACCUH, FSR0H
               00957         subfsr  FSR0, 0x2
               00958         movff   POSTINC0, POSTINC1 ; copy tag
               00959         movff   POSTINC0, POSTINC1 ; copy size
               00960         movff   FSR1L, ACCUL
               00961         movff   FSR1H, ACCUH
               00962 caml_obj_dup_loop:
               00963         movff   POSTINC0, POSTINC1 ; copy 1 element
               00964         movff   POSTINC0, POSTINC1
               00965         decfsz  TABLAT, F          ; loop size times
               00966         bra     caml_obj_dup_loop
               00967 caml_obj_dup_end:
               00968         return
               00969 #endif
               00970 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00971 #ifdef caml_useprim_caml_obj_block
               00972 caml_obj_block:
               00973         ;; ACCU = tag
               00974         ;; [0x2]:[0x1] = size
               00975         rrcf    [0x2], W        ; check allocation
               00976         rrcf    [0x1], W
               00977         bz      caml_obj_block_atom
               00978         movwf   TABLAT
               00979         call    _CHECK_UNFULL_HEAP_GEN
               00980         rrcf    ACCUH, W        ; write tag
               00981         rrcf    ACCUL, W
               00982         movwf   POSTINC1
               00983         rrcf    [0x2], W        ; write size
               00984         rrcf    [0x1], W
               00985         movwf   POSTINC1
               00986         movff   FSR1L, ACCUL
               00987         movff   FSR1H, ACCUH
               00988 caml_obj_block_loop:            ; fill with unit
               00989         clrf    INDF1
               00990         bsf     POSTINC1, 0
               00991         clrf    POSTINC1
               00992         decfsz  WREG, F         ; loop size times
               00993         bra     caml_obj_block_loop
               00994         return
               00995 caml_obj_block_atom:
               00996         M_ATOM0
               00997         return
               00998 #endif
               00999 
               01000 #ifdef caml_useprim_caml_obj_set_tag
               01001 caml_obj_set_tag:
               01002         ;; ACCU = obj
               01003         ;; [0x2]:[0x1] = tag
               01004         movff   ACCUL, FSR0L    ; FSR0 <- obj
               01005         movff   ACCUH, FSR0H
               01006         subfsr  FSR0, 0x2       ; FSR0 <- @old_tag
               01007         rrcf    [0x2], W        ; W <- new_tag
               01008         rrcf    [0x1], W
               01009         movwf   INDF0           ; write new_tag
               01010         return
               01011 #endif
               01012 
               01013 #ifdef caml_useprim_caml_obj_tag
               01014 caml_obj_tag:
               01015         btfsc   ACCUL, 0                ; is int ?
               01016         bra     caml_obj_tag_int        ; yes -> return Int
               01017         movf    ACCUH, W                ; in heap ?
               01018         subwf   CUR_HEAP_END, W
               01019         bnc     caml_obj_tag_out_of_memory ; no -> return Out_of_heap
               01020         addlw   -HEAP_SIZE
               01021         bc      caml_obj_tag_out_of_memory ; no -> return Out_of_heap
               01022         movff   ACCUL, FSR0L            ; FSR0 <- obj
               01023         movff   ACCUH, FSR0H
               01024         subfsr  FSR0, 0x2               ; FSR0 <- @tag
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01025         clrf    ACCUH                   ; ACCU <- tag
               01026         bsf     STATUS, C
               01027         rlcf    INDF0, W
               01028         rlcf    ACCUH, F
               01029         movwf   ACCUL
               01030         return
               01031 caml_obj_tag_int:
               01032         movlw   low ((OBJ_TAG_INT * 0x2) + 0x1)
               01033         movwf   ACCUL
               01034         movlw   high ((OBJ_TAG_INT * 0x2) + 0x1)
               01035         movwf   ACCUH
               01036         return
               01037 caml_obj_tag_out_of_memory:
               01038         movlw   low ((OBJ_TAG_OUT_OF_MEMORY * 0x2) + 0x1)
               01039         movwf   ACCUL
               01040         movlw   high ((OBJ_TAG_OUT_OF_MEMORY * 0x2) + 0x1)
               01041         movwf   ACCUH
               01042         return
               01043 #endif
               01044 
               01045 #ifdef caml_useprim_caml_obj_is_block
               01046 caml_obj_is_block:
               01047         movlw   0x1
               01048         btfss   ACCUL, 0
               01049         movlw   0x3
               01050         movwf   ACCUL
               01051         clrf    ACCUH
               01052         return
               01053 #endif
               01054 
               01055 #ifdef caml_useprim_caml_obj_truncate
               01056 #ifndef caml_useprim_caml_raise_ia_obj_truncate
               01057 #define caml_useprim_caml_raise_ia_obj_truncate
               01058 #endif
               01059 caml_obj_truncate:
               01060         ;; ACCU = obj
               01061         ;; [0x2]:[0x1] = size
               01062         movff   ACCUL, FSR0L    ; FSR0 <- obj
               01063         movff   ACCUH, FSR0H
               01064         subfsr  FSR0, 0x1       ; FSR0 <- @old_size
               01065         bcf     STATUS, C       ; W <- new_size
               01066         rrcf    [0x2], W
               01067         bnz     caml_raise_ia_obj_truncate ; if new_size > 255 -> raise
               01068         rrcf    [0x1], W
               01069         bz      caml_raise_ia_obj_truncate ; if new_size = 0 -> raise
               01070         subwf   INDF0, W        ; W <- old_size - new_size
               01071         bnc     caml_raise_ia_obj_truncate ; if new_s > old_s -> raise
               01072         subwf   INDF0, F        ; write (old_size - (old_size - new_size))
               01073         return
               01074 #endif
               01075 
               01076 #ifdef caml_useprim_caml_raise_ia_obj_truncate
               01077 #ifndef caml_useprim_caml_raise_ia
               01078 #define caml_useprim_caml_raise_ia
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01079 #endif
               01080 caml_raise_ia_obj_truncate:
               01081         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
               01082         M_WRITE_BYTE STRING_TAG         ; write string tag
               01083         M_WRITE_BYTE 0x7                ; write string size
               01084         movff   FSR1L, TMP_REG_1        ; mem string addr
               01085         movff   FSR1H, TMP_REG_2
               01086         M_WRITE_BYTE 'O'                ; write string content
               01087         M_WRITE_BYTE 'b'
               01088         M_WRITE_BYTE 'j'
               01089         M_WRITE_BYTE '.'
               01090         M_WRITE_BYTE 't'
               01091         M_WRITE_BYTE 'r'
               01092         M_WRITE_BYTE 'u'
               01093         M_WRITE_BYTE 'n'
               01094         M_WRITE_BYTE 'c'
               01095         M_WRITE_BYTE 'a'
               01096         M_WRITE_BYTE 't'
               01097         M_WRITE_BYTE 'e'
               01098         M_WRITE_BYTE 0x0                ; write string \0\1
               01099         M_WRITE_BYTE 0x1
               01100         goto    caml_raise_ia
               01101 #endif
               01102 
               01103 
               01104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01105 ;;;;;;;;                                   ;;;;;;;;
               01106 ;;;;;;;;                GC                 ;;;;;;;;
               01107 ;;;;;;;;                                   ;;;;;;;;
               01108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01109 
               01110 #ifdef caml_useprim_caml_heap_size
               01111 caml_heap_size:
               01112         movlw   low (((HEAP_SIZE * 0x100) * 0x2) + 0x1)
               01113         movwf   ACCUL
               01114         movlw   high (((HEAP_SIZE * 0x100) * 0x2) + 0x1)
               01115         movwf   ACCUH
               01116         return
               01117 #endif
               01118 
               01119 #ifdef caml_useprim_caml_stack_size
               01120 caml_stack_size:
               01121         movlw   low (((STACK_ANCHOR - 0xEFF) + (STACK_SIZE * 0x100)) + 0x1)
               01122         movwf   ACCUL
               01123         movlw   high (((STACK_ANCHOR - 0xEFF) + (STACK_SIZE * 0x100)) + 0x1)
               01124         movwf   ACCUH
               01125         return
               01126 #endif
               01127 
               01128 #ifdef caml_useprim_caml_heap_occupation
               01129 caml_heap_occupation:
               01130         movf    CUR_HEAP_END, W
               01131         addlw   (-HEAP_SIZE + 0x1)
               01132         subwf   FSR1H, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01133         movwf   ACCUH
               01134         bsf     STATUS, C
               01135         rlcf    FSR1L, W
               01136         movwf   ACCUL
               01137         rlcf    ACCUH, F
               01138         return
               01139 #endif
               01140 
               01141 #ifdef caml_useprim_caml_stack_occupation
               01142 caml_stack_occupation:
               01143         movf    FSR2L, W
               01144         sublw   low (STACK_ANCHOR + 0x1)
               01145         movwf   ACCUL
               01146         movlw   high (STACK_ANCHOR + 0x1)
               01147         subfwb  FSR2H, W
               01148         movwf   ACCUH
               01149         bsf     ACCUL, 0
               01150         return
               01151 #endif
               01152 
               01153 #ifdef caml_useprim_caml_running_number
               01154 caml_running_number:
               01155         bsf     STATUS, C
               01156         rlcf    GC_COUNTER_L, W
               01157         movwf   ACCUL
               01158         rlcf    GC_COUNTER_H, W
               01159         movwf   ACCUH
               01160         return
               01161 #endif
               01162 
               01163 #ifdef caml_useprim_caml_gc_run
               01164 caml_gc_run:
               01165         goto    caml_gc_exec
               01166 #endif
               01167 
               01168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01169 ;;;;;;;;                                   ;;;;;;;;
               01170 ;;;;;;;;              RANDOM               ;;;;;;;;
               01171 ;;;;;;;;                                   ;;;;;;;;
               01172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01173 
               01174 #ifdef caml_useprim_caml_random_bits
               01175 #ifndef caml_useprim_caml_random_round
               01176 #define caml_useprim_caml_random_round
               01177 #endif
               01178 caml_random_bits:
               01179         rcall   caml_random_round
               01180         movff   RAND_CUR_L, ACCUL
               01181         movff   RAND_CUR_H, ACCUH
               01182         bsf     ACCUL, 0
               01183         bcf     ACCUH, 7
               01184         return
               01185 #endif
               01186 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01187 #ifdef caml_useprim_caml_random_bool
               01188 #ifndef caml_useprim_caml_random_round
               01189 #define caml_useprim_caml_random_round
               01190 #endif
               01191 caml_random_bool:
               01192         rcall   caml_random_round
               01193         clrf    ACCUH
               01194         movf    RAND_CUR_L, W
               01195         andlw   0x03
               01196         iorlw   0x01
               01197         movwf   ACCUL
               01198         return
               01199 #endif
               01200 
               01201 #ifdef caml_useprim_caml_random_round
               01202 caml_random_round:
               01203         movlw   0x4
               01204         movwf   TMP_REG_1
               01205 caml_random_round_loop:
               01206         movff   RAND_CUR_L, FSR0L
               01207         movf    RAND_CUR_H, W
               01208         iorlw   0xF0
               01209         incfsz  WREG, W
               01210         decf    WREG, W
               01211         movwf   FSR0H
               01212         movf    POSTINC0, W
               01213         xorlw   0xAA
               01214         xorwf   RAND_CUR_L, F
               01215         movf    POSTINC0, W
               01216         xorlw   0xAA
               01217         xorwf   RAND_CUR_H, F
               01218         swapf   RAND_CUR_L, F
               01219         swapf   RAND_CUR_H, F
               01220         rlcf    RAND_CUR_L, W
               01221         rlcf    RAND_CUR_H, F
               01222         rlcf    RAND_CUR_L, F
               01223         movlw   .223
               01224         addwf   RAND_CUR_L, F
               01225         addwf   RAND_CUR_H, F
               01226         decfsz  TMP_REG_1, F
               01227         bra     caml_random_round_loop
               01228         return
               01229 #endif
               01230 
               01231 
               01232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01233 ;;;;;;;;                                   ;;;;;;;;
               01234 ;;;;;;;;            SFR ACCESS             ;;;;;;;;
               01235 ;;;;;;;;                                   ;;;;;;;;
               01236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01237 
               01238 #ifdef caml_useprim_caml_pic_write_reg
               01239 caml_pic_write_reg:
               01240         bsf     STATUS, C       ; FSR0 <- 0x0F70 | (ACCUL >> 1)
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01241         rrcf    ACCUL, W
               01242         movwf   FSR0L
               01243         setf    FSR0H
               01244         rrcf    [0x2], W        ; STATUS.C ignored
               01245         rrcf    [0x1], W        ; INDF0 <- stack[0] >> 1
               01246         movwf   INDF0
               01247         M_CONST 0
               01248         return
               01249 #endif
               01250 
               01251 #ifdef caml_useprim_caml_pic_read_reg
               01252 caml_pic_read_reg:
               01253         bsf     STATUS, C       ; FSR0 <- 0x0F70 | (ACCUL >> 1)
               01254         rrcf    ACCUL, W
               01255         movwf   FSR0L
               01256         setf    FSR0H
               01257         rlcf    INDF0, W        ; ACCU <- (INDF0 << 1) | 1
               01258         movwf   ACCUL
               01259         rlcf    ACCUH, F
               01260         return
               01261 #endif
               01262 
               01263 #ifdef caml_useprim_caml_pic_set_bit
165E 01264 caml_pic_set_bit:
165E 80D8      01265         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
1660 3156      01266         rrcf    ACCUL, W
1662 6EE9      01267         movwf   FSR0L
1664 68EA      01268         setf    FSR0H
1666 50EF      01269         movf    INDF0, W        ; INDF0 <- INDF0 | ACCUH
1668 1157      01270         iorwf   ACCUH, W
166A 6EEF      01271         movwf   INDF0
               01272         M_CONST 0
166C 0E01          M                 movlw   2 * N + 1
166E 6F56          M                 movwf   ACCUL
1670 6B57          M                 clrf    ACCUH
1672 0012      01273         return
               01274 #endif
               01275 
               01276 #ifdef caml_useprim_caml_pic_clear_bit
1674 01277 caml_pic_clear_bit:
1674 80D8      01278         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
1676 3156      01279         rrcf    ACCUL, W
1678 6EE9      01280         movwf   FSR0L
167A 68EA      01281         setf    FSR0H
167C 1F57      01282         comf    ACCUH, F        ; INDF0 <- INDF0 & ~ACCUH
167E 50EF      01283         movf    INDF0, W
1680 1557      01284         andwf   ACCUH, W
1682 6EEF      01285         movwf   INDF0
               01286         M_CONST 0
1684 0E01          M                 movlw   2 * N + 1
1686 6F56          M                 movwf   ACCUL
1688 6B57          M                 clrf    ACCUH
168A 0012      01287         return
               01288 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01289 
               01290 #ifdef caml_useprim_caml_pic_test_bit
168C 01291 caml_pic_test_bit:
168C 80D8      01292         bsf     STATUS, C       ; FSR0 <- 0xF70 | (ACCUL >> 1)
168E 3156      01293         rrcf    ACCUL, W
1690 6EE9      01294         movwf   FSR0L
1692 68EA      01295         setf    FSR0H
1694 5157      01296         movf    ACCUH, W        ; INDF0 & ACCUH
1696 14EF      01297         andwf   INDF0, W
1698 0E01      01298         movlw   0x1             ; ACCU <- if Z then 1 else 3
169A A4D8      01299         btfss   STATUS, Z
169C 0E03      01300         movlw   0x3
169E 6F56      01301         movwf   ACCUL
16A0 6B57      01302         clrf    ACCUH
16A2 0012      01303         return
               01304 #endif
               01305 
               01306 #ifdef caml_useprim_caml_pic_tris_of_port
               01307 caml_pic_tris_of_port:
               01308         movlw   ((0x2 * LATA) & 0xFF)
               01309         cpfslt  ACCUL
               01310         addlw   (0x2 * (PORTA - LATA))
               01311         addlw   ((0x2 * (TRISA - PORTA) - (0x2 * LATA)) & 0xFF)
               01312         addwf   ACCUL, F
               01313         return
               01314 #endif
               01315 
               01316 
               01317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01318 ;;;;;;;;                                   ;;;;;;;;
               01319 ;;;;;;;;             FORMATS               ;;;;;;;;
               01320 ;;;;;;;;                                   ;;;;;;;;
               01321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01322 
               01323 #ifdef caml_useprim_caml_int_of_string
               01324 #ifndef caml_useprim_caml_raise_ios_failure
               01325 #define caml_useprim_caml_raise_ios_failure
               01326 #endif
               01327 caml_int_of_string:
               01328         movff   ACCUL, FSR0L    ; FSR0 <- ACCU
               01329         movff   ACCUH, FSR0H
               01330         clrf    ACCUL           ; ACCU <- 0
               01331         clrf    ACCUH
               01332         movf    POSTINC0, W
               01333         bz      caml_raise_ios_failure
               01334         sublw   '-'             ; W <- '-' - str[0]
               01335         bcf     TMP_REG_5, 0    ; TMP_REG_5.0 = 0  <=>  res >= 0
               01336         bnz     caml_int_of_string_sign_tested
               01337         bsf     TMP_REG_5, 0
               01338         movf    POSTINC0, W
               01339 caml_int_of_string_sign_tested:
               01340         sublw   ('-' - '0')     ; W <- str[0] - '0'
               01341         bnz     caml_int_of_string_dec
               01342         movf    POSTINC0, W     ; W <- str[1]
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01343         bz      caml_int_of_string_return_zero
               01344         sublw   'x'             ; W <- 'x' - str[1]
               01345         bz      caml_int_of_string_hex
               01346         sublw   ('x' - 'X')     ; W <- str[1] - 'X'
               01347         bz      caml_int_of_string_hex
               01348         sublw   ('b' - 'X')     ; W <- 'b' - str[1]
               01349         bz      caml_int_of_string_bin
               01350         sublw   ('b' - 'B')     ; W <- str[1] - 'B'
               01351         bz      caml_int_of_string_bin
               01352         sublw   ('o' - 'B')     ; W <- 'o' - str[1]
               01353         bz      caml_int_of_string_oct
               01354         sublw   ('o' - 'O')     ; W <- str[1] - 'O'
               01355         bz      caml_int_of_string_oct
               01356         addlw   ('O' - '0')     ; W <- str[1] - '0'
               01357 caml_int_of_string_dec:
               01358         sublw   ('9' - '0')     ; W <- ('9' - '0') - (c - '0')
               01359         bnc     caml_raise_ios_failure
               01360         sublw   ('9' - '0')     ; W <- ('9' - '0') - ('9' - c)
               01361         bnc     caml_raise_ios_failure
               01362         movwf   TMP_REG_1
               01363         movf    ACCUL, W
               01364         mullw   .10
               01365         movf    TMP_REG_1, W
               01366         addwf   PRODL, W
               01367         movwf   ACCUL
               01368         movf    PRODH, W
               01369         addwfc  ACCUH, F
               01370         bn      caml_raise_ios_failure
               01371         movf    POSTINC0, W     ; W <- str[i++]
               01372         bz      caml_int_of_string_return
               01373         addlw   (-'0')          ; W <- c - '0'
               01374         bra     caml_int_of_string_dec
               01375 caml_int_of_string_oct:
               01376         movf    POSTINC0, W     ; W <- str[i++]
               01377         bz      caml_raise_ios_failure
               01378 caml_int_of_string_oct_loop:
               01379         addlw   (-'0')          ; W <- c - '0'
               01380         swapf   WREG, F
               01381         rlncf   WREG, F
               01382         rlcf    WREG, F
               01383         rlcf    ACCUL, F
               01384         rlcf    ACCUH, F
               01385         bn      caml_raise_ios_failure
               01386         rlcf    WREG, F
               01387         rlcf    ACCUL, F
               01388         rlcf    ACCUH, F
               01389         bn      caml_raise_ios_failure
               01390         rlcf    WREG, F
               01391         rlcf    ACCUL, F
               01392         rlcf    ACCUH, F
               01393         bn      caml_raise_ios_failure
               01394         andlw   B'11111000'     ; check range
               01395         bnz     caml_raise_ios_failure
               01396         movf    POSTINC0, W     ; W <- str[i++]
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01397         bnz     caml_int_of_string_oct_loop
               01398         bra     caml_int_of_string_return
               01399 caml_int_of_string_bin:
               01400         movf    POSTINC0, W     ; W <- str[i++]
               01401         bz      caml_raise_ios_failure
               01402 caml_int_of_string_bin_loop:
               01403         addlw   (-'0')          ; W <- c - '0'
               01404         rrcf    WREG, F
               01405         rlcf    ACCUL, F
               01406         rlcf    ACCUH, F
               01407         bn      caml_raise_ios_failure
               01408         andlw   B'01111111'     ; check range
               01409         bnz     caml_raise_ios_failure
               01410         movf    POSTINC0, W     ; W <- str[i++]
               01411         bnz     caml_int_of_string_bin_loop
               01412         bra     caml_int_of_string_return
               01413 caml_int_of_string_hex:
               01414         movf    POSTINC0, W     ; W <- str[i++]
               01415         bz      caml_raise_ios_failure
               01416 caml_int_of_string_hex_loop:
               01417         addlw   (-'0')          ; W <- c - '0'
               01418         bnc     caml_raise_ios_failure
               01419         addlw   ('0' - '9' - 1) ; W <- (c - '0') + ('0' - '9' - 1)
               01420         bnc     caml_int_of_string_hex_09
               01421         addlw   ('9' - 'A' + 1) ; W <- (c - '9' - 1) + ('9' - 'A' + 1)
               01422         bnc     caml_raise_ios_failure
               01423         addlw   ('A' - 'F' - 1) ; W <- (c - 'A') + ('A' - 'F' - 1)
               01424         bnc     caml_int_of_string_hex_AF
               01425         addlw   ('F' - 'a' + 1) ; W <- (c - 'F' - 1) + ('F' - 'a' + 1)
               01426         bnc     caml_raise_ios_failure
               01427         addlw   ('a' - 'f' - 1) ; W <- (c - 'a') + ('a' - 'f' - 1)
               01428         bc      caml_raise_ios_failure
               01429 caml_int_of_string_hex_af:
               01430         addlw   ('f' - 'F' + 'A' - 'a')
               01431 caml_int_of_string_hex_AF:
               01432         addlw   ('F' - '9' + '0' - 'A' + .10)
               01433 caml_int_of_string_hex_09:
               01434         addlw   ('9' - '0' + 1)
               01435 caml_int_of_string_hex_shift:
               01436         swapf   WREG, F
               01437         rlcf    WREG, F
               01438         rlcf    ACCUL, F
               01439         rlcf    ACCUH, F
               01440         bn      caml_raise_ios_failure
               01441         rlcf    WREG, F
               01442         rlcf    ACCUL, F
               01443         rlcf    ACCUH, F
               01444         bn      caml_raise_ios_failure
               01445         rlcf    WREG, F
               01446         rlcf    ACCUL, F
               01447         rlcf    ACCUH, F
               01448         bn      caml_raise_ios_failure
               01449         rlcf    WREG, F
               01450         rlcf    ACCUL, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01451         rlcf    ACCUH, F
               01452         bn      caml_raise_ios_failure
               01453         movf    POSTINC0, W
               01454         bnz     caml_int_of_string_hex_loop
               01455 caml_int_of_string_return:
               01456         bsf     STATUS, C
               01457         rlcf    ACCUL, F
               01458         rlcf    ACCUH, F
               01459         btfss   TMP_REG_5, 0    ; negate ?
               01460         return                  ; no -> return
               01461         comf    ACCUL, F        ; yes -> ACCU <- -ACCU
               01462         comf    ACCUH, F
               01463         infsnz  ACCUL, F
               01464         incf    ACCUH, F
               01465         return
               01466 caml_int_of_string_return_zero:
               01467         bsf     ACCUL, 0
               01468         return
               01469 #endif
               01470 
               01471 #ifdef caml_useprim_caml_raise_ios_failure
               01472 caml_raise_ios_failure:
               01473         movlw   0x1                     ; erase ACCU
               01474         movwf   ACCUL
               01475         clrf    ACCUH
               01476         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
               01477         M_WRITE_BYTE STRING_TAG         ; write string tag
               01478         M_WRITE_BYTE 0x7                ; write string size
               01479         movff   FSR1L, TMP_REG_1        ; mem string addr
               01480         movff   FSR1H, TMP_REG_2
               01481         M_WRITE_BYTE 'i'                ; write string content
               01482         M_WRITE_BYTE 'n'
               01483         M_WRITE_BYTE 't'
               01484         M_WRITE_BYTE '_'
               01485         M_WRITE_BYTE 'o'
               01486         M_WRITE_BYTE 'f'
               01487         M_WRITE_BYTE '_'
               01488         M_WRITE_BYTE 's'
               01489         M_WRITE_BYTE 't'
               01490         M_WRITE_BYTE 'r'
               01491         M_WRITE_BYTE 'i'
               01492         M_WRITE_BYTE 'n'
               01493         M_WRITE_BYTE 'g'
               01494         M_WRITE_BYTE 0x0                ; write string \0
               01495         M_WRITE_BYTE 0x0                ; write exn tag
               01496         M_WRITE_BYTE 0x2                ; write exn size
               01497         movff   FSR1L, ACCUL            ; ACCU <- exn
               01498         movff   FSR1H, ACCUH
               01499         movlw   (FAILURE_IND * 0x2 + 0x1) ; write FAILURE_IND
               01500         movwf   POSTINC1
               01501         clrf    POSTINC1
               01502         movff   TMP_REG_1, POSTINC1     ; write string addr
               01503         movff   TMP_REG_2, POSTINC1
               01504         goto    caml_extern_raise
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01505 #endif
               01506 
               01507 
               01508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01509 ;;;;;;;;                                   ;;;;;;;;
               01510 ;;;;;;;;               INT32               ;;;;;;;;
               01511 ;;;;;;;;                                   ;;;;;;;;
               01512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               01513 
               01514 M_CREATE_INT32 macro
               01515 #ifndef caml_useprim_caml_int32_custom
               01516 #define caml_useprim_caml_int32_custom
               01517 #endif
               01518                 M_CHECK_UNFULL_HEAP 0x3
               01519                 setf    POSTINC1                ; write tag
               01520                 movlw   0x3
               01521                 movwf   POSTINC1                ; write size
               01522                 movff   FSR1L, ACCUL
               01523                 movff   FSR1H, ACCUH            ; ACCU <- @
               01524                 movlw   low caml_int32_custom
               01525                 movwf   POSTINC1                ; write custom @L
               01526                 movlw   high caml_int32_custom
               01527                 movwf   POSTINC1                ; write custom @H
               01528         endm
               01529 
               01530 M_PRIM_INT32_1ARG_INIT macro
               01531 #ifndef caml_useprim_caml_int32_1arg
               01532 #define caml_useprim_caml_int32_1arg
               01533 #endif
               01534                 call    caml_int32_1arg_init
               01535         endm
               01536 
               01537 M_PRIM_INT32_1ARG_END macro
               01538                 return
               01539         endm
               01540 
               01541 M_PRIM_INT32_2ARG_INIT macro
               01542 #ifndef caml_useprim_caml_int32_2arg    
               01543 #define caml_useprim_caml_int32_2arg
               01544 #endif
               01545                 call    caml_int32_2arg_init
               01546         endm
               01547 
               01548 M_PRIM_INT32_2ARG_END macro
               01549                 movff   TMP_REG_1, FSR2L
               01550                 movff   TMP_REG_2, FSR2H
               01551                 return
               01552         endm
               01553         
               01554 #ifdef caml_useprim_caml_int32_neg
               01555 caml_int32_neg:
               01556         M_PRIM_INT32_1ARG_INIT
               01557         comf    POSTINC0, W     ; copy and incr lowest byte
               01558         incf    WREG, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01559         movwf   POSTINC1
               01560         comf    POSTINC0, W     ; 2
               01561         btfsc   STATUS, C
               01562         incf    WREG, F
               01563         movwf   POSTINC1
               01564         comf    POSTINC0, W     ; 3
               01565         btfsc   STATUS, C
               01566         incf    WREG, F
               01567         movwf   POSTINC1
               01568         comf    INDF0, W        ; 4
               01569         btfsc   STATUS, C
               01570         incf    WREG, F
               01571         movwf   POSTINC1
               01572         M_PRIM_INT32_1ARG_END
               01573 #endif
               01574 
               01575 #ifdef caml_useprim_caml_int32_add
               01576 caml_int32_add:
               01577         M_PRIM_INT32_2ARG_INIT
               01578         movf    POSTINC2, W      ; 1
               01579         addwf   POSTINC0, W
               01580         movwf   POSTINC1
               01581         movf    POSTINC2, W      ; 2
               01582         addwfc  POSTINC0, W
               01583         movwf   POSTINC1
               01584         movf    POSTINC2, W      ; 3
               01585         addwfc  POSTINC0, W
               01586         movwf   POSTINC1
               01587         movf    INDF2, W         ; 4
               01588         addwfc  INDF0, W
               01589         movwf   POSTINC1
               01590         M_PRIM_INT32_2ARG_END
               01591 #endif
               01592 
               01593 #ifdef caml_useprim_caml_int32_sub
               01594 caml_int32_sub:
               01595         M_PRIM_INT32_2ARG_INIT
               01596         movf    POSTINC2, W      ; 1
               01597         subwf   POSTINC0, W
               01598         movwf   POSTINC1
               01599         movf    POSTINC2, W      ; 2
               01600         subwfb  POSTINC0, W
               01601         movwf   POSTINC1
               01602         movf    POSTINC2, W      ; 3
               01603         subwfb  POSTINC0, W
               01604         movwf   POSTINC1
               01605         movf    INDF2, W         ; 4
               01606         subwfb  INDF0, W
               01607         movwf   POSTINC1
               01608         M_PRIM_INT32_2ARG_END
               01609 #endif
               01610 
               01611 #ifdef caml_useprim_caml_int32_mul
               01612 caml_int32_mul:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01613         M_PRIM_INT32_2ARG_INIT
               01614         movf    INDF0, W         ; r0 += (x0*y0)L ; r1 += (x0*y0)H
               01615         mulwf   [0x0]            ; FSR1 ++
               01616         movff   PRODL, POSTINC1
               01617         movff   PRODH, INDF1
               01618         mulwf   [0x1]            ; r1 += (x0*y1)L ; r2 += (x0*y1)H
               01619         movff   PRODH, TMP_REG_3
               01620         clrf    TMP_REG_4
               01621         movf    PRODL, W
               01622         addwf   INDF1, F
               01623         movlw   0x00
               01624         addwfc  TMP_REG_3, F
               01625         addwfc  TMP_REG_4, F
               01626         movf    INDF0, W         ; r2 += (x0*y2)L ; r3 += (x0*y2)H
               01627         mulwf   [0x2]
               01628         movf    PRODL, W
               01629         addwf   TMP_REG_3, F
               01630         movlw   0x00
               01631         addwfc  TMP_REG_4, F
               01632         movf    PRODH, W
               01633         addwf   TMP_REG_4, F
               01634         movf    POSTINC0, W      ; r3 += (x0*y3)L
               01635         mulwf   [0x3]            ; FSR0 ++
               01636         movf    PRODL, W
               01637         addwf   TMP_REG_4, F
               01638         movf    INDF0, W         ; r1 += (x1*y0)L ; r2 += (x1*y0)H
               01639         mulwf   [0x0]            ; FSR1 ++
               01640         movf    PRODL, W
               01641         addwf   POSTINC1, F
               01642         movlw   0x00
               01643         addwfc  TMP_REG_3, F
               01644         addwfc  TMP_REG_4, F
               01645         movf    PRODH, W
               01646         addwf   TMP_REG_3, F
               01647         movlw   0x00
               01648         addwfc  TMP_REG_4, F
               01649         movf    INDF0, W         ; r2 += (x1*y1)L ; r3 += (x1*y1)H
               01650         mulwf   [0x1]
               01651         movf    PRODL, W
               01652         addwf   TMP_REG_3, F
               01653         movlw   0x00
               01654         addwfc  TMP_REG_4, F
               01655         movf    PRODH, W
               01656         addwf   TMP_REG_4, F
               01657         movf    POSTINC0, W      ; r3 += (x1*y2)L
               01658         mulwf   [0x2]            ; FSR0 ++
               01659         movf    PRODL, W
               01660         addwf   TMP_REG_4, F
               01661         movf    INDF0, W         ; r2 += (x2*y0)L ; r3 += (x2*y0)H
               01662         mulwf   [0x0]
               01663         movf    PRODL, W
               01664         addwf   TMP_REG_3, F
               01665         movlw   0x00
               01666         addwfc  TMP_REG_4, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01667         movf    PRODH, W
               01668         addwf   TMP_REG_4, F
               01669         movf    POSTINC0, W      ; r3 += (x2*y1)L
               01670         mulwf   [0x1]            ; FSR0 ++
               01671         movf    PRODL, W
               01672         addwf   TMP_REG_4, F
               01673         movf    INDF0, W         ; r3 += (x3*y0)L
               01674         mulwf   [0x0]
               01675         movf    PRODL, W
               01676         addwf   TMP_REG_4, F
               01677         movff   TMP_REG_3, POSTINC1 ; flush r2 ; FSR1 ++
               01678         movff   TMP_REG_4, POSTINC1 ; flush r3 ; FSR1 ++
               01679         M_PRIM_INT32_2ARG_END
               01680 #endif
               01681 
               01682 #ifdef caml_useprim_caml_int32_div
               01683 caml_int32_div:
               01684         movsf   [0x1], FSR0L
               01685         movsf   [0x2], FSR0H
               01686         addfsr  FSR0, 0x2
               01687         movff   POSTINC0, TMP_REG_5 ; y = TMP_REG_8:7:6:5
               01688         movff   POSTINC0, TMP_REG_6
               01689         movff   POSTINC0, TMP_REG_7
               01690         movf    INDF0, W
               01691         movwf   TMP_REG_8
               01692         iorwf   TMP_REG_7, W        ; y = 0 ?
               01693         iorwf   TMP_REG_6, W
               01694         iorwf   TMP_REG_5, W
               01695         btfsc   STATUS, Z
               01696         goto    caml_raise_division_by_0
               01697         movff   ACCUL, FSR0L
               01698         movff   ACCUH, FSR0H
               01699         addfsr  FSR0, 0x2
               01700         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_4:3:2:1
               01701         movff   POSTINC0, TMP_REG_2
               01702         movff   POSTINC0, TMP_REG_3
               01703         movff   INDF0, TMP_REG_4
               01704         M_CREATE_INT32              ; ACCU <- new int32
               01705         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
               01706         btfss   TMP_REG_4, 7        ; x < 0 ?
               01707         bra     caml_int32_div_l0   ; no => skip
               01708         btg     TMP_REG_9, 0        ; update result sign
               01709         comf    TMP_REG_1, F        ; negate x
               01710         comf    TMP_REG_2, F
               01711         comf    TMP_REG_3, F
               01712         comf    TMP_REG_4, F
               01713         incf    TMP_REG_1, F
               01714         bnc     caml_int32_div_l0
               01715         incf    TMP_REG_2, F
               01716         bnc     caml_int32_div_l0
               01717         incf    TMP_REG_3, F
               01718         bnc     caml_int32_div_l0
               01719         incf    TMP_REG_4, F
               01720 caml_int32_div_l0:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01721         btfss   TMP_REG_8, 7    ; y < 0 ?
               01722         bra     caml_int32_div_l1 ; no => skip
               01723         btg     TMP_REG_9, 0    ; update result sign
               01724         comf    TMP_REG_5, F    ; negate y
               01725         comf    TMP_REG_6, F
               01726         comf    TMP_REG_7, F
               01727         comf    TMP_REG_8, F
               01728         incf    TMP_REG_5, F
               01729         bnc     caml_int32_div_l1
               01730         incf    TMP_REG_6, F
               01731         bnc     caml_int32_div_l1
               01732         incf    TMP_REG_7, F
               01733         bnc     caml_int32_div_l1
               01734         incf    TMP_REG_8, F
               01735 caml_int32_div_l1:
               01736         clrf    TMP_REG_A       ; init result to 0
               01737         clrf    TMP_REG_B
               01738         clrf    TMP_REG_C
               01739         clrf    TMP_REG_D
               01740         clrf    GC_TMP_REG_1    ; init bit raw to 00...01
               01741         clrf    GC_TMP_REG_2
               01742         clrf    GC_TMP_REG_3
               01743         clrf    GC_TMP_REG_4
               01744         bsf     GC_TMP_REG_1, 0
               01745 caml_int32_div_loop1:
               01746         bcf     STATUS, C       ; y <- y << 1
               01747         rlcf    TMP_REG_5, F
               01748         rlcf    TMP_REG_6, F
               01749         rlcf    TMP_REG_7, F
               01750         rlcf    TMP_REG_8, F
               01751         movf    TMP_REG_8, W    ; x - y
               01752         subwf   TMP_REG_4, W
               01753         bnc     caml_int32_div_loop2 ; if x < y then break
               01754         bnz     caml_int32_div_if_l1 ; if x > y then continue
               01755         movf    TMP_REG_7, W
               01756         subwf   TMP_REG_3, W
               01757         bnc     caml_int32_div_loop2 ; if x < y then break
               01758         bnz     caml_int32_div_if_l1 ; if w > y then continue
               01759         movf    TMP_REG_6, W
               01760         subwf   TMP_REG_2, W
               01761         bnc     caml_int32_div_loop2 ; if x < y then break
               01762         bnz     caml_int32_div_if_l1 ; if w > y then continue
               01763         movf    TMP_REG_5, W
               01764         subwf   TMP_REG_1, W
               01765         bnc     caml_int32_div_loop2 ; if x < y then break
               01766 caml_int32_div_if_l1:
               01767         bcf     STATUS, C       ; raw <- raw << 1
               01768         rlcf    GC_TMP_REG_1, F
               01769         rlcf    GC_TMP_REG_2, F
               01770         rlcf    GC_TMP_REG_3, F
               01771         rlcf    GC_TMP_REG_4, F
               01772         bra     caml_int32_div_loop1 ; loop
               01773 caml_int32_div_loop2:
               01774         bcf     STATUS, C       ; y <- y >> 1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01775         rrcf    TMP_REG_8, F
               01776         rrcf    TMP_REG_7, F
               01777         rrcf    TMP_REG_6, F
               01778         rrcf    TMP_REG_5, F
               01779         movf    TMP_REG_8, W    ; x - y
               01780         subwf   TMP_REG_4, W
               01781         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
               01782         bnz     caml_int32_div_if_l2  ; if x > y then continue
               01783         movf    TMP_REG_7, W
               01784         subwf   TMP_REG_3, W
               01785         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
               01786         bnz     caml_int32_div_if_l2  ; if x > y then continue
               01787         movf    TMP_REG_6, W
               01788         subwf   TMP_REG_2, W
               01789         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
               01790         bnz     caml_int32_div_if_l2  ; if x > y then continue
               01791         movf    TMP_REG_5, W
               01792         subwf   TMP_REG_1, W
               01793         bnc     caml_int32_div_ifn_l2 ; if x < y then skip
               01794 caml_int32_div_if_l2:
               01795         movf    TMP_REG_5, W    ; x <- x - y
               01796         subwf   TMP_REG_1, F
               01797         movf    TMP_REG_6, W
               01798         subwfb  TMP_REG_2, F
               01799         movf    TMP_REG_7, W
               01800         subwfb  TMP_REG_3, F
               01801         movf    TMP_REG_8, W
               01802         subwfb  TMP_REG_4, F
               01803         movf    GC_TMP_REG_1, W ; res <- res | raw
               01804         iorwf   TMP_REG_A, F
               01805         movf    GC_TMP_REG_2, W
               01806         iorwf   TMP_REG_B, F
               01807         movf    GC_TMP_REG_3, W
               01808         iorwf   TMP_REG_C, F
               01809         movf    GC_TMP_REG_4, W
               01810         iorwf   TMP_REG_D, F
               01811 caml_int32_div_ifn_l2:
               01812         bcf     STATUS, C       ; raw <- raw >> 1
               01813         rrcf    GC_TMP_REG_4, F
               01814         rrcf    GC_TMP_REG_3, F
               01815         rrcf    GC_TMP_REG_2, F
               01816         rrcf    GC_TMP_REG_1, F
               01817         btfss   STATUS, C               ; if CARRY = 0
               01818         bra     caml_int32_div_loop2    ; then loop
               01819         btfss   TMP_REG_9, 0            ; negative result ?
               01820         bra     caml_int32_div_end      ; no => division done
               01821         comf    TMP_REG_A, F            ; yes => negate result
               01822         comf    TMP_REG_B, F
               01823         comf    TMP_REG_C, F
               01824         comf    TMP_REG_D, F
               01825         incf    TMP_REG_A, F
               01826         bnc     caml_int32_div_end
               01827         incf    TMP_REG_B, F
               01828         bnc     caml_int32_div_end
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01829         incf    TMP_REG_C, F
               01830         bnc     caml_int32_div_end
               01831         incf    TMP_REG_D, F
               01832 caml_int32_div_end:
               01833         movff   TMP_REG_A, POSTINC1 ; flush result
               01834         movff   TMP_REG_B, POSTINC1
               01835         movff   TMP_REG_C, POSTINC1
               01836         movff   TMP_REG_D, POSTINC1
               01837         return
               01838 #endif
               01839 
               01840 #ifdef caml_useprim_caml_int32_mod
               01841 caml_int32_mod:
               01842         movsf   [0x1], FSR0L
               01843         movsf   [0x2], FSR0H
               01844         addfsr  FSR0, 0x2
               01845         movff   POSTINC0, TMP_REG_5 ; y = TMP_REG_8:7:6:5
               01846         movff   POSTINC0, TMP_REG_6
               01847         movff   POSTINC0, TMP_REG_7
               01848         movf    INDF0, W
               01849         movwf   TMP_REG_8
               01850         iorwf   TMP_REG_7, W        ; y = 0 ?
               01851         iorwf   TMP_REG_6, W
               01852         iorwf   TMP_REG_5, W
               01853         btfsc   STATUS, Z
               01854         goto    caml_raise_division_by_0
               01855         movff   ACCUL, FSR0L
               01856         movff   ACCUH, FSR0H
               01857         addfsr  FSR0, 0x2
               01858         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_4:3:2:1
               01859         movff   POSTINC0, TMP_REG_2
               01860         movff   POSTINC0, TMP_REG_3
               01861         movff   INDF0, TMP_REG_4
               01862         M_CREATE_INT32              ; ACCU <- new int32
               01863         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
               01864         btfss   TMP_REG_4, 7        ; x < 0 ?
               01865         bra     caml_int32_mod_l0   ; no => skip
               01866         btg     TMP_REG_9, 0        ; update result sign
               01867         comf    TMP_REG_1, F        ; negate x
               01868         comf    TMP_REG_2, F
               01869         comf    TMP_REG_3, F
               01870         comf    TMP_REG_4, F
               01871         incf    TMP_REG_1, F
               01872         bnc     caml_int32_mod_l0
               01873         incf    TMP_REG_2, F
               01874         bnc     caml_int32_mod_l0
               01875         incf    TMP_REG_3, F
               01876         bnc     caml_int32_mod_l0
               01877         incf    TMP_REG_4, F
               01878 caml_int32_mod_l0:
               01879         btfss   TMP_REG_8, 7    ; y < 0 ?
               01880         bra     caml_int32_mod_l1 ; no => skip
               01881         btg     TMP_REG_9, 0    ; update result sign
               01882         comf    TMP_REG_5, F    ; negate y
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01883         comf    TMP_REG_6, F
               01884         comf    TMP_REG_7, F
               01885         comf    TMP_REG_8, F
               01886         incf    TMP_REG_5, F
               01887         bnc     caml_int32_mod_l1
               01888         incf    TMP_REG_6, F
               01889         bnc     caml_int32_mod_l1
               01890         incf    TMP_REG_7, F
               01891         bnc     caml_int32_mod_l1
               01892         incf    TMP_REG_8, F
               01893 caml_int32_mod_l1:
               01894         clrf    TMP_REG_E       ; counter = TMP_REG_E <- 0
               01895 caml_int32_mod_loop1:
               01896         bcf     STATUS, C       ; y <- y << 1
               01897         rlcf    TMP_REG_5, F
               01898         rlcf    TMP_REG_6, F
               01899         rlcf    TMP_REG_7, F
               01900         rlcf    TMP_REG_8, F
               01901         incf    TMP_REG_E, F    ; incr counter
               01902         movf    TMP_REG_8, W    ; x - y
               01903         subwf   TMP_REG_4, W
               01904         bnc     caml_int32_mod_loop2 ; if x < y then break
               01905         bnz     caml_int32_mod_loop1 ; if x > y then loop
               01906         movf    TMP_REG_7, W
               01907         subwf   TMP_REG_3, W
               01908         bnc     caml_int32_mod_loop2 ; if x < y then break
               01909         bnz     caml_int32_mod_loop1 ; if x > y then loop
               01910         movf    TMP_REG_6, W
               01911         subwf   TMP_REG_2, W
               01912         bnc     caml_int32_mod_loop2 ; if x < y then break
               01913         bnz     caml_int32_mod_loop1 ; if x > y then loop
               01914         movf    TMP_REG_5, W
               01915         subwf   TMP_REG_1, W
               01916         bc      caml_int32_mod_loop1 ; if x >= y then loop
               01917 caml_int32_mod_loop2:
               01918         bcf     STATUS, C       ; y <- y >> 1
               01919         rrcf    TMP_REG_8, F
               01920         rrcf    TMP_REG_7, F
               01921         rrcf    TMP_REG_6, F
               01922         rrcf    TMP_REG_5, F
               01923         movf    TMP_REG_8, W    ; x - y
               01924         subwf   TMP_REG_4, W
               01925         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
               01926         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
               01927         movf    TMP_REG_7, W
               01928         subwf   TMP_REG_3, W
               01929         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
               01930         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
               01931         movf    TMP_REG_6, W
               01932         subwf   TMP_REG_2, W
               01933         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
               01934         bnz     caml_int32_mod_if_l2  ; if x > y then do not skip
               01935         movf    TMP_REG_5, W
               01936         subwf   TMP_REG_1, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01937         bnc     caml_int32_mod_ifn_l2 ; if x < y then skip
               01938 caml_int32_mod_if_l2:
               01939         movf    TMP_REG_5, W    ; x <- x - y
               01940         subwf   TMP_REG_1, F
               01941         movf    TMP_REG_6, W
               01942         subwfb  TMP_REG_2, F
               01943         movf    TMP_REG_7, W
               01944         subwfb  TMP_REG_3, F
               01945         movf    TMP_REG_8, W
               01946         subwfb  TMP_REG_4, F
               01947 caml_int32_mod_ifn_l2:
               01948         decfsz  TMP_REG_E, F    ; decr counter
               01949         bra     caml_int32_mod_loop2 ; if counter <> 0 then loop
               01950         btfss   TMP_REG_9, 0    ; negative result ?
               01951         bra     caml_int32_mod_end ; no => modulo done
               01952         comf    TMP_REG_1, F       ; yes => negate result
               01953         comf    TMP_REG_2, F
               01954         comf    TMP_REG_3, F
               01955         comf    TMP_REG_4, F
               01956         incf    TMP_REG_1, F
               01957         bnc     caml_int32_mod_end
               01958         incf    TMP_REG_2, F
               01959         bnc     caml_int32_mod_end
               01960         incf    TMP_REG_3, F
               01961         bnc     caml_int32_mod_end
               01962         incf    TMP_REG_4, F
               01963 caml_int32_mod_end:
               01964         movff   TMP_REG_1, POSTINC1
               01965         movff   TMP_REG_2, POSTINC1
               01966         movff   TMP_REG_3, POSTINC1
               01967         movff   TMP_REG_4, POSTINC1
               01968         return
               01969 #endif
               01970 
               01971 #ifdef caml_useprim_caml_int32_and
               01972 caml_int32_and:
               01973         M_PRIM_INT32_2ARG_INIT
               01974         movf    POSTINC2, W      ; 1
               01975         andwf   POSTINC0, W
               01976         movwf   POSTINC1
               01977         movf    POSTINC2, W      ; 2
               01978         andwf   POSTINC0, W
               01979         movwf   POSTINC1
               01980         movf    POSTINC2, W      ; 3
               01981         andwf   POSTINC0, W
               01982         movwf   POSTINC1
               01983         movf    INDF2, W         ; 4
               01984         andwf   INDF0, W
               01985         movwf   POSTINC1
               01986         M_PRIM_INT32_2ARG_END
               01987 #endif
               01988 
               01989 #ifdef caml_useprim_caml_int32_or
               01990 caml_int32_or:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01991         M_PRIM_INT32_2ARG_INIT
               01992         movf    POSTINC2, W      ; 1
               01993         iorwf   POSTINC0, W
               01994         movwf   POSTINC1
               01995         movf    POSTINC2, W      ; 2
               01996         iorwf   POSTINC0, W
               01997         movwf   POSTINC1
               01998         movf    POSTINC2, W      ; 3
               01999         iorwf   POSTINC0, W
               02000         movwf   POSTINC1
               02001         movf    INDF2, W         ; 4
               02002         iorwf   INDF0, W
               02003         movwf   POSTINC1
               02004         M_PRIM_INT32_2ARG_END
               02005 #endif
               02006 
               02007 #ifdef caml_useprim_caml_int32_xor
               02008 caml_int32_xor:
               02009         M_PRIM_INT32_2ARG_INIT
               02010         movf    POSTINC2, W      ; 1
               02011         xorwf   POSTINC0, W
               02012         movwf   POSTINC1
               02013         movf    POSTINC2, W      ; 2
               02014         xorwf   POSTINC0, W
               02015         movwf   POSTINC1
               02016         movf    POSTINC2, W      ; 3
               02017         xorwf   POSTINC0, W
               02018         movwf   POSTINC1
               02019         movf    INDF2, W         ; 4
               02020         xorwf   INDF0, W
               02021         movwf   POSTINC1
               02022         M_PRIM_INT32_2ARG_END
               02023 #endif
               02024 
               02025 #ifdef caml_useprim_caml_int32_shift_left
               02026 caml_int32_shift_left:
               02027         M_PRIM_INT32_1ARG_INIT
               02028         movff   POSTINC0, TMP_REG_1
               02029         movff   POSTINC0, TMP_REG_2
               02030         movff   POSTINC0, TMP_REG_3
               02031         movff   INDF0, TMP_REG_4
               02032         bcf     STATUS, C
               02033         rrcf    [0x1], F
               02034         bz      caml_int32_shift_left_end_loop
               02035 caml_int32_shift_left_loop:
               02036         bcf     STATUS, C
               02037         rlcf    TMP_REG_1, F
               02038         rlcf    TMP_REG_2, F
               02039         rlcf    TMP_REG_3, F
               02040         rlcf    TMP_REG_4, F
               02041         decfsz  [0x1], F
               02042         bra     caml_int32_shift_left_loop
               02043 caml_int32_shift_left_end_loop:
               02044         movff   TMP_REG_1, POSTINC1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02045         movff   TMP_REG_2, POSTINC1
               02046         movff   TMP_REG_3, POSTINC1
               02047         movff   TMP_REG_4, POSTINC1
               02048         M_PRIM_INT32_1ARG_END
               02049 #endif
               02050 
               02051 #ifdef caml_useprim_caml_int32_shift_right
               02052 caml_int32_shift_right:
               02053         M_PRIM_INT32_1ARG_INIT
               02054         movff   POSTINC0, TMP_REG_1
               02055         movff   POSTINC0, TMP_REG_2
               02056         movff   POSTINC0, TMP_REG_3
               02057         movff   INDF0, TMP_REG_4
               02058         bcf     STATUS, C
               02059         rrcf    [0x1], F
               02060         bz      caml_int32_shift_right_end_loop
               02061 caml_int32_shift_right_loop:
               02062         rlcf    TMP_REG_4, W    ; STATUS.C ignored
               02063         rrcf    TMP_REG_4, F
               02064         rrcf    TMP_REG_3, F
               02065         rrcf    TMP_REG_2, F
               02066         rrcf    TMP_REG_1, F
               02067         decfsz  [0x1], F
               02068         bra     caml_int32_shift_right_loop
               02069 caml_int32_shift_right_end_loop:
               02070         movff   TMP_REG_1, POSTINC1
               02071         movff   TMP_REG_2, POSTINC1
               02072         movff   TMP_REG_3, POSTINC1
               02073         movff   TMP_REG_4, POSTINC1
               02074         M_PRIM_INT32_1ARG_END
               02075 #endif
               02076 
               02077 #ifdef caml_useprim_caml_int32_shift_right_unsigned
               02078 caml_int32_shift_right_unsigned:
               02079         M_PRIM_INT32_1ARG_INIT
               02080         movff   POSTINC0, TMP_REG_1
               02081         movff   POSTINC0, TMP_REG_2
               02082         movff   POSTINC0, TMP_REG_3
               02083         movff   INDF0, TMP_REG_4
               02084         bcf     STATUS, C
               02085         rrcf    [0x1], F
               02086         bz      caml_int32_shift_right_unsigned_end_loop
               02087 caml_int32_shift_right_unsigned_loop:
               02088         bcf     STATUS, C
               02089         rrcf    TMP_REG_4, F
               02090         rrcf    TMP_REG_3, F
               02091         rrcf    TMP_REG_2, F
               02092         rrcf    TMP_REG_1, F
               02093         decfsz  [0x1], F
               02094         bra     caml_int32_shift_right_unsigned_loop
               02095 caml_int32_shift_right_unsigned_end_loop:
               02096         movff   TMP_REG_1, POSTINC1
               02097         movff   TMP_REG_2, POSTINC1
               02098         movff   TMP_REG_3, POSTINC1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02099         movff   TMP_REG_4, POSTINC1
               02100         M_PRIM_INT32_1ARG_END
               02101 #endif
               02102 
               02103 #ifdef caml_useprim_caml_int32_of_int
               02104 caml_int32_of_int:
               02105         movff   ACCUL, TMP_REG_1 ; TMP_REG_1:2 <- ACCU
               02106         movff   ACCUH, TMP_REG_2
               02107         M_CREATE_INT32
               02108         rrcf    TMP_REG_2, W     ; STATUS.C ignored
               02109         rrcf    TMP_REG_1, W
               02110         movwf   POSTINC1
               02111         rlcf    TMP_REG_2, W
               02112         bc      caml_int32_of_int_neg
               02113         rrcf    TMP_REG_2, W
               02114         movwf   POSTINC1
               02115         clrf    POSTINC1
               02116         clrf    POSTINC1
               02117         return
               02118 caml_int32_of_int_neg:
               02119         rrcf    TMP_REG_2, W
               02120         movwf   POSTINC1
               02121         setf    POSTINC1
               02122         setf    POSTINC1
               02123         return
               02124 #endif
               02125 
               02126 #ifdef caml_useprim_caml_int32_1arg
               02127 caml_int32_1arg_init:
               02128         movff   ACCUL, TMP_REG_1
               02129         movff   ACCUH, TMP_REG_2
               02130         M_CREATE_INT32           ; ACCU <- alloc(int32)
               02131         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
               02132         movff   TMP_REG_2, FSR0H
               02133         addfsr  FSR0, 0x2
               02134         return
               02135 #endif
               02136 
               02137 #ifdef caml_useprim_caml_int32_2arg
               02138 caml_int32_2arg_init:
               02139         movff   ACCUL, TMP_REG_1
               02140         movff   ACCUH, TMP_REG_2
               02141         M_CREATE_INT32           ; ACCU <- alloc(int32)
               02142         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
               02143         movff   TMP_REG_2, FSR0H
               02144         addfsr  FSR0, 0x2
               02145         movff   FSR2L, TMP_REG_1 ; save FSR2
               02146         movff   FSR2H, TMP_REG_2
               02147         movf    [0x1], W         ; FSR2 <- arg2
               02148         movsf   [0x2], FSR2H
               02149         movwf   FSR2L
               02150         addfsr  FSR2, 0x2
               02151         return
               02152 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02153 
               02154 
               02155 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02156 ;;;;;;;;                                   ;;;;;;;;
               02157 ;;;;;;;;               INT64               ;;;;;;;;
               02158 ;;;;;;;;                                   ;;;;;;;;
               02159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               02160 
               02161 M_CREATE_INT64 macro
               02162 #ifndef caml_useprim_caml_int64_custom
               02163 #define caml_useprim_caml_int64_custom
               02164 #endif
               02165                 M_CHECK_UNFULL_HEAP 0x5
               02166                 setf    POSTINC1                ; write tag
               02167                 movlw   0x5
               02168                 movwf   POSTINC1                ; write size
               02169                 movff   FSR1L, ACCUL
               02170                 movff   FSR1H, ACCUH            ; ACCU <- @
               02171                 movlw   low caml_int64_custom
               02172                 movwf   POSTINC1                ; write custom @L
               02173                 movlw   high caml_int64_custom
               02174                 movwf   POSTINC1                ; write custom @H
               02175         endm
               02176 
               02177 M_PRIM_INT64_1ARG_INIT macro
               02178 #ifndef caml_useprim_caml_int64_1arg
               02179 #define caml_useprim_caml_int64_1arg
               02180 #endif
               02181                 call    caml_int64_1arg_init
               02182         endm
               02183 
               02184 M_PRIM_INT64_1ARG_END macro
               02185                 return
               02186         endm
               02187 
               02188 M_PRIM_INT64_2ARG_INIT macro
               02189 #ifndef caml_useprim_caml_int64_2arg
               02190 #define caml_useprim_caml_int64_2arg
               02191 #endif
               02192                 call    caml_int64_2arg_init
               02193         endm
               02194 
               02195 M_PRIM_INT64_2ARG_END macro
               02196                 movff   TMP_REG_1, FSR2L
               02197                 movff   TMP_REG_2, FSR2H
               02198                 return
               02199         endm
               02200         
               02201 #ifdef caml_useprim_caml_int64_neg
               02202 caml_int64_neg:
               02203         M_PRIM_INT64_1ARG_INIT
               02204         comf    POSTINC0, W     ; 1
               02205         incf    WREG, F
               02206         movwf   POSTINC1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02207         comf    POSTINC0, W     ; 2
               02208         btfsc   STATUS, C
               02209         incf    WREG, F
               02210         movwf   POSTINC1
               02211         comf    POSTINC0, W     ; 3
               02212         btfsc   STATUS, C
               02213         incf    WREG, F
               02214         movwf   POSTINC1
               02215         comf    POSTINC0, W     ; 4
               02216         btfsc   STATUS, C
               02217         incf    WREG, F
               02218         movwf   POSTINC1
               02219         comf    POSTINC0, W     ; 5
               02220         btfsc   STATUS, C
               02221         incf    WREG, F
               02222         movwf   POSTINC1
               02223         comf    POSTINC0, W     ; 6
               02224         btfsc   STATUS, C
               02225         incf    WREG, F
               02226         movwf   POSTINC1
               02227         comf    POSTINC0, W     ; 7
               02228         btfsc   STATUS, C
               02229         incf    WREG, F
               02230         movwf   POSTINC1
               02231         comf    INDF0, W        ; 8
               02232         btfsc   STATUS, C
               02233         incf    WREG, F
               02234         movwf   POSTINC1
               02235         M_PRIM_INT64_1ARG_END
               02236 #endif
               02237 
               02238 #ifdef caml_useprim_caml_int64_add
               02239 caml_int64_add:
               02240         M_PRIM_INT64_2ARG_INIT
               02241         movf    POSTINC2, W      ; 1
               02242         addwf   POSTINC0, W
               02243         movwf   POSTINC1
               02244         movf    POSTINC2, W      ; 2
               02245         addwfc  POSTINC0, W
               02246         movwf   POSTINC1
               02247         movf    POSTINC2, W      ; 3
               02248         addwfc  POSTINC0, W
               02249         movwf   POSTINC1
               02250         movf    POSTINC2, W      ; 4
               02251         addwfc  POSTINC0, W
               02252         movwf   POSTINC1
               02253         movf    POSTINC2, W      ; 5
               02254         addwfc  POSTINC0, W
               02255         movwf   POSTINC1
               02256         movf    POSTINC2, W      ; 6
               02257         addwfc  POSTINC0, W
               02258         movwf   POSTINC1
               02259         movf    POSTINC2, W      ; 7
               02260         addwfc  POSTINC0, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02261         movwf   POSTINC1
               02262         movf    INDF2, W         ; 8
               02263         addwfc  INDF0, W
               02264         movwf   POSTINC1
               02265         M_PRIM_INT64_2ARG_END
               02266 #endif
               02267 
               02268 #ifdef caml_useprim_caml_int64_sub
               02269 caml_int64_sub:
               02270         M_PRIM_INT64_2ARG_INIT
               02271         movf    POSTINC2, W      ; 1
               02272         subwf   POSTINC0, W
               02273         movwf   POSTINC1
               02274         movf    POSTINC2, W      ; 2
               02275         subwfb  POSTINC0, W
               02276         movwf   POSTINC1
               02277         movf    POSTINC2, W      ; 3
               02278         subwfb  POSTINC0, W
               02279         movwf   POSTINC1
               02280         movf    POSTINC2, W      ; 4
               02281         subwfb  POSTINC0, W
               02282         movwf   POSTINC1
               02283         movf    POSTINC2, W      ; 5
               02284         subwfb  POSTINC0, W
               02285         movwf   POSTINC1
               02286         movf    POSTINC2, W      ; 6
               02287         subwfb  POSTINC0, W
               02288         movwf   POSTINC1
               02289         movf    POSTINC2, W      ; 7
               02290         subwfb  POSTINC0, W
               02291         movwf   POSTINC1
               02292         movf    INDF2, W         ; 8
               02293         subwfb  INDF0, W
               02294         movwf   POSTINC1
               02295         M_PRIM_INT64_2ARG_END
               02296 #endif
               02297 
               02298 #ifdef caml_useprim_caml_int64_mul
               02299 caml_int64_mul:
               02300         M_PRIM_INT64_2ARG_INIT
               02301         movf    INDF0, W         ; r0 += (x0*y0)L ; r1 += (x0*y0)H
               02302         mulwf   [0x0]            ; FSR1 ++
               02303         movff   PRODL, POSTINC1
               02304         movff   PRODH, INDF1
               02305         mulwf   [0x1]            ; r1 += (x0*y1)L ; r2 += (x0*y1)H
               02306         movff   PRODH, TMP_REG_3
               02307         clrf    TMP_REG_4
               02308         clrf    TMP_REG_5
               02309         clrf    TMP_REG_6
               02310         clrf    TMP_REG_7
               02311         clrf    TMP_REG_8
               02312         movf    PRODL, W
               02313         addwf   INDF1, F
               02314         movlw   0x00
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02315         addwfc  TMP_REG_3, F
               02316         addwfc  TMP_REG_4, F
               02317         addwfc  TMP_REG_5, F
               02318         addwfc  TMP_REG_6, F
               02319         addwfc  TMP_REG_7, F
               02320         addwfc  TMP_REG_8, F
               02321         movf    INDF0, W         ; r2 += (x0*y2)L ; r3 += (x0*y2)H
               02322         mulwf   [0x2]
               02323         movf    PRODL, W
               02324         addwf   TMP_REG_3, F
               02325         movlw   0x00
               02326         addwfc  TMP_REG_4, F
               02327         addwfc  TMP_REG_5, F
               02328         addwfc  TMP_REG_6, F
               02329         addwfc  TMP_REG_7, F
               02330         addwfc  TMP_REG_8, F
               02331         movf    PRODH, W
               02332         addwf   TMP_REG_4, F
               02333         movlw   0x00
               02334         addwfc  TMP_REG_5, F
               02335         addwfc  TMP_REG_6, F
               02336         addwfc  TMP_REG_7, F
               02337         addwfc  TMP_REG_8, F
               02338         movf    INDF0, W         ; r3 += (x0*y3)L ; r4 += (x0*y3)H
               02339         mulwf   [0x3]
               02340         movf    PRODL, W
               02341         addwf   TMP_REG_4, F
               02342         movlw   0x00
               02343         addwfc  TMP_REG_5, F
               02344         addwfc  TMP_REG_6, F
               02345         addwfc  TMP_REG_7, F
               02346         addwfc  TMP_REG_8, F
               02347         movf    PRODH, W
               02348         addwf   TMP_REG_5, F
               02349         movlw   0x00
               02350         addwfc  TMP_REG_6, F
               02351         addwfc  TMP_REG_7, F
               02352         addwfc  TMP_REG_8, F
               02353         movf    INDF0, W         ; r4 += (x0*y4)L ; r5 += (x0*y4)H
               02354         mulwf   [0x4]
               02355         movf    PRODL, W
               02356         addwf   TMP_REG_5, F
               02357         movlw   0x00
               02358         addwfc  TMP_REG_6, F
               02359         addwfc  TMP_REG_7, F
               02360         addwfc  TMP_REG_8, F
               02361         movf    PRODH, W
               02362         addwf   TMP_REG_6, F
               02363         movlw   0x00
               02364         addwfc  TMP_REG_7, F
               02365         addwfc  TMP_REG_8, F
               02366         movf    INDF0, W         ; r5 += (x0*y5)L ; r6 += (x0*y5)H
               02367         mulwf   [0x5]
               02368         movf    PRODL, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02369         addwf   TMP_REG_6, F
               02370         movlw   0x00
               02371         addwfc  TMP_REG_7, F
               02372         addwfc  TMP_REG_8, F
               02373         movf    PRODH, W
               02374         addwf   TMP_REG_7, F
               02375         movlw   0x00
               02376         addwfc  TMP_REG_8, F
               02377         movf    INDF0, W         ; r6 += (x0*y6)L ; r7 += (x0*y6)H
               02378         mulwf   [0x6]
               02379         movf    PRODL, W
               02380         addwf   TMP_REG_7, F
               02381         movlw   0x00
               02382         addwfc  TMP_REG_8, F
               02383         movf    PRODH, W
               02384         addwf   TMP_REG_8, F
               02385         movf    POSTINC0, W      ; r7 += (x0*y7)L
               02386         mulwf   [0x7]            ; FSR0 ++
               02387         movf    PRODL, W
               02388         addwf   TMP_REG_8, F
               02389         movf    INDF0, W         ; r1 += (x1*y0)L ; r2 += (x1*y0)H
               02390         mulwf   [0x0]
               02391         movf    PRODL, W
               02392         addwf   POSTINC1, F
               02393         movlw   0x00
               02394         addwfc  TMP_REG_3, F
               02395         addwfc  TMP_REG_4, F
               02396         addwfc  TMP_REG_5, F
               02397         addwfc  TMP_REG_6, F
               02398         addwfc  TMP_REG_7, F
               02399         addwfc  TMP_REG_8, F
               02400         movf    PRODH, W
               02401         addwf   TMP_REG_3, F
               02402         movlw   0x00
               02403         addwfc  TMP_REG_4, F
               02404         addwfc  TMP_REG_5, F
               02405         addwfc  TMP_REG_6, F
               02406         addwfc  TMP_REG_7, F
               02407         addwfc  TMP_REG_8, F
               02408         movf    INDF0, W         ; r2 += (x1*y1)L ; r3 += (x1*y1)H
               02409         mulwf   [0x1]
               02410         movf    PRODL, W
               02411         addwf   TMP_REG_3, F
               02412         movlw   0x00
               02413         addwfc  TMP_REG_4, F
               02414         addwfc  TMP_REG_5, F
               02415         addwfc  TMP_REG_6, F
               02416         addwfc  TMP_REG_7, F
               02417         addwfc  TMP_REG_8, F
               02418         movf    PRODH, W
               02419         addwf   TMP_REG_4, F
               02420         movlw   0x00
               02421         addwfc  TMP_REG_5, F
               02422         addwfc  TMP_REG_6, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02423         addwfc  TMP_REG_7, F
               02424         addwfc  TMP_REG_8, F
               02425         movf    INDF0, W         ; r3 += (x1*y2)L ; r4 += (x1*y2)H
               02426         mulwf   [0x2]
               02427         movf    PRODL, W
               02428         addwf   TMP_REG_4, F
               02429         movlw   0x00
               02430         addwfc  TMP_REG_5, F
               02431         addwfc  TMP_REG_6, F
               02432         addwfc  TMP_REG_7, F
               02433         addwfc  TMP_REG_8, F
               02434         movf    PRODH, W
               02435         addwf   TMP_REG_5, F
               02436         movlw   0x00
               02437         addwfc  TMP_REG_6, F
               02438         addwfc  TMP_REG_7, F
               02439         addwfc  TMP_REG_8, F
               02440         movf    INDF0, W         ; r4 += (x1*y3)L ; r5 += (x1*y3)H
               02441         mulwf   [0x3]
               02442         movf    PRODL, W
               02443         addwf   TMP_REG_5, F
               02444         movlw   0x00
               02445         addwfc  TMP_REG_6, F
               02446         addwfc  TMP_REG_7, F
               02447         addwfc  TMP_REG_8, F
               02448         movf    PRODH, W
               02449         addwf   TMP_REG_6, F
               02450         movlw   0x00
               02451         addwfc  TMP_REG_7, F
               02452         addwfc  TMP_REG_8, F
               02453         movf    INDF0, W         ; r5 += (x1*y4)L ; r6 += (x1*y4)H
               02454         mulwf   [0x4]
               02455         movf    PRODL, W
               02456         addwf   TMP_REG_6, F
               02457         movlw   0x00
               02458         addwfc  TMP_REG_7, F
               02459         addwfc  TMP_REG_8, F
               02460         movf    PRODH, W
               02461         addwf   TMP_REG_7, F
               02462         movlw   0x00
               02463         addwfc  TMP_REG_8, F
               02464         movf    INDF0, W         ; r6 += (x1*y5)L ; r7 += (x1*y5)H
               02465         mulwf   [0x5]
               02466         movf    PRODL, W
               02467         addwf   TMP_REG_7, F
               02468         movlw   0x00
               02469         addwfc  TMP_REG_8, F
               02470         movf    PRODH, W
               02471         addwf   TMP_REG_8, F
               02472         movf    POSTINC0, W      ; r7 += (x1*y6)L
               02473         mulwf   [0x6]            ; FSR0 ++
               02474         movf    PRODL, W
               02475         addwf   TMP_REG_8, F
               02476         movf    INDF0, W         ; r2 += (x2*y0)L ; r3 += (x2*y0)H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02477         mulwf   [0x0]
               02478         movf    PRODL, W
               02479         addwf   TMP_REG_3, F
               02480         movlw   0x00
               02481         addwfc  TMP_REG_4, F
               02482         addwfc  TMP_REG_5, F
               02483         addwfc  TMP_REG_6, F
               02484         addwfc  TMP_REG_7, F
               02485         addwfc  TMP_REG_8, F
               02486         movf    PRODH, W
               02487         addwf   TMP_REG_4, F
               02488         movlw   0x00
               02489         addwfc  TMP_REG_5, F
               02490         addwfc  TMP_REG_6, F
               02491         addwfc  TMP_REG_7, F
               02492         addwfc  TMP_REG_8, F
               02493         movf    INDF0, W         ; r3 += (x2*y1)L ; r4 += (x2*y1)H
               02494         mulwf   [0x1]
               02495         movf    PRODL, W
               02496         addwf   TMP_REG_4, F
               02497         movlw   0x00
               02498         addwfc  TMP_REG_5, F
               02499         addwfc  TMP_REG_6, F
               02500         addwfc  TMP_REG_7, F
               02501         addwfc  TMP_REG_8, F
               02502         movf    PRODH, W
               02503         addwf   TMP_REG_5, F
               02504         movlw   0x00
               02505         addwfc  TMP_REG_6, F
               02506         addwfc  TMP_REG_7, F
               02507         addwfc  TMP_REG_8, F
               02508         movf    INDF0, W         ; r4 += (x2*y2)L ; r5 += (x2*y2)H
               02509         mulwf   [0x2]
               02510         movf    PRODL, W
               02511         addwf   TMP_REG_5, F
               02512         movlw   0x00
               02513         addwfc  TMP_REG_6, F
               02514         addwfc  TMP_REG_7, F
               02515         addwfc  TMP_REG_8, F
               02516         movf    PRODH, W
               02517         addwf   TMP_REG_6, F
               02518         movlw   0x00
               02519         addwfc  TMP_REG_7, F
               02520         addwfc  TMP_REG_8, F
               02521         movf    INDF0, W         ; r5 += (x2*y3)L ; r6 += (x2*y3)H
               02522         mulwf   [0x3]
               02523         movf    PRODL, W
               02524         addwf   TMP_REG_6, F
               02525         movlw   0x00
               02526         addwfc  TMP_REG_7, F
               02527         addwfc  TMP_REG_8, F
               02528         movf    PRODH, W
               02529         addwf   TMP_REG_7, F
               02530         movlw   0x00
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02531         addwfc  TMP_REG_8, F
               02532         movf    INDF0, W         ; r6 += (x2*y4)L ; r7 += (x2*y4)H
               02533         mulwf   [0x4]
               02534         movf    PRODL, W
               02535         addwf   TMP_REG_7, F
               02536         movlw   0x00
               02537         addwfc  TMP_REG_8, F
               02538         movf    PRODH, W
               02539         addwf   TMP_REG_8, F
               02540         movf    POSTINC0, W      ; r7 += (x2*y5)L
               02541         mulwf   [0x5]            ; FSR0 ++
               02542         movf    PRODL, W
               02543         addwf   TMP_REG_8, F
               02544         movf    INDF0, W         ; r3 += (x3*y0)L ; r4 += (x3*y0)H
               02545         mulwf   [0x0]
               02546         movf    PRODL, W
               02547         addwf   TMP_REG_4, F
               02548         movlw   0x00
               02549         addwfc  TMP_REG_5, F
               02550         addwfc  TMP_REG_6, F
               02551         addwfc  TMP_REG_7, F
               02552         addwfc  TMP_REG_8, F
               02553         movf    PRODH, W
               02554         addwf   TMP_REG_5, F
               02555         movlw   0x00
               02556         addwfc  TMP_REG_6, F
               02557         addwfc  TMP_REG_7, F
               02558         addwfc  TMP_REG_8, F
               02559         movf    INDF0, W         ; r4 += (x3*y1)L ; r5 += (x3*y1)H
               02560         mulwf   [0x1]
               02561         movf    PRODL, W
               02562         addwf   TMP_REG_5, F
               02563         movlw   0x00
               02564         addwfc  TMP_REG_6, F
               02565         addwfc  TMP_REG_7, F
               02566         addwfc  TMP_REG_8, F
               02567         movf    PRODH, W
               02568         addwf   TMP_REG_6, F
               02569         movlw   0x00
               02570         addwfc  TMP_REG_7, F
               02571         addwfc  TMP_REG_8, F
               02572         movf    INDF0, W         ; r5 += (x3*y2)L ; r6 += (x3*y2)H
               02573         mulwf   [0x2]
               02574         movf    PRODL, W
               02575         addwf   TMP_REG_6, F
               02576         movlw   0x00
               02577         addwfc  TMP_REG_7, F
               02578         addwfc  TMP_REG_8, F
               02579         movf    PRODH, W
               02580         addwf   TMP_REG_7, F
               02581         movlw   0x00
               02582         addwfc  TMP_REG_8, F
               02583         movf    INDF0, W         ; r6 += (x3*y3)L ; r7 += (x3*y3)H
               02584         mulwf   [0x3]
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02585         movf    PRODL, W
               02586         addwf   TMP_REG_7, F
               02587         movlw   0x00
               02588         addwfc  TMP_REG_8, F
               02589         movf    PRODH, W
               02590         addwf   TMP_REG_8, F
               02591         movf    POSTINC0, W      ; r7 += (x3*y4)L
               02592         mulwf   [0x4]            ; FSR0 ++
               02593         movf    PRODL, W
               02594         addwf   TMP_REG_8, F
               02595         movf    INDF0, W         ; r4 += (x4*y0)L ; r5 += (x4*y0)H
               02596         mulwf   [0x0]
               02597         movf    PRODL, W
               02598         addwf   TMP_REG_5, F
               02599         movlw   0x00
               02600         addwfc  TMP_REG_6, F
               02601         addwfc  TMP_REG_7, F
               02602         addwfc  TMP_REG_8, F
               02603         movf    PRODH, W
               02604         addwf   TMP_REG_6, F
               02605         movlw   0x00
               02606         addwfc  TMP_REG_7, F
               02607         addwfc  TMP_REG_8, F
               02608         movf    INDF0, W         ; r5 += (x4*y1)L ; r6 += (x4*y1)H
               02609         mulwf   [0x1]
               02610         movf    PRODL, W
               02611         addwf   TMP_REG_6, F
               02612         movlw   0x00
               02613         addwfc  TMP_REG_7, F
               02614         addwfc  TMP_REG_8, F
               02615         movf    PRODH, W
               02616         addwf   TMP_REG_7, F
               02617         movlw   0x00
               02618         addwfc  TMP_REG_8, F
               02619         movf    INDF0, W         ; r6 += (x4*y2)L ; r7 += (x4*y2)H
               02620         mulwf   [0x2]
               02621         movf    PRODL, W
               02622         addwf   TMP_REG_7, F
               02623         movlw   0x00
               02624         addwfc  TMP_REG_8, F
               02625         movf    PRODH, W
               02626         addwf   TMP_REG_8, F
               02627         movf    POSTINC0, W      ; r7 += (x4*y3)L
               02628         mulwf   [0x3]            ; FSR0 ++
               02629         movf    PRODL, W
               02630         addwf   TMP_REG_8, F
               02631         movf    INDF0, W         ; r5 += (x5*y0)L ; r6 += (x5*y0)H
               02632         mulwf   [0x0]
               02633         movf    PRODL, W
               02634         addwf   TMP_REG_6, F
               02635         movlw   0x00
               02636         addwfc  TMP_REG_7, F
               02637         addwfc  TMP_REG_8, F
               02638         movf    PRODH, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02639         addwf   TMP_REG_7, F
               02640         movlw   0x00
               02641         addwfc  TMP_REG_8, F
               02642         movf    INDF0, W         ; r6 += (x5*y1)L ; r7 += (x5*y1)H
               02643         mulwf   [0x1]
               02644         movf    PRODL, W
               02645         addwf   TMP_REG_7, F
               02646         movlw   0x00
               02647         addwfc  TMP_REG_8, F
               02648         movf    PRODH, W
               02649         addwf   TMP_REG_8, F
               02650         movf    POSTINC0, W      ; r7 += (x5*y2)L
               02651         mulwf   [0x2]            ; FSR0 ++
               02652         movf    PRODL, W
               02653         addwf   TMP_REG_8, F
               02654         movf    INDF0, W         ; r6 += (x6*y0)L ; r7 += (x6*y0)H
               02655         mulwf   [0x0]
               02656         movf    PRODL, W
               02657         addwf   TMP_REG_7, F
               02658         movlw   0x00
               02659         addwfc  TMP_REG_8, F
               02660         movf    PRODH, W
               02661         addwf   TMP_REG_8, F
               02662         movf    POSTINC0, W      ; r7 += (x6*y1)L
               02663         mulwf   [0x1]            ; FSR0 ++
               02664         movf    PRODL, W
               02665         addwf   TMP_REG_8, F
               02666         movf    INDF0, W         ; r7 += (x7*y0)L
               02667         mulwf   [0x0]
               02668         movf    PRODL, W
               02669         addwf   TMP_REG_8, F
               02670         movff   TMP_REG_3, POSTINC1 ; flush r2 ; FSR1 ++
               02671         movff   TMP_REG_4, POSTINC1 ; flush r3 ; FSR1 ++
               02672         movff   TMP_REG_5, POSTINC1 ; flush r4 ; FSR1 ++
               02673         movff   TMP_REG_6, POSTINC1 ; flush r5 ; FSR1 ++
               02674         movff   TMP_REG_7, POSTINC1 ; flush r6 ; FSR1 ++
               02675         movff   TMP_REG_8, POSTINC1 ; flush r7 ; FSR1 ++
               02676         M_PRIM_INT64_2ARG_END
               02677 #endif
               02678 
               02679 #ifdef caml_useprim_caml_int64_div
               02680 caml_int64_div:
               02681         movsf   [0x1], FSR0L        ; y = 0 ?
               02682         movsf   [0x2], FSR0H
               02683         addfsr  FSR0, 0x2
               02684         movf    POSTINC0, W
               02685         iorwf   POSTINC0, W
               02686         iorwf   POSTINC0, W
               02687         iorwf   POSTINC0, W
               02688         iorwf   POSTINC0, W
               02689         iorwf   POSTINC0, W
               02690         iorwf   POSTINC0, W
               02691         iorwf   INDF0, W
               02692         btfsc   STATUS, Z
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02693         goto    caml_raise_division_by_0
               02694         movff   ACCUL, FSR0L
               02695         movff   ACCUH, FSR0H
               02696         addfsr  FSR0, 0x2
               02697         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_D:C:B:A:4:3:2:1
               02698         movff   POSTINC0, TMP_REG_2
               02699         movff   POSTINC0, TMP_REG_3
               02700         movff   POSTINC0, TMP_REG_4
               02701         movff   POSTINC0, TMP_REG_A
               02702         movff   POSTINC0, TMP_REG_B
               02703         movff   POSTINC0, TMP_REG_C
               02704         movff   INDF0, TMP_REG_D
               02705         M_CREATE_INT64              ; ACCU <- new int64
               02706         movsf   [0x1], FSR0L        ; y = GC_TMP_REG_4:3:2:1:TMP_REG_8:7:6:5
               02707         movsf   [0x2], FSR0H
               02708         addfsr  FSR0, 0x2
               02709         movff   POSTINC0, TMP_REG_5
               02710         movff   POSTINC0, TMP_REG_6
               02711         movff   POSTINC0, TMP_REG_7
               02712         movff   POSTINC0, TMP_REG_8
               02713         movff   POSTINC0, GC_TMP_REG_1
               02714         movff   POSTINC0, GC_TMP_REG_2
               02715         movff   POSTINC0, GC_TMP_REG_3
               02716         movff   INDF0, GC_TMP_REG_4
               02717         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
               02718         btfss   TMP_REG_D, 7        ; x < 0 ?
               02719         bra     caml_int64_div_l0   ; no => skip
               02720         btg     TMP_REG_9, 0        ; update result sign
               02721         comf    TMP_REG_1, F        ; negate x
               02722         comf    TMP_REG_2, F
               02723         comf    TMP_REG_3, F
               02724         comf    TMP_REG_4, F
               02725         comf    TMP_REG_A, F
               02726         comf    TMP_REG_B, F
               02727         comf    TMP_REG_C, F
               02728         comf    TMP_REG_D, F
               02729         incf    TMP_REG_1, F
               02730         bnc     caml_int64_div_l0
               02731         incf    TMP_REG_2, F
               02732         bnc     caml_int64_div_l0
               02733         incf    TMP_REG_3, F
               02734         bnc     caml_int64_div_l0
               02735         incf    TMP_REG_4, F
               02736         bnc     caml_int64_div_l0
               02737         incf    TMP_REG_A, F
               02738         bnc     caml_int64_div_l0
               02739         incf    TMP_REG_B, F
               02740         bnc     caml_int64_div_l0
               02741         incf    TMP_REG_C, F
               02742         bnc     caml_int64_div_l0
               02743         incf    TMP_REG_D, F
               02744 caml_int64_div_l0:
               02745         btfss   GC_TMP_REG_4, 7 ; y < 0 ?
               02746         bra     caml_int64_div_l1 ; no => skip
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02747         btg     TMP_REG_9, 0    ; update result sign
               02748         comf    TMP_REG_5, F    ; negate y
               02749         comf    TMP_REG_6, F
               02750         comf    TMP_REG_7, F
               02751         comf    TMP_REG_8, F
               02752         comf    GC_TMP_REG_1, F
               02753         comf    GC_TMP_REG_2, F
               02754         comf    GC_TMP_REG_3, F
               02755         comf    GC_TMP_REG_4, F
               02756         incf    TMP_REG_5, F
               02757         bnc     caml_int64_div_l1
               02758         incf    TMP_REG_6, F
               02759         bnc     caml_int64_div_l1
               02760         incf    TMP_REG_7, F
               02761         bnc     caml_int64_div_l1
               02762         incf    TMP_REG_8, F
               02763         bnc     caml_int64_div_l1
               02764         incf    GC_TMP_REG_1, F
               02765         bnc     caml_int64_div_l1
               02766         incf    GC_TMP_REG_2, F
               02767         bnc     caml_int64_div_l1
               02768         incf    GC_TMP_REG_3, F
               02769         bnc     caml_int64_div_l1
               02770         incf    GC_TMP_REG_4, F
               02771 caml_int64_div_l1:
               02772         clrf    POSTINC1        ; init result to 0
               02773         clrf    POSTINC1
               02774         clrf    POSTINC1
               02775         clrf    POSTINC1
               02776         clrf    POSTINC1
               02777         clrf    POSTINC1
               02778         clrf    POSTINC1
               02779         clrf    INDF1
               02780         subfsr  FSR1, 0x7
               02781         clrf    PRODL           ; init bit raw to 00...01
               02782         clrf    PRODH
               02783         bsf     PRODL, 0
               02784 caml_int64_div_loop1:
               02785         bcf     STATUS, C       ; y <- y << 1
               02786         rlcf    TMP_REG_5, F
               02787         rlcf    TMP_REG_6, F
               02788         rlcf    TMP_REG_7, F
               02789         rlcf    TMP_REG_8, F
               02790         rlcf    GC_TMP_REG_1, F
               02791         rlcf    GC_TMP_REG_2, F
               02792         rlcf    GC_TMP_REG_3, F
               02793         rlcf    GC_TMP_REG_4, F
               02794         movf    GC_TMP_REG_4, W ; x - y
               02795         subwf   TMP_REG_D, W
               02796         bnc     caml_int64_div_loop2 ; if x < y then break
               02797         bnz     caml_int64_div_if_l1 ; if x > y then continue
               02798         movf    GC_TMP_REG_3, W
               02799         subwf   TMP_REG_C, W
               02800         bnc     caml_int64_div_loop2 ; if x < y then break
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02801         bnz     caml_int64_div_if_l1 ; if x > y then continue
               02802         movf    GC_TMP_REG_2, W
               02803         subwf   TMP_REG_B, W
               02804         bnc     caml_int64_div_loop2 ; if x < y then break
               02805         bnz     caml_int64_div_if_l1 ; if x > y then continue
               02806         movf    GC_TMP_REG_1, W
               02807         subwf   TMP_REG_A, W
               02808         bnc     caml_int64_div_loop2 ; if x < y then break
               02809         bnz     caml_int64_div_if_l1 ; if x > y then continue
               02810         movf    TMP_REG_8, W
               02811         subwf   TMP_REG_4, W
               02812         bnc     caml_int64_div_loop2 ; if x < y then break
               02813         bnz     caml_int64_div_if_l1 ; if x > y then continue
               02814         movf    TMP_REG_7, W
               02815         subwf   TMP_REG_3, W
               02816         bnc     caml_int64_div_loop2 ; if x < y then break
               02817         bnz     caml_int64_div_if_l1 ; if w > y then continue
               02818         movf    TMP_REG_6, W
               02819         subwf   TMP_REG_2, W
               02820         bnc     caml_int64_div_loop2 ; if x < y then break
               02821         bnz     caml_int64_div_if_l1 ; if w > y then continue
               02822         movf    TMP_REG_5, W
               02823         subwf   TMP_REG_1, W
               02824         bnc     caml_int64_div_loop2 ; if x < y then break
               02825 caml_int64_div_if_l1:
               02826         bcf     STATUS, C       ; raw <- raw << 1
               02827         rlcf    PRODL, F
               02828         bnc     caml_int64_div_loop1 ; loop
               02829         bsf     PRODL, 0
               02830         incf    PRODH, F
               02831         bra     caml_int64_div_loop1 ; loop
               02832 caml_int64_div_loop2:
               02833         bcf     STATUS, C       ; y <- y >> 1
               02834         rrcf    GC_TMP_REG_4, F
               02835         rrcf    GC_TMP_REG_3, F
               02836         rrcf    GC_TMP_REG_2, F
               02837         rrcf    GC_TMP_REG_1, F
               02838         rrcf    TMP_REG_8, F
               02839         rrcf    TMP_REG_7, F
               02840         rrcf    TMP_REG_6, F
               02841         rrcf    TMP_REG_5, F
               02842         movf    GC_TMP_REG_4, W ; x - y
               02843         subwf   TMP_REG_D, W
               02844         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02845         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02846         movf    GC_TMP_REG_3, W
               02847         subwf   TMP_REG_C, W
               02848         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02849         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02850         movf    GC_TMP_REG_2, W
               02851         subwf   TMP_REG_B, W
               02852         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02853         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02854         movf    GC_TMP_REG_1, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02855         subwf   TMP_REG_A, W
               02856         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02857         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02858         movf    TMP_REG_8, W
               02859         subwf   TMP_REG_4, W
               02860         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02861         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02862         movf    TMP_REG_7, W
               02863         subwf   TMP_REG_3, W
               02864         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02865         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02866         movf    TMP_REG_6, W
               02867         subwf   TMP_REG_2, W
               02868         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02869         bnz     caml_int64_div_if_l2  ; if x > y then continue
               02870         movf    TMP_REG_5, W
               02871         subwf   TMP_REG_1, W
               02872         bnc     caml_int64_div_ifn_l2 ; if x < y then skip
               02873 caml_int64_div_if_l2:
               02874         movf    TMP_REG_5, W    ; x <- x - y
               02875         subwf   TMP_REG_1, F
               02876         movf    TMP_REG_6, W
               02877         subwfb  TMP_REG_2, F
               02878         movf    TMP_REG_7, W
               02879         subwfb  TMP_REG_3, F
               02880         movf    TMP_REG_8, W
               02881         subwfb  TMP_REG_4, F
               02882         movf    GC_TMP_REG_1, W
               02883         subwfb  TMP_REG_A, F
               02884         movf    GC_TMP_REG_2, W
               02885         subwfb  TMP_REG_B, F
               02886         movf    GC_TMP_REG_3, W
               02887         subwfb  TMP_REG_C, F
               02888         movf    GC_TMP_REG_4, W
               02889         subwfb  TMP_REG_D, F
               02890         movf    PRODH, W        ; res <- res | raw
               02891         addwf   FSR1L, F
               02892         btfsc   STATUS, C
               02893         incf    FSR1H, F
               02894         movf    PRODL, W
               02895         iorwf   INDF1, F
               02896         movf    PRODH, W
               02897         subwf   FSR1L, F
               02898         btfss   STATUS, C
               02899         decf    FSR1H, F
               02900 caml_int64_div_ifn_l2:
               02901         bcf     STATUS, C       ; raw <- raw >> 1
               02902         rrcf    PRODL, F
               02903         bnc     caml_int64_div_loop2
               02904         bsf     PRODL, 7
               02905         decf    PRODH, F
               02906         btfss   PRODH, 7                ; if not raw overflow
               02907         bra     caml_int64_div_loop2    ; then loop
               02908         addfsr  FSR1, 0x8
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02909         btfss   TMP_REG_9, 0            ; negative result ?
               02910         return                          ; no => division done
               02911         subfsr  FSR1, 0x1               ; yes => negate result
               02912         comf    POSTDEC1, F
               02913         comf    POSTDEC1, F
               02914         comf    POSTDEC1, F
               02915         comf    POSTDEC1, F
               02916         comf    POSTDEC1, F
               02917         comf    POSTDEC1, F
               02918         comf    POSTDEC1, F
               02919         comf    INDF1, F
               02920         incf    POSTINC1, F
               02921         bnc     caml_int64_div_end7
               02922         incf    POSTINC1, F
               02923         bnc     caml_int64_div_end6
               02924         incf    POSTINC1, F
               02925         bnc     caml_int64_div_end5
               02926         incf    POSTINC1, F
               02927         bnc     caml_int64_div_end4
               02928         incf    POSTINC1, F
               02929         bnc     caml_int64_div_end3
               02930         incf    POSTINC1, F
               02931         bnc     caml_int64_div_end2
               02932         incf    POSTINC1, F
               02933         bnc     caml_int64_div_end1
               02934         incf    POSTINC1, F
               02935         return
               02936 caml_int64_div_end7:
               02937         addfsr  FSR1, 0x7
               02938         return
               02939 caml_int64_div_end6:
               02940         addfsr  FSR1, 0x6
               02941         return
               02942 caml_int64_div_end5:
               02943         addfsr  FSR1, 0x5
               02944         return
               02945 caml_int64_div_end4:
               02946         addfsr  FSR1, 0x4
               02947         return
               02948 caml_int64_div_end3:
               02949         addfsr  FSR1, 0x3
               02950         return
               02951 caml_int64_div_end2:
               02952         addfsr  FSR1, 0x2
               02953         return
               02954 caml_int64_div_end1:
               02955         addfsr  FSR1, 0x1
               02956         return
               02957 #endif
               02958 
               02959 #ifdef caml_useprim_caml_int64_mod
               02960 caml_int64_mod:
               02961         movsf   [0x1], FSR0L        ; y = 0 ?
               02962         movsf   [0x2], FSR0H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02963         addfsr  FSR0, 0x2
               02964         movf    POSTINC0, W
               02965         iorwf   POSTINC0, W
               02966         iorwf   POSTINC0, W
               02967         iorwf   POSTINC0, W
               02968         iorwf   POSTINC0, W
               02969         iorwf   POSTINC0, W
               02970         iorwf   POSTINC0, W
               02971         iorwf   INDF0, W
               02972         btfsc   STATUS, Z
               02973         goto    caml_raise_division_by_0
               02974         movff   ACCUL, FSR0L
               02975         movff   ACCUH, FSR0H
               02976         addfsr  FSR0, 0x2
               02977         movff   POSTINC0, TMP_REG_1 ; x = TMP_REG_D:C:B:A:4:3:2:1
               02978         movff   POSTINC0, TMP_REG_2
               02979         movff   POSTINC0, TMP_REG_3
               02980         movff   POSTINC0, TMP_REG_4
               02981         movff   POSTINC0, TMP_REG_A
               02982         movff   POSTINC0, TMP_REG_B
               02983         movff   POSTINC0, TMP_REG_C
               02984         movff   INDF0, TMP_REG_D
               02985         M_CREATE_INT64              ; ACCU <- new int64
               02986         movsf   [0x1], FSR0L        ; y = GC_TMP_REG_4:3:2:1:TMP_REG_8:7:6:5
               02987         movsf   [0x2], FSR0H
               02988         addfsr  FSR0, 0x2
               02989         movff   POSTINC0, TMP_REG_5
               02990         movff   POSTINC0, TMP_REG_6
               02991         movff   POSTINC0, TMP_REG_7
               02992         movff   POSTINC0, TMP_REG_8
               02993         movff   POSTINC0, GC_TMP_REG_1
               02994         movff   POSTINC0, GC_TMP_REG_2
               02995         movff   POSTINC0, GC_TMP_REG_3
               02996         movff   INDF0, GC_TMP_REG_4
               02997         bcf     TMP_REG_9, 0        ; TMP_REG_9.0 = result sign
               02998         btfss   TMP_REG_D, 7        ; x < 0 ?
               02999         bra     caml_int64_mod_l0   ; no => skip
               03000         btg     TMP_REG_9, 0        ; update result sign
               03001         comf    TMP_REG_1, F        ; negate x
               03002         comf    TMP_REG_2, F
               03003         comf    TMP_REG_3, F
               03004         comf    TMP_REG_4, F
               03005         comf    TMP_REG_A, F
               03006         comf    TMP_REG_B, F
               03007         comf    TMP_REG_C, F
               03008         comf    TMP_REG_D, F
               03009         incf    TMP_REG_1, F
               03010         bnc     caml_int64_mod_l0
               03011         incf    TMP_REG_2, F
               03012         bnc     caml_int64_mod_l0
               03013         incf    TMP_REG_3, F
               03014         bnc     caml_int64_mod_l0
               03015         incf    TMP_REG_4, F
               03016         bnc     caml_int64_mod_l0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03017         incf    TMP_REG_A, F
               03018         bnc     caml_int64_mod_l0
               03019         incf    TMP_REG_B, F
               03020         bnc     caml_int64_mod_l0
               03021         incf    TMP_REG_C, F
               03022         bnc     caml_int64_mod_l0
               03023         incf    TMP_REG_D, F
               03024 caml_int64_mod_l0:
               03025         btfss   GC_TMP_REG_4, 7 ; y < 0 ?
               03026         bra     caml_int64_mod_l1 ; no => skip
               03027         btg     TMP_REG_9, 0    ; update result sign
               03028         comf    TMP_REG_5, F    ; negate y
               03029         comf    TMP_REG_6, F
               03030         comf    TMP_REG_7, F
               03031         comf    TMP_REG_8, F
               03032         comf    GC_TMP_REG_1, F
               03033         comf    GC_TMP_REG_2, F
               03034         comf    GC_TMP_REG_3, F
               03035         comf    GC_TMP_REG_4, F
               03036         incf    TMP_REG_5, F
               03037         bnc     caml_int64_mod_l1
               03038         incf    TMP_REG_6, F
               03039         bnc     caml_int64_mod_l1
               03040         incf    TMP_REG_7, F
               03041         bnc     caml_int64_mod_l1
               03042         incf    TMP_REG_8, F
               03043         bnc     caml_int64_mod_l1
               03044         incf    GC_TMP_REG_1, F
               03045         bnc     caml_int64_mod_l1
               03046         incf    GC_TMP_REG_2, F
               03047         bnc     caml_int64_mod_l1
               03048         incf    GC_TMP_REG_3, F
               03049         bnc     caml_int64_mod_l1
               03050         incf    GC_TMP_REG_4, F
               03051 caml_int64_mod_l1:
               03052         clrf    TMP_REG_E       ; counter = TMP_REG_E <- 0
               03053 caml_int64_mod_loop1:
               03054         bcf     STATUS, C       ; y <- y << 1
               03055         rlcf    TMP_REG_5, F
               03056         rlcf    TMP_REG_6, F
               03057         rlcf    TMP_REG_7, F
               03058         rlcf    TMP_REG_8, F
               03059         rlcf    GC_TMP_REG_1, F
               03060         rlcf    GC_TMP_REG_2, F
               03061         rlcf    GC_TMP_REG_3, F
               03062         rlcf    GC_TMP_REG_4, F
               03063         incf    TMP_REG_E, F    ; incr counter
               03064         movf    GC_TMP_REG_4, W ; x - y
               03065         subwf   TMP_REG_D, W
               03066         bnc     caml_int64_mod_loop2 ; if x < y then break
               03067         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03068         movf    GC_TMP_REG_3, W
               03069         subwf   TMP_REG_C, W
               03070         bnc     caml_int64_mod_loop2 ; if x < y then break
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03071         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03072         movf    GC_TMP_REG_2, W
               03073         subwf   TMP_REG_B, W
               03074         bnc     caml_int64_mod_loop2 ; if x < y then break
               03075         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03076         movf    GC_TMP_REG_1, W
               03077         subwf   TMP_REG_A, W
               03078         bnc     caml_int64_mod_loop2 ; if x < y then break
               03079         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03080         movf    TMP_REG_8, W
               03081         subwf   TMP_REG_4, W
               03082         bnc     caml_int64_mod_loop2 ; if x < y then break
               03083         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03084         movf    TMP_REG_7, W
               03085         subwf   TMP_REG_3, W
               03086         bnc     caml_int64_mod_loop2 ; if x < y then break
               03087         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03088         movf    TMP_REG_6, W
               03089         subwf   TMP_REG_2, W
               03090         bnc     caml_int64_mod_loop2 ; if x < y then break
               03091         bnz     caml_int64_mod_loop1 ; if x > y then loop
               03092         movf    TMP_REG_5, W
               03093         subwf   TMP_REG_1, W
               03094         bc      caml_int64_mod_loop1 ; if x >= y then loop
               03095 caml_int64_mod_loop2:
               03096         bcf     STATUS, C       ; y <- y >> 1
               03097         rrcf    GC_TMP_REG_4, F
               03098         rrcf    GC_TMP_REG_3, F
               03099         rrcf    GC_TMP_REG_2, F
               03100         rrcf    GC_TMP_REG_1, F
               03101         rrcf    TMP_REG_8, F
               03102         rrcf    TMP_REG_7, F
               03103         rrcf    TMP_REG_6, F
               03104         rrcf    TMP_REG_5, F
               03105         movf    GC_TMP_REG_4, W ; x - y
               03106         subwf   TMP_REG_D, W
               03107         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03108         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03109         movf    GC_TMP_REG_3, W
               03110         subwf   TMP_REG_C, W
               03111         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03112         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03113         movf    GC_TMP_REG_2, W
               03114         subwf   TMP_REG_B, W
               03115         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03116         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03117         movf    GC_TMP_REG_1, W
               03118         subwf   TMP_REG_A, W
               03119         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03120         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03121         movf    TMP_REG_8, W
               03122         subwf   TMP_REG_4, W
               03123         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03124         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03125         movf    TMP_REG_7, W
               03126         subwf   TMP_REG_3, W
               03127         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03128         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03129         movf    TMP_REG_6, W
               03130         subwf   TMP_REG_2, W
               03131         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03132         bnz     caml_int64_mod_if_l2  ; if x > y then do not skip
               03133         movf    TMP_REG_5, W
               03134         subwf   TMP_REG_1, W
               03135         bnc     caml_int64_mod_ifn_l2 ; if x < y then skip
               03136 caml_int64_mod_if_l2:
               03137         movf    TMP_REG_5, W    ; x <- x - y
               03138         subwf   TMP_REG_1, F
               03139         movf    TMP_REG_6, W
               03140         subwfb  TMP_REG_2, F
               03141         movf    TMP_REG_7, W
               03142         subwfb  TMP_REG_3, F
               03143         movf    TMP_REG_8, W
               03144         subwfb  TMP_REG_4, F
               03145         movf    GC_TMP_REG_1, W
               03146         subwfb  TMP_REG_A, F
               03147         movf    GC_TMP_REG_2, W
               03148         subwfb  TMP_REG_B, F
               03149         movf    GC_TMP_REG_3, W
               03150         subwfb  TMP_REG_C, F
               03151         movf    GC_TMP_REG_4, W
               03152         subwfb  TMP_REG_D, F
               03153 caml_int64_mod_ifn_l2:
               03154         decfsz  TMP_REG_E, F    ; decr counter
               03155         bra     caml_int64_mod_loop2 ; if counter <> 0 then loop
               03156         btfss   TMP_REG_9, 0    ; negative result ?
               03157         bra     caml_int64_mod_end ; no => modulo done
               03158         comf    TMP_REG_1, F       ; yes => negate result
               03159         comf    TMP_REG_2, F
               03160         comf    TMP_REG_3, F
               03161         comf    TMP_REG_4, F
               03162         comf    TMP_REG_A, F
               03163         comf    TMP_REG_B, F
               03164         comf    TMP_REG_C, F
               03165         comf    TMP_REG_D, F
               03166         incf    TMP_REG_1, F
               03167         bnc     caml_int64_mod_end
               03168         incf    TMP_REG_2, F
               03169         bnc     caml_int64_mod_end
               03170         incf    TMP_REG_3, F
               03171         bnc     caml_int64_mod_end
               03172         incf    TMP_REG_4, F
               03173         bnc     caml_int64_mod_end
               03174         incf    TMP_REG_A, F
               03175         bnc     caml_int64_mod_end
               03176         incf    TMP_REG_B, F
               03177         bnc     caml_int64_mod_end
               03178         incf    TMP_REG_C, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03179         bnc     caml_int64_mod_end
               03180         incf    TMP_REG_D, F
               03181 caml_int64_mod_end:
               03182         movff   TMP_REG_1, POSTINC1
               03183         movff   TMP_REG_2, POSTINC1
               03184         movff   TMP_REG_3, POSTINC1
               03185         movff   TMP_REG_4, POSTINC1
               03186         movff   TMP_REG_A, POSTINC1
               03187         movff   TMP_REG_B, POSTINC1
               03188         movff   TMP_REG_C, POSTINC1
               03189         movff   TMP_REG_D, POSTINC1
               03190         return
               03191 #endif
               03192 
               03193 #ifdef caml_useprim_caml_int64_and
               03194 caml_int64_and:
               03195         M_PRIM_INT64_2ARG_INIT
               03196         movf    POSTINC2, W      ; 1
               03197         andwf   POSTINC0, W
               03198         movwf   POSTINC1
               03199         movf    POSTINC2, W      ; 2
               03200         andwf   POSTINC0, W
               03201         movwf   POSTINC1
               03202         movf    POSTINC2, W      ; 3
               03203         andwf   POSTINC0, W
               03204         movwf   POSTINC1
               03205         movf    POSTINC2, W      ; 4
               03206         andwf   POSTINC0, W
               03207         movwf   POSTINC1
               03208         movf    POSTINC2, W      ; 5
               03209         andwf   POSTINC0, W
               03210         movwf   POSTINC1
               03211         movf    POSTINC2, W      ; 6
               03212         andwf   POSTINC0, W
               03213         movwf   POSTINC1
               03214         movf    POSTINC2, W      ; 7
               03215         andwf   POSTINC0, W
               03216         movwf   POSTINC1
               03217         movf    INDF2, W         ; 8
               03218         andwf   INDF0, W
               03219         movwf   POSTINC1
               03220         M_PRIM_INT64_2ARG_END
               03221 #endif
               03222 
               03223 #ifdef caml_useprim_caml_int64_or
               03224 caml_int64_or:
               03225         M_PRIM_INT64_2ARG_INIT
               03226         movf    POSTINC2, W      ; 1
               03227         iorwf   POSTINC0, W
               03228         movwf   POSTINC1
               03229         movf    POSTINC2, W      ; 2
               03230         iorwf   POSTINC0, W
               03231         movwf   POSTINC1
               03232         movf    POSTINC2, W      ; 3
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03233         iorwf   POSTINC0, W
               03234         movwf   POSTINC1
               03235         movf    POSTINC2, W      ; 4
               03236         iorwf   POSTINC0, W
               03237         movwf   POSTINC1
               03238         movf    POSTINC2, W      ; 5
               03239         iorwf   POSTINC0, W
               03240         movwf   POSTINC1
               03241         movf    POSTINC2, W      ; 6
               03242         iorwf   POSTINC0, W
               03243         movwf   POSTINC1
               03244         movf    POSTINC2, W      ; 7
               03245         iorwf   POSTINC0, W
               03246         movwf   POSTINC1
               03247         movf    INDF2, W         ; 8
               03248         iorwf   INDF0, W
               03249         movwf   POSTINC1
               03250         M_PRIM_INT64_2ARG_END
               03251 #endif
               03252 
               03253 #ifdef caml_useprim_caml_int64_xor
               03254 caml_int64_xor:
               03255         M_PRIM_INT64_2ARG_INIT
               03256         movf    POSTINC2, W      ; 1
               03257         xorwf   POSTINC0, W
               03258         movwf   POSTINC1
               03259         movf    POSTINC2, W      ; 2
               03260         xorwf   POSTINC0, W
               03261         movwf   POSTINC1
               03262         movf    POSTINC2, W      ; 3
               03263         xorwf   POSTINC0, W
               03264         movwf   POSTINC1
               03265         movf    POSTINC2, W      ; 4
               03266         xorwf   POSTINC0, W
               03267         movwf   POSTINC1
               03268         movf    POSTINC2, W      ; 5
               03269         xorwf   POSTINC0, W
               03270         movwf   POSTINC1
               03271         movf    POSTINC2, W      ; 6
               03272         xorwf   POSTINC0, W
               03273         movwf   POSTINC1
               03274         movf    POSTINC2, W      ; 7
               03275         xorwf   POSTINC0, W
               03276         movwf   POSTINC1
               03277         movf    INDF2, W         ; 8
               03278         xorwf   INDF0, W
               03279         movwf   POSTINC1
               03280         M_PRIM_INT64_2ARG_END
               03281 #endif
               03282 
               03283 #ifdef caml_useprim_caml_int64_shift_left
               03284 caml_int64_shift_left:
               03285         M_PRIM_INT64_1ARG_INIT
               03286         movff   POSTINC0, TMP_REG_1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03287         movff   POSTINC0, TMP_REG_2
               03288         movff   POSTINC0, TMP_REG_3
               03289         movff   POSTINC0, TMP_REG_4
               03290         movff   POSTINC0, TMP_REG_5
               03291         movff   POSTINC0, TMP_REG_6
               03292         movff   POSTINC0, TMP_REG_7
               03293         movff   INDF0, TMP_REG_8
               03294         bcf     STATUS, C
               03295         rrcf    [0x1], F
               03296         bz      caml_int64_shift_left_end_loop
               03297 caml_int64_shift_left_loop:
               03298         rlcf    TMP_REG_8, W    ; STATUS.C ignored
               03299         rlcf    TMP_REG_1, F
               03300         rlcf    TMP_REG_2, F
               03301         rlcf    TMP_REG_3, F
               03302         rlcf    TMP_REG_4, F
               03303         rlcf    TMP_REG_5, F
               03304         rlcf    TMP_REG_6, F
               03305         rlcf    TMP_REG_7, F
               03306         rlcf    TMP_REG_8, F
               03307         decfsz  [0x1], F
               03308         bra     caml_int64_shift_left_loop
               03309 caml_int64_shift_left_end_loop:
               03310         movff   TMP_REG_1, POSTINC1
               03311         movff   TMP_REG_2, POSTINC1
               03312         movff   TMP_REG_3, POSTINC1
               03313         movff   TMP_REG_4, POSTINC1
               03314         movff   TMP_REG_5, POSTINC1
               03315         movff   TMP_REG_6, POSTINC1
               03316         movff   TMP_REG_7, POSTINC1
               03317         movff   TMP_REG_8, POSTINC1
               03318         M_PRIM_INT64_1ARG_END
               03319 #endif
               03320 
               03321 #ifdef caml_useprim_caml_int64_shift_right
               03322 caml_int64_shift_right:
               03323         M_PRIM_INT64_1ARG_INIT
               03324         movff   POSTINC0, TMP_REG_1
               03325         movff   POSTINC0, TMP_REG_2
               03326         movff   POSTINC0, TMP_REG_3
               03327         movff   POSTINC0, TMP_REG_4
               03328         movff   POSTINC0, TMP_REG_5
               03329         movff   POSTINC0, TMP_REG_6
               03330         movff   POSTINC0, TMP_REG_7
               03331         movff   INDF0, TMP_REG_8
               03332         bcf     STATUS, C
               03333         rrcf    [0x1], F
               03334         bz      caml_int64_shift_right_end_loop
               03335 caml_int64_shift_right_loop:
               03336         bcf     STATUS, C
               03337         rrcf    TMP_REG_8, F
               03338         rrcf    TMP_REG_7, F
               03339         rrcf    TMP_REG_6, F
               03340         rrcf    TMP_REG_5, F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03341         rrcf    TMP_REG_4, F
               03342         rrcf    TMP_REG_3, F
               03343         rrcf    TMP_REG_2, F
               03344         rrcf    TMP_REG_1, F
               03345         decfsz  [0x1], F
               03346         bra     caml_int64_shift_right_loop
               03347 caml_int64_shift_right_end_loop:
               03348         movff   TMP_REG_1, POSTINC1
               03349         movff   TMP_REG_2, POSTINC1
               03350         movff   TMP_REG_3, POSTINC1
               03351         movff   TMP_REG_4, POSTINC1
               03352         movff   TMP_REG_5, POSTINC1
               03353         movff   TMP_REG_6, POSTINC1
               03354         movff   TMP_REG_7, POSTINC1
               03355         movff   TMP_REG_8, POSTINC1
               03356         M_PRIM_INT64_1ARG_END
               03357 #endif
               03358 
               03359 #ifdef caml_useprim_caml_int64_shift_right_unsigned
               03360 caml_int64_shift_right_unsigned:
               03361         M_PRIM_INT64_1ARG_INIT
               03362         movff   POSTINC0, TMP_REG_1
               03363         movff   POSTINC0, TMP_REG_2
               03364         movff   POSTINC0, TMP_REG_3
               03365         movff   POSTINC0, TMP_REG_4
               03366         movff   POSTINC0, TMP_REG_5
               03367         movff   POSTINC0, TMP_REG_6
               03368         movff   POSTINC0, TMP_REG_7
               03369         movff   INDF0, TMP_REG_8
               03370         bcf     STATUS, C
               03371         rrcf    [0x1], F
               03372         bz      caml_int64_shift_right_unsigned_end_loop
               03373 caml_int64_shift_right_unsigned_loop:
               03374         bcf     STATUS, C
               03375         rrcf    TMP_REG_8, F
               03376         rrcf    TMP_REG_7, F
               03377         rrcf    TMP_REG_6, F
               03378         rrcf    TMP_REG_5, F
               03379         rrcf    TMP_REG_4, F
               03380         rrcf    TMP_REG_3, F
               03381         rrcf    TMP_REG_2, F
               03382         rrcf    TMP_REG_1, F
               03383         decfsz  [0x1], F
               03384         bra     caml_int64_shift_right_unsigned_loop
               03385 caml_int64_shift_right_unsigned_end_loop:
               03386         movff   TMP_REG_1, POSTINC1
               03387         movff   TMP_REG_2, POSTINC1
               03388         movff   TMP_REG_3, POSTINC1
               03389         movff   TMP_REG_4, POSTINC1
               03390         movff   TMP_REG_5, POSTINC1
               03391         movff   TMP_REG_6, POSTINC1
               03392         movff   TMP_REG_7, POSTINC1
               03393         movff   TMP_REG_8, POSTINC1
               03394         M_PRIM_INT64_1ARG_END
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03395 #endif
               03396 
               03397 #ifdef caml_useprim_caml_int64_of_int
               03398 caml_int64_of_int:
               03399         movff   ACCUL, TMP_REG_1 ; TMP_REG_1:2 <- ACCU
               03400         movff   ACCUH, TMP_REG_2
               03401         M_CREATE_INT64
               03402         rrcf    TMP_REG_2, W     ; STATUS.C ignored
               03403         rrcf    TMP_REG_1, W
               03404         movwf   POSTINC1
               03405         rlcf    TMP_REG_2, W     ; STATUS.C ignored
               03406         bc      caml_int64_of_int_neg
               03407         rrcf    TMP_REG_2, W
               03408         movwf   POSTINC1
               03409         clrf    POSTINC1
               03410         clrf    POSTINC1
               03411         clrf    POSTINC1
               03412         clrf    POSTINC1
               03413         clrf    POSTINC1
               03414         clrf    POSTINC1
               03415         return
               03416 caml_int64_of_int_neg:
               03417         rrcf    TMP_REG_2, W
               03418         movwf   POSTINC1
               03419         setf    POSTINC1
               03420         setf    POSTINC1
               03421         setf    POSTINC1
               03422         setf    POSTINC1
               03423         setf    POSTINC1
               03424         setf    POSTINC1
               03425         return
               03426 #endif
               03427 
               03428 #ifdef caml_useprim_caml_int64_of_int32
               03429 caml_int64_of_int32:
               03430         M_PRIM_INT64_1ARG_INIT
               03431         movff   POSTINC0, POSTINC1
               03432         movff   POSTINC0, POSTINC1
               03433         movff   POSTINC0, POSTINC1
               03434         movff   INDF0, POSTINC1
               03435         btfsc   INDF0, 7
               03436         bra     caml_int64_of_int32_neg
               03437         clrf    POSTINC1
               03438         clrf    POSTINC1
               03439         clrf    POSTINC1
               03440         clrf    POSTINC1
               03441         M_PRIM_INT64_1ARG_END
               03442 caml_int64_of_int32_neg:
               03443         setf    POSTINC1
               03444         setf    POSTINC1
               03445         setf    POSTINC1
               03446         setf    POSTINC1
               03447         M_PRIM_INT64_1ARG_END
               03448 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03449 
               03450 #ifdef caml_useprim_caml_int64_to_int32
               03451 caml_int64_to_int32:
               03452         M_PRIM_INT32_1ARG_INIT
               03453         movff   POSTINC0, POSTINC1
               03454         movff   POSTINC0, POSTINC1
               03455         movff   POSTINC0, POSTINC1
               03456         movff   POSTINC0, POSTINC1
               03457         M_PRIM_INT32_1ARG_END
               03458 #endif
               03459 
               03460 #ifdef caml_useprim_caml_int64_1arg
               03461 caml_int64_1arg_init:
               03462         movff   ACCUL, TMP_REG_1
               03463         movff   ACCUH, TMP_REG_2
               03464         M_CREATE_INT64           ; ACCU <- alloc(int64)
               03465         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
               03466         movff   TMP_REG_2, FSR0H
               03467         addfsr  FSR0, 0x2
               03468         return
               03469 #endif
               03470 
               03471 #ifdef caml_useprim_caml_int64_2arg
               03472 caml_int64_2arg_init:
               03473         movff   ACCUL, TMP_REG_1
               03474         movff   ACCUH, TMP_REG_2
               03475         M_CREATE_INT64           ; ACCU <- alloc(int64)
               03476         movff   TMP_REG_1, FSR0L ; FSR0 <- old ACCU
               03477         movff   TMP_REG_2, FSR0H
               03478         addfsr  FSR0, 0x2
               03479         movff   FSR2L, TMP_REG_1 ; save FSR2
               03480         movff   FSR2H, TMP_REG_2
               03481         movf    [0x1], W         ; FSR2 <- arg2
               03482         movsf   [0x2], FSR2H
               03483         movwf   FSR2L
               03484         addfsr  FSR2, 0x2
               03485         return
               03486 #endif
               03487 
               03488 
               03489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03490 ;;;;;;;;                                   ;;;;;;;;
               03491 ;;;;;;;;              CUSTOMS              ;;;;;;;;
               03492 ;;;;;;;;                                   ;;;;;;;;
               03493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03494 
16A4 03495 caml_custom_skip_addr:
               03496 
               03497 #ifdef caml_useprim_caml_int32_custom
               03498 #ifndef caml_useprim_caml_int32_compare
               03499 #define caml_useprim_caml_int32_compare
               03500 #endif
               03501 #ifndef caml_useprim_caml_int32_to_int
               03502 #define caml_useprim_caml_int32_to_int
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03503 #endif
               03504         org     (caml_externals - 0x20) ; WARNING: copy in bc2asm/constants.ml
               03505 caml_int32_custom:
               03506         dcfsnz  PRODL, F
               03507         goto    caml_int32_compare      ; compare
               03508         dcfsnz  PRODL, F
               03509         goto    caml_int32_to_int       ; hash
               03510         goto    _STOP
               03511 #endif
               03512 
               03513 #ifdef caml_useprim_caml_int64_custom
               03514 #ifndef caml_useprim_caml_int64_compare
               03515 #define caml_useprim_caml_int64_compare
               03516 #endif
               03517 #ifndef caml_useprim_caml_int64_to_int
               03518 #define caml_useprim_caml_int64_to_int
               03519 #endif
               03520         org     (caml_externals - 0x10) ; WARNING: copy in bc2asm/constants.ml
               03521 caml_int64_custom:
               03522         dcfsnz  PRODL, F
               03523         goto    caml_int64_compare      ; compare
               03524         dcfsnz  PRODL, F
               03525         goto    caml_int64_to_int       ; hash
               03526         goto    _STOP
               03527 #endif
               03528 
16A4           03529         org caml_custom_skip_addr
               03530 
               03531 #ifdef caml_useprim_caml_int32_to_int
               03532 #ifndef caml_useprim_caml_int64_or_int32_to_int
               03533 #define caml_useprim_caml_int64_or_int32_to_int
               03534 #endif
               03535 caml_int32_to_int:
               03536 #endif
               03537 #ifdef caml_useprim_caml_int64_to_int
               03538 #ifndef caml_useprim_caml_int64_or_int32_to_int
               03539 #define caml_useprim_caml_int64_or_int32_to_int
               03540 #endif
               03541 caml_int64_to_int:
               03542 #endif
               03543 #ifdef caml_useprim_caml_int64_or_int32_to_int
               03544         movff   ACCUL, FSR0L
               03545         movff   ACCUH, FSR0H
               03546         addfsr  FSR0, 0x2
               03547         bsf     STATUS, C
               03548         rlcf    POSTINC0, W
               03549         movwf   ACCUL
               03550         rlcf    INDF0, W
               03551         movwf   ACCUH
               03552         return
               03553 #endif
               03554 
               03555 
               03556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03557 ;;;;;;;;                                   ;;;;;;;;
               03558 ;;;;;;;;             COMPARE               ;;;;;;;;
               03559 ;;;;;;;;                                   ;;;;;;;;
               03560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               03561 
               03562 #ifdef caml_useprim_caml_equal
               03563 #ifndef caml_useprim_caml_compare
               03564 #define caml_useprim_caml_compare
               03565 #endif
               03566 #ifndef caml_useprim_caml_compare_to_eq
               03567 #define caml_useprim_caml_compare_to_eq
               03568 #endif
               03569 caml_equal:
               03570         rcall   caml_compare
               03571         bra     caml_compare_to_eq
               03572 #endif
               03573 
               03574 #ifdef caml_useprim_caml_eq_float
               03575 #ifndef caml_useprim_caml_float_compare
               03576 #define caml_useprim_caml_float_compare
               03577 #endif
               03578 #ifndef caml_useprim_caml_compare_to_eq
               03579 #define caml_useprim_caml_compare_to_eq
               03580 #endif
               03581 caml_eq_float:
               03582         rcall   caml_float_compare
               03583         bra     caml_compare_to_eq
               03584 #endif
               03585 
               03586 #ifdef caml_useprim_caml_notequal
               03587 #ifndef caml_useprim_caml_compare
               03588 #define caml_useprim_caml_compare
               03589 #endif
               03590 #ifndef caml_useprim_caml_compare_to_neq
               03591 #define caml_useprim_caml_compare_to_neq
               03592 #endif
               03593 caml_notequal:
               03594         rcall   caml_compare
               03595         bra     caml_compare_to_neq
               03596 #endif
               03597 
               03598 #ifdef caml_useprim_caml_neq_float
               03599 #ifndef caml_useprim_caml_float_compare
               03600 #define caml_useprim_caml_float_compare
               03601 #endif
               03602 #ifndef caml_useprim_caml_compare_to_neq
               03603 #define caml_useprim_caml_compare_to_neq
               03604 #endif
               03605 caml_neq_float:
               03606         rcall   caml_float_compare
               03607         bra     caml_compare_to_neq
               03608 #endif
               03609 
               03610 #ifdef caml_useprim_caml_lessthan
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03611 #ifndef caml_useprim_caml_compare
               03612 #define caml_useprim_caml_compare
               03613 #endif
               03614 #ifndef caml_useprim_caml_compare_to_lt
               03615 #define caml_useprim_caml_compare_to_lt
               03616 #endif
               03617 caml_lessthan:
               03618         rcall   caml_compare
               03619         bra     caml_compare_to_lt
               03620 #endif
               03621 
               03622 #ifdef caml_useprim_caml_string_lessthan
               03623 #ifndef caml_useprim_caml_string_compare
               03624 #define caml_useprim_caml_string_compare
               03625 #endif
               03626 #ifndef caml_useprim_caml_compare_to_lt
               03627 #define caml_useprim_caml_compare_to_lt
               03628 #endif
               03629 caml_string_lessthan:
               03630         rcall   caml_string_compare
               03631         bra     caml_compare_to_lt
               03632 #endif
               03633 
               03634 #ifdef caml_useprim_caml_lt_float
               03635 #ifndef caml_useprim_caml_float_compare
               03636 #define caml_useprim_caml_float_compare
               03637 #endif
               03638 #ifndef caml_useprim_caml_compare_to_lt
               03639 #define caml_useprim_caml_compare_to_lt
               03640 #endif
               03641 caml_lt_float:
               03642         rcall   caml_float_compare
               03643         bra     caml_compare_to_lt
               03644 #endif
               03645 
               03646 #ifdef caml_useprim_caml_lessequal
               03647 #ifndef caml_useprim_caml_compare
               03648 #define caml_useprim_caml_compare
               03649 #endif
               03650 #ifndef caml_useprim_caml_compare_to_le
               03651 #define caml_useprim_caml_compare_to_le
               03652 #endif
               03653 caml_lessequal:
               03654         rcall   caml_compare
               03655         bra     caml_compare_to_le
               03656 #endif
               03657 
               03658 #ifdef caml_useprim_caml_string_lessequal
               03659 #ifndef caml_useprim_caml_string_compare
               03660 #define caml_useprim_caml_string_compare
               03661 #endif
               03662 #ifndef caml_useprim_caml_compare_to_le
               03663 #define caml_useprim_caml_compare_to_le
               03664 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03665 caml_string_lessequal:
               03666         rcall   caml_string_compare
               03667         bra     caml_compare_to_le
               03668 #endif
               03669 
               03670 #ifdef caml_useprim_caml_le_float
               03671 #ifndef caml_useprim_caml_float_compare
               03672 #define caml_useprim_caml_float_compare
               03673 #endif
               03674 #ifndef caml_useprim_caml_compare_to_le
               03675 #define caml_useprim_caml_compare_to_le
               03676 #endif
               03677 caml_le_float:
               03678         rcall   caml_float_compare
               03679         bra     caml_compare_to_le
               03680 #endif
               03681 
               03682 #ifdef caml_useprim_caml_greaterthan
               03683 #ifndef caml_useprim_caml_compare
               03684 #define caml_useprim_caml_compare
               03685 #endif
               03686 #ifndef caml_useprim_caml_compare_to_gt
               03687 #define caml_useprim_caml_compare_to_gt
               03688 #endif
               03689 caml_greaterthan:
               03690         rcall   caml_compare
               03691         bra     caml_compare_to_gt
               03692 #endif
               03693 
               03694 #ifdef caml_useprim_caml_string_greaterthan
               03695 #ifndef caml_useprim_caml_string_compare
               03696 #define caml_useprim_caml_string_compare
               03697 #endif
               03698 #ifndef caml_useprim_caml_compare_to_gt
               03699 #define caml_useprim_caml_compare_to_gt
               03700 #endif
               03701 caml_string_greaterthan:
               03702         rcall   caml_string_compare
               03703         bra     caml_compare_to_gt
               03704 #endif
               03705 
               03706 #ifdef caml_useprim_caml_gt_float
               03707 #ifndef caml_useprim_caml_float_compare
               03708 #define caml_useprim_caml_float_compare
               03709 #endif
               03710 #ifndef caml_useprim_caml_compare_to_gt
               03711 #define caml_useprim_caml_compare_to_gt
               03712 #endif
               03713 caml_gt_float:
               03714         rcall   caml_float_compare
               03715         bra     caml_compare_to_gt
               03716 #endif
               03717 
               03718 #ifdef caml_useprim_caml_greaterequal
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03719 #ifndef caml_useprim_caml_compare
               03720 #define caml_useprim_caml_compare
               03721 #endif
               03722 #ifndef caml_useprim_caml_compare_to_ge
               03723 #define caml_useprim_caml_compare_to_ge
               03724 #endif
               03725 caml_greaterequal:
               03726         rcall   caml_compare
               03727         bra     caml_compare_to_ge
               03728 #endif
               03729 
               03730 #ifdef caml_useprim_caml_string_greaterequal
               03731 #ifndef caml_useprim_caml_string_compare
               03732 #define caml_useprim_caml_string_compare
               03733 #endif
               03734 #ifndef caml_useprim_caml_compare_to_ge
               03735 #define caml_useprim_caml_compare_to_ge
               03736 #endif
               03737 caml_string_greaterequal:
               03738         rcall   caml_string_compare
               03739         bra     caml_compare_to_ge
               03740 #endif
               03741 
               03742 #ifdef caml_useprim_caml_ge_float
               03743 #ifndef caml_useprim_caml_float_compare
               03744 #define caml_useprim_caml_float_compare
               03745 #endif
               03746 #ifndef caml_useprim_caml_compare_to_ge
               03747 #define caml_useprim_caml_compare_to_ge
               03748 #endif
               03749 caml_ge_float:
               03750         rcall   caml_float_compare
               03751         bra     caml_compare_to_ge
               03752 #endif
               03753 
               03754 ;;;
               03755 
               03756 #ifdef caml_useprim_caml_compare
               03757 #ifndef caml_useprim_caml_int_compare
               03758 #define caml_useprim_caml_int_compare
               03759 #endif
               03760 #ifndef caml_useprim_caml_string_compare
               03761 #define caml_useprim_caml_string_compare
               03762 #endif
               03763 #ifndef caml_useprim_caml_float_compare
               03764 #define caml_useprim_caml_float_compare
               03765 #endif
               03766 #ifndef caml_useprim_caml_float_array_compare
               03767 #define caml_useprim_caml_float_array_compare
               03768 #endif
               03769 #ifndef caml_useprim_caml_custom_compare
               03770 #define caml_useprim_caml_custom_compare
               03771 #endif
               03772 #ifndef caml_useprim_caml_raise_ia_compare
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03773 #define caml_useprim_caml_raise_ia_compare
               03774 #endif
               03775 caml_compare:
               03776         ;; ACCU = o1
               03777         ;; [0x2]:[0x1] = o2
               03778         
               03779 ;;; Fast traitment in simple cases
               03780         movf    ACCUL, W                ; == ?
               03781         xorwf   [0x1], W
               03782         bnz     caml_compare_A_phydiff
               03783         movf    ACCUH, W
               03784         xorwf   [0x2], W
               03785         bz      caml_compare_A_1eq2
               03786 caml_compare_A_phydiff:
               03787         btfss   ACCUL, 0                ; is_int(o1) ?
               03788         bra     caml_compare_A_addr_x   ; no
               03789         btfss   [0x1], 0                ; yes ; is_int(o2) ?
               03790         bra     caml_compare_A_1lt2     ; no  ; compare int addr -> return -1
               03791         bra     caml_int_compare        ; yes ; compare int int
               03792 caml_compare_A_addr_x:
               03793         btfsc   [0x1], 0                ; is_int(o2) ?
               03794         bra     caml_compare_A_1gt2     ; yes ; compare addr int -> return 1
               03795         
               03796         movff   FSR1L, TMP_REG_6        ; save FSR1
               03797         movff   FSR1H, TMP_REG_7
               03798         movff   ACCUL, FSR1L            ; FSR1 <- o1
               03799         movff   ACCUH, FSR1H
               03800         movsf   [0x1], FSR0L            ; FSR0 <- o2
               03801         movsf   [0x2], FSR0H
               03802         subfsr  FSR1, 0x2               ; FSR1 -= 2
               03803         subfsr  FSR0, 0x2               ; FSR0 -= 2
               03804         
               03805         movf    POSTINC1, W             ; read tag(o1) ; FSR1 ++
               03806         subwf   INDF0, W                ; tag(o2) - tag(o1)
               03807         bnc     caml_compare_B_1gt2
               03808         bnz     caml_compare_B_1lt2
               03809 
               03810         movf    POSTINC0, W
               03811         xorlw   STRING_TAG              ; strings ?
               03812         bz      caml_compare_B_string_compare
               03813         xorlw   (STRING_TAG^DOUBLE_TAG) ; float ?
               03814         bz      caml_compare_B_float_compare
               03815         xorlw   (DOUBLE_TAG^DOUBLE_ARRAY_TAG) ; float[] ?
               03816         bz      caml_compare_B_float_array_compare
               03817         xorlw   (DOUBLE_ARRAY_TAG^ABSTRACT_TAG) ; abstract ?
               03818         bz      caml_compare_B_raise_ia_compare
               03819         xorlw   (ABSTRACT_TAG^CLOSURE_TAG) ; closure ?
               03820         bz      caml_compare_B_raise_ia_compare
               03821         xorlw   (CLOSURE_TAG^INFIX_TAG) ; infix ?
               03822         bz      caml_compare_B_raise_ia_compare
               03823         xorlw   (INFIX_TAG^CUSTOM_TAG)  ; custom ?
               03824         bz      caml_compare_B_custom_compare
               03825         
               03826         movf    POSTINC1, W             ; size equals ? FSR1 ++
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03827         movwf   TMP_REG_A               ; TMP_REG_A <- size
               03828 
               03829         subwf   POSTINC0, W             ; size(o2) - size(o1)
               03830         bnc     caml_compare_B_1gt2
               03831         bnz     caml_compare_B_1lt2
               03832 
               03833 ;;; Not a simple case -> go through data trees
               03834         movff   FSR2L, TMP_REG_8        ; save FSR2
               03835         movff   FSR2H, TMP_REG_9
               03836         bra     caml_compare_loop
               03837 
               03838 ;;; Tools
               03839 caml_compare_raise_stack_overflow:
               03840         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03841         movff   TMP_REG_7, FSR1H
               03842         movff   TMP_REG_8, FSR2L        ; restore FSR2
               03843         movff   TMP_REG_9, FSR2H
               03844         goto    caml_raise_stack_overflow ; raise Stack_overflow
               03845 caml_compare_B_string_compare:
               03846         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03847         movff   TMP_REG_7, FSR1H
               03848         bra     caml_string_compare     ; goto string_compare
               03849 caml_compare_B_float_compare:
               03850         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03851         movff   TMP_REG_7, FSR1H
               03852         bra     caml_float_compare      ; goto float_compare
               03853 caml_compare_B_float_array_compare:
               03854         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03855         movff   TMP_REG_7, FSR1H
               03856         bra     caml_float_array_compare; goto float_array_compare
               03857 caml_compare_B_custom_compare:
               03858         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03859         movff   TMP_REG_7, FSR1H
               03860         bra     caml_custom_compare     ; goto custom_compare
               03861 caml_compare_CD_raise_ia_compare:
               03862         movff   TMP_REG_8, FSR2L        ; restore FSR2
               03863         movff   TMP_REG_9, FSR2H
               03864 caml_compare_B_raise_ia_compare:
               03865         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03866         movff   TMP_REG_7, FSR1H
               03867         goto    caml_raise_ia_compare   ; raise Invalid_argument "compare"
               03868 caml_compare_CD_1lt2:
               03869         movff   TMP_REG_8, FSR2L        ; restore FSR2
               03870         movff   TMP_REG_9, FSR2H
               03871 caml_compare_B_1lt2:
               03872         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03873         movff   TMP_REG_7, FSR1H
               03874 caml_compare_A_1lt2:
               03875         setf    ACCUL                   ; return -1
               03876         setf    ACCUH
               03877         return
               03878 caml_compare_CD_1gt2:
               03879         movff   TMP_REG_8, FSR2L        ; restore FSR2
               03880         movff   TMP_REG_9, FSR2H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03881 caml_compare_B_1gt2:
               03882         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03883         movff   TMP_REG_7, FSR1H
               03884 caml_compare_A_1gt2:
               03885         M_CONST 1                       ; return 1
               03886         return
               03887 caml_compare_CD_1ne2:
               03888         movff   TMP_REG_8, FSR2L        ; restore FSR2
               03889         movff   TMP_REG_9, FSR2H
               03890         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03891         movff   TMP_REG_7, FSR1H
               03892         return
               03893 caml_compare_CD_1eq2:
               03894         movff   TMP_REG_6, FSR1L        ; restore FSR1
               03895         movff   TMP_REG_7, FSR1H
               03896 caml_compare_A_1eq2:
               03897         M_CONST 0                       ; return 0
               03898         return
               03899         
               03900 ;;; Loop
               03901 caml_compare_forward:
               03902         movff   POSTINC0, TMP_REG_A     ; TMP_REG_A <- size ; FSR0 ++
               03903 caml_compare_loop:
               03904         movf    POSTINC0, W             ; stack[0] <- *FSR0++
               03905         movwf   [0x1]
               03906         movf    POSTINC0, W
               03907         movwf   [0x2]
               03908         movff   POSTINC1, ACCUL         ; ACCU <- *FSR1++
               03909         movff   POSTINC1, ACCUH
               03910 
               03911 ;;; Simple cases
               03912         movf    ACCUL, W                ; == ?
               03913         xorwf   [0x1], W
               03914         bnz     caml_compare_C_phydiff
               03915         movf    ACCUH, W
               03916         xorwf   [0x2], W
               03917         bz      caml_compare_C_1eq2     ; if e1 == e2 -> branch
               03918 caml_compare_C_phydiff:
               03919         btfss   ACCUL, 0                ; is_int(e1) ?
               03920         bra     caml_compare_C_addr_x   ; no
               03921         btfss   [0x1], 0                ; yes ; is_int(e2) ?
               03922         bra     caml_compare_CD_1lt2    ; no  ; compare int addr -> return -1
               03923         rcall   caml_int_compare        ; yes ; compare int int
               03924         bra     caml_compare_C_compared
               03925 caml_compare_C_addr_x:
               03926         btfsc   [0x1], 0                ; is_int(e2) ?
               03927         bra     caml_compare_CD_1gt2    ; yes ; compare addr int -> return 1
               03928 
               03929         movff   FSR0L, TMP_REG_B        ; save FSR0 and FSR1
               03930         movff   FSR0H, TMP_REG_C
               03931         movff   FSR1L, TMP_REG_D
               03932         movff   FSR1H, TMP_REG_E
               03933         movsf   [0x1], FSR0L            ; FSR0 <- stack[0]
               03934         movsf   [0x2], FSR0H
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03935         movff   ACCUL, FSR1L            ; FSR1 <- ACCU
               03936         movff   ACCUH, FSR1H
               03937         subfsr  FSR1, 0x2               ; FSR1 -= 2
               03938         subfsr  FSR0, 0x2               ; FSR0 -= 2
               03939 
               03940         movf    POSTINC1, W             ; read tag(e1) ; FSR1 ++
               03941         subwf   INDF0, W                ; tag(e2) - tag(e1)
               03942         bnc     caml_compare_CD_1gt2
               03943         bnz     caml_compare_CD_1lt2
               03944 
               03945         movf    POSTINC0, W
               03946         xorlw   STRING_TAG              ; strings ?
               03947         bz      caml_compare_D_string_compare
               03948         xorlw   (STRING_TAG^DOUBLE_TAG) ; float ?
               03949         bz      caml_compare_D_float_compare
               03950         xorlw   (DOUBLE_TAG^DOUBLE_ARRAY_TAG) ; float[] ?
               03951         bz      caml_compare_D_float_array_compare
               03952         xorlw   (DOUBLE_ARRAY_TAG^CUSTOM_TAG) ; custom ?
               03953         bz      caml_compare_D_custom_compare
               03954         xorlw   (CUSTOM_TAG^ABSTRACT_TAG) ; abstract ?
               03955         bz      caml_compare_CD_raise_ia_compare
               03956         xorlw   (ABSTRACT_TAG^CLOSURE_TAG) ; closure ?
               03957         bz      caml_compare_CD_raise_ia_compare
               03958         xorlw   (CLOSURE_TAG^INFIX_TAG) ; infix ?
               03959         bz      caml_compare_CD_raise_ia_compare
               03960         
               03961         movf    POSTINC1, W             ; compare sizes
               03962         subwf   INDF0, W                ; size(e2) - size(e1)
               03963         bnc     caml_compare_CD_1gt2
               03964         bnz     caml_compare_CD_1lt2
               03965 
               03966 ;;; Complex case -> forward
               03967         dcfsnz  TMP_REG_A, W            ; if counter = 1
               03968         bra     caml_compare_forward    ; then skip push
               03969 caml_compare_push_forward:
               03970         movlw   STACK_END               ; check stack overflow
               03971         cpfseq  FSR2H
               03972         bra     caml_compare_canpush3
               03973         movlw   -0x6
               03974         addwf   FSR2L, W
               03975         btfss   STATUS, C
               03976         bra     caml_compare_raise_stack_overflow
               03977 caml_compare_canpush3:
               03978         movf    TMP_REG_A, W            ; stack[0] <- counter
               03979         movwf   [0x1]
               03980         movff   TMP_REG_C, POSTDEC2     ; push save(FSR0)
               03981         movff   TMP_REG_B, POSTDEC2
               03982         movff   TMP_REG_E, POSTDEC2     ; push save(FSR1)
               03983         movff   TMP_REG_D, POSTDEC2
               03984         subfsr  FSR2, 0x2               ; push X
               03985         bra     caml_compare_forward    ; forward
               03986 
               03987 caml_compare_C_compared:
               03988         btfsc   ACCUL, 1                ; sub-rountine returned 0 ?
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               03989         bra     caml_compare_CD_1ne2
               03990         bra     caml_compare_C_1eq2
               03991         
               03992 caml_compare_D_string_compare:
               03993         rcall   caml_string_compare     ; compare string string
               03994         bra     caml_compare_D_compared
               03995 caml_compare_D_float_compare:
               03996         rcall   caml_float_compare      ; compare float float
               03997         bra     caml_compare_D_compared
               03998 caml_compare_D_float_array_compare:
               03999         rcall   caml_float_array_compare; compare float[] float[]
               04000         bra     caml_compare_D_compared
               04001 caml_compare_D_custom_compare:          ; compare custom custom
               04002         rcall   caml_custom_compare
               04003         bra     caml_compare_D_compared
               04004 
               04005 caml_compare_D_compared:
               04006         btfsc   ACCUL, 1                ; sub-rountine returned 0 ?
               04007         bra     caml_compare_CD_1ne2    ; no -> finished
               04008 caml_compare_D_1eq2:
               04009         movff   TMP_REG_B, FSR0L        ; restore FSR0 and FSR1
               04010         movff   TMP_REG_C, FSR0H
               04011         movff   TMP_REG_D, FSR1L
               04012         movff   TMP_REG_E, FSR1H
               04013 caml_compare_C_1eq2:
               04014         decfsz  TMP_REG_A, F            ; decr counter ; counter = 0 ?
               04015         bra     caml_compare_loop       ; no -> loop
               04016         movf    FSR2L, W                ; FSR2 = save(FSR2) ?
               04017         xorwf   TMP_REG_8, W
               04018         bnz     caml_compare_goback
               04019         movf    FSR2H, W
               04020         xorwf   TMP_REG_9, W
               04021         bz      caml_compare_CD_1eq2
               04022 caml_compare_goback:
               04023         addfsr  FSR2, 0x2               ; pop X
               04024         movff   PREINC2, FSR1L          ; pop FSR1
               04025         movff   PREINC2, FSR1H
               04026         movff   PREINC2, FSR0L          ; pop FSR0
               04027         movff   PREINC2, FSR0H
               04028         decf    [0x1], W                ; peek counter--
               04029         movwf   TMP_REG_A
               04030         bra     caml_compare_loop       ; loop
               04031 #endif
               04032 
               04033 ;;;
               04034         
               04035 #ifdef caml_useprim_caml_string_compare
               04036 caml_string_compare:
               04037         ;; ACCU = str1
               04038         ;; [0x2]:[0x1] = str2
               04039         movff   FSR2L, TMP_REG_1        ; save stack top
               04040         movff   FSR2H, TMP_REG_2
               04041         movsf   [0x1], TMP_REG_3        ; FSR2 <- str2
               04042         movsf   [0x2], TMP_REG_4
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04043         movff   TMP_REG_3, FSR2L
               04044         movff   TMP_REG_4, FSR2H
               04045         movff   ACCUL, FSR0L            ; FSR0 <- str1
               04046         movff   ACCUH, FSR0H
               04047         subfsr  FSR0, 0x1               ; FSR0 --
               04048         subfsr  FSR2, 0x1               ; FSR2 --
               04049         decf    POSTINC0, W             ; TMP_REG_{3,5} <- blk_size(str1) - 1
               04050         movwf   TMP_REG_3
               04051         movwf   TMP_REG_5
               04052         decf    POSTINC2, W             ; TMP_REG_4 <- blk_size(str2) - 1
               04053         movwf   TMP_REG_4
               04054         subwf   TMP_REG_5, W            ; blk_size(str1) - blk_size(str2)
               04055         bnc     caml_string_compare_L0
               04056         movff   TMP_REG_4, TMP_REG_5    ; TMP_REG_5 = min(blk_sizes) - 1
               04057 caml_string_compare_L0:
               04058         movf    TMP_REG_5, F
               04059         bz      caml_string_compare_loop_end
               04060 caml_string_compare_loop:
               04061         movf    POSTINC0, W
               04062         subwf   POSTINC2, W             ; str2.[i] - str1.[i]
               04063         bnz     caml_string_compare_diff
               04064         movf    POSTINC0, W
               04065         subwf   POSTINC2, W
               04066         bnz     caml_string_compare_diff
               04067         decfsz  TMP_REG_5, F            ; loop min(blk_size) - 1 times
               04068         bra     caml_string_compare_loop
               04069 caml_string_compare_loop_end:
               04070         movf    TMP_REG_4, W
               04071         subwf   TMP_REG_3, W            ; blk_size(str1) - blk_size(str2)
               04072         bz      caml_string_compare_blen_eq
               04073         bnc     caml_string_compre_bl1_lt_bl2
               04074 caml_string_compare_bl1_gt_bl2:
               04075         movf    [0x1], W
               04076         bz      caml_string_compare_cont1
               04077         bra     caml_string_compare_1gt2
               04078 caml_string_compre_bl1_lt_bl2:
               04079         addfsr  FSR0, 0x1
               04080         movf    POSTDEC0, W
               04081         bz      caml_string_compare_cont1
               04082         bra     caml_string_compare_1lt2
               04083 caml_string_compare_blen_eq:
               04084         movf    [0x1], W
               04085         bz      caml_string_compare_l2odd
               04086         addfsr  FSR0, 0x1
               04087         movf    POSTDEC0, W
               04088         bz      caml_string_compare_1gt2
               04089         M_CONST 0                       ; str1 = str2 ; return 0
               04090         movff   TMP_REG_1, FSR2L        ; restore stack top
               04091         movff   TMP_REG_2, FSR2H
               04092         return
               04093 caml_string_compare_l2odd:
               04094         addfsr  FSR0, 0x1
               04095         movf    POSTDEC0, W
               04096         bnz     caml_string_compare_1lt2
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04097         movf    POSTINC0, W
               04098         subwf   POSTINC2, W
               04099         bnz     caml_string_compare_diff
               04100         M_CONST 0                       ; str1 = str2 ; return 0
               04101         movff   TMP_REG_1, FSR2L        ; restore stack top
               04102         movff   TMP_REG_2, FSR2H
               04103         return
               04104 caml_string_compare_cont1:
               04105         movf    POSTINC0, W
               04106         subwf   POSTINC2, W
               04107 caml_string_compare_diff:
               04108         bc      caml_string_compare_1lt2
               04109 caml_string_compare_1gt2
               04110         M_CONST 1                       ; str1 > str2 ; return 1
               04111         movff   TMP_REG_1, FSR2L        ; restore stack top
               04112         movff   TMP_REG_2, FSR2H
               04113         return
               04114 caml_string_compare_1lt2:               ; str1 < str2
               04115         setf    ACCUL                   ; return -1
               04116         setf    ACCUH
               04117         movff   TMP_REG_1, FSR2L        ; restore stack top
               04118         movff   TMP_REG_2, FSR2H
               04119         return
               04120 #endif
               04121 
               04122 #ifdef caml_useprim_caml_string_notequal
               04123 #ifndef caml_useprim_caml_string_equal
               04124 #define caml_useprim_caml_string_equal
               04125 #endif
               04126 caml_string_notequal:
               04127         rcall   caml_string_equal
               04128         btg     ACCUL, 1
               04129         return
               04130 #endif
               04131 
               04132 #ifdef caml_useprim_caml_string_equal
               04133 caml_string_equal:
               04134         ;; ACCU = str1
               04135         ;; [0x2]:[0x1] = str2
               04136         movff   FSR2L, TMP_REG_1        ; save stack top
               04137         movff   FSR2H, TMP_REG_2
               04138         movsf   [0x1], TMP_REG_3        ; FSR2 <- str2
               04139         movsf   [0x2], TMP_REG_4
               04140         movff   TMP_REG_3, FSR2L
               04141         movff   TMP_REG_4, FSR2H
               04142         movff   ACCUL, FSR0L            ; FSR0 <- str1
               04143         movff   ACCUH, FSR0H
               04144         subfsr  FSR0, 0x1               ; FSR0 --
               04145         subfsr  FSR2, 0x1               ; FSR2 --
               04146         movf    POSTINC0, W             ; compare size
               04147         xorwf   INDF2, W
               04148         bnz     caml_string_equal_diff  ; if different sizes -> return false
               04149         movff   POSTINC2, TMP_REG_3     ; TMP_REG_3 <- size
               04150 caml_string_equal_loop:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04151         movf    POSTINC0, W
               04152         xorwf   POSTINC2, W
               04153         bnz     caml_string_equal_diff
               04154         movf    POSTINC0, W
               04155         xorwf   POSTINC2, W
               04156         bnz     caml_string_equal_diff
               04157         decfsz  TMP_REG_3, F
               04158         bra     caml_string_equal_loop
               04159         M_CONST 1                       ; return 1 = true
               04160         movff   TMP_REG_1, FSR2L        ; restore stack top
               04161         movff   TMP_REG_2, FSR2H
               04162         return
               04163 caml_string_equal_diff:
               04164         M_CONST 0                       ; return 0 = false
               04165         movff   TMP_REG_1, FSR2L        ; restore stack top
               04166         movff   TMP_REG_2, FSR2H
               04167         return
               04168 #endif
               04169 
               04170 ;;;
               04171 
               04172 #ifdef caml_useprim_caml_int_compare
               04173 caml_int_compare:
               04174         ;; ACCU = v1
               04175         ;; [0x2]:[0x1] = v2
               04176         movlw   0x80            ; ACCUH = v1H + 0x80
               04177         addwf   ACCUH, F
               04178         addwf   [0x2], W        ; W <- v2H + 0x80
               04179         subwf   ACCUH, W        ; (v1H + 0x80) - (v2H + 0x80)
               04180         bnz     caml_int_compare_L0
               04181         movf    [0x1], W
               04182         subwf   ACCUL, W        ; v1L - v2L
               04183         bz      caml_int_compare_1eq2
               04184 caml_int_compare_L0:
               04185         bnc     caml_int_compare_1lt2
               04186         M_CONST 1               ; v1 > v2 => return 1
               04187         return
               04188 caml_int_compare_1lt2:
               04189         setf    ACCUH           ; v1 < v2 => return -1
               04190         setf    ACCUL
               04191         return
               04192 caml_int_compare_1eq2:
               04193         M_CONST 0               ; v1 = v2 => return 0
               04194         return
               04195 #endif
               04196 
               04197 ;;;
               04198 
               04199 #ifdef caml_useprim_caml_float_array_compare
               04200 #ifndef caml_useprim_caml_float_compare_1xx2
               04201 #define caml_useprim_caml_float_compare_1xx2
               04202 #endif
               04203 caml_float_array_compare:
               04204         btfsc   ACCUL, 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04205         bra     caml_float_array_compare_0_x
               04206         btfsc   [0x1], 0
               04207         bra     caml_float_compare_1gt2
               04208         movff   FSR1L, TMP_REG_1        ; save FSR1
               04209         movff   FSR1H, TMP_REG_2
               04210         movff   ACCUL, FSR0L            ; FSR0 <- @f2[]
               04211         movff   ACCUH, FSR0H
               04212         movsf   [0x1], FSR1L            ; FSR1 <- @f1[]
               04213         movsf   [0x2], FSR1H
               04214         subfsr  FSR0, 0x1
               04215         subfsr  FSR1, 0x1
               04216         movf    INDF0, W
               04217         subwf   POSTINC1, W             ; size1 - size2
               04218         bnc     caml_float_compare_1gt2
               04219         bnz     caml_float_compare_1lt2
               04220         movf    POSTINC0, W             ; size = 0 ?
               04221         bz      caml_float_compare_1eq2
               04222         movwf   TMP_REG_4               ; TMP_REG_4 <- size
               04223         addfsr  FSR0, 0x1
               04224         addfsr  FSR1, 0x1
               04225 caml_float_array_compare_loop:
               04226         btfsc   INDF0, 7                ; test sign
               04227         bra     caml_float_array_compare_XN
               04228         btfss   INDF1, 7
               04229         bra     caml_float_array_compare_PP
               04230         bra     caml_float_compare_1lt2
               04231 caml_float_array_compare_XN:
               04232         btfss   INDF1, 7
               04233         bra     caml_float_compare_1gt2
               04234 caml_float_array_compare_NN:
               04235         movf    FSR1L, W                ; FSR1 <-> FSR0
               04236         movff   FSR0L, FSR1L
               04237         movwf   FSR0L
               04238         movf    FSR1H, W
               04239         movff   FSR0H, FSR1H
               04240         movwf   FSR0H
               04241 caml_float_array_compare_PP:
               04242         movf    INDF1, W                ; TMP_REG_3 <- e1 + 0x80
               04243         andlw   B'00011111'
               04244         btfsc   WREG, 4
               04245         iorlw   B'11100000'
               04246         addlw   0x80
               04247         movwf   TMP_REG_3
               04248         movf    INDF0, W                ; W <- e2 + 0x80
               04249         andlw   B'00011111'
               04250         btfsc   WREG, 4
               04251         iorlw   B'11100000'
               04252         addlw   0x80
               04253         subwf   TMP_REG_3, W            ; (e1 + 0x80) - (e2 + 0x80)
               04254         bnc     caml_float_compare_1gt2
               04255         bnz     caml_float_compare_1lt2
               04256         swapf   POSTDEC1, W             ; TMP_REG_3 <- m1H
               04257         rrncf   WREG, F
               04258         andlw   B'00000011'
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04259         movwf   TMP_REG_3
               04260         swapf   POSTDEC0, W             ; W <- m2H
               04261         rrncf   WREG, F
               04262         andlw   B'00000011'
               04263         subwf   TMP_REG_3, W            ; m1H - m2H
               04264         bnc     caml_float_compare_1gt2
               04265         bnz     caml_float_compare_1lt2
               04266         movf    POSTINC0, W
               04267         subwf   POSTINC1, W             ; m1L - m2L
               04268         bnc     caml_float_compare_1gt2
               04269         bnz     caml_float_compare_1lt2
               04270         dcfsnz  TMP_REG_4, F            ; loop size times
               04271         bra     caml_float_compare_1eq2
               04272         btfss   INDF1, 7                ; NN ?
               04273         bra     caml_float_array_compare_continue
               04274         movf    FSR1L, W                ; FSR1 <-> FSR0
               04275         movff   FSR0L, FSR1L
               04276         movwf   FSR0L
               04277         movf    FSR1H, W
               04278         movff   FSR0H, FSR1H
               04279         movwf   FSR0H
               04280 caml_float_array_compare_continue:
               04281         addfsr  FSR0, 0x2
               04282         addfsr  FSR1, 0x2
               04283         bra     caml_float_array_compare_loop
               04284 caml_float_array_compare_0_x:
               04285         btfsc   [0x1], 0
               04286         bra     caml_float_compare_1eq2
               04287         bra     caml_float_compare_1lt2
               04288 #endif
               04289 
               04290 #ifdef caml_useprim_caml_float_compare
               04291 #ifndef caml_useprim_caml_float_compare_1xx2
               04292 #define caml_useprim_caml_float_compare_1xx2
               04293 #endif
               04294 #endif
               04295 #ifdef caml_useprim_caml_float_compare_1xx2
               04296 caml_float_compare_1eq2:
               04297         movff   TMP_REG_1, FSR1L        ; restore FSR1
               04298         movff   TMP_REG_2, FSR1H
               04299         M_CONST 0                       ; return 0
               04300         return
               04301 caml_float_compare_1lt2:
               04302         movff   TMP_REG_1, FSR1L        ; restore FSR1
               04303         movff   TMP_REG_2, FSR1H
               04304         setf    ACCUL
               04305         setf    ACCUH
               04306         return
               04307 caml_float_compare_1gt2:
               04308         movff   TMP_REG_1, FSR1L        ; restore FSR1
               04309         movff   TMP_REG_2, FSR1H
               04310         M_CONST 1                       ; return 1
               04311         return
               04312 #endif
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04313 
               04314 #ifdef caml_useprim_caml_float_compare
               04315 #ifndef caml_useprim_caml_float_compare_1xx2
               04316 #define caml_useprim_caml_float_compare_1xx2
               04317 #endif
               04318 caml_float_compare:
               04319         movff   FSR1L, TMP_REG_1        ; save FSR1
               04320         movff   FSR1H, TMP_REG_2
               04321         movff   ACCUL, FSR1L            ; FSR0 <- @f2
               04322         movff   ACCUH, FSR1H
               04323         movsf   [0x1], FSR0L            ; FSR1 <- @f1
               04324         movsf   [0x2], FSR0H
               04325         addfsr  FSR0, 0x2
               04326         addfsr  FSR1, 0x2
               04327         btfsc   INDF0, 7                ; test sign
               04328         bra     caml_float_compare_XN
               04329         btfss   INDF1, 7
               04330         bra     caml_float_compare_PP
               04331         bra     caml_float_compare_1lt2
               04332 caml_float_compare_XN:
               04333         btfss   INDF1, 7
               04334         bra     caml_float_compare_1gt2
               04335 caml_float_compare_NN:
               04336         movf    FSR1L, W                ; FSR1 <-> FSR0
               04337         movff   FSR0L, FSR1L
               04338         movwf   FSR0L
               04339         movf    FSR1H, W
               04340         movff   FSR0H, FSR1H
               04341         movwf   FSR0H
               04342 caml_float_compare_PP:
               04343         movf    PREINC1, W              ; TMP_REG_3 <- e1 + 0x80
               04344         addlw   0x2
               04345         movwf   TMP_REG_3
               04346         movf    PREINC0, W              ; W <- e2 + 0x80
               04347         addlw   0x2
               04348         subwf   TMP_REG_3, W            ; (e1 + 0x80) - (e2 + 0x80)
               04349         bnc     caml_float_compare_1lt2
               04350         bnz     caml_float_compare_1gt2
               04351         subfsr  FSR0, 0x1
               04352         subfsr  FSR1, 0x1
               04353         movf    POSTDEC1, W             ; TMP_REG_3 <- m1H
               04354         andlw   B'01111111'
               04355         movwf   TMP_REG_3
               04356         movf    POSTDEC0, W             ; W <- m2U
               04357         andlw   B'01111111'
               04358         subwf   TMP_REG_3, W            ; m1U - m2U
               04359         bnc     caml_float_compare_1lt2
               04360         bnz     caml_float_compare_1gt2
               04361         movf    POSTDEC0, W
               04362         subwf   POSTDEC1, W             ; m1H - m2H
               04363         bnc     caml_float_compare_1lt2
               04364         bnz     caml_float_compare_1gt2
               04365         movf    INDF0, W
               04366         subwf   INDF1, W                ; m1L - m2L
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04367         bnc     caml_float_compare_1lt2
               04368         bnz     caml_float_compare_1gt2
               04369         bra     caml_float_compare_1eq2
               04370 #endif
               04371 
               04372 ;;;
               04373 
               04374 #ifdef caml_useprim_caml_custom_compare
               04375 caml_custom_compare:
               04376         movff   ACCUL, FSR0L
               04377         movff   ACCUH, FSR0H
               04378         movlw   0x1
               04379         movwf   PRODL                   ; PRODL <- compare custom index (1)
               04380         movf    POSTINC0, W
               04381         movff   INDF0, PCLATH           ; WARNING: write PCLATH
               04382         movwf   PCL                     ; goto custom indirection table
               04383 #endif
               04384 
               04385 #ifdef caml_useprim_caml_int32_compare
               04386 caml_int32_compare:
               04387         movff   ACCUL, FSR0L
               04388         movff   ACCUH, FSR0H
               04389         addfsr  FSR0, 0x2
               04390         movff   POSTINC0, TMP_REG_1
               04391         movff   POSTINC0, TMP_REG_2
               04392         movff   POSTINC0, TMP_REG_3
               04393         movff   INDF0, TMP_REG_4
               04394         movsf   [0x1], FSR0L
               04395         movsf   [0x2], FSR0H
               04396         addfsr  FSR0, 0x5
               04397         movlw   0x80
               04398         addwf   TMP_REG_4, F
               04399         addwf   POSTDEC0, W
               04400         subwf   TMP_REG_4, W
               04401         bnz     caml_int32_compare_1neq2
               04402         movf    POSTDEC0, W
               04403         subwf   TMP_REG_3, W
               04404         bnz     caml_int32_compare_1neq2
               04405         movf    POSTDEC0, W
               04406         subwf   TMP_REG_2, W
               04407         bnz     caml_int32_compare_1neq2
               04408         movf    INDF0, W
               04409         subwf   TMP_REG_1, W
               04410         bnz     caml_int32_compare_1neq2
               04411         M_CONST 0
               04412         return
               04413 caml_int32_compare_1neq2:
               04414         bnc     caml_int32_compare_1lt2
               04415         M_CONST 1
               04416         return
               04417 caml_int32_compare_1lt2:
               04418         setf    ACCUH
               04419         setf    ACCUL
               04420         return
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04421 #endif
               04422 
               04423 #ifdef caml_useprim_caml_int64_compare
               04424 caml_int64_compare:
               04425         movff   ACCUL, FSR0L
               04426         movff   ACCUH, FSR0H
               04427         addfsr  FSR0, 0x2
               04428         movff   POSTINC0, TMP_REG_1
               04429         movff   POSTINC0, TMP_REG_2
               04430         movff   POSTINC0, TMP_REG_3
               04431         movff   POSTINC0, TMP_REG_4
               04432         movff   POSTINC0, ACCUL
               04433         movff   POSTINC0, ACCUH
               04434         movff   POSTINC0, PRODL
               04435         movff   INDF0, PRODH
               04436         movsf   [0x1], FSR0L
               04437         movsf   [0x2], FSR0H
               04438         addfsr  FSR0, 0x9
               04439         movlw   0x80
               04440         addwf   PRODH, F
               04441         addwf   POSTDEC0, W
               04442         subwf   PRODH, W
               04443         bnz     caml_int64_compare_1neq2
               04444         movf    POSTDEC0, W
               04445         subwf   PRODL, W
               04446         bnz     caml_int64_compare_1neq2
               04447         movf    POSTDEC0, W
               04448         subwf   ACCUH, W
               04449         bnz     caml_int64_compare_1neq2
               04450         movf    POSTDEC0, W
               04451         subwf   ACCUL, W
               04452         bnz     caml_int64_compare_1neq2
               04453         movf    POSTDEC0, W
               04454         subwf   TMP_REG_4, W
               04455         bnz     caml_int64_compare_1neq2
               04456         movf    POSTDEC0, W
               04457         subwf   TMP_REG_3, W
               04458         bnz     caml_int64_compare_1neq2
               04459         movf    POSTDEC0, W
               04460         subwf   TMP_REG_2, W
               04461         bnz     caml_int64_compare_1neq2
               04462         movf    INDF0, W
               04463         subwf   TMP_REG_1, W
               04464         bnz     caml_int64_compare_1neq2
               04465         M_CONST 0
               04466         return
               04467 caml_int64_compare_1neq2:
               04468         bnc     caml_int64_compare_1lt2
               04469         M_CONST 1
               04470         return
               04471 caml_int64_compare_1lt2:
               04472         setf    ACCUH
               04473         setf    ACCUL
               04474         return
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04475 #endif
               04476 
               04477 ;;;
               04478         
               04479 #ifdef caml_useprim_caml_compare_to_eq
               04480 caml_compare_to_eq:
               04481         btg     ACCUL, 1                ; 00 -> 1
               04482         movlw   0x03                    ; 01 -> 0
               04483         andwf   ACCUL, F                ; 11 -> 0
               04484         clrf    ACCUH
               04485         return
               04486 #endif
               04487 
               04488 #ifdef caml_useprim_caml_compare_to_neq
               04489 caml_compare_to_neq:
               04490         movlw   0x03                    ; 00 -> 0
               04491         andwf   ACCUL, F                ; 01 -> 1
               04492         clrf    ACCUH                   ; 11 -> 1
               04493         return
               04494 #endif
               04495 
               04496 #ifdef caml_useprim_caml_compare_to_lt
               04497 caml_compare_to_lt:
               04498         rrncf   ACCUL, F                ; 00 -> 0
               04499         bsf     ACCUL, 0                ; 01 -> 0
               04500         movlw   0x03                    ; 11 -> 1
               04501         andwf   ACCUL, F
               04502         clrf    ACCUH
               04503         return
               04504 #endif
               04505 
               04506 #ifdef caml_useprim_caml_compare_to_le
               04507 caml_compare_to_le:
               04508         btg     ACCUL, 1                ; 00 -> 1
               04509         btfsc   ACCUL, 2                ; 01 -> 0
               04510         bsf     ACCUL, 1                ; 11 -> 1
               04511         movlw   0x03
               04512         andwf   ACCUL, F
               04513         clrf    ACCUH
               04514         return
               04515 #endif
               04516 
               04517 #ifdef caml_useprim_caml_compare_to_gt
               04518 caml_compare_to_gt:
               04519         btfsc   ACCUL, 2                ; 00 -> 0
               04520         bcf     ACCUL, 1                ; 01 -> 1
               04521         movlw   0x03                    ; 11 -> 0
               04522         andwf   ACCUL, F
               04523         clrf    ACCUH
               04524         return
               04525 #endif
               04526 
               04527 #ifdef caml_useprim_caml_compare_to_ge
               04528 caml_compare_to_ge:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04529         rrncf   ACCUL, F                ; 00 -> 1
               04530         btg     ACCUL, 1                ; 01 -> 1
               04531         bsf     ACCUL, 0                ; 11 -> 0
               04532         movlw   0x03
               04533         andwf   ACCUL, F
               04534         clrf    ACCUH
               04535         return
               04536 #endif
               04537 
               04538 #ifdef caml_useprim_caml_raise_ia_compare
               04539 #ifndef caml_useprim_caml_raise_ia
               04540 #define caml_useprim_caml_raise_ia
               04541 #endif
               04542 caml_raise_ia_compare:
               04543         movlw   0x1                     ; erase ACCU and stack[0]
               04544         movwf   ACCUL
               04545         movwf   [0x1]
               04546         clrf    ACCUH
               04547         clrf    [0x2]
               04548         M_CHECK_UNFULL_HEAP 0x7         ; check allocation of string and exn
               04549         M_WRITE_BYTE STRING_TAG         ; write string tag
               04550         M_WRITE_BYTE 0x4                ; write string size
               04551         movff   FSR1L, TMP_REG_1        ; mem string addr
               04552         movff   FSR1H, TMP_REG_2
               04553         M_WRITE_BYTE 'c'                ; write string content
               04554         M_WRITE_BYTE 'o'
               04555         M_WRITE_BYTE 'm'
               04556         M_WRITE_BYTE 'p'
               04557         M_WRITE_BYTE 'a'
               04558         M_WRITE_BYTE 'r'
               04559         M_WRITE_BYTE 'e'
               04560         M_WRITE_BYTE 0x0                ; write string \0
               04561         goto    caml_raise_ia
               04562 #endif
               04563 
               04564 
               04565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04566 ;;;;;;;;                                   ;;;;;;;;
               04567 ;;;;;;;;          INTERRUPTIONS            ;;;;;;;;
               04568 ;;;;;;;;                                   ;;;;;;;;
               04569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04570 
               04571 #ifdef caml_useprim_caml_set_interruption_handler
               04572 
               04573 caml_set_interruption_handler:
               04574         movff   ACCUL, INT_FUN_L
               04575         movff   ACCUH, INT_FUN_H
               04576         return
               04577 
               04578 asm_interrupt_handler:
               04579         movf    INTCON, W               ; INT_FLAGS_3:2:1 |= *IF
               04580         andlw   B'00000111'
               04581         iorwf   INT_FLAGS_3, F
               04582         movf    INTCON, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04583         rlcf    WREG, W
               04584         swapf   WREG, W
               04585         iorlw   B'11111000'
               04586         andwf   INT_FLAGS_3, F
               04587         swapf   INTCON3, W
               04588         andlw   B'00110000'
               04589         iorwf   INT_FLAGS_3, F
               04590         movf    INTCON3, W
               04591         rlcf    WREG, W
               04592         iorlw   B'11001111'
               04593         andwf   INT_FLAGS_3, F
               04594         movf    PIR1, W
               04595         iorwf   INT_FLAGS_1, F
               04596         movf    PIE1, W
               04597         andwf   INT_FLAGS_1, F
               04598         movf    PIR2, W
               04599         iorwf   INT_FLAGS_2, F
               04600         movf    PIE2, W
               04601         andwf   INT_FLAGS_2, F
               04602         clrf    PIR1                    ; *IF <- 0
               04603         clrf    PIR2
               04604         movlw   B'11111000'
               04605         andwf   INTCON, F
               04606         movlw   B'11111100'
               04607         andwf   INTCON3, F
               04608         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04609         retfie  FAST
               04610 
               04611 caml_interrupt_handler:
               04612         btfss   INT_FUN_L, 0            ; handler defined ?
               04613         bra     caml_interrupt_handler_l0
               04614         clrf    INT_FLAGS_1             ; no -> clear flags
               04615         clrf    INT_FLAGS_2
               04616         clrf    INT_FLAGS_3
               04617         goto    _THE_BIG_LOOP
               04618 caml_interrupt_handler_l0:              ; yes
               04619         clrf    TMP_REG_1
               04620         clrf    TMP_REG_2
               04621         clrf    TMP_REG_3
               04622         comf    INT_RUNS_1, W
               04623         andwf   INT_FLAGS_1, W
               04624         bnz     caml_interrupt_handler_1
               04625         comf    INT_RUNS_2, W                ;; TMP_REG_1 = argL
               04626         andwf   INT_FLAGS_2, W               ;; TMP_REG_2 = argH
               04627         bnz     caml_interrupt_handler_2     ;; TMP_REG_3 = running_flag
               04628         comf    INT_RUNS_3, W
               04629         andwf   INT_FLAGS_3, W
               04630         andlw   B'00110111'
               04631         bnz     caml_interrupt_handler_3
               04632         bcf     INT_FLAGS_3, 7          ; clear interrupt_flag
               04633         goto    _THE_BIG_LOOP           ; nothing to do
               04634 caml_interrupt_handler_1:               ; PIR1 interruption
               04635         bsf     TMP_REG_3, 5
               04636         rcall   caml_interrupt_handler_compute_mask
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04637         iorwf   INT_RUNS_1, F
               04638         xorwf   INT_FLAGS_1, F
               04639         movlw   (((2 * PIR1) & 0xFF) + 1)
               04640         movwf   TMP_REG_1
               04641         bra     caml_interrupt_handler_run
               04642 caml_interrupt_handler_2:               ; PIR2 interruption
               04643         bsf     TMP_REG_3, 6
               04644         rcall   caml_interrupt_handler_compute_mask
               04645         iorwf   INT_RUNS_2, F
               04646         xorwf   INT_FLAGS_2, F
               04647         movlw   (((2 * PIR2) & 0xFF) + 1)
               04648         movwf   TMP_REG_1
               04649         bra     caml_interrupt_handler_run
               04650 caml_interrupt_handler_3:
               04651         bsf     TMP_REG_3, 7
               04652         rcall   caml_interrupt_handler_compute_mask
               04653         iorwf   INT_RUNS_3, F
               04654         xorwf   INT_FLAGS_3, F
               04655         movf    TMP_REG_2, W
               04656         andlw   0x0F
               04657         bz      caml_interrupt_handler_3_INTCON3
               04658         movlw   (((2 * INTCON) & 0xFF) + 1)
               04659         movwf   TMP_REG_1
               04660         bra     caml_interrupt_handler_run
               04661 caml_interrupt_handler_3_INTCON3:
               04662         movlw   (((2 * INTCON3) & 0xFF) + 1)
               04663         movwf   TMP_REG_1
               04664         swapf   TMP_REG_2, F
               04665 caml_interrupt_handler_run:
               04666         movlw   STACK_END               ; check stack overflow (8 levels)
               04667         cpfseq  FSR2H
               04668         bra     caml_interrupt_handler_l1
               04669         movlw   -0x16
               04670         addwf   FSR2L, W
               04671         btfss   STATUS, C
               04672         goto    caml_raise_stack_overflow
               04673 caml_interrupt_handler_l1:
               04674         bcf     INT_FLAGS_3, 7          ; clear interrupt_flag
               04675         movff   ACCUH, POSTDEC2         ; push accu
               04676         movff   ACCUL, POSTDEC2
               04677         movff   TBLPTRH, POSTDEC2       ; push PC
               04678         movff   TBLPTRL, POSTDEC2
               04679         movff   TRAP_SPH, POSTDEC2      ; push trapSp
               04680         movff   TRAP_SPL, POSTDEC2
               04681         movlw   high (caml_interrupt_handler_raise_instr) ; push @raise_instr
               04682         movwf   POSTDEC2
               04683         movlw   low (caml_interrupt_handler_raise_instr)
               04684         movwf   POSTDEC2
               04685         movff   FSR2H, TRAP_SPH         ; trapSp <- Sp
               04686         movff   FSR2L, TRAP_SPL
               04687         movff   TMP_REG_3, POSTDEC2     ; (1)push running_flag
               04688         movff   EXTRA_ARGS, POSTDEC2    ; (1)push extra_args
               04689         movff   ENVH, POSTDEC2          ; push env
               04690         movff   ENVL, POSTDEC2
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04691         movlw   high (caml_interrupt_handler_return_instr) ; push @return_instr
               04692         movwf   POSTDEC2
               04693         movlw   low (caml_interrupt_handler_return_instr)
               04694         movwf   POSTDEC2
               04695         movff   TMP_REG_2, POSTDEC2     ; push argument
               04696         movff   TMP_REG_1, POSTDEC2
               04697         movf    INT_FUN_L, W            ; ACCU, ENV, FSR0 <- interrupt_handler
               04698         movwf   ACCUL
               04699         movwf   ENVL
               04700         movwf   FSR0L
               04701         movf    INT_FUN_H, W
               04702         movwf   ACCUH
               04703         movwf   ENVH
               04704         movwf   FSR0H
               04705         movff   POSTINC0, TBLPTRL       ; PC <- interrupt_handler[0]
               04706         movff   INDF0, TBLPTRH
               04707         movlw   0x1                     ; extraArgs <- int_val(0)
               04708         movwf   EXTRA_ARGS
               04709         goto    _THE_BIG_LOOP
               04710 caml_interrupt_handler_compute_mask:
               04711         movwf   PRODL
               04712         movlw   0x00
               04713         bsf     STATUS, C
               04714 caml_interrupt_handler_compute_mask_loop:
               04715         rlcf    WREG, W
               04716         rrcf    PRODL, F
               04717         bnc     caml_interrupt_handler_compute_mask_loop
               04718         movwf   TMP_REG_2
               04719         andlw   0x0F
               04720         bnz     caml_interrupt_handler_compute_mask_l
               04721         bsf     TMP_REG_3, 4
               04722         swapf   TMP_REG_2, W
               04723         iorwf   TMP_REG_3, F
               04724         movf    TMP_REG_2, W
               04725         return
               04726 caml_interrupt_handler_compute_mask_l:
               04727         iorwf   TMP_REG_3, F
               04728         return
               04729 
               04730 caml_interrupt_handler_return_instr:
               04731         db      .146
               04732         
               04733 caml_interrupt_handler_raise_instr:
               04734         db      .147
               04735 
               04736 caml_interrupt_handler_return:
               04737         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04738         rcall   caml_interrupt_restore_runs
               04739         addfsr  FSR2, 0x4               ; pop [ @raise_instr ; trapSp ]
               04740         movff   PREINC2, TBLPTRL        ; PC <- pop()
               04741         movff   PREINC2, TBLPTRH
               04742         movff   PREINC2, ACCUL          ; ACCU <- pop()
               04743         movff   PREINC2, ACCUH
               04744         return
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04745 
               04746 caml_interrupt_handler_raise:
               04747         bsf     INT_FLAGS_3, 7          ; set interrupt_flag
               04748         subfsr  FSR2, 0x8               ; FSR2 <- @running_flag
               04749         rcall   caml_interrupt_restore_runs
               04750         addfsr  FSR2, 0x8               ; pop [ @ri ; tSp ; PC ; ACCU ]
               04751         goto    _RAISE                  ; raise
               04752 
               04753 caml_interrupt_restore_runs:
               04754         movf    [0x0], W                ; W <- running_flag
               04755         movwf   PRODL                   ; PRODL <- running_flag
               04756         andlw   0x0F                    ; compute mask
               04757         btfsc   PRODL, 4
               04758         swapf   WREG, W
               04759         btfsc   PRODL, 5                ; clear run bit
               04760         xorwf   INT_RUNS_1, F
               04761         btfsc   PRODL, 6
               04762         xorwf   INT_RUNS_2, F
               04763         btfsc   PRODL, 7
               04764         xorwf   INT_RUNS_3, F
               04765         return
               04766 
               04767 #else
               04768 
16A4 04769 asm_interrupt_handler:
16A4 0011      04770         retfie  FAST
               04771 
16A6 04772 caml_interrupt_handler:
16A6 EF93 F009 04773         goto    _THE_BIG_LOOP
               04774 
               04775 #endif
               04776 
               04777 
               04778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04779 ;;;;;;;;                                   ;;;;;;;;
               04780 ;;;;;;;;               SLEEP               ;;;;;;;;
               04781 ;;;;;;;;                                   ;;;;;;;;
               04782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04783 
               04784 #ifdef caml_useprim_caml_sleep_millis
               04785 caml_sleep_millis:
               04786         rlcf    ACCUH, W        ; ACCU < 0 ?
               04787         bc      caml_sleep_millis_end
               04788         rrcf    ACCUH, F        ; ACCU <- val_int(ACCU)
               04789         rrcf    ACCUL, F
               04790         movf    ACCUL, W        ; ACCU = 0 ?
               04791         iorwf   ACCUH, W
               04792         bz      caml_sleep_millis_end
               04793         incf    ACCUH, F
               04794         movlw   .234
               04795         movwf   TMP_REG_1
               04796         movlw   .13
               04797         movwf   TMP_REG_2
               04798 caml_sleep_millis_loop:
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04799         decfsz  TMP_REG_1, F
               04800         bra     caml_sleep_millis_loop
               04801         decfsz  TMP_REG_2, F
               04802         bra     caml_sleep_millis_loop
               04803         movlw   .250
               04804         movwf   TMP_REG_1
               04805         movlw   .13
               04806         movwf   TMP_REG_2
               04807         decfsz  ACCUL, F
               04808         incf    ACCUH, F
               04809         decfsz  ACCUH, F
               04810         bra     caml_sleep_millis_loop
               04811 caml_sleep_millis_end:
               04812         return
               04813 #endif
               04814         
               04815 
               04816 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04817 ;;;;;;;;                                   ;;;;;;;;
               04818 ;;;;;;;;               TOOL                ;;;;;;;;
               04819 ;;;;;;;;                                   ;;;;;;;;
               04820 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04821 
               04822 #ifdef caml_useprim_caml_raise_ia
               04823 caml_raise_ia:
               04824         M_WRITE_BYTE 0x0                ; write exn tag
               04825         M_WRITE_BYTE 0x2                ; write exn size
               04826         movff   FSR1L, ACCUL            ; ACCU <- exn
               04827         movff   FSR1H, ACCUH
               04828         movlw   (0x2 * INVALID_ARG_IND + 0x1) ; write INVALID_ARG_IND
               04829         movwf   POSTINC1
               04830         clrf    POSTINC1
               04831         movff   TMP_REG_1, POSTINC1     ; write string addr
               04832         movff   TMP_REG_2, POSTINC1
               04833         goto    caml_extern_raise
               04834 #endif
               04835 
               04836 
               04837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04838 ;;;;;;;;                                   ;;;;;;;;
               04839 ;;;;;;;;           ALPHA SERIAL            ;;;;;;;;
               04840 ;;;;;;;;                                   ;;;;;;;;
               04841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               04842 
16AA 04843 #define SERIAL_TICTAC   IPR1,RCIP
               04844 
  0000006B     04845 SERIAL_HASH_INITL       EQU     0x6B
  00000039     04846 SERIAL_HASH_INITH       EQU     0x39
  000000A6     04847 SERIAL_FLAG_BASE        EQU     0xA6
  000000A6     04848 SERIAL_NEWTIC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'00000000')
  00000059     04849 SERIAL_NEWTAC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'11111111')
  000000A9     04850 SERIAL_ENDTIC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'00001111')
  00000056     04851 SERIAL_ENDTAC_FLAG      EQU     (SERIAL_FLAG_BASE ^ B'11110000')
  0000009A     04852 SERIAL_RECEIVE_FLAG     EQU     (SERIAL_FLAG_BASE ^ B'00111100')
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000065     04853 SERIAL_ERROR_FLAG       EQU     (SERIAL_FLAG_BASE ^ B'11000011')
  00000095     04854 SERIAL_GET_FLAG         EQU     (SERIAL_FLAG_BASE ^ B'00110011')
  0000006A     04855 SERIAL_OOM_FLAG         EQU     (SERIAL_FLAG_BASE ^ B'11001100')
  000000FF     04856 SERIAL_ESC_FLAG         EQU     0xFF
  00000003     04857 SERIAL_RES1_FLAG        EQU     0x03
  0000001A     04858 SERIAL_RES2_FLAG        EQU     0x1A
  0000001C     04859 SERIAL_RES3_FLAG        EQU     0x1C
               04860 
               04861 #ifdef caml_useprim_caml_serial_open_channel
               04862 caml_serial_open_channel:
               04863         movlw   B'00100100'
               04864         movwf   TXSTA
               04865         movlw   B'10010000'
               04866         movwf   RCSTA
               04867         bcf     SERIAL_TICTAC
               04868         rrcf    ACCUH, W        ; STATUS.C ignored
               04869         rrcf    ACCUL, W
               04870         movwf   SPBRG
               04871         btfsc   ACCUH, 1
               04872         bsf     TXSTA, BRGH
               04873         return
               04874 #endif
               04875         
               04876 #ifdef caml_useprim_caml_serial_receive
               04877 #ifndef caml_useprim_caml_serial_receive_byte
               04878 #define caml_useprim_caml_serial_receive_byte
               04879 #endif
               04880 #ifndef caml_useprim_caml_serial_send_byte
               04881 #define caml_useprim_caml_serial_send_byte
               04882 #endif
               04883 #ifndef caml_useprim_caml_serial_receive_flag
               04884 #define caml_useprim_caml_serial_receive_flag
               04885 #endif
               04886 #ifndef caml_useprim_caml_serial_send_flag
               04887 #define caml_useprim_caml_serial_send_flag
               04888 #endif
               04889 #ifndef caml_useprim_caml_compute_hash_init
               04890 #define caml_useprim_caml_compute_hash_init
               04891 #endif
               04892 #ifndef caml_useprim_caml_compute_hash_step
               04893 #define caml_useprim_caml_compute_hash_step
               04894 #endif
               04895 caml_serial_receive:
               04896         rcall   caml_serial_receive_flag        ; receive flag
               04897         xorlw   SERIAL_NEWTIC_FLAG              ; NEWTIC ?
               04898         bnz     caml_serial_receive_notnewtic
               04899         btfsc   SERIAL_TICTAC                   ; TIC ?
               04900         bra     caml_serial_receive_nottic
               04901         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04902         rcall   caml_serial_send_flag
               04903         bra     caml_serial_receive_start
               04904 caml_serial_receive_nottic:
               04905         movlw   SERIAL_ENDTIC_FLAG              ; send ENDTIC
               04906         rcall   caml_serial_send_flag
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04907         bra     caml_serial_receive
               04908 caml_serial_receive_notnewtic:
               04909         xorlw   (SERIAL_NEWTIC_FLAG ^ SERIAL_NEWTAC_FLAG) ; NEWTAC ?
               04910         bnz     caml_serial_receive_notnewtac
               04911         btfss   SERIAL_TICTAC                   ; TAC ?
               04912         bra     caml_serial_receive_nottac
               04913         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04914         rcall   caml_serial_send_flag
               04915         bra     caml_serial_receive_start
               04916 caml_serial_receive_nottac:
               04917         movlw   SERIAL_ENDTAC_FLAG
               04918         rcall   caml_serial_send_flag
               04919         bra     caml_serial_receive
               04920 caml_serial_receive_notnewtac:
               04921         xorlw   (SERIAL_NEWTAC_FLAG ^ SERIAL_ENDTIC_FLAG) ; ENDTIC ?
               04922         bz      caml_serial_receive_nottic
               04923         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC ?
               04924         bz      caml_serial_receive_nottac
               04925         xorlw   (SERIAL_ENDTAC_FLAG ^ SERIAL_RECEIVE_FLAG) ; RECEIVE ?
               04926         bnz     caml_serial_receive
               04927         movlw   SERIAL_RECEIVE_FLAG             ; send RECEIVE
               04928         rcall   caml_serial_send_flag
               04929         bra     caml_serial_receive
               04930 
               04931 caml_serial_receive_start:
               04932         rcall   caml_compute_hash_init
               04933         rcall   caml_serial_receive_byte        ; receive sizeL
               04934         movwf   ACCUL                           ; ACCUL <- sizeL or accuL
               04935         rcall   caml_compute_hash_step
               04936         rcall   caml_serial_receive_byte        ; receive sizeH
               04937         movwf   ACCUH                           ; ACCUH <- sizeH or accuH
               04938         rcall   caml_compute_hash_step
               04939         rcall   caml_serial_receive_byte        ; receive HASH
               04940         movwf   TMP_REG_6
               04941         rcall   caml_serial_receive_byte
               04942         cpfseq  TMP_REG_3                       ; check HASH
               04943         bra     caml_serial_receive
               04944         movf    TMP_REG_6, W
               04945         cpfseq  TMP_REG_2
               04946         bra     caml_serial_receive
               04947         btfsc   ACCUL, 0
               04948         bra     caml_serial_receive_end
               04949         movlw   low ATOM0_ADR
               04950         cpfseq  ACCUL
               04951         bra     caml_serial_receive_check_oom
               04952         movlw   high ATOM0_ADR
               04953         xorwf   ACCUH, W
               04954         bz      caml_serial_receive_end
               04955 
               04956 caml_serial_receive_check_oom:
               04957         movf    ACCUL, W
               04958         movwf   TMP_REG_A                       ; TMP_REG_A <- sizeL
               04959         addwf   FSR1L, W                        ; FSR1L + sizeL
               04960         movf    ACCUH, W
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               04961         movwf   TMP_REG_B                       ; TMP_REG_B <- sizeH
               04962         addwfc  FSR1H, W                        ; FSR1H + sizeH + carry
               04963         cpfslt  CUR_HEAP_END                    ; check heap overflow
               04964         bra     caml_serial_receive_heap        ; ok
               04965         movlw   0x1                             ; ACCUL <- ()
               04966         movwf   ACCUL
               04967         clrf    ACCUH
               04968         call    caml_gc_exec                    ; run GC
               04969         movf    TMP_REG_A, W                    ; check heap overflow
               04970         addwf   FSR1L, W
               04971         movf    TMP_REG_B, W
               04972         addwfc  FSR1H, W
               04973         cpfslt  CUR_HEAP_END
               04974         bra     caml_serial_receive_heap        ; ok
               04975         bra     caml_serial_receive_oom         ; overflow
               04976 
               04977 caml_serial_receive_heap:
               04978         movlw   SERIAL_GET_FLAG
               04979         rcall   caml_serial_send_flag
               04980         rcall   caml_compute_hash_init
               04981         movf    FSR1L, W                        ; send FSR1
               04982         rcall   caml_serial_send_byte
               04983         rcall   caml_compute_hash_step
               04984         movf    FSR1H, W
               04985         rcall   caml_serial_send_byte
               04986         rcall   caml_compute_hash_step
               04987         movf    TMP_REG_2, W                    ; send HASH
               04988         rcall   caml_serial_send_byte
               04989         movf    TMP_REG_3, W
               04990         rcall   caml_serial_send_byte
               04991         
               04992 caml_serial_receive_data:
               04993         bcf     STATUS, C                       ; TMP_REG_5:4 <- SIZE / 2
               04994         rrcf    TMP_REG_B, W
               04995         movwf   TMP_REG_5
               04996         rrcf    TMP_REG_A, W
               04997         movwf   TMP_REG_4
               04998         incf    TMP_REG_5, F                    ; TMP_REG_5 ++
               04999         addfsr  FSR1, 0x2                       ; ACCU <- @ first block
               05000         movff   FSR1L, ACCUL
               05001         movff   FSR1H, ACCUH
               05002         subfsr  FSR1, 0x2
               05003         rcall   caml_compute_hash_init
               05004 
               05005 caml_serial_receive_data_loop:
               05006         rcall   caml_serial_receive_byte        ; fill heap
               05007         movwf   POSTINC1
               05008         rcall   caml_compute_hash_step
               05009         rcall   caml_serial_receive_byte
               05010         movwf   POSTINC1
               05011         rcall   caml_compute_hash_step
               05012         dcfsnz  TMP_REG_4, F
               05013         decfsz  TMP_REG_5, F
               05014         bra     caml_serial_receive_data_loop   ; loop
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05015         rcall   caml_serial_receive_byte        ; receive HASH
               05016         movwf   TMP_REG_6
               05017         rcall   caml_serial_receive_byte
               05018         cpfseq  TMP_REG_3                       ; check HASH
               05019         bra     caml_serial_receive_data_error
               05020         movf    TMP_REG_6, W
               05021         cpfseq  TMP_REG_2
               05022         bra     caml_serial_receive_data_error
               05023 
               05024 caml_serial_receive_end:
               05025         movlw   SERIAL_ENDTIC_FLAG
               05026         btfsc   SERIAL_TICTAC
               05027         movlw   SERIAL_ENDTAC_FLAG
               05028         btg     SERIAL_TICTAC
               05029         bra     caml_serial_send_flag
               05030 
               05031 caml_serial_receive_oom:
               05032         movlw   SERIAL_OOM_FLAG                 ; send SERIAL_OOM_FLAG
               05033         rcall   caml_serial_send_flag
               05034         bra     caml_serial_receive             ; restart
               05035 
               05036 caml_serial_receive_data_error:
               05037         movf    TMP_REG_A, W                    ; restore FSR1
               05038         subwf   FSR1L, F
               05039         movf    TMP_REG_B, W
               05040         subwfb  FSR1H, F
               05041         bra     caml_serial_receive
               05042 #endif
               05043 
               05044 #ifdef caml_useprim_caml_serial_send
               05045 #ifndef caml_useprim_caml_serial_receive_byte
               05046 #define caml_useprim_caml_serial_receive_byte
               05047 #endif
               05048 #ifndef caml_useprim_caml_serial_send_byte
               05049 #define caml_useprim_caml_serial_send_byte
               05050 #endif
               05051 #ifndef caml_useprim_caml_serial_receive_flag
               05052 #define caml_useprim_caml_serial_receive_flag
               05053 #endif
               05054 #ifndef caml_useprim_caml_serial_send_flag
               05055 #define caml_useprim_caml_serial_send_flag
               05056 #endif
               05057 #ifndef caml_useprim_caml_compute_hash_init
               05058 #define caml_useprim_caml_compute_hash_init
               05059 #endif
               05060 #ifndef caml_useprim_caml_compute_hash_step
               05061 #define caml_useprim_caml_compute_hash_step
               05062 #endif
               05063 
               05064 caml_serial_send:
               05065         movlw   SERIAL_NEWTIC_FLAG              ; send NEW_FLAG
               05066         btfsc   SERIAL_TICTAC
               05067         movlw   SERIAL_NEWTAC_FLAG
               05068         rcall   caml_serial_send_flag
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05069         rcall   caml_serial_receive_flag        ; receive
               05070         xorlw   SERIAL_RECEIVE_FLAG             ; RECEIVE_FLAG ?
               05071         bnz     caml_serial_send_notrec
               05072         rcall   caml_compute_hash_init
               05073         movf    [0x1], W                        ; send stack top
               05074         rcall   caml_serial_send_byte
               05075         rcall   caml_compute_hash_step
               05076         movf    [0x2], W
               05077         rcall   caml_serial_send_byte
               05078         rcall   caml_compute_hash_step
               05079         movf    TMP_REG_2, W                    ; send HASH
               05080         rcall   caml_serial_send_byte
               05081         movf    TMP_REG_3, W
               05082         rcall   caml_serial_send_byte
               05083         bra     caml_serial_send_continue       ; -> continue
               05084 caml_serial_send_notrec:
               05085         xorlw   (SERIAL_RECEIVE_FLAG ^ SERIAL_ENDTIC_FLAG) ; ENDTIC_FLAG ?
               05086         bnz     caml_serial_send_nottic
               05087         btfsc   SERIAL_TICTAC                   ; TICTAC = TIC ?
               05088         bra     caml_serial_send
               05089         movlw   SERIAL_ENDTIC_FLAG              ; send ENDTIC_FLAG
               05090         rcall   caml_serial_send_flag
               05091         bra     caml_serial_send_end            ; -> end
               05092 caml_serial_send_nottic:
               05093         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC_FLAG ?
               05094         bnz     caml_serial_send
               05095         btfss   SERIAL_TICTAC                   ; TICTAC = TAC ?
               05096         bra     caml_serial_send
               05097         movlw   SERIAL_ENDTAC_FLAG              ; send ENDTAC_FLAG
               05098         rcall   caml_serial_send_flag
               05099         bra     caml_serial_send_end            ; -> end
               05100 
               05101 caml_serial_send_block:
               05102         rcall   caml_compute_hash_init
               05103         rcall   caml_serial_receive_byte        ; receive adr
               05104         movwf   FSR0L
               05105         rcall   caml_compute_hash_step
               05106         rcall   caml_serial_receive_byte
               05107         movwf   FSR0H
               05108         rcall   caml_compute_hash_step
               05109         rcall   caml_serial_receive_byte        ; receive HASH
               05110         movwf   TMP_REG_6
               05111         rcall   caml_serial_receive_byte
               05112         cpfseq  TMP_REG_3                       ; check HASH
               05113         bra     caml_serial_send
               05114         movf    TMP_REG_6, W
               05115         cpfseq  TMP_REG_2
               05116         bra     caml_serial_send
               05117 
               05118 caml_serial_send_block_tagsize:
               05119         rcall   caml_compute_hash_init
               05120         subfsr  FSR0, 0x2
               05121         movf    POSTINC0, W                     ; send tag
               05122         rcall   caml_serial_send_byte
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05123         rcall   caml_compute_hash_step
               05124         movf    POSTINC0, W                     ; send size
               05125         movwf   TMP_REG_A                       ; TMP_REG_A <- size
               05126         rcall   caml_serial_send_byte
               05127         rcall   caml_compute_hash_step
               05128         movf    TMP_REG_2, W                    ; send HASH
               05129         rcall   caml_serial_send_byte
               05130         movf    TMP_REG_3, W
               05131         rcall   caml_serial_send_byte
               05132 
               05133 caml_serial_send_block_data_start:
               05134         rcall   caml_compute_hash_init
               05135 
               05136 caml_serial_send_block_data_loop:
               05137         movf    POSTINC0, W                     ; send data
               05138         rcall   caml_serial_send_byte
               05139         rcall   caml_compute_hash_step
               05140         movf    POSTINC0, W
               05141         rcall   caml_serial_send_byte
               05142         rcall   caml_compute_hash_step
               05143         decfsz  TMP_REG_A, F
               05144         bra     caml_serial_send_block_data_loop
               05145         movf    TMP_REG_2, W                    ; send HASH
               05146         rcall   caml_serial_send_byte
               05147         movf    TMP_REG_3, W
               05148         rcall   caml_serial_send_byte
               05149 
               05150 caml_serial_send_continue:
               05151         rcall   caml_serial_receive_flag        ; receive flag
               05152         xorlw   SERIAL_GET_FLAG                 ; GET_FLAG ?
               05153         bz      caml_serial_send_block
               05154 caml_serial_send_continue_notget:
               05155         xorlw   (SERIAL_GET_FLAG ^ SERIAL_ENDTIC_FLAG)  ; ENDTIC_FLAG ?
               05156         bnz     caml_serial_send_continue_nottic
               05157         btfsc   SERIAL_TICTAC                   ; TICTAC = TIC ?
               05158         bra     caml_serial_send
               05159         movlw   SERIAL_ENDTIC_FLAG
               05160         rcall   caml_serial_send_flag
               05161         bra     caml_serial_send_end
               05162 caml_serial_send_continue_nottic:
               05163         xorlw   (SERIAL_ENDTIC_FLAG ^ SERIAL_ENDTAC_FLAG) ; ENDTAC_FLAG ?
               05164         bnz     caml_serial_send
               05165         btfss   SERIAL_TICTAC                   ; TICTAC = TAC ?
               05166         bra     caml_serial_send
               05167         movlw   SERIAL_ENDTAC_FLAG
               05168         rcall   caml_serial_send_flag
               05169 
               05170 caml_serial_send_end:
               05171         btg     SERIAL_TICTAC                   ; inverse tictac
               05172         return                                  ; ACCU = () already
               05173 #endif
               05174         
               05175 ;;; flags
               05176 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05177 #ifdef caml_useprim_caml_serial_receive_flag
               05178 #ifndef caml_useprim_caml_serial_receive_byte
               05179 #define caml_useprim_caml_serial_receive_byte
               05180 #endif
               05181 caml_serial_receive_flag:
               05182         rcall   caml_serial_receive_byte
               05183         movwf   TMP_REG_C
               05184         rcall   caml_serial_receive_byte
               05185         cpfseq  TMP_REG_C
               05186         movlw   SERIAL_ERROR_FLAG
               05187         return
               05188 #endif
               05189 
               05190 #ifdef caml_useprim_caml_serial_send_flag
               05191 #ifndef caml_useprim_caml_serial_send_byte
               05192 #define caml_useprim_caml_serial_send_byte
               05193 #endif
               05194 caml_serial_send_flag:
               05195         rcall   caml_serial_send_byte
               05196         bra     caml_serial_send_byte
               05197 #endif
               05198 
               05199 ;;; routines
               05200 
               05201 #ifdef caml_useprim_caml_serial_receive_byte
               05202 caml_serial_receive_byte:
               05203         btfss   PIR1, RCIF      ; wait buffer full
               05204         bra     caml_serial_receive_byte
               05205         movf    RCREG, W        ; W <- data
               05206         bcf     RCSTA, CREN
               05207         bsf     RCSTA, CREN
               05208         xorlw   SERIAL_ESC_FLAG
               05209         bz      caml_serial_receive_byte_l0
               05210         xorlw   SERIAL_ESC_FLAG
               05211         return
               05212 caml_serial_receive_byte_l0:
               05213         btfss   PIR1, RCIF
               05214         bra     caml_serial_receive_byte_l0
               05215         movf    RCREG, W
               05216         bcf     RCSTA, CREN
               05217         bsf     RCSTA, CREN
               05218         xorlw   SERIAL_ESC_FLAG
               05219         return
               05220 #endif
               05221 
               05222 #ifdef caml_useprim_caml_serial_send_byte
               05223 caml_serial_send_byte:          ; WARNING: do not overwrite W
               05224         movwf   TMP_REG_E
               05225         xorlw   SERIAL_RES1_FLAG
               05226         bz      caml_serial_send_byte_ESC
               05227         xorlw   (SERIAL_RES1_FLAG ^ SERIAL_RES2_FLAG)
               05228         bz      caml_serial_send_byte_ESC
               05229         xorlw   (SERIAL_RES2_FLAG ^ SERIAL_RES3_FLAG)
               05230         bz      caml_serial_send_byte_ESC
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05231         xorlw   (SERIAL_RES3_FLAG ^ SERIAL_ESC_FLAG)
               05232         bz      caml_serial_send_byte_ESC
               05233         movf    TMP_REG_E, W
               05234 caml_serial_send_byte_l0:
               05235         btfss   PIR1, TXIF
               05236         bra     caml_serial_send_byte_l0
               05237         movwf   TXREG           ; send DATA (from W)
               05238         return
               05239 caml_serial_send_byte_ESC:
               05240         movlw   SERIAL_ESC_FLAG
               05241 caml_serial_send_byte_ESC_l0:
               05242         btfss   PIR1, TXIF
               05243         bra     caml_serial_send_byte_ESC_l0
               05244         movwf   TXREG
               05245         xorwf   TMP_REG_E, W
               05246 caml_serial_send_byte_ESC_l1:
               05247         btfss   PIR1, TXIF
               05248         bra     caml_serial_send_byte_ESC_l1
               05249         movwf   TXREG
               05250         movf    TMP_REG_E, W
               05251         return
               05252 #endif
               05253 
               05254 ;;; HASH
               05255 
               05256 #ifdef caml_useprim_caml_compute_hash_init
               05257 caml_compute_hash_init:
               05258         movlw   SERIAL_HASH_INITL        ; TMP_REG_3:2 <- magic
               05259         movwf   TMP_REG_2
               05260         movlw   SERIAL_HASH_INITH
               05261         movwf   TMP_REG_3
               05262         return
               05263 #endif
               05264 
               05265 #ifdef caml_useprim_caml_compute_hash_step
               05266 caml_compute_hash_step:
               05267         movwf   TMP_REG_1               ; TMP_REG_1 <- X
               05268         movf    TMP_REG_2, W            ; TMP_REG_2 <- TMP_REG_2 * TMP_REG_3
               05269         mulwf   TMP_REG_3
               05270         movf    PRODL, W
               05271         movwf   TMP_REG_2
               05272         xorwf   TMP_REG_3, F            ; TMP_REG_3 <- TMP_REG_2 ^ TMP_REG_3
               05273         movf    TMP_REG_1, W
               05274         xorwf   TMP_REG_2, F            ; TMP_REG_2 <- TMP_REG_2 ^ X
               05275         xorwf   TMP_REG_3, F            ; TMP_REG_3 <- TMP_REG_3 ^ X
               05276         return
               05277 #endif
               05278 
               05279 
               05280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05281 ;;;;;;;;                                   ;;;;;;;;
               05282 ;;;;;;;;              EEPROM               ;;;;;;;;
               05283 ;;;;;;;;                                   ;;;;;;;;
               05284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05285 
               05286 #ifdef caml_useprim_caml_eeprom_get_size
               05287 caml_eeprom_get_size:
               05288         movlw   0xFF                    ; search for unimplemented bits of EEADR
               05289         movwf   EEADR
               05290         movwf   EEADRH
               05291         movff   EEADR, ACCUL
               05292         movff   EEADRH, ACCUH
               05293         infsnz  ACCUL, F
               05294         incf    ACCUH, F
               05295         bsf     STATUS, C
               05296         rlcf    ACCUL, F
               05297         rlcf    ACCUH, F
               05298         return
               05299 #endif
               05300 
               05301 #ifdef caml_useprim_caml_eeprom_read
               05302 caml_eeprom_read:
               05303         bcf     STATUS, C       ; EEADRH:EEADR <- Long_val(ACCU)
               05304         rrcf    ACCUH, W
               05305         movwf   EEADRH
               05306         rrcf    ACCUL, W
               05307         movwf   EEADR
               05308         bcf     EECON1, EEPGD   ; Point to DATA memory
               05309         bcf     EECON1, CFGS    ; Access EEPROM
               05310         bsf     EECON1, RD      ; EEPROM Read
               05311         clrf    ACCUH           ; ACCU <- Val_long(EEDATA)
               05312         bsf     STATUS, C
               05313         rlcf    EEDATA, W
               05314         movwf   ACCUL
               05315         rlcf    ACCUH, F
               05316         return
               05317 #endif
               05318 
               05319 #ifdef caml_useprim_caml_eeprom_write
               05320 caml_eeprom_write:
               05321         bcf     STATUS, C       ; EEADRH:EEADR <- address
               05322         rrcf    ACCUH, W
               05323         movwf   EEADRH
               05324         rrcf    ACCUL, W
               05325         movwf   EEADR
               05326         rrcf    [0x2], W        ; STATUS.C ignored
               05327         rrcf    [0x1], W        ; EEDATA <- value
               05328         movwf   EEDATA
               05329         movwf   TMP_REG_2       ; TMP_REG_2 <- value
               05330         bcf     EECON1, EEPGD   ; Point to DATA memory
               05331         bcf     EECON1, CFGS    ; Access EEPROM
               05332         bsf     EECON1, WREN    ; Enable writes
               05333         bcf     TMP_REG_1, 0    ; TMP_REG_1.0 <- INTCON.GIE
               05334         btfsc   INTCON, GIE
               05335         bsf     TMP_REG_1, 0
               05336         bcf     INTCON, GIE     ; Disable Interrupts
               05337         movlw   0x55            ; Write init sequence
               05338         movwf   EECON2
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05339         movlw   0xAA
               05340         movwf   EECON2
               05341         bsf     EECON1, WR      ; Begin write
               05342 caml_eeprom_write_loop:
               05343         btfsc   EECON1, WR      ; Wait write complete
               05344         bra     caml_eeprom_write_loop
               05345         btfsc   TMP_REG_1, 0    ; Restore INTCON.GIE
               05346         bsf     INTCON, GIE
               05347         btfsc   EECON1, WRERR
               05348         bra     caml_eeprom_write_error
               05349         incf    EEDATA, F
               05350         bcf     EECON1, WREN    ; Disable writes
               05351         bsf     EECON1, RD      ; Read
               05352         movf    TMP_REG_2, W
               05353         cpfseq  EEDATA, W
               05354         bra     caml_eeprom_write_error
               05355         M_CONST 0               ; Return ()
               05356         return
               05357 caml_eeprom_write_error:
               05358         M_CHECK_UNFULL_HEAP 0xA         ; check allocation of string and exn
               05359         M_WRITE_BYTE STRING_TAG         ; write string tag
               05360         M_WRITE_BYTE 0x7                ; write string size
               05361         movff   FSR1L, TMP_REG_1        ; mem string addr
               05362         movff   FSR1H, TMP_REG_2
               05363         M_WRITE_BYTE 'E'                ; write string content
               05364         M_WRITE_BYTE 'e'
               05365         M_WRITE_BYTE 'p'
               05366         M_WRITE_BYTE 'r'
               05367         M_WRITE_BYTE 'o'
               05368         M_WRITE_BYTE 'm'
               05369         M_WRITE_BYTE '.'
               05370         M_WRITE_BYTE 'w'
               05371         M_WRITE_BYTE 'r'
               05372         M_WRITE_BYTE 'i'
               05373         M_WRITE_BYTE 't'
               05374         M_WRITE_BYTE 'e'
               05375         M_WRITE_BYTE 0x0                ; write string \0\1
               05376         M_WRITE_BYTE 0x1
               05377         M_WRITE_BYTE 0x0                ; write exn tag
               05378         M_WRITE_BYTE 0x2                ; write exn size
               05379         movff   FSR1L, ACCUL            ; ACCU <- exn
               05380         movff   FSR1H, ACCUH
               05381         movlw   (FAILURE_IND * 0x2 + 0x1) ; write FAILURE_IND
               05382         movwf   POSTINC1
               05383         clrf    POSTINC1
               05384         movff   TMP_REG_1, POSTINC1     ; write string addr
               05385         movff   TMP_REG_2, POSTINC1
               05386         goto    caml_extern_raise
               05387 #endif
               05388 
               05389 #ifdef caml_useprim_caml_eeprom_refresh
               05390 caml_eeprom_refresh:
               05391         clrf    EEADR           ; Clear address
               05392         clrf    EEADRH
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05393         bcf     EECON1, CFGS    ; Set for memory
               05394         bcf     EECON1, EEPGD   ; Set for Data EEPROM
               05395         bcf     TMP_REG_1, 0    ; TMP_REG_1.0 <- INTCON.GIE
               05396         btfsc   INTCON, GIE
               05397         bsf     TMP_REG_1, 0
               05398         bcf     INTCON, GIE     ; Disable interrupts
               05399         bsf     EECON1, WREN    ; Enable writes
               05400 caml_eeprom_refresh_loop:
               05401         bsf     EECON1, RD      ; Read current address
               05402         movlw   0x55            ; Write init sequence
               05403         movwf   EECON2
               05404         movlw   0xAA
               05405         movwf   EECON2
               05406         bsf     EECON1, WR      ; Set WR bit to begin write
               05407 caml_eeprom_refresh_subloop:
               05408         btfsc   EECON1, WR
               05409         bra     caml_eeprom_refresh_subloop
               05410         incfsz  EEADR, F        ; Loop
               05411         bra     caml_eeprom_refresh_loop
               05412         incfsz  EEADRH, F
               05413         bra     caml_eeprom_refresh_loop
               05414         bcf     EECON1, WREN    ; Disable writes
               05415         btfsc   TMP_REG_1, 0
               05416         bsf     INTCON, GIE
               05417         return                  ; ACCU = () already
               05418 #endif
               05419 
               05420 
               05421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05422 ;;;;;;;;                                   ;;;;;;;;
               05423 ;;;;;;;;              FLOATS               ;;;;;;;;
               05424 ;;;;;;;;                                   ;;;;;;;;
               05425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               05426 
               05427 M_ALLOC_FLOAT macro
               05428                 M_CHECK_UNFULL_HEAP 0x2
               05429                 movlw   DOUBLE_TAG              ; write tag
               05430                 movwf   POSTINC1
               05431                 movlw   0x2                     ; write size
               05432                 movwf   POSTINC1
               05433         endm
               05434         
               05435 #ifdef caml_useprim_caml_neg_float
               05436 caml_neg_float:
               05437         M_ALLOC_FLOAT
               05438         movff   ACCUL, FSR0L
               05439         movff   ACCUH, FSR0H
               05440         movff   FSR1L, ACCUL            ; ACCU <- @result
               05441         movff   FSR1H, ACCUH
               05442         movff   POSTINC0, POSTINC1
               05443         movff   POSTINC0, POSTINC1
               05444         movf    POSTINC0, W
               05445         xorlw   0x80
               05446         movwf   POSTINC1
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05447         movff   POSTINC0, POSTINC1
               05448         return
               05449 #endif
               05450 
               05451 #ifdef caml_useprim_caml_abs_float
               05452 caml_abs_float:
               05453         M_ALLOC_FLOAT
               05454         movff   ACCUL, FSR0L
               05455         movff   ACCUH, FSR0H
               05456         movff   FSR1L, ACCUL            ; ACCU <- @result
               05457         movff   FSR1H, ACCUH
               05458         movff   POSTINC0, POSTINC1
               05459         movff   POSTINC0, POSTINC1
               05460         movf    POSTINC0, W
               05461         andlw   0x7F
               05462         movwf   POSTINC1
               05463         movff   POSTINC0, POSTINC1
               05464         return
               05465 #endif
               05466 
               05467 #ifdef caml_useprim_caml_float_of_int
               05468 #ifndef caml_useprim_caml_float_operation_finalize
               05469 #define caml_useprim_caml_float_operation_finalize
               05470 #endif
               05471 #ifndef caml_useprim_FLO2432
               05472 #define caml_useprim_FLO2432
               05473 #endif
               05474 caml_float_of_int:
               05475         rlcf    ACCUH, W        ; ignore STATUS.C
               05476         rrcf    ACCUH, W
               05477         movwf   AARGB1
               05478         rrcf    ACCUL, W
               05479         movwf   AARGB2
               05480         clrf    AARGB0
               05481         btfsc   AARGB1, 7
               05482         setf    AARGB0
               05483         M_ALLOC_FLOAT
               05484         movff   FSR1L, ACCUL    ; ACCU <- @result
               05485         movff   FSR1H, ACCUH
               05486         rcall   FLO2432
               05487         bra     caml_float_operation_finalize
               05488 #endif
               05489 
               05490 #ifdef caml_useprim_caml_int_of_float
               05491 #ifndef caml_useprim_INT3224
               05492 #define caml_useprim_INT3224
               05493 #endif
               05494 caml_int_of_float:
               05495         movff   ACCUL, FSR0L
               05496         movff   ACCUH, FSR0H
               05497         movff   POSTINC0, AARGB2
               05498         movff   POSTINC0, AARGB1
               05499         movff   POSTINC0, AARGB0
               05500         movff   INDF0, AEXP
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05501         rcall   INT3224
               05502         bsf     STATUS, C
               05503         rlcf    AARGB2, W
               05504         movwf   ACCUL
               05505         rlcf    AARGB1, W
               05506         movwf   ACCUH
               05507         return
               05508 #endif
               05509         
               05510 #ifdef caml_useprim_caml_add_float
               05511 #ifndef caml_useprim_caml_float_operation_initialize
               05512 #define caml_useprim_caml_float_operation_initialize
               05513 #endif
               05514 #ifndef caml_useprim_FPA32
               05515 #define caml_useprim_FPA32
               05516 #endif
               05517 #ifndef caml_useprim_caml_float_operation_finalize
               05518 #define caml_useprim_caml_float_operation_finalize
               05519 #endif
               05520 caml_add_float:
               05521         rcall   caml_float_operation_initialize
               05522         rcall   FPA32
               05523         bra     caml_float_operation_finalize
               05524 #endif
               05525 
               05526 #ifdef caml_useprim_caml_sub_float
               05527 #ifndef caml_useprim_caml_float_operation_initialize
               05528 #define caml_useprim_caml_float_operation_initialize
               05529 #endif
               05530 #ifndef caml_useprim_FPS32
               05531 #define caml_useprim_FPS32
               05532 #endif
               05533 #ifndef caml_useprim_caml_float_operation_finalize
               05534 #define caml_useprim_caml_float_operation_finalize
               05535 #endif
               05536 caml_sub_float:
               05537         rcall   caml_float_operation_initialize
               05538         rcall   FPS32
               05539         bra     caml_float_operation_finalize
               05540 #endif
               05541 
               05542 #ifdef caml_useprim_caml_mul_float
               05543 #ifndef caml_useprim_caml_float_operation_initialize
               05544 #define caml_useprim_caml_float_operation_initialize
               05545 #endif
               05546 #ifndef caml_useprim_FPM32
               05547 #define caml_useprim_FPM32
               05548 #endif
               05549 #ifndef caml_useprim_caml_float_operation_finalize
               05550 #define caml_useprim_caml_float_operation_finalize
               05551 #endif
               05552 caml_mul_float:
               05553         rcall   caml_float_operation_initialize
               05554         rcall   FPM32
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05555         bra     caml_float_operation_finalize
               05556 #endif
               05557 
               05558 #ifdef caml_useprim_caml_div_float
               05559 #ifndef caml_useprim_caml_float_operation_initialize
               05560 #define caml_useprim_caml_float_operation_initialize
               05561 #endif
               05562 #ifndef caml_useprim_FPD32
               05563 #define caml_useprim_FPD32
               05564 #endif
               05565 #ifndef caml_useprim_caml_float_operation_finalize
               05566 #define caml_useprim_caml_float_operation_finalize
               05567 #endif
               05568 caml_div_float:
               05569         rcall   caml_float_operation_initialize
               05570         rcall   FPD32
               05571         bra     caml_float_operation_finalize
               05572 #endif
               05573 
               05574 #ifdef caml_useprim_caml_float_operation_initialize
               05575 caml_float_operation_initialize:
               05576         M_ALLOC_FLOAT
               05577         movff   ACCUL, FSR0L
               05578         movff   ACCUH, FSR0H
               05579         movff   FSR1L, ACCUL            ; ACCU <- @result
               05580         movff   FSR1H, ACCUH
               05581         movff   POSTINC0, AARGB2
               05582         movff   POSTINC0, AARGB1
               05583         movff   POSTINC0, AARGB0
               05584         movff   INDF0, AEXP
               05585         movsf   [0x1], FSR0L
               05586         movsf   [0x2], FSR0H
               05587         movff   POSTINC0, BARGB2
               05588         movff   POSTINC0, BARGB1
               05589         movff   POSTINC0, BARGB0
               05590         movff   INDF0, BEXP
               05591         return
               05592 #endif
               05593 
               05594 #ifdef caml_useprim_caml_float_operation_finalize
               05595 caml_float_operation_finalize:
               05596         movff   AARGB2, POSTINC1
               05597         movff   AARGB1, POSTINC1
               05598         movff   AARGB0, POSTINC1
               05599         movff   AEXP, POSTINC1
               05600         return
               05601 #endif
               05602 
               05603 #ifdef caml_useprim_FPA32
               05604 #ifndef caml_use_float_library
               05605 #define caml_use_float_library
               05606 #endif
               05607 #endif
               05608 #ifdef caml_useprim_FPS32
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05609 #ifndef caml_use_float_library
               05610 #define caml_use_float_library
               05611 #endif
               05612 #endif
               05613 #ifdef caml_useprim_FPD32
               05614 #ifndef caml_use_float_library
               05615 #define caml_use_float_library
               05616 #endif
               05617 #endif
               05618 #ifdef caml_useprim_FPM32
               05619 #ifndef caml_use_float_library
               05620 #define caml_use_float_library
               05621 #endif
               05622 #endif
               05623 #ifdef caml_useprim_INT3232
               05624 #ifndef caml_use_float_library
               05625 #define caml_use_float_library
               05626 #endif
               05627 #endif
               05628 #ifdef caml_useprim_INT3224
               05629 #ifndef caml_use_float_library
               05630 #define caml_use_float_library
               05631 #endif
               05632 #endif
               05633 #ifdef caml_useprim_NRM4032
               05634 #ifndef caml_use_float_library
               05635 #define caml_use_float_library
               05636 #endif
               05637 #endif
               05638 #ifdef caml_useprim_FLO3232
               05639 #ifndef caml_use_float_library
               05640 #define caml_use_float_library
               05641 #endif
               05642 #endif
               05643 #ifdef caml_useprim_NRM3232
               05644 #ifndef caml_use_float_library
               05645 #define caml_use_float_library
               05646 #endif
               05647 #endif
               05648 #ifdef caml_useprim_FLO2432
               05649 #ifndef caml_use_float_library
               05650 #define caml_use_float_library
               05651 #endif
               05652 #endif
               05653 
               05654 #ifdef caml_use_float_library
               05655 
               05656 #ifdef caml_useprim_FPS32
               05657 #ifndef caml_useprim_FPA32
               05658 #define caml_useprim_FPA32
               05659 #endif
               05660 #endif
               05661 
               05662 #ifdef caml_useprim_FPA32
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05663 #ifndef caml_useprim_NRM4032
               05664 #define caml_useprim_NRM4032
               05665 #endif
               05666 #ifndef caml_useprim_FPM32
               05667 #define caml_useprim_FPM32
               05668 #endif
               05669 #endif
               05670         
               05671 #ifdef caml_useprim_FLO2432
               05672 #ifndef caml_useprim_NRM3232
               05673 #define caml_useprim_NRM3232
               05674 #endif
               05675 #endif
               05676 
               05677 #ifdef caml_useprim_FLO3232
               05678 #ifndef caml_useprim_NRM4032
               05679 #define caml_useprim_NRM4032
               05680 #endif
               05681 #endif
               05682 
               05683 #ifdef caml_useprim_NRM4032
               05684 #ifndef caml_useprim_SETFUN32
               05685 #define caml_useprim_SETFUN32
               05686 #endif
               05687 #ifndef caml_useprim_NRM3232
               05688 #define caml_useprim_NRM3232
               05689 #endif
               05690 #ifndef caml_useprim_FPM32
               05691 #define caml_useprim_FPM32
               05692 #endif
               05693 #endif
               05694 
               05695 #ifdef caml_useprim_NRM3232
               05696 #ifndef caml_useprim_SETFUN32
               05697 #define caml_useprim_SETFUN32
               05698 #endif
               05699 #endif
               05700         
               05701 #ifdef caml_useprim_FPD32
               05702 #ifndef caml_useprim_SETFUN32
               05703 #define caml_useprim_SETFUN32
               05704 #endif
               05705 #ifndef caml_useprim_FPM32
               05706 #define caml_useprim_FPM32
               05707 #endif
               05708 #endif
               05709 
               05710 #ifdef caml_useprim_FPM32
               05711 #ifndef caml_useprim_SETFUN32
               05712 #define caml_useprim_SETFUN32
               05713 #endif
               05714 #endif
               05715 
               05716 ;-------------------------------------------;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05717 ;                                           ;
               05718 ;   File MATH16.INC (modified) from AN575   ;
               05719 ;                                           ;
               05720 ;-------------------------------------------;
               05721         
               05722 ;;      STATUS bit definitions
               05723 
               05724 #define         _C      STATUS,0
               05725 #define         _Z      STATUS,2
               05726 
               05727 ;;      define assembler constants
               05728 
               05729 B0              equ     0
               05730 B1              equ     1
               05731 B2              equ     2
               05732 B3              equ     3
               05733 B4              equ     4
               05734 B5              equ     5
               05735 B6              equ     6
               05736 B7              equ     7
               05737 
               05738 MSB             equ     7
               05739 LSB             equ     0
               05740 
               05741 ;;      general register variables
               05742 
               05743 ACCB7           equ     GC_TMP_REG_1
               05744 ACCB6           equ     GC_TMP_REG_2
               05745 ACCB5           equ     GC_TMP_REG_3
               05746 ACCB4           equ     GC_TMP_REG_4
               05747 ACCB3           equ     GC_TMP_REG_5
               05748 ACCB2           equ     TMP_REG_1
               05749 ACCB1           equ     TMP_REG_2
               05750 ACCB0           equ     TMP_REG_3
               05751 ACC             equ     ACCB0        ; most significant byte of contiguous
               05752                                      ; 8 byte accumulator
               05753 SIGN            equ     PRODL        ; save location for sign in MSB
               05754 
               05755 TEMPB3          equ     TMP_REG_A
               05756 TEMPB2          equ     TMP_REG_B
               05757 TEMPB1          equ     TMP_REG_C
               05758 TEMPB0          equ     TMP_REG_D
               05759 TEMP            equ     TEMPB0    ; temporary storage
               05760 
               05761 ;;       binary operation arguments
               05762 
               05763 AARGB7          equ     ACCB7
               05764 AARGB6          equ     ACCB6
               05765 AARGB5          equ     ACCB5
               05766 AARGB4          equ     ACCB4
               05767 AARGB3          equ     ACCB3
               05768 AARGB2          equ     ACCB2
               05769 AARGB1          equ     ACCB1
               05770 AARGB0          equ     ACCB0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05771 AARG            equ     AARGB0       ; most significant byte of argument A
               05772 
               05773 BARGB3          equ     TMP_REG_5
               05774 BARGB2          equ     TMP_REG_6
               05775 BARGB1          equ     TMP_REG_7
               05776 BARGB0          equ     TMP_REG_8
               05777 BARG            equ     BARGB0       ; most significant byte of argument B
               05778 
               05779 ; Note that AARG and ACC reference the same storage locations
               05780 
               05781 ;;      literal constants
               05782 
               05783 EXPBIAS         equ     D'127'
               05784 
               05785 ;;      biased exponents
               05786 
               05787 EXP             equ     TMP_REG_4    ; 8 bit biased exponent
               05788 AEXP            equ     TMP_REG_4    ; 8 bit biased exponent for argument A
               05789 BEXP            equ     TMP_REG_9    ; 8 bit biased exponent for argument B
               05790 
               05791 ;;      floating point library exception flags
               05792 
               05793 FPFLAGS         equ     PRODH ; floating point library exception flags
               05794 IOV             equ     0     ; bit0 = integer overflow flag
               05795 FOV             equ     1     ; bit1 = floating point overflow flag
               05796 FUN             equ     2     ; bit2 = floating point underflow flag
               05797 FDZ             equ     3     ; bit3 = floating point divide by zero flag
               05798 NAN             equ     4     ; bit4 = not-a-number exception flag
               05799 DOM             equ     5     ; bit5 = domain error exception flag
               05800 RND             equ     6     ; bit6 = floating point rounding flag,
               05801                               ; 0 = truncation
               05802                               ; 1 = unbiased rounding to nearest LSB
               05803 SAT             equ     7     ; bit7 = floating point saturate flag,
               05804                               ; 0 = terminate on exception without saturation,
               05805                               ; 1 = terminate on exception with saturation
               05806                               ; to appropriate value
               05807 #endif
               05808 
               05809 ;-----------------------------------------;
               05810 ;                                         ;
               05811 ;   File FP32.A16 (modified) from AN575   ;
               05812 ;                                         ;
               05813 ;-----------------------------------------;
               05814         
               05815 ;       RCS Header $Id: fp32.a16 2.8 1996/10/07 13:50:59 F.J.Testa Exp $
               05816 
               05817 ;       $Revision: 2.8 $
               05818 
               05819 ;       PIC16 32 BIT FLOATING POINT LIBRARY
               05820 ;
               05821 ;       Unary operations: both input and output are in AEXP,AARG
               05822 ;
               05823 ;       Binary operations: input in AEXP,AARG and BEXP,BARG with output in AEXP,AARG
               05824 ;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05825 ;       All routines return WREG = 0x00 for successful completion, and WREG = 0xFF
               05826 ;       for an error condition specified in FPFLAGS.
               05827 ;
               05828 ;       All timings are worst case cycle counts
               05829 ;
               05830 ;         Routine               Function
               05831 ;
               05832 ;       FLO2432         24 bit integer to 32 bit floating point conversion
               05833 ;       FLO32
               05834 ;
               05835 ;               Timing:            RND
               05836 ;                               0       1
               05837 ;
               05838 ;                       0       104     104
               05839 ;                  SAT
               05840 ;                       1       110     110
               05841 ;
               05842 ;       NRM3232   32 bit normalization of unnormalized 32 bit floating point numbers
               05843 ;       NRM32
               05844 ;
               05845 ;               Timing:            RND
               05846 ;                               0       1
               05847 ;
               05848 ;                       0       90      90
               05849 ;                  SAT
               05850 ;                       1       96      96
               05851 ;
               05852 ;
               05853 ;       INT3224         32 bit floating point to 24 bit integer conversion
               05854 ;       INT32
               05855 ;
               05856 ;
               05857 ;               Timing:            RND
               05858 ;                               0       1
               05859 ;
               05860 ;                       0       104      112
               05861 ;                  SAT
               05862 ;                       1       104      114
               05863 ;
               05864 ;       FLO3232 32 bit integer to 32 bit floating point conversion
               05865 ;
               05866 ;               Timing:            RND
               05867 ;                               0       1
               05868 ;
               05869 ;                       0       129     145
               05870 ;                  SAT
               05871 ;                       1       129     152
               05872 ;
               05873 ;       NRM4032 32 bit normalization of unnormalized 40 bit floating point numbers
               05874 ;
               05875 ;               Timing:            RND
               05876 ;                               0       1
               05877 ;
               05878 ;                       0       112     128
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05879 ;                  SAT
               05880 ;                       1       112     135
               05881 ;
               05882 ;
               05883 ;       INT3232         32 bit floating point to 32 bit integer conversion
               05884 ;
               05885 ;
               05886 ;               Timing:            RND
               05887 ;                               0       1
               05888 ;
               05889 ;                       0       130     137
               05890 ;                  SAT
               05891 ;                       1       130     137
               05892 ;
               05893 ;       FPA32           32 bit floating point add
               05894 ;
               05895 ;               Timing:            RND
               05896 ;                               0       1
               05897 ;
               05898 ;                       0       251     265
               05899 ;                  SAT
               05900 ;                       1       251     271
               05901 ;
               05902 ;       FPS32           32 bit floating point subtract
               05903 ;
               05904 ;               Timing:            RND
               05905 ;                               0       1
               05906 ;
               05907 ;                       0       253     267
               05908 ;                  SAT
               05909 ;                       1       253     273
               05910 ;
               05911 ;       FPM32           32 bit floating point multiply
               05912 ;
               05913 ;               Timing:            RND
               05914 ;                               0       1
               05915 ;
               05916 ;                       0       574     588
               05917 ;                  SAT
               05918 ;                       1       574     591
               05919 ;
               05920 ;       FPD32           32 bit floating point divide
               05921 ;
               05922 ;               Timing:            RND
               05923 ;                               0       1
               05924 ;
               05925 ;                       0       932     968
               05926 ;                  SAT
               05927 ;                       1       932     971
               05928 ;
               05929 ;
               05930 ;**********************************************************************************************
               05931 ;**********************************************************************************************
               05932 ;
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05933 ;       32 bit floating point representation
               05934 ;
               05935 ;       EXPONENT        8 bit biased exponent
               05936 ;
               05937 ;                       It is important to note that the use of biased exponents produces
               05938 ;                       a unique representation of a floating point 0, given by
               05939 ;                       EXP = HIGHBYTE = MIDBYTE = LOWBYTE = 0x00, with 0 being
               05940 ;                       the only number with EXP = 0.
               05941 ;
               05942 ;       HIGHBYTE        8 bit most significant byte of fraction in sign-magnitude representation,
               05943 ;                       with SIGN = MSB, implicit MSB = 1 and radix point to the right of MSB
               05944 ;
               05945 ;       MIDBYTE         8 bit middle significant byte of sign-magnitude fraction
               05946 ;
               05947 ;       LOWBYTE         8 bit least significant byte of sign-magnitude fraction
               05948 ;
               05949 ;       EXPONENT        HIGHBYTE        MIDBYTE         LOWBYTE
               05950 ;
               05951 ;       xxxxxxxx        S.xxxxxxx       xxxxxxxx        xxxxxxxx
               05952 ;
               05953 ;                        |
               05954 ;                      RADIX
               05955 ;                      POINT
               05956 ;
               05957 ;
               05958 ;**********************************************************************************************
               05959 ;**********************************************************************************************
               05960 
               05961 ;       Integer to float conversion
               05962 
               05963 ;       Input:  24 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2
               05964 
               05965 ;       Use:    CALL    FLO2432 or      CALL    FLO32
               05966 
               05967 ;       Output: 32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               05968 
               05969 ;       Result: AARG  <--  FLOAT( AARG )
               05970 
               05971 ;       Max Timing:     14+90 = 104 clks                SAT = 0
               05972 ;                       14+96 = 110 clks                SAT = 1
               05973 
               05974 ;       Min Timing:     6+28 = 34 clks                  AARG = 0
               05975 ;                       6+18 = 24 clks
               05976 
               05977 ;       PM: 14+38 = 52                                  DM: 7
               05978 
               05979 ;----------------------------------------------------------------------------------------------
               05980 
               05981 #ifdef caml_useprim_FLO2432
               05982 FLO2432
               05983 FLO32           MOVLW           D'23'+EXPBIAS           ; initialize exponent and add bias
               05984                 MOVWF           EXP
               05985                 CLRF            SIGN
               05986                 BTFSS           AARGB0,MSB              ; test sign
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               05987                 BRA             NRM3232
               05988                 COMF            AARGB2,F                ; if < 0, negate and set MSB in SIGN
               05989                 COMF            AARGB1,F
               05990                 COMF            AARGB0,F
               05991                 INCF            AARGB2,F
               05992                 BTFSC           _Z
               05993                 INCF            AARGB1,F
               05994                 BTFSC           _Z
               05995                 INCF            AARGB0,F
               05996                 BSF             SIGN,MSB
               05997 #endif
               05998 
               05999 ;**********************************************************************************************
               06000 
               06001 ;       Normalization routine
               06002 
               06003 ;       Input:  32 bit unnormalized floating point number in AEXP, AARGB0, AARGB1,
               06004 ;               AARGB2, with sign in SIGN,MSB
               06005 
               06006 ;       Use:    CALL    NRM3232 or      CALL    NRM32
               06007 
               06008 ;       Output: 32 bit normalized floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06009 
               06010 ;       Result: AARG  <--  NORMALIZE( AARG )
               06011 
               06012 ;       Max Timing:     21+6+7*8+7 = 90 clks            SAT = 0
               06013 ;                       21+6+7*8+1+12 = 96 clks SAT = 1
               06014 
               06015 ;       Min Timing:     22+6 = 28 clks                  AARG = 0
               06016 ;                       5+9+4 = 18 clks
               06017 
               06018 ;       PM: 38                                          DM: 7
               06019 
               06020 ;----------------------------------------------------------------------------------------------
               06021 
               06022 #ifdef caml_useprim_NRM3232
               06023 NRM3232
               06024 
               06025 NRM32           CLRF            TEMP                    ; clear exponent decrement
               06026                 MOVF            AARGB0,W                ; test if highbyte=0
               06027                 BTFSS           _Z
               06028                 BRA             NORM3232
               06029                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
               06030                 MOVWF           AARGB0
               06031                 MOVF            AARGB2,W
               06032                 MOVWF           AARGB1
               06033                 CLRF            AARGB2
               06034                 BSF             TEMP,3                  ; increase decrement by 8
               06035 
               06036                 MOVF            AARGB0,W                ; test if highbyte=0
               06037                 BTFSS           _Z
               06038                 BRA             NORM3232
               06039                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
               06040                 MOVWF           AARGB0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06041                 CLRF            AARGB1
               06042                 BCF             TEMP,3                  ; increase decrement by 8
               06043                 BSF             TEMP,4
               06044         
               06045                 MOVF            AARGB0,W                ; if highbyte=0, result=0
               06046                 BTFSC           _Z
               06047                 BRA             RES032
               06048 
               06049 NORM3232        MOVF            TEMP,W
               06050                 SUBWF           EXP,F
               06051                 BTFSS           _Z
               06052                 BTFSS           _C
               06053                 BRA             SETFUN32
               06054 
               06055                 BCF             _C                      ; clear carry bit
               06056 
               06057 NORM3232A       BTFSC           AARGB0,MSB              ; if MSB=1, normalization done
               06058                 BRA             FIXSIGN32
               06059                 RLCF            AARGB2,F                ; otherwise, shift left and 
               06060                 RLCF            AARGB1,F                ; decrement EXP
               06061                 RLCF            AARGB0,F
               06062                 DECFSZ          EXP,F
               06063                 BRA             NORM3232A
               06064 
               06065                 BRA             SETFUN32                ; underflow if EXP=0
               06066 
               06067 FIXSIGN32       BTFSS           SIGN,MSB
               06068                 BCF             AARGB0,MSB              ; clear explicit MSB if positive
               06069                 RETLW           0
               06070 
               06071 RES032          CLRF            AARGB0                  ; result equals zero
               06072                 CLRF            AARGB1
               06073                 CLRF            AARGB2
               06074                 CLRF            AARGB3
               06075                 CLRF            EXP
               06076                 RETLW           0
               06077 #endif
               06078 
               06079 ;**********************************************************************************************
               06080 ;**********************************************************************************************
               06081 
               06082 ;       Integer to float conversion
               06083 
               06084 ;       Input:  32 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2,
               06085 ;               AARGB3
               06086 
               06087 ;       Use:    CALL    FLO3232
               06088 
               06089 ;       Output: 32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06090 
               06091 ;       Result: AARG  <--  FLOAT( AARG )
               06092 
               06093 ;       Max Timing:     17+112 = 129 clks               RND = 0
               06094 ;                       17+128 = 145 clks               RND = 1, SAT = 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06095 ;                       17+135 = 152 clks               RND = 1, SAT = 1
               06096 
               06097 ;       Min Timing:     6+39 = 45 clks                  AARG = 0
               06098 ;                       6+22 = 28 clks
               06099 
               06100 ;       PM: 17+66 = 83                                  DM: 8
               06101 
               06102 ;----------------------------------------------------------------------------------------------
               06103 
               06104 #ifdef caml_useprim_FLO3232
               06105 FLO3232         MOVLW           D'31'+EXPBIAS           ; initialize exponent and add bias
               06106                 MOVWF           EXP
               06107                 CLRF            SIGN
               06108                 BTFSS           AARGB0,MSB              ; test sign
               06109                 BRA             NRM4032
               06110                 COMF            AARGB3,F                ; if < 0, negate and set MSB in SIGN
               06111                 COMF            AARGB2,F
               06112                 COMF            AARGB1,F
               06113                 COMF            AARGB0,F
               06114                 INCF            AARGB3,F
               06115                 BTFSC           _Z
               06116                 INCF            AARGB2,F
               06117                 BTFSC           _Z
               06118                 INCF            AARGB1,F
               06119                 BTFSC           _Z
               06120                 INCF            AARGB0,F
               06121                 BSF             SIGN,MSB
               06122 #endif
               06123 
               06124 ;**********************************************************************************************
               06125 
               06126 ;       Normalization routine
               06127 
               06128 ;       Input:  40 bit unnormalized floating point number in AEXP, AARGB0, AARGB1,
               06129 ;               AARGB2, AARGB3 with sign in SIGN,MSB
               06130 
               06131 ;       Use:    CALL    NRM4032
               06132 
               06133 ;       Output: 32 bit normalized floating point number in AEXP, AARGB0, AARGB1, AARGB2,
               06134 ;               AARGB3
               06135 
               06136 ;       Result: AARG  <--  NORMALIZE( AARG )
               06137 
               06138 ;       Max Timing:     38+6*9+12+8 = 112 clks  RND = 0
               06139 ;                       38+6*9+12+24 = 128 clks RND = 1, SAT = 0
               06140 ;                       38+6*9+12+31 = 135 clks RND = 1, SAT = 1
               06141 
               06142 ;       Min Timing:     33+6 = 39 clks                  AARG = 0
               06143 ;                       5+9+8 = 22 clks
               06144 
               06145 ;       PM: 66                                          DM: 8
               06146 
               06147 ;----------------------------------------------------------------------------------------------
               06148 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06149 #ifdef caml_useprim_NRM4032
               06150 NRM4032         CLRF            TEMP                    ; clear exponent decrement
               06151                 MOVF            AARGB0,W                ; test if highbyte=0
               06152                 BTFSS           _Z
               06153                 BRA             NORM4032
               06154                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
               06155                 MOVWF           AARGB0
               06156                 MOVF            AARGB2,W
               06157                 MOVWF           AARGB1
               06158                 MOVF            AARGB3,W
               06159                 MOVWF           AARGB2
               06160                 CLRF            AARGB3
               06161                 BSF             TEMP,3                  ; increase decrement by 8
               06162 
               06163                 MOVF            AARGB0,W                ; test if highbyte=0
               06164                 BTFSS           _Z
               06165                 BRA             NORM4032
               06166                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
               06167                 MOVWF           AARGB0
               06168                 MOVF            AARGB2,W
               06169                 MOVWF           AARGB1
               06170                 CLRF            AARGB2
               06171                 BCF             TEMP,3                  ; increase decrement by 8
               06172                 BSF             TEMP,4
               06173         
               06174                 MOVF            AARGB0,W                ; test if highbyte=0
               06175                 BTFSS           _Z
               06176                 BRA             NORM4032
               06177                 MOVF            AARGB1,W                ; if so, shift 8 bits by move
               06178                 MOVWF           AARGB0
               06179                 CLRF            AARGB1
               06180                 BSF             TEMP,3                  ; increase decrement by 8
               06181         
               06182                 MOVF            AARGB0,W                ; if highbyte=0, result=0
               06183                 BTFSC           _Z
               06184                 BRA             RES032
               06185 
               06186 NORM4032        MOVF            TEMP,W
               06187                 SUBWF           EXP,F
               06188                 BTFSS           _Z
               06189                 BTFSS           _C
               06190                 BRA             SETFUN32
               06191 
               06192                 BCF             _C                      ; clear carry bit
               06193 
               06194 NORM4032A       BTFSC           AARGB0,MSB              ; if MSB=1, normalization done
               06195                 BRA             NRMRND4032
               06196                 RLCF            AARGB3,F                ; otherwise, shift left and 
               06197                 RLCF            AARGB2,F                ; decrement EXP
               06198                 RLCF            AARGB1,F
               06199                 RLCF            AARGB0,F
               06200                 DECFSZ          EXP,F
               06201                 BRA             NORM4032A
               06202 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06203                 BRA             SETFUN32                ; underflow if EXP=0
               06204 
               06205 NRMRND4032      BTFSC           FPFLAGS,RND
               06206                 BTFSS           AARGB2,LSB
               06207                 BRA             FIXSIGN32
               06208                 BTFSS           AARGB3,MSB              ; round if next bit is set
               06209                 BRA             FIXSIGN32
               06210                 INCF            AARGB2,F
               06211                 BTFSC           _Z
               06212                 INCF            AARGB1,F
               06213                 BTFSC           _Z
               06214                 INCF            AARGB0,F
               06215 
               06216                 BTFSS           _Z                      ; has rounding caused carryout?
               06217                 BRA             FIXSIGN32
               06218                 RRCF            AARGB0,F                ; if so, right shift
               06219                 RRCF            AARGB1,F
               06220                 RRCF            AARGB2,F
               06221                 INCF            EXP,F
               06222                 BTFSC           _Z                      ; check for overflow
               06223                 BRA             SETFOV32
               06224                 BRA             FIXSIGN32
               06225 #endif
               06226 
               06227 ;**********************************************************************************************
               06228 ;**********************************************************************************************
               06229 
               06230 ;       Float to integer conversion
               06231 
               06232 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06233 
               06234 ;       Use:    CALL    INT3224         or      CALL    INT32
               06235 
               06236 ;       Output: 24 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2
               06237 
               06238 ;       Result: AARG  <--  INT( AARG )
               06239 
               06240 ;       Max Timing:     40+6*7+6+16 = 104 clks          RND = 0
               06241 ;                       40+6*7+6+24 = 112 clks          RND = 1, SAT = 0
               06242 ;                       40+6*7+6+26 = 114 clks          RND = 1, SAT = 1
               06243 
               06244 ;       Min Timing:     4 clks
               06245 
               06246 ;       PM: 82                                          DM: 6
               06247 
               06248 ;----------------------------------------------------------------------------------------------
               06249 
               06250 #ifdef caml_useprim_INT3224
               06251 INT3224
               06252 INT32
               06253                 MOVF            EXP,W                   ; test for zero argument
               06254                 BTFSC           _Z
               06255                 RETLW           0x00
               06256 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06257                 MOVF            AARGB0,W                ; save sign in SIGN
               06258                 MOVWF           SIGN
               06259                 BSF             AARGB0,MSB              ; make MSB explicit
               06260 
               06261                 MOVLW           EXPBIAS+D'23'           ; remove bias from EXP
               06262                 SUBWF           EXP,F
               06263                 BTFSS           EXP,MSB
               06264                 BRA             SETIOV3224
               06265                 COMF            EXP,F
               06266                 INCF            EXP,F
               06267 
               06268                 MOVLW           8                       ; do byte shift if EXP >= 8
               06269                 SUBWF           EXP,W
               06270                 BTFSS           _C
               06271                 BRA             TSHIFT3224
               06272                 MOVWF           EXP
               06273                 RLCF            AARGB2,F                ; rotate next bit for rounding
               06274                 MOVF            AARGB1,W
               06275                 MOVWF           AARGB2
               06276                 MOVF            AARGB0,W
               06277                 MOVWF           AARGB1
               06278                 CLRF            AARGB0
               06279 
               06280                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06281                 SUBWF           EXP,W
               06282                 BTFSS           _C
               06283                 BRA             TSHIFT3224
               06284                 MOVWF           EXP
               06285                 RLCF            AARGB2,F                ; rotate next bit for rounding
               06286                 MOVF            AARGB1,W
               06287                 MOVWF           AARGB2
               06288                 CLRF            AARGB1
               06289 
               06290                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06291                 SUBWF           EXP,W
               06292                 BTFSS           _C
               06293                 BRA             TSHIFT3224
               06294                 MOVWF           EXP
               06295                 RLCF            AARGB2,F                ; rotate next bit for rounding
               06296                 CLRF            AARGB2
               06297                 MOVF            EXP,W
               06298                 BTFSS           _Z
               06299                 BCF             _C
               06300                 BRA             SHIFT3224OK
               06301 
               06302 TSHIFT3224      MOVF            EXP,W                   ; shift completed if EXP = 0
               06303                 BTFSC           _Z
               06304                 BRA             SHIFT3224OK
               06305 
               06306 SHIFT3224       BCF             _C
               06307                 RRCF            AARGB0,F                ; right shift by EXP
               06308                 RRCF            AARGB1,F
               06309                 RRCF            AARGB2,F
               06310                 DECFSZ          EXP,F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06311                 BRA             SHIFT3224
               06312 
               06313 SHIFT3224OK     BTFSC           FPFLAGS,RND
               06314                 BTFSS           AARGB2,LSB
               06315                 BRA             INT3224OK
               06316                 BTFSS           _C
               06317                 BRA             INT3224OK
               06318                 INCF            AARGB2,F
               06319                 BTFSC           _Z
               06320                 INCF            AARGB1,F
               06321                 BTFSC           _Z
               06322                 INCF            AARGB0,F
               06323                 BTFSC           AARGB0,MSB              ; test for overflow
               06324                 BRA             SETIOV3224
               06325 
               06326 INT3224OK       BTFSS           SIGN,MSB                ; if sign bit set, negate               
               06327                 RETLW           0
               06328                 COMF            AARGB0,F
               06329                 COMF            AARGB1,F
               06330                 COMF            AARGB2,F
               06331                 INCF            AARGB2,F
               06332                 BTFSC           _Z
               06333                 INCF            AARGB1,F
               06334                 BTFSC           _Z
               06335                 INCF            AARGB0,F
               06336                 RETLW           0
               06337 
               06338 IRES03224       CLRF            AARGB0                  ; integer result equals zero
               06339                 CLRF            AARGB1
               06340                 CLRF            AARGB2
               06341                 RETLW           0
               06342 
               06343 SETIOV3224      BSF             FPFLAGS,IOV             ; set integer overflow flag
               06344                 BTFSS           FPFLAGS,SAT             ; test for saturation
               06345                 RETLW           0xFF                    ; return error code in WREG
               06346 
               06347                 CLRF            AARGB0                  ; saturate to largest two's
               06348                 BTFSS           SIGN,MSB                ; complement 24 bit integer
               06349                 MOVLW           0xFF
               06350                 MOVWF           AARGB0                  ; SIGN = 0, 0x 7F FF FF
               06351                 MOVWF           AARGB1                  ; SIGN = 1, 0x 80 00 00
               06352                 MOVWF           AARGB2
               06353                 RLCF            SIGN,F
               06354                 RRCF            AARGB0,F
               06355                 RETLW           0xFF                    ; return error code in WREG
               06356 #endif
               06357 
               06358 ;**********************************************************************************************
               06359 ;**********************************************************************************************
               06360 
               06361 ;       Float to integer conversion
               06362 
               06363 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06364 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06365 ;       Use:    CALL    INT3232
               06366 
               06367 ;       Output: 32 bit 2's complement integer right justified in AARGB0, AARGB1, AARGB2,
               06368 ;               AARGB3
               06369 
               06370 ;       Result: AARG  <--  INT( AARG )
               06371 
               06372 ;       Max Timing:     54+6*8+7+21 = 130 clks          RND = 0
               06373 ;                       54+6*8+7+29 = 137 clks          RND = 1, SAT = 0
               06374 ;                       54+6*8+7+29 = 137 clks          RND = 1, SAT = 1
               06375 
               06376 ;       Min Timing:     5 clks
               06377 
               06378 ;       PM: 102                                                 DM: 7
               06379 
               06380 ;----------------------------------------------------------------------------------------------
               06381 
               06382 #ifdef caml_useprim_INT3232
               06383 INT3232
               06384                 CLRF            AARGB3
               06385                 MOVF            EXP,W                   ; test for zero argument
               06386                 BTFSC           _Z
               06387                 RETLW           0x00
               06388 
               06389                 MOVF            AARGB0,W                ; save sign in SIGN
               06390                 MOVWF           SIGN
               06391                 BSF             AARGB0,MSB              ; make MSB explicit
               06392 
               06393                 MOVLW           EXPBIAS+D'31'           ; remove bias from EXP
               06394                 SUBWF           EXP,F
               06395                 BTFSS           EXP,MSB
               06396                 BRA             SETIOV32
               06397                 COMF            EXP,F
               06398                 INCF            EXP,F        
               06399 
               06400                 MOVLW           8                       ; do byte shift if EXP >= 8
               06401                 SUBWF           EXP,W
               06402                 BTFSS           _C
               06403                 BRA             TSHIFT3232
               06404                 MOVWF           EXP
               06405                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06406                 MOVF            AARGB2,W
               06407                 MOVWF           AARGB3
               06408                 MOVF            AARGB1,W
               06409                 MOVWF           AARGB2
               06410                 MOVF            AARGB0,W
               06411                 MOVWF           AARGB1
               06412                 CLRF            AARGB0
               06413 
               06414                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06415                 SUBWF           EXP,W
               06416                 BTFSS           _C
               06417                 BRA             TSHIFT3232
               06418                 MOVWF           EXP
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06419                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06420                 MOVF            AARGB2,W
               06421                 MOVWF           AARGB3
               06422                 MOVF            AARGB1,W
               06423                 MOVWF           AARGB2
               06424                 CLRF            AARGB1
               06425 
               06426                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06427                 SUBWF           EXP,W
               06428                 BTFSS           _C
               06429                 BRA             TSHIFT3232
               06430                 MOVWF           EXP
               06431                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06432                 MOVF            AARGB2,W
               06433                 MOVWF           AARGB3
               06434                 CLRF            AARGB2
               06435 
               06436                 MOVLW           8                       ; do another byte shift if EXP >= 8
               06437                 SUBWF           EXP,W
               06438                 BTFSS           _C
               06439                 BRA             TSHIFT3232
               06440                 MOVWF           EXP
               06441                 RLCF            AARGB3,F                ; rotate next bit for rounding
               06442                 CLRF            AARGB3
               06443                 MOVF            EXP,W
               06444                 BTFSS           _Z
               06445                 BCF             _C
               06446                 BRA             SHIFT3232OK
               06447 
               06448 TSHIFT3232      MOVF            EXP,W                   ; shift completed if EXP = 0
               06449                 BTFSC           _Z
               06450                 BRA             SHIFT3232OK
               06451 
               06452 SHIFT3232       BCF             _C
               06453                 RRCF            AARGB0,F                ; right shift by EXP
               06454                 RRCF            AARGB1,F
               06455                 RRCF            AARGB2,F
               06456                 RRCF            AARGB3,F
               06457                 DECFSZ          EXP,F
               06458                 BRA             SHIFT3232
               06459 
               06460 SHIFT3232OK     BTFSC           FPFLAGS,RND
               06461                 BTFSS           AARGB3,LSB
               06462                 BRA             INT3232OK
               06463                 BTFSS           _C
               06464                 BRA             INT3232OK
               06465                 INCF            AARGB3,F
               06466                 BTFSC           _Z
               06467                 INCF            AARGB2,F
               06468                 BTFSC           _Z
               06469                 INCF            AARGB1,F
               06470                 BTFSC           _Z
               06471                 INCF            AARGB0,F
               06472                 BTFSC           AARGB0,MSB              ; test for overflow
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06473                 BRA             SETIOV3224
               06474 
               06475 INT3232OK       BTFSS           SIGN,MSB                ; if sign bit set, negate               
               06476                 RETLW           0
               06477                 COMF            AARGB0,F
               06478                 COMF            AARGB1,F
               06479                 COMF            AARGB2,F
               06480                 COMF            AARGB3,F
               06481                 INCF            AARGB3,F
               06482                 BTFSC           _Z
               06483                 INCF            AARGB2,F
               06484                 BTFSC           _Z
               06485                 INCF            AARGB1,F
               06486                 BTFSC           _Z
               06487                 INCF            AARGB0,F
               06488                 RETLW           0
               06489 
               06490 IRES032         CLRF            AARGB0                  ; integer result equals zero
               06491                 CLRF            AARGB1
               06492                 CLRF            AARGB2
               06493                 CLRF            AARGB3
               06494                 RETLW           0
               06495 
               06496 SETIOV32        BSF             FPFLAGS,IOV             ; set integer overflow flag
               06497                 BTFSS           FPFLAGS,SAT             ; test for saturation
               06498                 RETLW           0xFF                    ; return error code in WREG
               06499 
               06500                 CLRF            AARGB0                  ; saturate to largest two's
               06501                 BTFSS           SIGN,MSB                ; complement 32 bit integer
               06502                 MOVLW           0xFF
               06503                 MOVWF           AARGB0                  ; SIGN = 0, 0x 7F FF FF FF
               06504                 MOVWF           AARGB1                  ; SIGN = 1, 0x 80 00 00 00
               06505                 MOVWF           AARGB2
               06506                 MOVWF           AARGB3
               06507                 RLCF            SIGN,F
               06508                 RRCF            AARGB0,F
               06509                 RETLW           0xFF                    ; return error code in WREG
               06510 #endif
               06511 
               06512 ;**********************************************************************************************
               06513 ;**********************************************************************************************
               06514 
               06515 ;       Floating Point Multiply
               06516 
               06517 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06518 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06519 
               06520 ;       Use:    CALL    FPM32
               06521 
               06522 ;       Output: 32 bit floating point product in AEXP, AARGB0, AARGB1, AARGB2
               06523 
               06524 ;       Result: AARG  <--  AARG * BARG
               06525 
               06526 ;       Max Timing:     26+23*22+21+21 = 574 clks       RND = 0
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06527 ;                       26+23*22+21+35 = 588 clks       RND = 1, SAT = 0
               06528 ;                       26+23*22+21+38 = 591 clks       RND = 1, SAT = 1
               06529 
               06530 ;       Min Timing:     6+6 = 12 clks                   AARG * BARG = 0
               06531 ;                       24+23*11+21+17 = 315 clks
               06532 
               06533 ;       PM: 94                                          DM: 14
               06534 
               06535 ;----------------------------------------------------------------------------------------------
               06536 
               06537 #ifdef caml_useprim_FPM32
               06538 FPM32           MOVF            AEXP,W                  ; test for zero arguments
               06539                 BTFSS           _Z
               06540                 MOVF            BEXP,W
               06541                 BTFSC           _Z
               06542                 BRA             RES032
               06543 
               06544 M32BNE0         MOVF            AARGB0,W
               06545                 XORWF           BARGB0,W
               06546                 MOVWF           SIGN                    ; save sign in SIGN
               06547 
               06548                 MOVF            BEXP,W
               06549                 ADDWF           EXP,F
               06550                 MOVLW           EXPBIAS-1
               06551                 BTFSS           _C
               06552                 BRA             MTUN32
               06553 
               06554                 SUBWF           EXP,F
               06555                 BTFSC           _C
               06556                 BRA             SETFOV32                ; set multiply overflow flag
               06557                 BRA             MOK32
               06558 
               06559 MTUN32          SUBWF           EXP,F
               06560                 BTFSS           _C
               06561                 BRA             SETFUN32
               06562 
               06563 MOK32           MOVF            AARGB0,W
               06564                 MOVWF           AARGB3
               06565                 MOVF            AARGB1,W
               06566                 MOVWF           AARGB4
               06567                 MOVF            AARGB2,W
               06568                 MOVWF           AARGB5
               06569                 BSF             AARGB3,MSB              ; make argument MSB's explicit
               06570                 BSF             BARGB0,MSB
               06571                 BCF             _C
               06572                 CLRF            AARGB0                  ; clear initial partial product
               06573                 CLRF            AARGB1
               06574                 CLRF            AARGB2
               06575                 MOVLW           D'24'
               06576                 MOVWF           TEMP                    ; initialize counter
               06577 
               06578 MLOOP32         BTFSS           AARGB5,LSB              ; test next bit
               06579                 BRA             MNOADD32
               06580 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06581 MADD32          MOVF            BARGB2,W
               06582                 ADDWF           AARGB2,F
               06583                 MOVF            BARGB1,W
               06584                 BTFSC           _C
               06585                 INCFSZ          BARGB1,W
               06586                 ADDWF           AARGB1,F
               06587 
               06588                 MOVF            BARGB0,W
               06589                 BTFSC           _C
               06590                 INCFSZ          BARGB0,W
               06591                 ADDWF           AARGB0,F
               06592 
               06593 MNOADD32        RRCF            AARGB0,F
               06594                 RRCF            AARGB1,F
               06595                 RRCF            AARGB2,F
               06596                 RRCF            AARGB3,F
               06597                 RRCF            AARGB4,F
               06598                 RRCF            AARGB5,F
               06599                 BCF             _C
               06600                 DECFSZ          TEMP,F
               06601                 BRA             MLOOP32
               06602 
               06603                 BTFSC           AARGB0,MSB               ; check for postnormalization
               06604                 BRA             MROUND32
               06605                 RLCF            AARGB3,F
               06606                 RLCF            AARGB2,F
               06607                 RLCF            AARGB1,F
               06608                 RLCF            AARGB0,F
               06609                 DECF            EXP,F
               06610 
               06611 MROUND32        BTFSC           FPFLAGS,RND
               06612                 BTFSS           AARGB2,LSB
               06613                 BRA             MUL32OK
               06614                 BTFSS           AARGB3,MSB
               06615                 BRA             MUL32OK
               06616                 INCF            AARGB2,F
               06617                 BTFSC           _Z
               06618                 INCF            AARGB1,F
               06619                 BTFSC           _Z
               06620                 INCF            AARGB0,F
               06621 
               06622                 BTFSS           _Z                      ; has rounding caused carryout?
               06623                 BRA             MUL32OK
               06624                 RRCF            AARGB0,F                ; if so, right shift
               06625                 RRCF            AARGB1,F
               06626                 RRCF            AARGB2,F
               06627                 INCF            EXP,F
               06628                 BTFSC           _Z                      ; check for overflow
               06629                 BRA             SETFOV32
               06630 
               06631 MUL32OK         BTFSS           SIGN,MSB
               06632                 BCF             AARGB0,MSB              ; clear explicit MSB if positive
               06633 
               06634                 RETLW           0  
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06635 
               06636 SETFOV32        BSF             FPFLAGS,FOV             ; set floating point underflag
               06637                 BTFSS           FPFLAGS,SAT             ; test for saturation
               06638                 RETLW           0xFF                    ; return error code in WREG
               06639 
               06640                 MOVLW           0xFF
               06641                 MOVWF           AEXP                    ; saturate to largest floating
               06642                 MOVWF           AARGB0                  ; point number = 0x FF 7F FF FF
               06643                 MOVWF           AARGB1                  ; modulo the appropriate sign bit
               06644                 MOVWF           AARGB2
               06645                 RLCF            SIGN,F
               06646                 RRCF            AARGB0,F
               06647                 RETLW           0xFF                    ; return error code in WREG
               06648 #endif
               06649 
               06650 ;**********************************************************************************************
               06651 ;**********************************************************************************************
               06652 
               06653 ;       Floating Point Divide
               06654 
               06655 ;       Input:  32 bit floating point dividend in AEXP, AARGB0, AARGB1, AARGB2
               06656 ;               32 bit floating point divisor in BEXP, BARGB0, BARGB1, BARGB2
               06657 
               06658 ;       Use:    CALL    FPD32
               06659 
               06660 ;       Output: 32 bit floating point quotient in AEXP, AARGB0, AARGB1, AARGB2
               06661 
               06662 ;       Result: AARG  <--  AARG / BARG
               06663 
               06664 ;       Max Timing:     43+12+23*36+35+14 = 932 clks            RND = 0
               06665 ;                       43+12+23*36+35+50 = 968 clks            RND = 1, SAT = 0
               06666 ;                       43+12+23*36+35+53 = 971 clks            RND = 1, SAT = 1
               06667 
               06668 ;       Min Timing:     7+6 = 13 clks
               06669 
               06670 ;       PM: 155                                                 DM: 14
               06671 
               06672 ;----------------------------------------------------------------------------------------------
               06673 
               06674 #ifdef caml_useprim_FPD32
               06675 FPD32           MOVF            BEXP,W                  ; test for divide by zero
               06676                 BTFSC           _Z
               06677                 BRA             SETFDZ32
               06678 
               06679                 MOVF            AEXP,W
               06680                 BTFSC           _Z
               06681                 BRA             RES032
               06682 
               06683 D32BNE0         MOVF            AARGB0,W
               06684                 XORWF           BARGB0,W
               06685                 MOVWF           SIGN                    ; save sign in SIGN
               06686                 BSF             AARGB0,MSB              ; make argument MSB's explicit
               06687                 BSF             BARGB0,MSB
               06688 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06689 TALIGN32        CLRF            TEMP                    ; clear align increment
               06690                 MOVF            AARGB0,W
               06691                 MOVWF           AARGB3                  ; test for alignment
               06692                 MOVF            AARGB1,W
               06693                 MOVWF           AARGB4
               06694                 MOVF            AARGB2,W
               06695                 MOVWF           AARGB5
               06696 
               06697                 MOVF            BARGB2,W
               06698                 SUBWF           AARGB5,F
               06699                 MOVF            BARGB1,W
               06700                 BTFSS           _C
               06701                 INCFSZ          BARGB1,W
               06702 
               06703 TS1ALIGN32      SUBWF           AARGB4,F
               06704                 MOVF            BARGB0,W
               06705                 BTFSS           _C
               06706                 INCFSZ          BARGB0,W
               06707 
               06708 TS2ALIGN32      SUBWF           AARGB3,F
               06709 
               06710                 CLRF            AARGB3
               06711                 CLRF            AARGB4
               06712                 CLRF            AARGB5
               06713 
               06714                 BTFSS           _C
               06715                 BRA             DALIGN32OK
               06716 
               06717                 BCF             _C                      ; align if necessary
               06718                 RRCF            AARGB0,F
               06719                 RRCF            AARGB1,F
               06720                 RRCF            AARGB2,F
               06721                 RRCF            AARGB3,F
               06722                 MOVLW           0x01
               06723                 MOVWF           TEMP                    ; save align increment          
               06724 
               06725 DALIGN32OK      MOVF            BEXP,W                  ; compare AEXP and BEXP
               06726                 SUBWF           EXP,F
               06727                 BTFSS           _C
               06728                 BRA             ALTB32
               06729         
               06730 AGEB32          MOVLW           EXPBIAS-1
               06731                 ADDWF           TEMP,W
               06732                 ADDWF           EXP,F
               06733                 BTFSC           _C
               06734                 BRA             SETFOV32
               06735                 BRA             DARGOK32                ; set overflow flag
               06736 
               06737 ALTB32          MOVLW           EXPBIAS-1
               06738                 ADDWF           TEMP,W
               06739                 ADDWF           EXP,F
               06740                 BTFSS           _C
               06741                 BRA             SETFUN32                ; set underflow flag
               06742 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06743 DARGOK32        MOVLW           D'24'                   ; initialize counter
               06744                 MOVWF           TEMPB1
               06745 
               06746 DLOOP32         RLCF            AARGB5,F                ; left shift
               06747                 RLCF            AARGB4,F
               06748                 RLCF            AARGB3,F
               06749                 RLCF            AARGB2,F
               06750                 RLCF            AARGB1,F
               06751                 RLCF            AARGB0,F
               06752                 RLCF            TEMP,F
               06753 
               06754                 MOVF            BARGB2,W                ; subtract
               06755                 SUBWF           AARGB2,F
               06756                 MOVF            BARGB1,W
               06757                 BTFSS           _C
               06758                 INCFSZ          BARGB1,W
               06759 DS132           SUBWF           AARGB1,F
               06760 
               06761                 MOVF            BARGB0,W
               06762                 BTFSS           _C
               06763                 INCFSZ          BARGB0,W
               06764 DS232           SUBWF           AARGB0,F
               06765 
               06766                 RLCF            BARGB0,W
               06767                 IORWF           TEMP,F
               06768                 
               06769                 BTFSS           TEMP,LSB                ; test for restore
               06770                 BRA             DREST32
               06771 
               06772                 BSF             AARGB5,LSB
               06773                 BRA             DOK32
               06774 
               06775 DREST32         MOVF            BARGB2,W                ; restore if necessary
               06776                 ADDWF           AARGB2,F
               06777                 MOVF            BARGB1,W
               06778                 BTFSC           _C
               06779                 INCFSZ          BARGB1,W
               06780 DAREST32        ADDWF           AARGB1,F
               06781 
               06782                 MOVF            BARGB0,W
               06783                 BTFSC           _C
               06784                 INCF            BARGB0,W
               06785                 ADDWF           AARGB0,F
               06786 
               06787                 BCF             AARGB5,LSB
               06788 
               06789 DOK32           DECFSZ          TEMPB1,F
               06790                 BRA             DLOOP32
               06791 
               06792 DROUND32        BTFSC           FPFLAGS,RND
               06793                 BTFSS           AARGB5,LSB
               06794                 BRA             DIV32OK
               06795                 BCF             _C
               06796                 RLCF            AARGB2,F               ; compute next significant bit
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06797                 RLCF            AARGB1,F               ; for rounding
               06798                 RLCF            AARGB0,F
               06799                 RLCF            TEMP,F
               06800 
               06801                 MOVF            BARGB2,W               ; subtract
               06802                 SUBWF           AARGB2,F
               06803                 MOVF            BARGB1,W
               06804                 BTFSS           _C
               06805                 INCFSZ          BARGB1,W
               06806                 SUBWF           AARGB1,F
               06807 
               06808                 MOVF            BARGB0,W
               06809                 BTFSS           _C
               06810                 INCFSZ          BARGB0,W
               06811                 SUBWF           AARGB0,F
               06812 
               06813                 RLCF            BARGB0,W
               06814                 IORWF           TEMP,W
               06815                 ANDLW           0x01            
               06816 
               06817                 ADDWF           AARGB5,F
               06818                 BTFSC           _C
               06819                 INCF            AARGB4,F
               06820                 BTFSC           _Z
               06821                 INCF            AARGB3,F
               06822 
               06823                 BTFSS           _Z                      ; test if rounding caused carryout
               06824                 BRA             DIV32OK
               06825                 RRCF            AARGB3,F
               06826                 RRCF            AARGB4,F
               06827                 RRCF            AARGB5,F
               06828                 INCF            EXP,F
               06829                 BTFSC           _Z                      ; test for overflow
               06830                 BRA             SETFOV32
               06831 
               06832 
               06833 DIV32OK         BTFSS           SIGN,MSB
               06834                 BCF             AARGB3,MSB              ; clear explicit MSB if positive
               06835 
               06836                 MOVF            AARGB3,W
               06837                 MOVWF           AARGB0                  ; move result to AARG
               06838                 MOVF            AARGB4,W
               06839                 MOVWF           AARGB1
               06840                 MOVF            AARGB5,W
               06841                 MOVWF           AARGB2
               06842 
               06843                 RETLW           0
               06844 
               06845 SETFDZ32        BSF             FPFLAGS,FDZ             ; set divide by zero flag
               06846                 RETLW           0xFF
               06847 #endif
               06848 
               06849 #ifdef caml_useprim_SETFUN32
               06850 SETFUN32        BSF             FPFLAGS,FUN             ; set floating point underflag
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06851                 BTFSS           FPFLAGS,SAT             ; test for saturation
               06852                 RETLW           0xFF                    ; return error code in WREG
               06853 
               06854                 MOVLW           0x01                    ; saturate to smallest floating
               06855                 MOVWF           AEXP                    ; point number = 0x 01 00 00 00
               06856                 CLRF            AARGB0                  ; modulo the appropriate sign bit
               06857                 CLRF            AARGB1
               06858                 CLRF            AARGB2
               06859                 RLCF            SIGN,F
               06860                 RRCF            AARGB0,F
               06861                 RETLW           0xFF                    ; return error code in WREG
               06862 #endif
               06863 
               06864 ;**********************************************************************************************
               06865 ;**********************************************************************************************
               06866 
               06867 ;       Floating Point Subtract
               06868 
               06869 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06870 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06871 
               06872 ;       Use:    CALL FPS32
               06873 
               06874 ;       Output: 32 bit floating point sum in AEXP, AARGB0, AARGB1, AARGB2
               06875 
               06876 ;       Result: AARG  <--  AARG - BARG
               06877 
               06878 ;       Max Timing:     2+251 = 253 clks                RND = 0
               06879 ;                       2+265 = 267 clks                RND = 1, SAT = 0
               06880 ;                       2+271 = 273 clks                RND = 1, SAT = 1
               06881 
               06882 ;       Min Timing:     2+12 = 14 clks
               06883 
               06884 ;       PM: 2+146 = 148                         DM: 14
               06885 
               06886 ;----------------------------------------------------------------------------------------------
               06887 
               06888 #ifdef caml_useprim_FPS32
               06889 FPS32           MOVLW           0x80
               06890                 XORWF           BARGB0,F
               06891 #endif
               06892 
               06893 ;**********************************************************************************************
               06894 
               06895 ;       Floating Point Add
               06896 
               06897 ;       Input:  32 bit floating point number in AEXP, AARGB0, AARGB1, AARGB2
               06898 ;               32 bit floating point number in BEXP, BARGB0, BARGB1, BARGB2
               06899 
               06900 ;       Use:    CALL FPA32
               06901 
               06902 ;       Output: 32 bit floating point sum in AEXP, AARGB0, AARGB1, AARGB2
               06903 
               06904 ;       Result: AARG  <--  AARG - BARG
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06905 
               06906 ;       Max Timing:     31+41+6*7+6+41+90 = 251 clks            RND = 0
               06907 ;                       31+41+6*7+6+55+90 = 265 clks            RND = 1, SAT = 0
               06908 ;                       31+41+6*7+6+55+96 = 271 clks            RND = 1, SAT = 1
               06909 
               06910 ;       Min Timing:     8+4 = 12 clks
               06911 
               06912 ;       PM: 146                                                 DM: 14
               06913 
               06914 ;----------------------------------------------------------------------------------------------
               06915 
               06916 #ifdef caml_useprim_FPA32
               06917 FPA32           MOVF            AARGB0,W                ; exclusive or of signs in TEMP
               06918                 XORWF           BARGB0,W
               06919                 MOVWF           TEMP
               06920 
               06921                 CLRF            AARGB3                  ; clear extended byte
               06922                 CLRF            BARGB3
               06923 
               06924                 MOVF            AEXP,W                  ; use AARG if AEXP >= BEXP
               06925                 SUBWF           BEXP,W
               06926                 BTFSS           _C
               06927                 BRA             USEA32
               06928 
               06929                 MOVF            BEXP,W                  ; use BARG if AEXP < BEXP
               06930                 MOVWF           AARGB5                  ; therefore, swap AARG and BARG
               06931                 MOVF            AEXP,W
               06932                 MOVWF           BEXP
               06933                 MOVF            AARGB5,W
               06934                 MOVWF           AEXP
               06935 
               06936                 MOVF            BARGB0,W
               06937                 MOVWF           AARGB5
               06938                 MOVF            AARGB0,W
               06939                 MOVWF           BARGB0
               06940                 MOVF            AARGB5,W
               06941                 MOVWF           AARGB0
               06942 
               06943                 MOVF            BARGB1,W
               06944                 MOVWF           AARGB5
               06945                 MOVF            AARGB1,W
               06946                 MOVWF           BARGB1
               06947                 MOVF            AARGB5,W
               06948                 MOVWF           AARGB1
               06949 
               06950                 MOVF            BARGB2,W
               06951                 MOVWF           AARGB5
               06952                 MOVF            AARGB2,W
               06953                 MOVWF           BARGB2
               06954                 MOVF            AARGB5,W
               06955                 MOVWF           AARGB2
               06956 
               06957 USEA32          MOVF            BEXP,W                  ; return AARG if BARG = 0
               06958                 BTFSC           _Z
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               06959                 RETLW           0x00
               06960 
               06961                 MOVF            AARGB0,W
               06962                 MOVWF           SIGN                    ; save sign in SIGN
               06963                 BSF             AARGB0,MSB              ; make MSB's explicit
               06964                 BSF             BARGB0,MSB
               06965 
               06966                 MOVF            BEXP,W                  ; compute shift count in BEXP
               06967                 SUBWF           AEXP,W
               06968                 MOVWF           BEXP
               06969                 BTFSC           _Z
               06970                 BRA             ALIGNED32
               06971 
               06972                 MOVLW           8
               06973                 SUBWF           BEXP,W
               06974                 BTFSS           _C                      ; if BEXP >= 8, do byte shift
               06975                 BRA             ALIGNB32
               06976                 MOVWF           BEXP
               06977                 MOVF            BARGB2,W                ; keep for postnormalization
               06978                 MOVWF           BARGB3
               06979                 MOVF            BARGB1,W
               06980                 MOVWF           BARGB2
               06981                 MOVF            BARGB0,W
               06982                 MOVWF           BARGB1
               06983                 CLRF            BARGB0
               06984 
               06985                 MOVLW           8
               06986                 SUBWF           BEXP,W
               06987                 BTFSS           _C                      ; if BEXP >= 8, do byte shift
               06988                 BRA             ALIGNB32
               06989                 MOVWF           BEXP
               06990                 MOVF            BARGB2,W                ; keep for postnormalization
               06991                 MOVWF           BARGB3
               06992                 MOVF            BARGB1,W
               06993                 MOVWF           BARGB2
               06994                 CLRF            BARGB1
               06995 
               06996                 MOVLW           8
               06997                 SUBWF           BEXP,W
               06998                 BTFSS           _C                      ; if BEXP >= 8, BARG = 0 relative to AARG
               06999                 BRA             ALIGNB32
               07000                 MOVF            SIGN,W
               07001                 MOVWF           AARGB0
               07002                 RETLW           0x00
               07003 
               07004 ALIGNB32        MOVF            BEXP,W                  ; already aligned if BEXP = 0
               07005                 BTFSC           _Z
               07006                 BRA             ALIGNED32
               07007 
               07008 ALOOPB32        BCF             _C                      ; right shift by BEXP
               07009                 RRCF            BARGB0,F
               07010                 RRCF            BARGB1,F
               07011                 RRCF            BARGB2,F
               07012                 RRCF            BARGB3,F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               07013                 DECFSZ          BEXP,F
               07014                 BRA             ALOOPB32
               07015 
               07016 ALIGNED32       BTFSS           TEMP,MSB                ; negate if signs opposite
               07017                 BRA             AOK32
               07018 
               07019                 COMF            BARGB3,F
               07020                 COMF            BARGB2,F
               07021                 COMF            BARGB1,F
               07022                 COMF            BARGB0,F
               07023                 INCF            BARGB3,F
               07024                 BTFSC           _Z
               07025                 INCF            BARGB2,F
               07026                 BTFSC           _Z
               07027                 INCF            BARGB1,F
               07028                 BTFSC           _Z
               07029                 INCF            BARGB0,F
               07030 
               07031 AOK32
               07032                 MOVF            BARGB3,W
               07033                 ADDWF           AARGB3,F
               07034                 MOVF            BARGB2,W
               07035                 BTFSC           _C
               07036                 INCFSZ          BARGB2,W
               07037                 ADDWF           AARGB2,F
               07038                 MOVF            BARGB1,W
               07039                 BTFSC           _C
               07040                 INCFSZ          BARGB1,W
               07041                 ADDWF           AARGB1,F
               07042                 MOVF            BARGB0,W
               07043                 BTFSC           _C
               07044                 INCFSZ          BARGB0,W
               07045                 ADDWF           AARGB0,F
               07046 
               07047                 BTFSC           TEMP,MSB
               07048                 BRA             ACOMP32
               07049                 BTFSS           _C
               07050                 BRA             NRMRND4032
               07051 
               07052                 RRCF            AARGB0,F               ; shift right and increment EXP
               07053                 RRCF            AARGB1,F
               07054                 RRCF            AARGB2,F
               07055                 RRCF            AARGB3,F
               07056                 INCFSZ          AEXP,F
               07057                 BRA             NRMRND4032
               07058                 BRA             SETFOV32
               07059 
               07060 ACOMP32         BTFSC           _C
               07061                 BRA             NRM4032                 ; normalize and fix sign
               07062 
               07063                 COMF            AARGB3,F
               07064                 COMF            AARGB2,F                ; negate, toggle sign bit and
               07065                 COMF            AARGB1,F                ; then normalize
               07066                 COMF            AARGB0,F
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               07067                 INCF            AARGB3,F
               07068                 BTFSC           _Z
               07069                 INCF            AARGB2,F
               07070                 BTFSC           _Z
               07071                 INCF            AARGB1,F
               07072                 BTFSC           _Z
               07073                 INCF            AARGB0,F
               07074 
               07075                 MOVLW           0x80
               07076                 XORWF           SIGN,F
               07077                 BRA             NRM32
               07078 #endif
               00042 
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 210


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ABSTRACT_TAG                      000000FB
ACCESS                            00000000
ACCUH                             00000F57
ACCUL                             00000F56
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000002
AN9                               00000003
ATOM0_ADR                         00000F88
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
C                                 00000000
C1INV                             00000004
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 211


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CAML_STOP_AND_COPY_GC             00000000
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CFGS                              00000006
CHECK_UNFULL_HEAP_END_0           00001000
CHECK_UNFULL_HEAP_END_1           0000103C
CHECK_UNFULL_HEAP_END_2           00001080
CHECK_UNFULL_HEAP_END_3           0000111C
CHECK_UNFULL_HEAP_END_4           00001384
CHECK_UNFULL_HEAP_END_5           000013BA
CHECK_UNFULL_STACK_END_0          00000A0E
CHECK_UNFULL_STACK_END_1          00000B66
CHECK_UNFULL_STACK_END_2          00000C22
CHECK_UNFULL_STACK_END_3          00000C68
CHECK_UNFULL_STACK_END_4          00000CB0
CHECK_UNFULL_STACK_END_5          00000D00
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 212


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
CLOSURE_TAG                       000000F7
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CPT_CUH                           00000006
CPT_CUS                           00000006
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_HEAP_END                      00000F5E
CUSTOM_TAG                        000000FF
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DEBUG                             00000FD4
DIVISION_BY_0_IND                 00000005
DONE                              00000001
DOUBLE_ARRAY_TAG                  000000FE
DOUBLE_TAG                        000000FD
D_A                               00000005
ECCP1AS                           00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
ENVH                              00000F55
ENVL                              00000F54
EXTRA_ARGS                        00000F62
FAILURE_IND                       00000002
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 213


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FAST                              00000001
FERR                              00000002
FORWARD_TAG                       000000FA
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GC_COUNTER_H                      00000F77
GC_COUNTER_L                      00000F76
GC_TMP_REG_1                      00000F63
GC_TMP_REG_2                      00000F64
GC_TMP_REG_3                      00000F65
GC_TMP_REG_4                      00000F66
GC_TMP_REG_5                      00000F67
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
HEAP1_ANCHOR                      00000000
HEAP1_END                         00000006
HEAP2_ANCHOR                      00000007
HEAP2_END                         0000000D
HEAP_SIZE                         00000007
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
IBF                               00000007
IBOV                              00000005
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INFIX_TAG                         000000F9
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 214


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
INT_FLAGS_1                       00000F7A
INT_FLAGS_2                       00000F7B
INT_FLAGS_3                       00000F7C
INT_FUN_H                         00000F59
INT_FUN_L                         00000F58
INT_RUNS_1                        00000F7D
INT_RUNS_2                        00000F7E
INT_RUNS_3                        00000F7F
INVALID_ARG_IND                   00000003
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IVRST                             00000005
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 215


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAX_USER_RAM                      00000F80
MCLR                              00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_MCLR                          00000003
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 216


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NO_SCAN_TAG                       000000FB
OBF                               00000006
OBJECT_TAG                        000000F8
OBJ_TAG_INT                       00000100
OBJ_TAG_OUT_OF_MEMORY             00000101
OERR                              00000001
OOM_FIELD0_H                      00000F5D
OOM_FIELD0_L                      00000F5C
OOM_SIZE                          00000F5B
OOM_TAG                           00000F5A
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OTH_HEAP_END                      00000F5F
OUT_OF_MEMORY_IND                 00000000
OV                                00000003
P                                 00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
P1M0                              00000006
P1M1                              00000007
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 217


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
PGM                               00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PWM1CON                           00000FB7
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 218


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
RA6                               00000006
RA7                               00000007
RAND_CUR_H                        00000F79
RAND_CUR_L                        00000F78
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
R_W                               00000002
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 219


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
S                                 00000003
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SEN                               00000000
SENDB                             00000003
SERIAL_ENDTAC_FLAG                00000056
SERIAL_ENDTIC_FLAG                000000A9
SERIAL_ERROR_FLAG                 00000065
SERIAL_ESC_FLAG                   000000FF
SERIAL_FLAG_BASE                  000000A6
SERIAL_GET_FLAG                   00000095
SERIAL_HASH_INITH                 00000039
SERIAL_HASH_INITL                 0000006B
SERIAL_NEWTAC_FLAG                00000059
SERIAL_NEWTIC_FLAG                000000A6
SERIAL_OOM_FLAG                   0000006A
SERIAL_RECEIVE_FLAG               0000009A
SERIAL_RES1_FLAG                  00000003
SERIAL_RES2_FLAG                  0000001A
SERIAL_RES3_FLAG                  0000001C
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STACK_ANCHOR                      00000F53
STACK_END                         0000000E
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 220


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
STACK_OVERFLOW_IND                00000008
STACK_SIZE                        00000001
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
STRING_TAG                        000000FC
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000000
T1CKI                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 221


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TBLPTRU                           00000FF8
TMP_REG_1                         00000F68
TMP_REG_2                         00000F69
TMP_REG_3                         00000F6A
TMP_REG_4                         00000F6B
TMP_REG_5                         00000F6C
TMP_REG_6                         00000F6D
TMP_REG_7                         00000F6E
TMP_REG_8                         00000F6F
TMP_REG_9                         00000F70
TMP_REG_A                         00000F71
TMP_REG_B                         00000F72
TMP_REG_C                         00000F73
TMP_REG_D                         00000F74
TMP_REG_E                         00000F75
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRAP_SPH                          00000F61
TRAP_SPL                          00000F60
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 222


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VPP                               00000003
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 223


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
W                                 00000000
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
Z                                 00000002
_ACC0_OFFSETREF                   0000036C
_ACC1_ISINT                       00000F2E
_ACC2_GETMETHOD                   0000039E
_ACC3_BEQ                         00000180
_ACC4_BNEQ                        0000018C
_ACC5_BLTINT                      00000198
_ACC6_BLEINT                      000001A4
_ACC7_BGTINT                      000001B0
_ACC_BGEINT                       00000214
_ADDINT                           000011C6
_ANDINT                           00000756
_APPLY                            00000C3E
_APPLY1                           00000C5A
_APPLY2                           00000CA2
_APPLY3                           00000CF2
_APPTERM                          00000D4A
_APPTERM1                         00000D90
_APPTERM2                         00000DC2
_APPTERM3                         00000E00
_APPTERM_LOOP                     00000D6E
_ASRINT                           000007A0
_ASSIGN                           0000026E
_ATOM                             00000F84
_ATOM0                            00000F96
_BEQ                              000000A4
_BGEINT                           00000134
_BGEINT_L0                        0000014C
_BGTINT                           00000116
_BGTINT_L0                        00000130
_BLEINT                           000000F8
_BLEINT_L0                        00000112
_BLTINT                           000000DC
_BLTINT_L0                        000000F4
_BNEQ                             000000C2
_BOOLNOT                          000011A2
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_BRANCH                           00000830
_BRANCHIF                         0000083E
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 224


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_BRANCHIFNOT                      0000084E
_BRANCH_LOCAL_COPY                000000B4
_BREAK                            00000F84
_BUGEINT                          00000168
_BULTINT                          00000150
_CCALL                            0000080E
_CCALL1                           000007B4
_CCALL2                           000007C6
_CCALL3                           000007D8
_CCALL4                           000007EA
_CCALL5                           000007FC
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CHECKSIGNALS                     00000F84
_CHECK_UNFULL_HEAP_GEN            00001406
_CHECK_UNFULL_HEAP_GEN_L0         0000141E
_CHECK_UNFULL_HEAP_GEN_L1         00001424
_CHECK_UNFULL_HEAP_GEN_L2         00001428
_CHECK_UNFULL_HEAP_GEN_L3         0000142E
_CHECK_UNFULL_HEAP_GEN_L4         00001448
_CHECK_UNFULL_HEAP_GEN_L5         0000144E
_CHECK_UNFULL_HEAP_GEN_L6         00001452
_CHECK_UNFULL_HEAP_GEN_L7         00001458
_CLOSURE                          00000A72
_CLOSUREREC                       00000ABC
_CLOSUREREC_LOOP_FUNCS            00000B44
_CLOSUREREC_LOOP_VARS             00000B22
_CLOSUREREC_NO_VARS               00000B2E
_CLOSURE_LOOP                     00000AAE
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CONST0                           000006F0
_CONST1                           00000706
_CONST2                           0000071C
_CONST3                           00000732
_CONSTINT                         00000748
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CPB_OFF_5H                       000000FF
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 225


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_DIVINT                           000011B6
_DIVINT_IFN_L2                    00001288
_DIVINT_IF_L1                     0000125C
_DIVINT_IF_L2                     00001278
_DIVINT_L0                        0000122E
_DIVINT_L1                        0000123C
_DIVINT_LOOP1                     00001248
_DIVINT_LOOP2                     00001264
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_END_ASRINT                       000007B2
_END_LSLINT                       0000078A
_END_LSRINT                       0000079E
_ENVACC                           0000050C
_ENVACC1                          00000484
_ENVACC2                          000004A6
_ENVACC3                          000004C8
_ENVACC4                          000004EA
_EQ                               000002C2
_EVENT                            00000F84
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_GEINT                            00000330
_GEINT_L0                         00000344
_GETDYNMET                        000003C4
_GETFIELD                         000005A2
_GETFIELD0                        0000052E
_GETFIELD1                        00000540
_GETFIELD2                        00000554
_GETFIELD3                        00000568
_GETFLOATFIELD                    000010FC
_GETGLOBAL                        000008D6
_GETGLOBALFIELD                   0000058A
_GETMETHOD                        00000378
_GETMET_ELSE                      00000414
_GETMET_END_LOOP                  00000422
_GETMET_LOOP                      000003E2
_GETMET_THEN                      0000041A
_GETPUBMET                        000003AA
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 226


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_GETSTRINGCHAR                    000006A8
_GETVECTITEM                      00000676
_GRAB                             00000EBE
_GRAB_ELSE                        00000F1E
_GRAB_LOOP                        00000EFC
_GRAB_SKIP_LOOP                   00000F08
_GTINT                            0000031A
_GTINT_L0                         0000032C
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_INDIRECTED_DIVINT                00001208
_INDIRECTED_MODINT                000012A8
_INDIRECTED_MULINT                000011DA
_INDIRECT_CAML_RAISE_STACK_OVERFLOW  000008F0
_INDIRECT_RAISE_DIV_BY_0          000012A4
_ISINT                            00000F22
_LEINT                            00000304
_LEINT_L0                         00000316
_LOOP_ASRINT                      000007A6
_LOOP_INIT_HEAP                   00000070
_LOOP_INIT_HEAP_TEST              0000007C
_LOOP_INIT_REGISTERS              00000020
_LOOP_INIT_STACK                  00000056
_LOOP_INIT_STACK_TEST             00000062
_LOOP_LSLINT                      0000077E
_LOOP_LSRINT                      00000792
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LSLINT                           00000776
_LSRINT                           0000078C
_LTINT                            000002EC
_LTINT_L0                         00000300
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAKEBLOCK                        00000FA0
_MAKEBLOCK1                       00000FE0
_MAKEBLOCK2                       0000101C
_MAKEBLOCK3                       00001060
_MAKEBLOCK_LOOP                   00000FD2
_MAKEFLOATBLOCK                   000010AC
_MAKEFLOATBLOCK_LOOP              000010DE
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MODINT                           000011B4
_MODINT_IFN_L2                    0000130A
_MODINT_IF_L2                     00001302
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 227


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MODINT_L0                        000012CA
_MODINT_L1                        000012D6
_MODINT_LOOP1                     000012D8
_MODINT_LOOP2                     000012EE
_MULINT                           000011B2
_NEGINT                           000011B8
_NEQ                              000002D8
_OFFSETCLOSURE                    00000BE6
_OFFSETCLOSURE0                   00000BB0
_OFFSETCLOSURE2                   00000BC8
_OFFSETCLOSUREM2                  00000B92
_OFFSETCLOSURE_NEG                00000C04
_OFFSETINT                        00000348
_OFFSETREF                        00000356
_ORINT                            00000760
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_POP                              00000260
_POPTRAP                          00000A3A
_POP_ACCUL_FALSE                  000002BC
_POP_ACCUL_TRUE                   000002B6
_POP_INTRAISE                     00000260
_PUSHACC                          00000234
_PUSHACC0_UGEINT                  00000202
_PUSHACC1_BULTINT                 000001BC
_PUSHACC2_BUGEINT                 000001D6
_PUSHACC3_GETPUBMET               00000442
_PUSHACC4_GETDYNMET               0000045C
_PUSHACC5_STOP                    00000F3A
_PUSHACC6_EVENT                   00000F54
_PUSHACC7_BREAK                   00000F6C
_PUSHACC_INTRETURN                00000234
_PUSHATOM                         00000F84
_PUSHATOM0                        00000F88
_PUSHCONST                        0000073A
_PUSHCONST0                       000006E2
_PUSHCONST1                       000006F8
_PUSHCONST2                       0000070E
_PUSHCONST3                       00000724
_PUSHENVACC                       000004FE
_PUSHENVACC1                      00000476
_PUSHENVACC2                      00000498
_PUSHENVACC3                      000004BA
_PUSHENVACC4                      000004DC
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 228


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PUSHGETGLOBAL                    000008C8
_PUSHGETGLOBALFIELD               0000057C
_PUSHOFFSETCLOSURE                00000BD8
_PUSHOFFSETCLOSURE0               00000BA2
_PUSHOFFSETCLOSURE2               00000BBA
_PUSHOFFSETCLOSUREM2              00000B84
_PUSHRETADDR                      00000C14
_PUSHTRAP                         00000A00
_PUSH_ULTINT                      000001F0
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_RAISE                            00000A44
_RESTART                          00000E84
_RESTART_LOOP                     00000EB0
_RETURN                           00000E46
_RETURN_ELSE                      00000E6E
_SETFIELD                         0000062A
_SETFIELD0                        000005C4
_SETFIELD1                        000005DC
_SETFIELD2                        000005F6
_SETFIELD3                        00000610
_SETFLOATFIELD                    00001154
_SETGLOBAL                        000008AE
_SETSTRINGCHAR                    000006C4
_SETVECTITEM                      0000068C
_SKIP_ARGUMENT                    000000D2
_STOP                             00000F84
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SUBINT                           000011D0
_SWITCH                           0000085E
_SWITCH_LONG                      00000898
_THE_BIG_LOOP                     00001326
_THE_BIG_SWITCH                   00000900
_UGEINT                           000002A4
_ULTINT                           00000292
_VECTLENGTH                       00000652
_VECTLENGTH_DOUBLE_ARRAY          0000066E
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 229


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
_XORINT                           0000076A
__18F4620                         00000001
asm_interrupt_handler             000016A4
caml_alloc_dummy                  0000146E
caml_alloc_dummy_atom             00001494
caml_alloc_dummy_float            0000145C
caml_alloc_dummy_l0               0000147C
caml_alloc_dummy_loop             0000148A
caml_bytecode                     0000160C
caml_custom_skip_addr             000016A4
caml_extern_raise                 000013D0
caml_externals                    00001600
caml_gc_exec                      000014DA
caml_globals_init_end             0000165E
caml_globals_init_heap            0000165E
caml_globals_init_stack           0000165C
caml_interrupt_handler            000016A6
caml_pic_clear_bit                00001674
caml_pic_set_bit                  0000165E
caml_pic_test_bit                 0000168C
caml_raise_division_by_0          00001364
caml_raise_out_of_memory          00001358
caml_raise_stack_overflow         0000139A
caml_sacgc_check_and_copy         00001552
caml_sacgc_copy_block             00001596
caml_sacgc_copy_block_loop        000015C8
caml_sacgc_copy_not_copied        000015A4
caml_sacgc_copy_skip_0            000015DA
caml_sacgc_copy_skip_1            000015D8
caml_sacgc_copy_skip_2            000015D6
caml_sacgc_heap_loop              00001518
caml_sacgc_heap_loop_test         00001538
caml_sacgc_loop_block             00001532
caml_sacgc_scan_block             0000152E
caml_sacgc_stack_loop             000014FA
caml_sacgc_stack_loop_test        000014FC
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 230


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
caml_update_dummy                 0000149E
caml_update_dummy_end             000014D0
caml_update_dummy_loop            000014C4
caml_virtual_machine              0000001C
high_interrupt_handler            00000018
low_interrupt_handler             00000008
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
SERIAL_TICTAC                     IPR1,RCIP
caml_useprim_caml_pic_clear_bit   (null)
caml_useprim_caml_pic_set_bit     (null)
caml_useprim_caml_pic_test_bit    (null)


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

00000000 : XXXX----XXXX---- --------XXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000000c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000001c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000002c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000003c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000004c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000005c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000006c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000007c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 231


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
000008c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXX------------
00000900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000009c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000010c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000011c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000012c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000013c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000014c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000015c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXX---- ---------------- ----------------
00001600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.7 beta               prog.asm    7-7-2015  12:00:49           PAGE 232


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00001640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00001680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------ ----------------
00300000 : XXXXXXXXXXXXXX-- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used: 2876


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

