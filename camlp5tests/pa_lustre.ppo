open Pcaml
open Token 
open MLast


(* The statement that extends the default grammar, 
   i.e. the regular syntax of OCaml if we use camlp5o 
   or the revised syntax if we use camlp5r *)
let _ =
  Grammar.extend
    [(*  Pcaml.expr: LEVEL "top" [
         [ x = Pcaml.expr; o = OPT "rec";  "where"; l = LIST1 Pcaml.let_binding SEP "and"  ->
               <:expr< let $opt:o2b o$ $list:l$ in $x$ >> ]
       |
         [ "node"; e = LIST1 let_binding SEP "and";  "in";
             x = expr LEVEL "top" ->
               <:expr< let  $list:e$ in $x$ >> ]
       ];
       Pcaml.expr: LEVEL ":=" [
         [ e1 = SELF; "<-"; e2 = expr LEVEL "expr1" -> <:expr< set_bit $e1$ $e2$ >>  ]
      ]; *)



     Grammar.
     Entry.
     obj
       (Pcaml.str_item : 'Pcaml__str_item Grammar.Entry.e),
     Some (Gramext.Level "top"),
     [None, None,
      [[Gramext.Stoken ("", "node");
        Gramext.Slist1sep
          (Gramext.Snterm
             (Grammar.Entry.obj (let_binding : 'let_binding Grammar.Entry.e)),
           Gramext.Stoken ("", "and"), false)],
       Gramext.action
         (fun (l : 'let_binding list) _ (loc : Ploc.t) ->
            (match l with
               [MLast.PaAny _, e] -> MLast.StExp (loc, e)
             | _ ->
                 MLast.StVal
                   (loc, Ploc.VaVal false, Ploc.VaVal (transform_list l)) :
             'Pcaml__str_item))]]]
